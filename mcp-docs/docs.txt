├── .gitattributes
├── .github
    ├── CODEOWNERS
    └── workflows
    │   ├── deploy-blog.yml
    │   ├── main.yml
    │   └── markdown-format.yml
├── .gitignore
├── .npmrc
├── .nvmrc
├── .prettierignore
├── CODE_OF_CONDUCT.md
├── CONTRIBUTING.md
├── LICENSE
├── MAINTAINERS.md
├── README.md
├── SECURITY.md
├── blog
    ├── .gitignore
    ├── archetypes
    │   └── default.md
    ├── assets
    │   └── css
    │   │   └── extended
    │   │       └── custom.css
    ├── content
    │   ├── _index.md
    │   └── posts
    │   │   ├── 2025-07-29-prompts-for-automation.md
    │   │   ├── 2025-07-31-governance-for-mcp.md
    │   │   └── welcome-to-mcp-blog.md
    ├── go.mod
    ├── go.sum
    ├── hugo.toml
    ├── layouts
    │   └── partials
    │   │   └── google_analytics.html
    └── static
    │   ├── CNAME
    │   └── posts
    │       └── images
    │           ├── prompts-final-result.png
    │           ├── prompts-list.png
    │           ├── prompts-rendered-prompt.png
    │           └── prompts-suggestions.png
├── docs
    ├── about
    │   └── index.mdx
    ├── clients.mdx
    ├── community
    │   ├── communication.mdx
    │   ├── governance.mdx
    │   └── sep-guidelines.mdx
    ├── development
    │   ├── contributing.mdx
    │   └── roadmap.mdx
    ├── docs.json
    ├── docs
    │   ├── getting-started
    │   │   └── intro.mdx
    │   ├── learn
    │   │   ├── architecture.mdx
    │   │   ├── client-concepts.mdx
    │   │   └── server-concepts.mdx
    │   ├── reference
    │   │   ├── client.mdx
    │   │   └── server.mdx
    │   ├── sdk.mdx
    │   └── tutorials
    │   │   ├── use-local-mcp-server.mdx
    │   │   └── use-remote-mcp-server.mdx
    ├── examples.mdx
    ├── faqs.mdx
    ├── favicon.svg
    ├── images
    │   ├── available-mcp-tools.png
    │   ├── claude-desktop-mcp-plug-icon.svg
    │   ├── claude-desktop-mcp-slider.svg
    │   ├── client-claude-cli-python.png
    │   ├── current-weather.png
    │   ├── hero-dark.svg
    │   ├── hero-light.svg
    │   ├── java
    │   │   ├── class-diagrams.puml
    │   │   ├── java-mcp-client-architecture.jpg
    │   │   ├── java-mcp-server-architecture.jpg
    │   │   ├── java-mcp-uml-classdiagram.svg
    │   │   └── mcp-stack.svg
    │   ├── mcp-inspector.png
    │   ├── mcp-simple-diagram.png
    │   ├── og-image.png
    │   ├── quickstart-approve.png
    │   ├── quickstart-developer.png
    │   ├── quickstart-dotnet-client.png
    │   ├── quickstart-filesystem.png
    │   ├── quickstart-menu.png
    │   ├── quickstart-remote
    │   │   ├── 1-add-connector.png
    │   │   ├── 2-connect.png
    │   │   ├── 3-auth.png
    │   │   ├── 4-select-resources-menu.png
    │   │   ├── 5-select-prompts-resources.png
    │   │   └── 6-configure-tools.png
    │   ├── quickstart-screenshot.png
    │   ├── quickstart-slider.png
    │   ├── quickstart-tools.png
    │   ├── visual-indicator-mcp-tools.png
    │   └── weather-alerts.png
    ├── introduction.mdx
    ├── legacy
    │   ├── concepts
    │   │   ├── architecture.mdx
    │   │   ├── elicitation.mdx
    │   │   ├── prompts.mdx
    │   │   ├── resources.mdx
    │   │   ├── roots.mdx
    │   │   ├── sampling.mdx
    │   │   ├── tools.mdx
    │   │   └── transports.mdx
    │   └── tools
    │   │   ├── debugging.mdx
    │   │   └── inspector.mdx
    ├── logo
    │   ├── dark.png
    │   ├── dark.svg
    │   ├── light.png
    │   └── light.svg
    ├── mcp.png
    ├── quickstart
    │   ├── client.mdx
    │   ├── server.mdx
    │   └── user.mdx
    ├── sdk
    │   └── java
    │   │   ├── mcp-client.mdx
    │   │   ├── mcp-overview.mdx
    │   │   └── mcp-server.mdx
    ├── snippets
    │   └── snippet-intro.mdx
    ├── specification
    │   ├── 2024-11-05
    │   │   ├── architecture
    │   │   │   └── index.mdx
    │   │   ├── basic
    │   │   │   ├── index.mdx
    │   │   │   ├── lifecycle.mdx
    │   │   │   ├── messages.mdx
    │   │   │   ├── transports.mdx
    │   │   │   └── utilities
    │   │   │   │   ├── cancellation.mdx
    │   │   │   │   ├── ping.mdx
    │   │   │   │   └── progress.mdx
    │   │   ├── client
    │   │   │   ├── roots.mdx
    │   │   │   └── sampling.mdx
    │   │   ├── index.mdx
    │   │   └── server
    │   │   │   ├── index.mdx
    │   │   │   ├── prompts.mdx
    │   │   │   ├── resource-picker.png
    │   │   │   ├── resources.mdx
    │   │   │   ├── slash-command.png
    │   │   │   ├── tools.mdx
    │   │   │   └── utilities
    │   │   │       ├── completion.mdx
    │   │   │       ├── logging.mdx
    │   │   │       └── pagination.mdx
    │   ├── 2025-03-26
    │   │   ├── architecture
    │   │   │   └── index.mdx
    │   │   ├── basic
    │   │   │   ├── authorization.mdx
    │   │   │   ├── index.mdx
    │   │   │   ├── lifecycle.mdx
    │   │   │   ├── transports.mdx
    │   │   │   └── utilities
    │   │   │   │   ├── cancellation.mdx
    │   │   │   │   ├── ping.mdx
    │   │   │   │   └── progress.mdx
    │   │   ├── changelog.mdx
    │   │   ├── client
    │   │   │   ├── roots.mdx
    │   │   │   └── sampling.mdx
    │   │   ├── index.mdx
    │   │   └── server
    │   │   │   ├── index.mdx
    │   │   │   ├── prompts.mdx
    │   │   │   ├── resource-picker.png
    │   │   │   ├── resources.mdx
    │   │   │   ├── slash-command.png
    │   │   │   ├── tools.mdx
    │   │   │   └── utilities
    │   │   │       ├── completion.mdx
    │   │   │       ├── logging.mdx
    │   │   │       └── pagination.mdx
    │   ├── 2025-06-18
    │   │   ├── architecture
    │   │   │   └── index.mdx
    │   │   ├── basic
    │   │   │   ├── authorization.mdx
    │   │   │   ├── index.mdx
    │   │   │   ├── lifecycle.mdx
    │   │   │   ├── security_best_practices.mdx
    │   │   │   ├── transports.mdx
    │   │   │   └── utilities
    │   │   │   │   ├── cancellation.mdx
    │   │   │   │   ├── ping.mdx
    │   │   │   │   └── progress.mdx
    │   │   ├── changelog.mdx
    │   │   ├── client
    │   │   │   ├── elicitation.mdx
    │   │   │   ├── roots.mdx
    │   │   │   └── sampling.mdx
    │   │   ├── index.mdx
    │   │   ├── schema.mdx
    │   │   └── server
    │   │   │   ├── index.mdx
    │   │   │   ├── prompts.mdx
    │   │   │   ├── resource-picker.png
    │   │   │   ├── resources.mdx
    │   │   │   ├── slash-command.png
    │   │   │   ├── tools.mdx
    │   │   │   └── utilities
    │   │   │       ├── completion.mdx
    │   │   │       ├── logging.mdx
    │   │   │       └── pagination.mdx
    │   ├── draft
    │   │   ├── architecture
    │   │   │   └── index.mdx
    │   │   ├── basic
    │   │   │   ├── authorization.mdx
    │   │   │   ├── index.mdx
    │   │   │   ├── lifecycle.mdx
    │   │   │   ├── security_best_practices.mdx
    │   │   │   ├── transports.mdx
    │   │   │   └── utilities
    │   │   │   │   ├── cancellation.mdx
    │   │   │   │   ├── ping.mdx
    │   │   │   │   └── progress.mdx
    │   │   ├── changelog.mdx
    │   │   ├── client
    │   │   │   ├── elicitation.mdx
    │   │   │   ├── roots.mdx
    │   │   │   └── sampling.mdx
    │   │   ├── index.mdx
    │   │   ├── schema.mdx
    │   │   └── server
    │   │   │   ├── index.mdx
    │   │   │   ├── prompts.mdx
    │   │   │   ├── resource-picker.png
    │   │   │   ├── resources.mdx
    │   │   │   ├── slash-command.png
    │   │   │   ├── tools.mdx
    │   │   │   └── utilities
    │   │   │       ├── completion.mdx
    │   │   │       ├── logging.mdx
    │   │   │       └── pagination.mdx
    │   └── versioning.mdx
    ├── style.css
    └── tutorials
    │   ├── building-a-client-node.mdx
    │   └── building-mcp-with-llms.mdx
├── package-lock.json
├── package.json
├── schema
    ├── 2024-11-05
    │   ├── schema.json
    │   └── schema.ts
    ├── 2025-03-26
    │   ├── schema.json
    │   └── schema.ts
    ├── 2025-06-18
    │   ├── schema.json
    │   └── schema.ts
    └── draft
    │   ├── schema.json
    │   └── schema.ts
├── tsconfig.json
├── typedoc.config.mjs
└── typedoc.plugin.mjs


/.gitattributes:
--------------------------------------------------------------------------------
1 | package-lock.json linguist-generated=true
2 | schema/*/schema.json linguist-generated=true
3 | docs/specification/*/schema.md linguist-generated=true
4 | docs/specification/*/schema.mdx linguist-generated=true
5 | 


--------------------------------------------------------------------------------
/.github/CODEOWNERS:
--------------------------------------------------------------------------------
 1 | # CODEOWNERS file for MCP Specification repository
 2 | 
 3 | # General documentation ownership - @modelcontextprotocol/docs-maintaners owns all of /docs
 4 | /docs/ @modelcontextprotocol/docs-maintaners
 5 | 
 6 | # Specific ownership - @core-maintainer team owns docs/specification and schema/ directories
 7 | /docs/specification/ @modelcontextprotocol/core-maintainers
 8 | /schema/ @modelcontextprotocol/core-maintainers
 9 | 
10 | # Authorization-related files - @auth team should be notified
11 | /docs/specification/**/authorization.mdx @modelcontextprotocol/core-maintainers @modelcontextprotocol/auth
12 | /docs/specification/**/security_best_practices.mdx @modelcontextprotocol/core-maintainers @modelcontextprotocol/auth
13 | 


--------------------------------------------------------------------------------
/.github/workflows/deploy-blog.yml:
--------------------------------------------------------------------------------
 1 | name: Deploy Hugo site to GitHub Pages
 2 | 
 3 | on:
 4 |   push:
 5 |     branches: ["main"]
 6 |   workflow_dispatch:
 7 | 
 8 | permissions:
 9 |   contents: read
10 |   pages: write
11 |   id-token: write
12 | 
13 | concurrency:
14 |   group: "pages"
15 |   cancel-in-progress: false
16 | 
17 | defaults:
18 |   run:
19 |     shell: bash
20 | 
21 | jobs:
22 |   build:
23 |     runs-on: ubuntu-latest
24 |     env:
25 |       HUGO_VERSION: 0.148.0
26 |     steps:
27 |       - name: Checkout
28 |         uses: actions/checkout@v4
29 |         with:
30 |           submodules: recursive
31 |           fetch-depth: 0
32 | 
33 |       - name: Setup Hugo
34 |         run: |
35 |           wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
36 |           && sudo dpkg -i ${{ runner.temp }}/hugo.deb
37 | 
38 |       - name: Setup Pages
39 |         id: pages
40 |         uses: actions/configure-pages@v5
41 | 
42 |       - name: Build with Hugo
43 |         env:
44 |           HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
45 |           HUGO_ENVIRONMENT: production
46 |         run: |
47 |           cd blog && hugo \
48 |             --gc \
49 |             --minify \
50 |             --baseURL "${{ steps.pages.outputs.base_url }}/"
51 | 
52 |       - name: Upload artifact
53 |         uses: actions/upload-pages-artifact@v3
54 |         with:
55 |           path: ./blog/public
56 | 
57 |   deploy:
58 |     environment:
59 |       name: github-pages
60 |       url: ${{ steps.deployment.outputs.page_url }}
61 |     runs-on: ubuntu-latest
62 |     needs: build
63 |     steps:
64 |       - name: Deploy to GitHub Pages
65 |         id: deployment
66 |         uses: actions/deploy-pages@v4


--------------------------------------------------------------------------------
/.github/workflows/main.yml:
--------------------------------------------------------------------------------
 1 | on:
 2 |   push:
 3 |     branches:
 4 |       - main
 5 | 
 6 |   pull_request:
 7 | 
 8 | jobs:
 9 |   validate:
10 |     runs-on: ubuntu-latest
11 | 
12 |     steps:
13 |       - uses: actions/checkout@v4
14 |       - uses: actions/setup-node@v4
15 |         with:
16 |           node-version: 20
17 |           cache: npm
18 | 
19 |       - run: npm ci
20 | 
21 |       - name: Check TypeScript definitions
22 |         run: npm run check:schema:ts
23 | 
24 |       - name: Check schema.json files are up to date
25 |         run: npm run check:schema:json
26 | 
27 |       - name: Check schema.mdx files are up to date
28 |         run: npm run check:schema:md
29 | 


--------------------------------------------------------------------------------
/.github/workflows/markdown-format.yml:
--------------------------------------------------------------------------------
 1 | name: Markdown Format Check
 2 | 
 3 | on:
 4 |   push:
 5 |     paths:
 6 |       - '**/*.md'
 7 |       - '**/*.mdx'
 8 |   pull_request:
 9 |     paths:
10 |       - '**/*.md'
11 |       - '**/*.mdx'
12 | 
13 | jobs:
14 |   format:
15 |     runs-on: ubuntu-latest
16 |     steps:
17 |       - uses: actions/checkout@v4
18 | 
19 |       - name: Setup Node.js
20 |         uses: actions/setup-node@v4
21 |         with:
22 |           node-version: '20'
23 | 
24 |       - name: Install dependencies
25 |         run: npm ci
26 | 
27 |       - name: Check markdown formatting
28 |         run: npm run check:docs:format
29 | 
30 |       - name: Check markdown links
31 |         run: npm run check:docs:links
32 | 


--------------------------------------------------------------------------------
/.gitignore:
--------------------------------------------------------------------------------
1 | node_modules/
2 | .DS_Store
3 | 


--------------------------------------------------------------------------------
/.npmrc:
--------------------------------------------------------------------------------
1 | registry = "https://registry.npmjs.org/"
2 | 


--------------------------------------------------------------------------------
/.nvmrc:
--------------------------------------------------------------------------------
1 | v20.16.0
2 | 


--------------------------------------------------------------------------------
/.prettierignore:
--------------------------------------------------------------------------------
1 | docs/specification/*/schema.md
2 | docs/specification/*/schema.mdx
3 | 


--------------------------------------------------------------------------------
/CODE_OF_CONDUCT.md:
--------------------------------------------------------------------------------
  1 | # Contributor Covenant Code of Conduct
  2 | 
  3 | ## Our Pledge
  4 | 
  5 | We as members, contributors, and leaders pledge to make participation in our community a
  6 | harassment-free experience for everyone, regardless of age, body size, visible or
  7 | invisible disability, ethnicity, sex characteristics, gender identity and expression,
  8 | level of experience, education, socio-economic status, nationality, personal appearance,
  9 | race, religion, or sexual identity and orientation.
 10 | 
 11 | We pledge to act and interact in ways that contribute to an open, welcoming, diverse,
 12 | inclusive, and healthy community.
 13 | 
 14 | ## Our Standards
 15 | 
 16 | Examples of behavior that contributes to a positive environment for our community
 17 | include:
 18 | 
 19 | - Demonstrating empathy and kindness toward other people
 20 | - Being respectful of differing opinions, viewpoints, and experiences
 21 | - Giving and gracefully accepting constructive feedback
 22 | - Accepting responsibility and apologizing to those affected by our mistakes, and
 23 |   learning from the experience
 24 | - Focusing on what is best not just for us as individuals, but for the overall community
 25 | 
 26 | Examples of unacceptable behavior include:
 27 | 
 28 | - The use of sexualized language or imagery, and sexual attention or advances of any kind
 29 | - Trolling, insulting or derogatory comments, and personal or political attacks
 30 | - Public or private harassment
 31 | - Publishing others' private information, such as a physical or email address, without
 32 |   their explicit permission
 33 | - Other conduct which could reasonably be considered inappropriate in a professional
 34 |   setting
 35 | 
 36 | ## Enforcement Responsibilities
 37 | 
 38 | Community leaders are responsible for clarifying and enforcing our standards of
 39 | acceptable behavior and will take appropriate and fair corrective action in response to
 40 | any behavior that they deem inappropriate, threatening, offensive, or harmful.
 41 | 
 42 | Community leaders have the right and responsibility to remove, edit, or reject comments,
 43 | commits, code, wiki edits, issues, and other contributions that are not aligned to this
 44 | Code of Conduct, and will communicate reasons for moderation decisions when appropriate.
 45 | 
 46 | ## Scope
 47 | 
 48 | This Code of Conduct applies within all community spaces, and also applies when an
 49 | individual is officially representing the community in public spaces. Examples of
 50 | representing our community include using an official e-mail address, posting via an
 51 | official social media account, or acting as an appointed representative at an online or
 52 | offline event.
 53 | 
 54 | ## Enforcement
 55 | 
 56 | Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to
 57 | the community leaders responsible for enforcement at mcp-coc@anthropic.com. All
 58 | complaints will be reviewed and investigated promptly and fairly.
 59 | 
 60 | All community leaders are obligated to respect the privacy and security of the reporter
 61 | of any incident.
 62 | 
 63 | ## Enforcement Guidelines
 64 | 
 65 | Community leaders will follow these Community Impact Guidelines in determining the
 66 | consequences for any action they deem in violation of this Code of Conduct:
 67 | 
 68 | ### 1. Correction
 69 | 
 70 | **Community Impact**: Use of inappropriate language or other behavior deemed
 71 | unprofessional or unwelcome in the community.
 72 | 
 73 | **Consequence**: A private, written warning from community leaders, providing clarity
 74 | around the nature of the violation and an explanation of why the behavior was
 75 | inappropriate. A public apology may be requested.
 76 | 
 77 | ### 2. Warning
 78 | 
 79 | **Community Impact**: A violation through a single incident or series of actions.
 80 | 
 81 | **Consequence**: A warning with consequences for continued behavior. No interaction with
 82 | the people involved, including unsolicited interaction with those enforcing the Code of
 83 | Conduct, for a specified period of time. This includes avoiding interactions in community
 84 | spaces as well as external channels like social media. Violating these terms may lead to
 85 | a temporary or permanent ban.
 86 | 
 87 | ### 3. Temporary Ban
 88 | 
 89 | **Community Impact**: A serious violation of community standards, including sustained
 90 | inappropriate behavior.
 91 | 
 92 | **Consequence**: A temporary ban from any sort of interaction or public communication
 93 | with the community for a specified period of time. No public or private interaction with
 94 | the people involved, including unsolicited interaction with those enforcing the Code of
 95 | Conduct, is allowed during this period. Violating these terms may lead to a permanent
 96 | ban.
 97 | 
 98 | ### 4. Permanent Ban
 99 | 
100 | **Community Impact**: Demonstrating a pattern of violation of community standards,
101 | including sustained inappropriate behavior, harassment of an individual, or aggression
102 | toward or disparagement of classes of individuals.
103 | 
104 | **Consequence**: A permanent ban from any sort of public interaction within the
105 | community.
106 | 
107 | ## Attribution
108 | 
109 | This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 2.0,
110 | available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.
111 | 
112 | Community Impact Guidelines were inspired by
113 | [Mozilla's code of conduct enforcement ladder](https://github.com/mozilla/diversity).
114 | 
115 | [homepage]: https://www.contributor-covenant.org
116 | 
117 | For answers to common questions about this code of conduct, see the FAQ at
118 | https://www.contributor-covenant.org/faq. Translations are available at
119 | https://www.contributor-covenant.org/translations.
120 | 


--------------------------------------------------------------------------------
/CONTRIBUTING.md:
--------------------------------------------------------------------------------
  1 | # Contributing to Model Context Protocol
  2 | 
  3 | Thank you for your interest in contributing to the Model Context Protocol specification, schemas, or docs!
  4 | This document outlines how to contribute to this project.
  5 | 
  6 | Also see the [overall MCP communication guidelines in our docs](https://modelcontextprotocol.io/community/communication), which explains how and where discussions about changes happen.
  7 | 
  8 | ## General prerequisites
  9 | 
 10 | The following software is required to work on the spec:
 11 | 
 12 | - Node.js 20 or above
 13 | - TypeScript
 14 | - TypeScript JSON Schema (for generating JSON schema)
 15 | - [Mintlify](https://mintlify.com/) (optional, for docs)
 16 | - nvm (optional, for managing Node versions)
 17 | 
 18 | ### Getting Started
 19 | 
 20 | 1. [Fork the repository](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo)
 21 | 2. Clone your fork:
 22 | 
 23 | ```bash
 24 | git clone https://github.com/YOUR-USERNAME/modelcontextprotocol.git
 25 | cd modelcontextprotocol
 26 | ```
 27 | 
 28 | 3. Install dependencies:
 29 | 
 30 | ```bash
 31 | nvm install  # install correct Node version
 32 | npm install  # install dependencies
 33 | ```
 34 | 
 35 | ## Schema changes
 36 | 
 37 | Note that schema changes are made to `schema.ts`, and `schema.json` is generated from
 38 | `schema.ts`.
 39 | 
 40 | 1. Create a new branch:
 41 | 
 42 | ```bash
 43 | git checkout -b feature/your-feature-name
 44 | ```
 45 | 
 46 | 2. Make your changes.
 47 | 
 48 | 3. Validate schema changes and generate `schema.json`:
 49 | 
 50 | ```bash
 51 | npm run check:schema:ts
 52 | npm run generate:schema
 53 | ```
 54 | 
 55 | ## Documentation changes
 56 | 
 57 | Documentation is written in MDX format and in the [`docs`](./docs) directory.
 58 | 
 59 | You can preview documentation changes locally by running:
 60 | 
 61 | ```bash
 62 | npm run serve:docs
 63 | ```
 64 | 
 65 | And lint them with:
 66 | 
 67 | ```bash
 68 | npm run check:docs
 69 | npm run format
 70 | ```
 71 | 
 72 | ### Documentation Guidelines
 73 | 
 74 | When contributing to the documentation:
 75 | 
 76 | - Keep content clear, concise, and technically accurate
 77 | - Follow the existing file structure and naming conventions
 78 | - Include code examples where appropriate
 79 | - Use proper MDX formatting and components
 80 | - Test all links and code samples
 81 |   - You may run `npm run check:docs:links` to look for broken internal links.
 82 | - Use appropriate headings: "When to use", "Steps", and "Tips" for tutorials
 83 | - Place new pages in appropriate sections (concepts, tutorials, etc.)
 84 | - Update `docs.json` when adding new pages
 85 | - Follow existing file naming conventions (`kebab-case.mdx`)
 86 | - Include proper frontmatter in MDX files
 87 | 
 88 | ### Specification Proposal Guidelines
 89 | 
 90 | #### Principles of MCP
 91 | 
 92 | 1. **Simple + Minimal**: It is much easier to add things to a specification than it is to
 93 |    remove them. To maintain simplicity, we keep a high bar for adding new concepts and
 94 |    primitives as each addition requires maintenance and compatibility consideration.
 95 | 2. **Concrete**: Specification changes need to be based on specific implementation
 96 |    challenges and not on speculative ideas.
 97 | 
 98 | ### Stages of a specification proposal
 99 | 
100 | 1. **Define**: Explore the problem space, validate that other MCP users face a similar
101 |    issue, and then clearly define the problem.
102 | 2. **Prototype**: Build an example solution to the problem and demonstrate its practical
103 |    application.
104 | 3. **Write**: Based on the prototype, write a specification proposal.
105 | 
106 | ## Submitting Changes
107 | 
108 | 1. Push your changes to your fork
109 | 2. Submit a pull request to the main repository
110 | 3. Follow the pull request template
111 | 4. Wait for review
112 | 
113 | ## License
114 | 
115 | By contributing, you agree that your contributions will be licensed under the MIT
116 | License.
117 | 
118 | ## Security
119 | 
120 | Please review our [Security Policy](SECURITY.md) for reporting security issues.
121 | 


--------------------------------------------------------------------------------
/LICENSE:
--------------------------------------------------------------------------------
 1 | MIT License
 2 | 
 3 | Copyright (c) 2024–2025 Anthropic, PBC and contributors
 4 | 
 5 | Permission is hereby granted, free of charge, to any person obtaining a copy
 6 | of this software and associated documentation files (the "Software"), to deal
 7 | in the Software without restriction, including without limitation the rights
 8 | to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 9 | copies of the Software, and to permit persons to whom the Software is
10 | furnished to do so, subject to the following conditions:
11 | 
12 | The above copyright notice and this permission notice shall be included in all
13 | copies or substantial portions of the Software.
14 | 
15 | THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
16 | IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
17 | FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
18 | AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
19 | LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
20 | OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
21 | SOFTWARE.
22 | 


--------------------------------------------------------------------------------
/MAINTAINERS.md:
--------------------------------------------------------------------------------
  1 | # MCP Maintainers
  2 | 
  3 | This document lists current maintainers and working groups in the Model Context Protocol project.
  4 | 
  5 | **Last updated:** July 23, 2025
  6 | 
  7 | ## Lead Maintainers
  8 | 
  9 | - [Justin Spahr-Summers](https://github.com/jspahrsummers)
 10 | - [David Soria Parra](https://github.com/dsp-ant)
 11 | 
 12 | ## Core Maintainers
 13 | 
 14 | - [Inna Harper](https://github.com/ihrpr)
 15 | - [Basil Hosmer](https://github.com/bhosmer-ant)
 16 | - [Paul Carleton](https://github.com/pcarleton)
 17 | - [Nick Cooper](https://github.com/nicknotfun)
 18 | - [Nick Aldridge](https://github.com/000-000-000-000-000)
 19 | - Che Liu
 20 | - [Den Delimarsky](https://github.com/localden)
 21 | 
 22 | ## SDK Maintainers
 23 | 
 24 | ### Java SDK
 25 | 
 26 | - [Christian Tzolov](https://github.com/tzolov)
 27 | - [Dariusz Jędrzejczyk](https://github.com/chemicL)
 28 | 
 29 | ### Ruby SDK
 30 | 
 31 | - [Topher Bullock](https://github.com/topherbullock)
 32 | - [Koichi Ito](https://github.com/koic)
 33 | - [Ateş Göral](https://github.com/atesgoral)
 34 | 
 35 | ### Swift SDK
 36 | 
 37 | - [Matt Zmuda](https://github.com/mattt)
 38 | - [Carl Peaslee](https://github.com/carlpeaslee)
 39 | 
 40 | ### Go SDK
 41 | 
 42 | - [Rob Findley](https://github.com/findleyr)
 43 | 
 44 | ### C# SDK
 45 | 
 46 | - [Stephan Halter](https://github.com/halter73)
 47 | - [Mike Kistler](https://github.com/mikekistler)
 48 | 
 49 | ### Kotlin SDK
 50 | 
 51 | - [Leonid Stashevsky](https://github.com/e5l)
 52 | - [Sergey Ignatov](https://github.com/ignatov)
 53 | 
 54 | ### Python SDK
 55 | 
 56 | - [Inna Harper](https://github.com/ihrpr)
 57 | - [Jerome Swannack](https://github.com/jerome3o)
 58 | - [Samuel Colvin](https://github.com/samuelcolvin)
 59 | - [Marcelo Trylesinski](https://github.com/Kludex)
 60 | 
 61 | ### TypeScript SDK
 62 | 
 63 | - [Inna Harper](https://github.com/ihrpr)
 64 | - [Felix Weinberger](https://github.com/felixweinberger)
 65 | - [Olivier Chafik](https://github.com/ochafik)
 66 | 
 67 | ### Rust SDK
 68 | 
 69 | - [Alex Hancock](https://github.com/alexhancock)
 70 | 
 71 | ## Project Maintainers
 72 | 
 73 | - [Glen Maddern](https://github.com/geelen) (use-mcp)
 74 | - [Ola Hungerford](https://github.com/olaservo) (Inspector, Reference Servers)
 75 | - [Cliff Hall](https://github.com/cliffhall) (Inspector, Reference Servers)
 76 | - [Toby Padilla](https://github.com/toby) (Registry)
 77 | - [Tadas Antanavicius](https://github.com/tadasant) (Registry, Reference Servers)
 78 | - [Shaun Smith](https://github.com/evalstate) (Reference Servers)
 79 | - [Jonathan Hefner](https://github.com/jonathanhefner) (Reference Servers)
 80 | - [Adam Jones](https://github.com/domdomegg) (Registry)
 81 | 
 82 | ## Community Moderators
 83 | 
 84 | - [Ola Hungerford](https://github.com/olaservo)
 85 | - [Cliff Hall](https://github.com/cliffhall)
 86 | - [Shaun Smith](https://github.com/evalstate)
 87 | - [Jonathan Hefner](https://github.com/jonathanhefner)
 88 | - [Tadas Antanavicius](https://github.com/tadasant)
 89 | 
 90 | ## Working Groups
 91 | 
 92 | ### Security Working Group
 93 | 
 94 | - [Den Delimarsky](https://github.com/dend)
 95 | - [Paul Carleton](https://github.com/pcarleton)
 96 | - [Jenn Newton](https://github.com/jenn-newton)
 97 | 
 98 | ### Authorization Working Group
 99 | 
100 | - [Aaron Parecki](https://github.com/aaronpk)
101 | - [Darin McAdams](https://github.com/D-McAdams)
102 | - [Paul Carleton](https://github.com/pcarleton)
103 | 
104 | ### Client Implementor Working Group
105 | 
106 | - [Michael Feldstein](https://github.com/msfeldstein)
107 | - [Harald Kirschner](https://github.com/digitarald)
108 | - [Connor Peet](https://github.com/connor4312)
109 | 
110 | ### Transports Working Group
111 | 
112 | - [Kurtis Van Gent](https://github.com/kurtisvg)
113 | - [Jonathan Hefner](https://github.com/jonathanhefner)
114 | - [Shaun Smith](https://github.com/evalstate)
115 | - [Harvey Tuch](https://github.com/htuch)
116 | 
117 | ## About This Document
118 | 
119 | This document is updated by the MCP maintainers and reflects the current
120 | governance structure. For more information about MCP governance, see our
121 | [governance documentation](https://modelcontextprotocol.io/community/governance).
122 | 


--------------------------------------------------------------------------------
/README.md:
--------------------------------------------------------------------------------
 1 | # Model Context Protocol (MCP)
 2 | 
 3 | _Just heard of MCP and not sure where to start? See [the documentation website instead](https://modelcontextprotocol.io)._
 4 | 
 5 | This repo contains the:
 6 | 
 7 | - MCP specification
 8 | - MCP protocol schema
 9 | - Official MCP documentation
10 | 
11 | The schema is [defined in TypeScript](schema/2025-06-18/schema.ts) first, but
12 | [made available as JSON Schema](schema/2025-06-18/schema.json) as well, for wider
13 | compatibility.
14 | 
15 | The official MCP documentation is built using Mintlify and available at
16 | [modelcontextprotocol.io](https://modelcontextprotocol.io).
17 | 
18 | ## Contributing
19 | 
20 | See [CONTRIBUTING.md](./CONTRIBUTING.md).
21 | 
22 | ## License
23 | 
24 | This project is licensed under the [MIT License](LICENSE).
25 | 


--------------------------------------------------------------------------------
/SECURITY.md:
--------------------------------------------------------------------------------
 1 | # Security Policy
 2 | 
 3 | Thank you for helping us keep the SDKs and systems they interact with secure.
 4 | 
 5 | ## Reporting Security Issues
 6 | 
 7 | This SDK is maintained by [Anthropic](https://www.anthropic.com/) as part of the Model
 8 | Context Protocol project.
 9 | 
10 | The security of our systems and user data is Anthropic’s top priority. We appreciate the
11 | work of security researchers acting in good faith in identifying and reporting potential
12 | vulnerabilities.
13 | 
14 | Our security program is managed on HackerOne and we ask that any validated vulnerability
15 | in this functionality be reported through their
16 | [submission form](https://hackerone.com/anthropic-vdp/reports/new?type=team&report_type=vulnerability).
17 | 
18 | ## Vulnerability Disclosure Program
19 | 
20 | Our Vulnerability Program Guidelines are defined on our
21 | [HackerOne program page](https://hackerone.com/anthropic-vdp).
22 | 


--------------------------------------------------------------------------------
/blog/.gitignore:
--------------------------------------------------------------------------------
 1 | # Hugo default output directory
 2 | /public/
 3 | /resources/_gen/
 4 | /assets/jsconfig.json
 5 | 
 6 | # Hugo cache
 7 | .hugo_build.lock
 8 | 
 9 | # macOS
10 | .DS_Store


--------------------------------------------------------------------------------
/blog/archetypes/default.md:
--------------------------------------------------------------------------------
1 | +++
2 | date = '{{ .Date }}'
3 | draft = true
4 | title = '{{ replace .File.ContentBaseName "-" " " | title }}'
5 | +++
6 | 


--------------------------------------------------------------------------------
/blog/assets/css/extended/custom.css:
--------------------------------------------------------------------------------
1 | /* Override list page background to white in light mode */
2 | .list {
3 |     background: var(--theme);
4 | }
5 | 
6 | /* Dark mode remains unchanged */
7 | .dark.list {
8 |     background: var(--theme);
9 | }


--------------------------------------------------------------------------------
/blog/content/_index.md:
--------------------------------------------------------------------------------
1 | +++
2 | title = 'blog'
3 | +++
4 | 


--------------------------------------------------------------------------------
/blog/content/posts/2025-07-29-prompts-for-automation.md:
--------------------------------------------------------------------------------
  1 | +++
  2 | date = '2025-08-04T18:00:00+01:00'
  3 | publishDate = '2025-08-04T18:00:00+01:00'
  4 | draft = false
  5 | title = 'MCP Prompts: Building Workflow Automation'
  6 | author = 'Inna Harper (Core Maintainer)'
  7 | tags = ['automation', 'mcp', 'prompts', 'tutorial']
  8 | +++
  9 | 
 10 | [MCP (Model Context Protocol)](https://modelcontextprotocol.io/specification/2025-06-18) prompts enable workflow automation by combining AI capabilities with structured data access. This post demonstrates how to build automations using MCP's [prompts](https://modelcontextprotocol.io/specification/2025-06-18/server/prompts) and [resource templates](https://modelcontextprotocol.io/specification/2025-06-18/server/resources#resource-templates) through a practical example.
 11 | 
 12 | This guide demonstrates how MCP prompts can automate repetitive workflows. Whether you're interested in the MCP ecosystem or simply want to leverage AI for workflow automation, you'll learn how to build practical automations through a concrete meal planning example. No prior MCP experience needed—we'll cover the fundamentals before diving into implementation.
 13 | 
 14 | ## The Problem: Time-Consuming Repetitive Tasks
 15 | 
 16 | Everyone has a collection of repetitive tasks that eat away at their productive hours. Common examples include applying code review feedback, generating weekly reports, updating documentation, or creating boilerplate code. These tasks aren't complex—they follow predictable patterns—but they're cumbersome and time-consuming. [MCP prompts](https://modelcontextprotocol.io/specification/2025-06-18/server/prompts) were designed to help automate this kind of work.
 17 | 
 18 | MCP prompts offer more than command shortcuts. They're a primitive for building workflow automation that combines the flexibility of scripting with the intelligence of modern AI systems. This post explores how to build automations using MCP's prompt system, resource templates, and modular servers. I'll demonstrate these concepts through a meal planning automation I built, but the patterns apply broadly to any structured, repetitive workflow.
 19 | 
 20 | ## Example: Automating Weekly Meal Planning
 21 | 
 22 | I needed to solve a recurring problem: planning weekly meals by cuisine to manage ingredients efficiently. The manual process involved selecting a cuisine, choosing dishes, listing ingredients, shopping, and organizing recipes—repetitive steps that took significant time each week.
 23 | 
 24 | So I decided to use MCP! By automating these steps, I could reduce the entire workflow to selecting a cuisine and receiving a complete meal plan with shopping list. (Any client that supports MCP prompts should work!)
 25 | 
 26 | 1. **Select a prompt**
 27 | 
 28 |    <img
 29 |    src="/posts/images/prompts-list.png"
 30 |    alt="MCP prompts list showing available automation commands"
 31 |    />
 32 | 
 33 | 2. **Select a cuisine from a dropdown**
 34 |    <img
 35 |      src="/posts/images/prompts-suggestions.png"
 36 |      alt="Dropdown showing cuisine suggestions as user types"
 37 |    />
 38 | 3. **Done!**
 39 |    The system generates a meal plan, shopping list, and even prints the shopping list and recipes.
 40 | 
 41 | <img
 42 |     src="/posts/images/prompts-final-result.png"
 43 |     alt="Final generated meal plan and shopping list output"
 44 |   />
 45 | 
 46 | Here we are focuses primarily on the Recipe Server with its prompts and resources. You can find the [printing server example here](https://github.com/ihrpr/mcp-server-tiny-print) (it works with a specific thermal printer model, but you could easily swap it for email, Notion, or any other output method). The beauty of separate servers is that you can mix and match different capabilities.
 47 | 
 48 | ## Core Components
 49 | 
 50 | Let's dive into the three components that make this automation possible: [prompts](https://modelcontextprotocol.io/specification/2025-06-18/server/prompts), [resources](https://modelcontextprotocol.io/specification/2025-06-18/server/resources), and [completions](https://modelcontextprotocol.io/specification/2025-06-18/server/utilities/completion). I'll show you how each works conceptually, then we'll implement them together.
 51 | 
 52 | ### 1. Resource Templates
 53 | 
 54 | In MCP, [static resources](https://modelcontextprotocol.io/specification/2025-06-18/server/resources#resource-types) represent specific pieces of content with unique URIs—like `file://recipes/italian.md` or `file://recipes/mexican.md`. While straightforward, this approach doesn't scale well. If you have recipes for 20 cuisines, you'd need to define 20 separate resources, each with its own URI and metadata.
 55 | 
 56 | [Resource templates](https://modelcontextprotocol.io/specification/2025-06-18/server/resources#resource-templates) solve this through URI patterns with parameters, transforming static resource definitions into dynamic content providers.
 57 | 
 58 | For example, a template like `file://recipes/{cuisine}.md` might represent a set of resources like these:
 59 | 
 60 | - `file://recipes/italian.md` returns Italian recipes
 61 | - `file://recipes/mexican.md` returns Mexican recipes
 62 | 
 63 | This pattern extends beyond simple filtering. You can create templates for:
 64 | 
 65 | - Hierarchical data: `file://docs/{category}/{topic}`
 66 | - Git repository content: `git://repo/{branch}/path/{file}`
 67 | - Web resources: `https://api.example.com/users/{userId}/data`
 68 | - Query parameters: `https://example.com/{collection}?type={filter}`
 69 | 
 70 | For more details on URI schemes and resource templates, see the [MCP Resource specification](https://modelcontextprotocol.io/specification/2025-06-18/server/resources#resource-templates).
 71 | 
 72 | ### 2. Completions
 73 | 
 74 | Nobody remembers exact parameter values. Is it "italian" or "Italian" or "it"? [Completions](https://modelcontextprotocol.io/specification/2025-06-18/server/utilities/completion) bridge this gap by providing suggestions as users type, creating an interface that feels intuitive rather than restrictive.
 75 | 
 76 | Different MCP clients present completions differently:
 77 | 
 78 | - VS Code shows a filterable dropdown
 79 | - Command-line tools might use fuzzy matching
 80 | - Web interfaces could provide rich previews
 81 | 
 82 | But the underlying data comes from your server, maintaining consistency across all clients.
 83 | 
 84 | ### 3. Prompts: Commands That Evolve With Context
 85 | 
 86 | [Prompts](https://modelcontextprotocol.io/specification/2025-06-18/server/prompts) are the entry points to your automation. They define what commands are available and can range from simple text instructions to rich, context-aware operations.
 87 | 
 88 | Let's see how prompts can evolve to handle increasingly sophisticated use cases:
 89 | 
 90 | **Basic prompt: Static instruction**
 91 | 
 92 | ```
 93 | "Create a meal plan for a week"
 94 | ```
 95 | 
 96 | This works, but it's generic. The AI will create a meal plan based on general knowledge.
 97 | 
 98 | **Adding parameters: Dynamic customization**
 99 | 
100 | ```
101 | "Create a meal plan for a week using {cuisine} cuisine"
102 | ```
103 | 
104 | Now users can specify Italian, Mexican, or any other cuisine. The prompt adapts to user input, but still relies on the AI's general knowledge about these cuisines.
105 | 
106 | **Including resources: Your data**
107 | 
108 | Prompts can include resources to add context data beyond simple text instructions. This is crucial when you need the AI to work with your specific context rather than general knowledge.
109 | 
110 | In my meal planning example, I don't want generic recipes—I want the AI to use **my** collection of tested recipes that I know I like. Complex prompts make this possible by bundling prompt text with embedded resources.
111 | 
112 | Here's how it works:
113 | 
114 | 1. **User selects a prompt** with parameters (e.g., "plan-meals" with cuisine="italian")
115 | 2. **Server returns** both instructional text AND resource references
116 | 3. **Client decides how to handle resources** - Applications might choose to select a subset of data using embeddings or keyword search, or pass the raw data directly to the model
117 | 4. **AI receives the context** and generates a response
118 | 
119 | In my example, VS Code attached the entire resource to the prompt, which worked great for this use case. The AI had access to all my Italian recipes when planning an Italian week, ensuring it only suggested dishes I actually had recipes for.
120 | 
121 | The key difference from simple prompts: instead of asking "Plan Italian meals" and getting generic suggestions, the AI works with your actual recipe collection, dietary preferences, and constraints.
122 | 
123 | <img
124 |     src="/posts/images/prompts-rendered-prompt.png"
125 |     alt="VS Code showing the rendered prompt with attached recipe resources"
126 |   />
127 | 
128 | The recipe resources we've been using are **embedded resources** that have inline content from the server. According to the [MCP specification](https://modelcontextprotocol.io/specification/2025-06-18/server/prompts#data-types), prompts can also include other data types.
129 | 
130 | This enables advanced use cases beyond our text-based recipes, like design review prompts with screenshots or voice transcription services.
131 | 
132 | ## Building the Recipe Server
133 | 
134 | Let's implement a complete MCP server that brings together all the concepts we've discussed. We'll start with the server setup and then implement each capability.
135 | 
136 | ### Prerequisites
137 | 
138 | Before diving into the code, make sure you have:
139 | 
140 | 1. **Node.js** (v18 or higher) and npm installed
141 | 2. **MCP SDK** installed:
142 |    ```bash
143 |    npm install @modelcontextprotocol/sdk
144 |    ```
145 | 3. **An MCP-compatible client with prompt and resource support**,like VS Code with the MCP extension
146 | 
147 | For this tutorial, I'll use the TypeScript SDK, but MCP also supports Python and other languages.
148 | 
149 | ### Server Setup and Capabilities
150 | 
151 | First, let's create our MCP server:
152 | 
153 | ```typescript
154 | const server = new McpServer({
155 |   name: "favorite-recipes",
156 |   version: "1.0.0",
157 | });
158 | 
159 | async function main() {
160 |   const transport = new StdioServerTransport();
161 |   await server.connect(transport);
162 | }
163 | 
164 | main().catch((error) => {
165 |   console.error("Server error:", error);
166 |   process.exit(1);
167 | });
168 | ```
169 | 
170 | ### Implementing Resources
171 | 
172 | Next, let's register a resource template with completions.
173 | 
174 | ```typescript
175 | server.registerResource(
176 |   "recipes",
177 |   new ResourceTemplate("file://recipes/{cuisine}", {
178 |     list: undefined,
179 |     complete: {
180 |       cuisine: (value) => {
181 |         return CUISINES.filter((cuisine) => cuisine.startsWith(value));
182 |       },
183 |     },
184 |   }),
185 |   {
186 |     title: "Cuisine-Specific Recipes",
187 |     description: "Traditional recipes organized by cuisine",
188 |   },
189 |   async (uri, variables, _extra) => {
190 |     const cuisine = variables.cuisine as string;
191 | 
192 |     if (!CUISINES.includes(cuisine)) {
193 |       throw new Error(`Unknown cuisine: ${cuisine}`);
194 |     }
195 | 
196 |     const content = formatRecipesAsMarkdown(cuisine);
197 |     return {
198 |       contents: [
199 |         {
200 |           uri: uri.href,
201 |           mimeType: "text/markdown",
202 |           text: content,
203 |         },
204 |       ],
205 |     };
206 |   },
207 | );
208 | ```
209 | 
210 | ### Implementing Prompts
211 | 
212 | Finally, let's register the prompt, which also has completions:
213 | 
214 | ```typescript
215 | server.registerPrompt(
216 |   "weekly-meal-planner",
217 |   {
218 |     title: "Weekly Meal Planner",
219 |     description:
220 |       "Create a weekly meal plan and grocery shopping list from cuisine-specific recipes",
221 |     argsSchema: {
222 |       cuisine: completable(z.string(), (value) => {
223 |         return CUISINES.filter((cuisine) => cuisine.startsWith(value));
224 |       }),
225 |     },
226 |   },
227 |   async ({ cuisine }) => {
228 |     const resourceUri = `file://recipes/${cuisine}`;
229 |     const recipeContent = formatRecipesAsMarkdown(cuisine);
230 | 
231 |     return {
232 |       title: `Weekly Meal Planner - ${cuisine} Cuisine`,
233 |       description: `Weekly meal planner for ${cuisine} cuisine`,
234 |       messages: [
235 |         {
236 |           role: "user",
237 |           content: {
238 |             type: "text",
239 |             text: `Plan cooking for the week. I've attached the recipes from ${cuisine} cuisine.
240 | 
241 | Please create:
242 | 1. A 7-day meal plan using these recipes
243 | 2. An optimized grocery shopping list that minimizes waste by reusing ingredients across multiple recipes
244 | 3. Daily meal schedule with specific dishes for breakfast, lunch, and dinner
245 | 4. Preparation tips to make the week more efficient
246 | 5. Print Shopping list
247 | 
248 | Focus on ingredient overlap between recipes to reduce food waste.`,
249 |           },
250 |         },
251 |         {
252 |           role: "user",
253 |           content: {
254 |             type: "resource",
255 |             resource: {
256 |               uri: resourceUri,
257 |               mimeType: "text/markdown",
258 |               text: recipeContent,
259 |             },
260 |           },
261 |         },
262 |       ],
263 |     };
264 |   },
265 | );
266 | ```
267 | 
268 | ## Running It Yourself
269 | 
270 | The [full code for the recipe server is available here](https://github.com/ihrpr/mcp-server-fav-recipes).
271 | 
272 | Follow VS Code's [documentation to set up the server](https://code.visualstudio.com/docs/copilot/chat/mcp-servers). Once a server is set up in VS Code, you can see its status, debug what's happening, and iterate quickly on your automations.
273 | 
274 | After the server is set up in VS Code, type "/" in chat and select the prompt.
275 | 
276 | <img
277 |     src="/posts/images/prompts-list.png"
278 |     alt="MCP prompts list showing available automation commands"
279 |  />
280 | 
281 | ## Extending Your Automations
282 | 
283 | MCP prompts open up exciting automation possibilities:
284 | 
285 | - **Prompt Chains**: Execute multiple prompts in sequence (plan meals → generate shopping list → place grocery order)
286 | - **Dynamic Prompts**: Adapt based on available resources or time of year
287 | - **Cross-Server Workflows**: Coordinate multiple MCP servers for complex automations
288 | - **External Triggers**: Activate prompts via webhooks or schedules
289 | 
290 | The patterns demonstrated in meal planning apply to many domains:
291 | 
292 | - Documentation generation that knows your codebase
293 | - Report creation with access to your data sources
294 | - Development workflows that understand your project structure
295 | - Customer support automations with full context
296 | 
297 | **Key takeaways:**
298 | 
299 | - MCP prompts can include dynamic resources, giving AI full context for tasks
300 | - Resource templates enable scalable content serving without duplication
301 | - Modular server architecture lets you mix and match capabilities
302 | 
303 | ## Wrapping Up
304 | 
305 | This meal planning automation started as a simple desire to avoid rewriting shopping lists every week. It evolved into a complete system that handles meal planning, shopping lists, and recipe printing with just a few clicks.
306 | 
307 | MCP prompts provide practical tools to automate repetitive tasks. The modular architecture means you can start small—perhaps just automating one part of your workflow—and expand as needed. Whether you're automating documentation, reports, or meal planning, the patterns remain the same: identify repetitive tasks, build focused automations, and let the system handle the tedious parts.
308 | 


--------------------------------------------------------------------------------
/blog/content/posts/2025-07-31-governance-for-mcp.md:
--------------------------------------------------------------------------------
 1 | +++
 2 | date = '2025-07-31T00:00:00Z'
 3 | title = 'Building to Last: A New Governance Model for MCP'
 4 | author = 'David Soria Parra (Lead Maintainer)'
 5 | tags = ['announcement', 'governance', 'community']
 6 | +++
 7 | 
 8 | Since its open source release in November of 2024, the Model Context Protocol project has grown faster than we could have ever imagined. That's a wonderful problem to have, but with growth come growing pains. Our existing processes, which worked well for a small team, have started to show their limits.
 9 | 
10 | Today, we're taking a big step to ensure MCP can continue to grow and thrive. We're introducing a formal governance model designed to bring clarity to the development process while preserving the collaborative, open source spirit that has made MCP successful.
11 | 
12 | ## Specification Enhancement Proposals (SEPs)
13 | 
14 | One of the first major changes we're introducing is [Specification Enhancement Proposals](https://modelcontextprotocol.io/community/sep-guidelines) (SEPs). This will be the primary mechanism for anyone to propose changes to MCP. SEPs are inspired by other projects, like [Python PEPs](https://peps.python.org/) or [Rust RFCs](https://github.com/rust-lang/rfcs). We aim to make the process for suggesting changes to Model Context Protocol as straightforward as possible:
15 | 
16 | 1. Following the [SEP guidelines](https://modelcontextprotocol.io/community/sep-guidelines), submit a proposal as [a GitHub issue](https://github.com/modelcontextprotocol/modelcontextprotocol/issues) to start the conversation.
17 | 2. Our maintainers and core maintainers regularly review proposals and tag SEPs for review and sponsorship. You can also reach out and collaborate with contributing folks on [Discord](https://discord.gg/6CSzBmMkjX) or [GitHub](https://github.com/modelcontextprotocol/modelcontextprotocol). Refer to [`MAINTAINERS.md`](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/MAINTAINERS.md) for a list of currently active maintainers and their focus areas.
18 | 3. Work with the sponsor and the MCP community to move your proposal through draft, review, and implementation stages.
19 | 
20 | SEPs provide a clear, documented path for evolving the protocol, ensuring that every major change is well-vetted by the community.
21 | 
22 | ## Leadership Roles
23 | 
24 | The new model also establishes three types of leadership roles, ensuring both focused ownership and broad community representation:
25 | 
26 | - **Maintainers** manage specific components like SDKs, our documentation, and individual repositories.
27 | - **Core Maintainers** guide the overall direction of the project and the evolution of the MCP specification.
28 | - **Lead Maintainers** serve as the final decision-makers and ensure the project's long-term health.
29 | 
30 | All maintainers form the **MCP steering group**. To ensure a structured and timely review of incoming proposals, our core and lead maintainers will meet bi-weekly to review submitted [SEPs](#specification-enhancement-proposals-seps). Meeting notes and decisions will always be public. For example the [notes from the core maintainer meeting on July 23rd, 2025](https://github.com/modelcontextprotocol/modelcontextprotocol/issues/1061).
31 | 
32 | ## Get Involved
33 | 
34 | We need your help to build the future of MCP, and everyone is welcome here. Whether you're a seasoned open source veteran or just curious about how to get started, there's a place for you in our community.
35 | 
36 | Many of our maintainers began with a single small contribution—sometimes just fixing a typo or asking a thoughtful question. Every journey starts somewhere, and we're excited to help you take your first step.
37 | 
38 | - **New Contributors**: Unsure where to begin? Start by helping with documentation, fixing bugs, or building out examples. Every contribution matters, and we're here to support you. Check out issues tagged with [`good first issue`](https://github.com/modelcontextprotocol/modelcontextprotocol/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22good%20first%20issue%22) - they're perfect for getting started, and you'll find friendly faces ready to help.
39 | - **SDK Developers**: Have a favorite programming language? As MCP grows, we need your expertise to build and maintain the protocol SDKs. Your work could empower entire new communities to use MCP.
40 | - **Documentation Writers**: Clear, comprehensive [documentation](https://modelcontextprotocol.io/introduction) is what turns a good project into a great one. If you love explaining things or making guides, your contributions will help others succeed.
41 | - **Future Maintainers**: We believe in growing our team from within. The path to becoming a maintainer starts with consistent, quality contributions and a commitment to the project's success. Imagine yourself guiding new contributors and shaping the future of MCP.
42 | 
43 | No matter your background or experience, you belong here. Join our [Discord](https://discord.gg/6CSzBmMkjX) to connect with other contributors, ask questions, and find mentorship. Whether you're fixing a typo or proposing a major change to the protocol, your voice is valued and your efforts make a difference.
44 | 
45 | For all the details, please see our full [governance documentation](https://modelcontextprotocol.io/community/governance).
46 | 
47 | ## Thank You
48 | 
49 | None of this would be possible without the incredible community that has rallied around MCP. From the early adopters who believed in the vision, to the developers building MCP clients and servers, to the maintainers dedicating their time and expertise. Every contribution has been essential to making the Model Context Protocol the success it is today.
50 | 
51 | You've helped us identify issues, improve documentation, build SDKs, create compelling examples, and push the boundaries of what's possible with platform integration. Your feedback, bug reports, feature requests, and code contributions have shaped MCP into something far better than we could have built alone.
52 | 
53 | As we embark on this next chapter with formal governance, we're more committed than ever to fostering the open, inclusive community that has made MCP thrive. Thank you for being part of this journey - we can't wait to see what we'll build together next.
54 | 


--------------------------------------------------------------------------------
/blog/content/posts/welcome-to-mcp-blog.md:
--------------------------------------------------------------------------------
 1 | +++
 2 | date = '2025-07-02T11:46:28+01:00'
 3 | draft = false
 4 | title = 'The Model Context Protocol Blog'
 5 | tags = ['announcement']
 6 | +++
 7 | 
 8 | Welcome to the official Model Context Protocol (MCP) blog! This is where we'll share the latest updates, tutorials, best practices, and insights about MCP.
 9 | 
10 | ## About MCP
11 | 
12 | The Model Context Protocol is an open standard that enables seamless integration between AI assistants and external data sources and tools. It provides a universal way for AI models to interact with local services, APIs, and data stores.
13 | 
14 | ## Get Involved
15 | 
16 | We're excited to build this ecosystem together with you. Here's how you can participate:
17 | 
18 | - Check out the [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/tree/main/docs/specification)
19 | - Join the discussion on [GitHub](https://github.com/modelcontextprotocol)
20 | 


--------------------------------------------------------------------------------
/blog/go.mod:
--------------------------------------------------------------------------------
1 | module github.com/modelcontextprotocol/modelcontextprotocol
2 | 
3 | go 1.24.4
4 | 
5 | require (
6 | 	github.com/adityatelange/hugo-PaperMod v0.0.0-20250524045829-5a4651783fa9 // indirect
7 | )
8 | 


--------------------------------------------------------------------------------
/blog/go.sum:
--------------------------------------------------------------------------------
1 | github.com/adityatelange/hugo-PaperMod v0.0.0-20250524045829-5a4651783fa9 h1:vSOmKCogP6L4SV2eO7A2zgO7sdml4Ta7tZSd6ccOTmQ=
2 | github.com/adityatelange/hugo-PaperMod v0.0.0-20250524045829-5a4651783fa9/go.mod h1:HCHxNMKYdGafUYjVV3ICiAqznZK2yH0iI53jqcDFDdQ=
3 | 


--------------------------------------------------------------------------------
/blog/hugo.toml:
--------------------------------------------------------------------------------
 1 | baseURL = 'https://blog.modelcontextprotocol.io/'
 2 | languageCode = 'en-us'
 3 | title = 'mcp blog'
 4 | theme = 'github.com/adityatelange/hugo-PaperMod'
 5 | [pagination]
 6 |   pagerSize = 5
 7 | 
 8 | [params]
 9 |   author = "The MCP project"
10 |   description = "Updates from the Model Context Protocol project"
11 | 
12 |   # PaperMod specific settings
13 |   # defaultTheme = "dark" # MCP uses a dark theme
14 |   disableThemeToggle = false
15 |   ShowShareButtons = false
16 |   ShowReadingTime = true
17 |   ShowPostNavLinks = true
18 |   ShowBreadCrumbs = true
19 |   ShowCodeCopyButtons = true
20 |   ShowWordCount = false
21 |   ShowRssButtonInSectionTermList = true
22 |   UseHugoToc = false
23 |   disableSpecial1stPost = true
24 |   disableScrollToTop = false
25 |   comments = false
26 |   hidemeta = false
27 |   hideSummary = false
28 |   showtoc = false
29 |   ShowFullTextinRSS = true
30 | 
31 |   # Custom copyright
32 |   copyright = '© 2025 Model Context Protocol Project'
33 | 
34 |   [[params.socialIcons]]
35 |     name = "github"
36 |     url = "https://github.com/modelcontextprotocol"
37 | 
38 | # Menu configuration
39 | [[menu.main]]
40 |   identifier = "docs"
41 |   name = "Documentation"
42 |   url = "https://modelcontextprotocol.io/docs"
43 |   weight = 10
44 | 
45 | [[menu.main]]
46 |   identifier = "github"
47 |   name = "GitHub"
48 |   url = "https://github.com/modelcontextprotocol"
49 |   weight = 20
50 | 
51 | # Markup configuration for syntax highlighting
52 | [markup]
53 |   [markup.highlight]
54 |     guessSyntax = true
55 |     style = "monokai"
56 |   [markup.goldmark]
57 |     [markup.goldmark.renderer]
58 |       unsafe = true
59 | 
60 | [module]
61 |   [[module.imports]]
62 |     path = 'github.com/adityatelange/hugo-PaperMod'
63 | 


--------------------------------------------------------------------------------
/blog/layouts/partials/google_analytics.html:
--------------------------------------------------------------------------------
1 | {{- /*
2 | Google Analytics partial - empty for now
3 | This prevents the theme from failing when looking for this partial
4 | */ -}}


--------------------------------------------------------------------------------
/blog/static/CNAME:
--------------------------------------------------------------------------------
1 | blog.modelcontextprotocol.io
2 | 


--------------------------------------------------------------------------------
/blog/static/posts/images/prompts-final-result.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/blog/static/posts/images/prompts-final-result.png


--------------------------------------------------------------------------------
/blog/static/posts/images/prompts-list.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/blog/static/posts/images/prompts-list.png


--------------------------------------------------------------------------------
/blog/static/posts/images/prompts-rendered-prompt.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/blog/static/posts/images/prompts-rendered-prompt.png


--------------------------------------------------------------------------------
/blog/static/posts/images/prompts-suggestions.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/blog/static/posts/images/prompts-suggestions.png


--------------------------------------------------------------------------------
/docs/about/index.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Model Context Protocol
  3 | description: The open protocol that connects AI applications to the systems where context lives
  4 | mode: "custom"
  5 | ---
  6 | 
  7 | <div className="landing-page">
  8 |   <div className="hero-section">
  9 |     <div className="intro-video-section">
 10 |       <div className="intro-content-wrapper">
 11 |         <div className="intro-content left-aligned">
 12 |           <h2 className="intro-title">
 13 |             Connect your AI applications to the world
 14 |           </h2>
 15 |           <p className="intro-description">
 16 |             AI-enabled tools are powerful, but they're often limited to the
 17 |             information you manually provide or require bespoke integrations.
 18 |           </p>
 19 |           <p className="intro-description">
 20 |             Whether it's reading files from your computer, searching through an
 21 |             internal or external knowledge base, or updating tasks in an project
 22 |             management tool, MCP provides a secure, standardized, *simple* way
 23 |             to give AI systems the context they need.
 24 |           </p>
 25 |         </div>
 26 |         <div className="intro-logo">
 27 |           <img src="/mcp.png" alt="MCP Logo" />
 28 |         </div>
 29 |       </div>
 30 |     </div>
 31 |     <div className="how-section">
 32 |       <h2 className="section-title">How it works</h2>
 33 |       <div className="steps-container">
 34 |         <div className="step-item">
 35 |           <div className="step-content">
 36 |             <h3>
 37 |               <span className="step-number">1</span> Choose MCP servers
 38 |             </h3>
 39 |             <p>
 40 |               Pick from pre-built servers for popular tools like GitHub, Google
 41 |               Drive, Slack and hundreds of others. Combine multiple servers for
 42 |               complete workflows, or easily build your own for custom
 43 |               integrations.
 44 |             </p>
 45 |           </div>
 46 |         </div>
 47 |         <div className="step-connector"></div>
 48 |         <div className="step-item">
 49 |           <div className="step-content">
 50 |             <h3>
 51 |               <span className="step-number">2</span> Connect your AI application
 52 |             </h3>
 53 |             <p>
 54 |               Configure your AI application (like Claude, VS Code, or ChatGPT)
 55 |               to connect to your MCP servers. The application can now see
 56 |               available tools, resources and prompts from all connected servers.
 57 |             </p>
 58 |           </div>
 59 |         </div>
 60 |         <div className="step-connector"></div>
 61 |         <div className="step-item">
 62 |           <div className="step-content">
 63 |             <h3>
 64 |               <span className="step-number">3</span> Work with context
 65 |             </h3>
 66 |             <p>
 67 |               Your AI-powered application can now access real data, execute
 68 |               actions, and provide more helpful responses based on your actual
 69 |               context.
 70 |             </p>
 71 |           </div>
 72 |         </div>
 73 |       </div>
 74 |     </div>
 75 |     <div className="ecosystem-section">
 76 |       <h2 className="section-title">Join a growing ecosystem</h2>
 77 |       <div className="stats-container">
 78 |         <div className="stats-grid">
 79 |           <a href="/docs/sdk" target="_blank" className="stat-card">
 80 |             <div className="stat-number">9</div>
 81 |             <div className="stat-label">Official SDKs</div>
 82 |           </a>
 83 |           <a
 84 |             href="https://github.com/modelcontextprotocol/servers?tab=readme-ov-file#%EF%B8%8F-official-integrations"
 85 |             target="_blank"
 86 |             rel="noopener noreferrer"
 87 |             className="stat-card"
 88 |           >
 89 |             <div className="stat-number">1000+</div>
 90 |             <div className="stat-label">Available Servers</div>
 91 |           </a>
 92 |           <a href="/clients" target="_blank" className="stat-card">
 93 |             <div className="stat-number">70+</div>
 94 |             <div className="stat-label">Compatible Clients</div>
 95 |           </a>
 96 |         </div>
 97 |       </div>
 98 |     </div>
 99 |   </div>
100 |   <div className="cta-buttons">
101 |     <a href="/docs/getting-started/intro" className="cta-primary">
102 |       Get Started
103 |     </a>
104 |   </div>
105 | </div>
106 | 


--------------------------------------------------------------------------------
/docs/clients.mdx:
--------------------------------------------------------------------------------
   1 | ---
   2 | title: "Example Clients"
   3 | description: "A list of applications that support MCP integrations"
   4 | ---
   5 | 
   6 | This page provides an overview of applications that support the Model Context Protocol (MCP). Each client may support different MCP features, allowing for varying levels of integration with MCP servers.
   7 | 
   8 | ## Feature support matrix
   9 | 
  10 | <div id="feature-support-matrix-wrapper">
  11 | 
  12 | {/* prettier-ignore-start */}
  13 | 
  14 | | Client                                           | [Resources] | [Prompts] | [Tools] | [Discovery] | [Sampling] | [Roots] | [Elicitation] |
  15 | | ------------------------------------------------ | ----------- | --------- | ------- | ---------------------- | ---------- | ----- | ------------ |
  16 | | [5ire][5ire]                                     | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  17 | | [AgentAI][AgentAI]                               | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  18 | | [AgenticFlow][AgenticFlow]                       | ✅          | ✅        | ✅      | ✅                     | ❌         | ❌    | ❓            |
  19 | | [AIQL TUUI][AIQL TUUI]                           | ✅          | ✅        | ✅      | ✅                     | ✅         | ❌    | ❓            |
  20 | | [Amazon Q CLI][Amazon Q CLI]                     | ❌          | ✅        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  21 | | [Amazon Q IDE][Amazon Q IDE]                     | ❌          | ❌        | ✅      | ❌                     | ❌         | ❌    | ❓            |
  22 | | [Amp][Amp]                                       | ✅          | ❌        | ✅      | ❌                     | ✅         | ❌    | ❓            |
  23 | | [Apify MCP Tester][Apify MCP Tester]             | ❌          | ❌        | ✅      | ✅                     | ❌         | ❌    | ❓            |
  24 | | [Augment Code][AugmentCode]                      | ❌          | ❌        | ✅      | ❌                     | ❌         | ❌    | ❓            |
  25 | | [BeeAI Framework][BeeAI Framework]               | ❌          | ❌        | ✅      | ❌                     | ❌         | ❌    | ❓            |
  26 | | [BoltAI][BoltAI]                                 | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  27 | | [Call Chirp][Call Chirp]                         | ❌          | ✅        | ✅      | ❌                     | ❌         | ❌    | ❓            |                                                                                   
  28 | | [ChatGPT][ChatGPT]                               | ❌          | ❌        | ✅      | ❌                     | ❌         | ❌    | ❓            |
  29 | | [ChatWise][ChatWise]                             | ❌          | ❌        | ✅      | ❌                     | ❌         | ❌    | ❓            |
  30 | | [Claude.ai][Claude.ai]                           | ✅          | ✅        | ✅      | ❌                     | ❌         | ❌    | ❓            |
  31 | | [Claude Code][Claude Code]                       | ✅          | ✅        | ✅      | ❌                     | ❌         | ✅    | ❓            |
  32 | | [Claude Desktop App][Claude Desktop]             | ✅          | ✅        | ✅      | ❌                     | ❌         | ❌    | ❓            |
  33 | | [Chorus][Chorus]                                 | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  34 | | [Cline][Cline]                                   | ✅          | ❌        | ✅      | ✅                     | ❌         | ❌    | ❓            |
  35 | | [CodeGPT][CodeGPT]                               | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  36 | | [Continue][Continue]                             | ✅          | ✅        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  37 | | [Copilot-MCP][CopilotMCP]                        | ✅          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  38 | | [Cursor][Cursor]                                 | ❌          | ❌        | ✅      | ❌                     | ❌         | ❌    | ❓            |
  39 | | [Daydreams Agents][Daydreams]                    | ✅          | ✅        | ✅      | ❌                     | ❌         | ❌    | ❓            |
  40 | | [Emacs Mcp][Mcp.el]                              | ❌          | ❌        | ✅      | ❌                     | ❌         | ❌    | ❓            |
  41 | | [fast-agent][fast-agent]                         | ✅          | ✅        | ✅      | ✅                     | ✅         | ✅    | ✅            |
  42 | | [FlowDown][FlowDown]                             | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❌            |
  43 | | [FLUJO][FLUJO]                                   | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  44 | | [Genkit][Genkit]                                 | ⚠️          | ✅        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  45 | | [Glama][Glama]                                   | ✅          | ✅        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  46 | | [Gemini CLI][Gemini CLI]                         | ❌          | ✅        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  47 | | [GenAIScript][GenAIScript]                       | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  48 | | [GitHub Copilot coding agent][GitHubCopilotCodingAgent]                       | ❌          | ❌        | ✅      | ❌                     | ❌         | ❌    | ❌            |
  49 | | [Goose][Goose]                                   | ✅          | ✅        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  50 | | [gptme][gptme]                                   | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  51 | | [HyperAgent][HyperAgent]                         | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  52 | | [JetBrains AI Assistant][JetBrains AI Assistant] | ❌          | ❌        | ✅      | ❌                     | ❌         | ❌    | ❓            |
  53 | | [Kilo Code][Kilo Code]                           | ✅          | ❌        | ✅      | ✅                     | ❌         | ❌    | ❓            |
  54 | | [Klavis AI Slack/Discord/Web][Klavis AI]         | ✅          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  55 | | [LibreChat][LibreChat]                           | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  56 | | [LM Studio][LM Studio]                           | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  57 | | [Lutra][Lutra]                                   | ✅          | ✅        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  58 | | [mcp-agent][mcp-agent]                           | ✅          | ✅        | ✅      | ❓                     | ⚠️         | ✅    | ✅            |
  59 | | [mcp-client-chatbot][mcp-client-chatbot]         | ❌          | ❌        | ✅      | ❌                     | ❌         | ❌    | ❓            |
  60 | | [mcp-use][mcp-use]                               | ✅          | ✅        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  61 | | [modelcontextchat.com][modelcontextchat.com]     | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  62 | | [MCPHub][MCPHub]                                 | ✅          | ✅        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  63 | | [MCPOmni-Connect][MCPOmni-Connect]               | ✅          | ✅        | ✅      | ❓                     | ✅         | ❌    | ❓            |
  64 | | [Memex][Memex]                                   | ✅          | ✅        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  65 | | [Microsoft Copilot Studio]                       | ❌          | ❌        | ✅      | ✅                     | ❌         | ❌    | ❓            |
  66 | | [MindPal][MindPal]                               | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  67 | | [MooPoint][MooPoint]                             | ❌          | ❌        | ✅      | ❓                     | ✅         | ❌    | ❓            |
  68 | | [Msty Studio][Msty Studio]                       | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  69 | | [NVIDIA Agent Intelligence toolkit][AIQ toolkit] | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  70 | | [OpenSumi][OpenSumi]                             | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  71 | | [oterm][oterm]                                   | ❌          | ✅        | ✅      | ❓                     | ✅         | ❌    | ❓            |
  72 | | [Postman][postman]                               | ✅          | ✅        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  73 | | [RecurseChat][RecurseChat]                       | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  74 | | [Roo Code][Roo Code]                             | ✅          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  75 | | [Shortwave][Shortwave]                           | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  76 | | [Slack MCP Client][Slack MCP Client]             | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  77 | | [Sourcegraph Cody][Cody]                         | ✅          | ❌        | ❌      | ❓                     | ❌         | ❌    | ❓            |
  78 | | [SpinAI][SpinAI]                                 | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  79 | | [Superinterface][Superinterface]                 | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  80 | | [Superjoin][Superjoin]                           | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  81 | | [systemprompt][systemprompt]                     | ✅          | ✅        | ✅      | ❓                     | ✅         | ❌    | ❓            |
  82 | | [Tambo][Tambo]                                   | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  83 | | [Tencent CloudBase AI DevKit][Tencent CloudBase AI DevKit] | ❌      | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  84 | | [TheiaAI/TheiaIDE][TheiaAI/TheiaIDE]             | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  85 | | [Tome][Tome]                                     | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  86 | | [TypingMind App][TypingMind App]                 | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  87 | | [VS Code GitHub Copilot][VS Code]                | ✅          | ✅        | ✅      | ✅                     | ✅         | ✅    | ✅            |
  88 | | [Warp][Warp]                                     | ✅          | ❌        | ✅      | ✅                     | ❌         | ❌    | ❓            |
  89 | | [WhatsMCP][WhatsMCP]                             | ❌          | ❌        | ✅      | ❌                     | ❌         | ❌    | ❓            |
  90 | | [Windsurf Editor][Windsurf]                      | ❌          | ❌        | ✅      | ✅                     | ❌         | ❌    | ❓            |
  91 | | [Witsy][Witsy]                                   | ❌          | ❌        | ✅      | ❓                     | ❌         | ❌    | ❓            |
  92 | | [Zed][Zed]                                       | ❌          | ✅        | ✅      | ❌                     | ❌         | ❌    | ❓            |
  93 | | [Zencoder][Zencoder]                             | ❌          | ❌        | ✅      | ❌                     | ❌         | ❌    | ❓            |
  94 | 
  95 | 
  96 | {/* prettier-ignore-end */}
  97 | 
  98 | [Resources]: /docs/concepts/resources
  99 | [Prompts]: /docs/concepts/prompts
 100 | [Tools]: /docs/concepts/tools
 101 | [Discovery]: /docs/concepts/tools#tool-discovery-and-updates
 102 | [Sampling]: /docs/concepts/sampling
 103 | [Roots]: /docs/concepts/roots
 104 | [Elicitation]: /docs/concepts/elicitation
 105 | [5ire]: https://github.com/nanbingxyz/5ire
 106 | [AgentAI]: https://github.com/AdamStrojek/rust-agentai
 107 | [AgenticFlow]: https://agenticflow.ai/mcp
 108 | [AIQ toolkit]: https://github.com/NVIDIA/AIQToolkit
 109 | [AIQL TUUI]: https://github.com/AI-QL/tuui
 110 | [Amazon Q CLI]: https://github.com/aws/amazon-q-developer-cli
 111 | [Amazon Q IDE]: https://aws.amazon.com/q/developer
 112 | [Amp]: https://ampcode.com
 113 | [Apify MCP Tester]: https://apify.com/jiri.spilka/tester-mcp-client
 114 | [AugmentCode]: https://augmentcode.com
 115 | [BeeAI Framework]: https://i-am-bee.github.io/beeai-framework
 116 | [BoltAI]: https://boltai.com
 117 | [Call Chirp]: https://www.call-chirp.com
 118 | [ChatGPT]: https://chatgpt.com
 119 | [ChatWise]: https://chatwise.app
 120 | [Claude.ai]: https://claude.ai
 121 | [Claude Code]: https://claude.ai/code
 122 | [Claude Desktop]: https://claude.ai/download
 123 | [Chorus]: https://chorus.sh
 124 | [Cline]: https://github.com/cline/cline
 125 | [CodeGPT]: https://codegpt.co
 126 | [Continue]: https://github.com/continuedev/continue
 127 | [CopilotMCP]: https://github.com/VikashLoomba/copilot-mcp
 128 | [Cursor]: https://cursor.com
 129 | [Daydreams]: https://github.com/daydreamsai/daydreams
 130 | [Klavis AI]: https://www.klavis.ai/
 131 | [Mcp.el]: https://github.com/lizqwerscott/mcp.el
 132 | [fast-agent]: https://github.com/evalstate/fast-agent
 133 | [FlowDown]: https://github.com/Lakr233/FlowDown
 134 | [FLUJO]: https://github.com/mario-andreschak/flujo
 135 | [Glama]: https://glama.ai/chat
 136 | [Gemini CLI]: https://goo.gle/gemini-cli
 137 | [Genkit]: https://github.com/firebase/genkit
 138 | [GenAIScript]: https://microsoft.github.io/genaiscript/reference/scripts/mcp-tools/
 139 | [GitHubCopilotCodingAgent]: https://docs.github.com/en/enterprise-cloud@latest/copilot/concepts/about-copilot-coding-agent
 140 | [Goose]: https://block.github.io/goose/docs/goose-architecture/#interoperability-with-extensions
 141 | [JetBrains AI Assistant]: https://plugins.jetbrains.com/plugin/22282-jetbrains-ai-assistant
 142 | [Kilo Code]: https://github.com/Kilo-Org/kilocode
 143 | [LibreChat]: https://github.com/danny-avila/LibreChat
 144 | [LM Studio]: https://lmstudio.ai
 145 | [Lutra]: https://lutra.ai
 146 | [mcp-agent]: https://github.com/lastmile-ai/mcp-agent
 147 | [mcp-client-chatbot]: https://github.com/cgoinglove/mcp-client-chatbot
 148 | [mcp-use]: https://github.com/pietrozullo/mcp-use
 149 | [modelcontextchat.com]: https://modelcontextchat.com
 150 | [MCPHub]: https://github.com/ravitemer/mcphub.nvim
 151 | [MCPOmni-Connect]: https://github.com/Abiorh001/mcp_omni_connect
 152 | [Memex]: https://memex.tech/
 153 | [Microsoft Copilot Studio]: https://learn.microsoft.com/en-us/microsoft-copilot-studio/agent-extend-action-mcp
 154 | [MindPal]: https://mindpal.io
 155 | [MooPoint]: https://moopoint.io
 156 | [Msty Studio]: https://msty.ai
 157 | [OpenSumi]: https://github.com/opensumi/core
 158 | [oterm]: https://github.com/ggozad/oterm
 159 | [Postman]: https://postman.com/downloads
 160 | [RecurseChat]: https://recurse.chat/
 161 | [Roo Code]: https://roocode.com
 162 | [Shortwave]: https://www.shortwave.com
 163 | [Slack MCP Client]: https://github.com/tuannvm/slack-mcp-client
 164 | [Cody]: https://sourcegraph.com/cody
 165 | [SpinAI]: https://spinai.dev
 166 | [Superinterface]: https://superinterface.ai
 167 | [Superjoin]: https://superjoin.ai
 168 | [systemprompt]: https://systemprompt.io
 169 | [Tambo]: https://tambo.co
 170 | [Tencent CloudBase AI DevKit]: https://docs.cloudbase.net/ai/agent/mcp
 171 | [TheiaAI/TheiaIDE]: https://eclipsesource.com/blogs/2024/12/19/theia-ide-and-theia-ai-support-mcp/
 172 | [Tome]: https://github.com/runebookai/tome
 173 | [TypingMind App]: https://www.typingmind.com
 174 | [VS Code]: https://code.visualstudio.com/
 175 | [Windsurf]: https://codeium.com/windsurf
 176 | [gptme]: https://github.com/gptme/gptme
 177 | [Warp]: https://www.warp.dev/
 178 | [WhatsMCP]: https://wassist.app/mcp/
 179 | [Witsy]: https://github.com/nbonamy/witsy
 180 | [Zed]: https://zed.dev
 181 | [Zencoder]: https://zencoder.ai
 182 | [HyperAgent]: https://github.com/hyperbrowserai/HyperAgent
 183 | 
 184 | </div>
 185 | 
 186 | ## Client details
 187 | 
 188 | ### 5ire
 189 | 
 190 | [5ire](https://github.com/nanbingxyz/5ire) is an open source cross-platform desktop AI assistant that supports tools through MCP servers.
 191 | 
 192 | **Key features:**
 193 | 
 194 | - Built-in MCP servers can be quickly enabled and disabled.
 195 | - Users can add more servers by modifying the configuration file.
 196 | - It is open-source and user-friendly, suitable for beginners.
 197 | - Future support for MCP will be continuously improved.
 198 | 
 199 | ### AgentAI
 200 | 
 201 | [AgentAI](https://github.com/AdamStrojek/rust-agentai) is a Rust library designed to simplify the creation of AI agents. The library includes seamless integration with MCP Servers.
 202 | 
 203 | [Example of MCP Server integration](https://github.com/AdamStrojek/rust-agentai/blob/master/examples/tools_mcp.rs)
 204 | 
 205 | **Key features:**
 206 | 
 207 | - Multi-LLM – We support most LLM APIs (OpenAI, Anthropic, Gemini, Ollama, and all OpenAI API Compatible).
 208 | - Built-in support for MCP Servers.
 209 | - Create agentic flows in a type- and memory-safe language like Rust.
 210 | 
 211 | ### AgenticFlow
 212 | 
 213 | [AgenticFlow](https://agenticflow.ai/) is a no-code AI platform that helps you build agents that handle sales, marketing, and creative tasks around the clock. Connect 2,500+ APIs and 10,000+ tools securely via MCP.
 214 | 
 215 | **Key features:**
 216 | 
 217 | - No-code AI agent creation and workflow building.
 218 | - Access a vast library of 10,000+ tools and 2,500+ APIs through MCP.
 219 | - Simple 3-step process to connect MCP servers.
 220 | - Securely manage connections and revoke access anytime.
 221 | 
 222 | **Learn more:**
 223 | 
 224 | - [AgenticFlow MCP Integration](https://agenticflow.ai/mcp)
 225 | 
 226 | ### AIQL TUUI
 227 | 
 228 | [AIQL TUUI] is a native, cross-platform desktop AI chat application with MCP support. It supports multiple AI providers (e.g., Anthropic, Cloudflare, Deepseek, OpenAI, Qwen), local AI models (via vLLM, Ray, etc.), and aggregated API platforms (such as Deepinfra, Openrouter, and more).
 229 | 
 230 | **Key features:**
 231 | 
 232 | - **Dynamic LLM API & Agent Switching**: Seamlessly toggle between different LLM APIs and agents on the fly.
 233 | - **Comprehensive Capabilities Support**: Built-in support for tools, prompts, resources, and sampling methods.
 234 | - **Configurable Agents**: Enhanced flexibility with selectable and customizable tools via agent settings.
 235 | - **Advanced Sampling Control**: Modify sampling parameters and leverage multi-round sampling for optimal results.
 236 | - **Cross-Platform Compatibility**: Fully compatible with macOS, Windows, and Linux.
 237 | - **Free & Open-Source (FOSS)**: Permissive licensing allows modifications and custom app bundling.
 238 | 
 239 | **Learn more:**
 240 | 
 241 | - [TUUI document](https://www.tuui.com/)
 242 | - [AIQL GitHub repository](https://github.com/AI-QL)
 243 | 
 244 | ### Amazon Q CLI
 245 | 
 246 | [Amazon Q CLI](https://github.com/aws/amazon-q-developer-cli) is an open-source, agentic coding assistant for terminals.
 247 | 
 248 | **Key features:**
 249 | 
 250 | - Full support for MCP servers.
 251 | - Edit prompts using your preferred text editor.
 252 | - Access saved prompts instantly with `@`.
 253 | - Control and organize AWS resources directly from your terminal.
 254 | - Tools, profiles, context management, auto-compact, and so much more!
 255 | 
 256 | **Get Started**
 257 | 
 258 | ```bash
 259 | brew install amazon-q
 260 | ```
 261 | 
 262 | ### Amazon Q IDE
 263 | 
 264 | [Amazon Q IDE](https://aws.amazon.com/q/developer) is an open-source, agentic coding assistant for IDEs.
 265 | 
 266 | **Key features:**
 267 | 
 268 | - Support for the VSCode, JetBrains, Visual Studio, and Eclipse IDEs.
 269 | - Control and organize AWS resources directly from your IDE.
 270 | - Manage permissions for each MCP tool via the IDE user interface.
 271 | 
 272 | ### Apify MCP Tester
 273 | 
 274 | [Apify MCP Tester](https://github.com/apify/tester-mcp-client) is an open-source client that connects to any MCP server using Server-Sent Events (SSE).
 275 | It is a standalone Apify Actor designed for testing MCP servers over SSE, with support for Authorization headers.
 276 | It uses plain JavaScript (old-school style) and is hosted on Apify, allowing you to run it without any setup.
 277 | 
 278 | **Key features:**
 279 | 
 280 | - Connects to any MCP server via SSE.
 281 | - Works with the [Apify MCP Server](https://apify.com/apify/actors-mcp-server) to interact with one or more Apify [Actors](https://apify.com/store).
 282 | - Dynamically utilizes tools based on context and user queries (if supported by the server).
 283 | 
 284 | ### Amp
 285 | 
 286 | [Amp](https://ampcode.com) is an agentic coding tool built by Sourcegraph. It runs in VS Code (and compatible forks like Cursor, Windsurf, and VSCodium) and as a command-line tool. It’s also multiplayer — you can share threads and collaborate with your team.
 287 | 
 288 | **Key features:**
 289 | 
 290 | - Granular control over enabled tools and permissions
 291 | - Support for MCP servers defined in VS Code `mcp.json`
 292 | 
 293 | ### Augment Code
 294 | 
 295 | [Augment Code](https://augmentcode.com) is an AI-powered coding platform for VS Code and JetBrains with autonomous agents, chat, and completions. Both local and remote agents are backed by full codebase awareness and native support for MCP, enabling enhanced context through external sources and tools.
 296 | 
 297 | **Key features:**
 298 | 
 299 | - Full MCP support in local and remote agents.
 300 | - Add additional context through MCP servers.
 301 | - Automate your development workflows with MCP tools.
 302 | - Works in VS Code and JetBrains IDEs.
 303 | 
 304 | ### BeeAI Framework
 305 | 
 306 | [BeeAI Framework](https://i-am-bee.github.io/beeai-framework) is an open-source framework for building, deploying, and serving powerful agentic workflows at scale. The framework includes the **MCP Tool**, a native feature that simplifies the integration of MCP servers into agentic workflows.
 307 | 
 308 | **Key features:**
 309 | 
 310 | - Seamlessly incorporate MCP tools into agentic workflows.
 311 | - Quickly instantiate framework-native tools from connected MCP client(s).
 312 | - Planned future support for agentic MCP capabilities.
 313 | 
 314 | **Learn more:**
 315 | 
 316 | - [Example of using MCP tools in agentic workflow](https://i-am-bee.github.io/beeai-framework/#/typescript/tools?id=using-the-mcptool-class)
 317 | 
 318 | ### BoltAI
 319 | 
 320 | [BoltAI](https://boltai.com) is a native, all-in-one AI chat client with MCP support. BoltAI supports multiple AI providers (OpenAI, Anthropic, Google AI...), including local AI models (via Ollama, LM Studio or LMX)
 321 | 
 322 | **Key features:**
 323 | 
 324 | - MCP Tool integrations: once configured, user can enable individual MCP server in each chat
 325 | - MCP quick setup: import configuration from Claude Desktop app or Cursor editor
 326 | - Invoke MCP tools inside any app with AI Command feature
 327 | - Integrate with remote MCP servers in the mobile app
 328 | 
 329 | **Learn more:**
 330 | 
 331 | - [BoltAI docs](https://boltai.com/docs/plugins/mcp-servers)
 332 | - [BoltAI website](https://boltai.com)
 333 | 
 334 | ### Call Chirp
 335 | 
 336 | [Call Chirp] https://www.call-chirp.com uses AI to capture every critical detail from your business conversations, automatically syncing insights to your CRM and project tools so you never miss another deal-closing moment.
 337 | 
 338 | **Key features:**
 339 | 
 340 | - Save transcriptions from Zoom, Google Meet, and more
 341 | - MCP Tools for voice AI agents
 342 | - Remote MCP servers support
 343 | 
 344 | ### ChatGPT
 345 | 
 346 | ChatGPT is OpenAI's AI assistant that provides MCP support for remote servers to conduct deep research.
 347 | 
 348 | **Key features:**
 349 | 
 350 | - Support for MCP via connections UI in settings
 351 | - Access to search tools from configured MCP servers for deep research
 352 | - Enterprise-grade security and compliance features
 353 | 
 354 | ### ChatWise
 355 | 
 356 | ChatWise is a desktop-optimized, high-performance chat application that lets you bring your own API keys. It supports a wide range of LLMs and integrates with MCP to enable tool workflows.
 357 | 
 358 | **Key features:**
 359 | 
 360 | - Tools support for MCP servers
 361 | - Offer built-in tools like web search, artifacts and image generation.
 362 | 
 363 | ### Claude Code
 364 | 
 365 | Claude Code is an interactive agentic coding tool from Anthropic that helps you code faster through natural language commands. It supports MCP integration for resources, prompts, tools, and roots, and also functions as an MCP server to integrate with other clients.
 366 | 
 367 | **Key features:**
 368 | 
 369 | - Full support for resources, prompts, tools, and roots from MCP servers
 370 | - Offers its own tools through an MCP server for integrating with other MCP clients
 371 | 
 372 | ### Claude.ai
 373 | 
 374 | [Claude.ai](https://claude.ai) is Anthropic's web-based AI assistant that provides MCP support for remote servers.
 375 | 
 376 | **Key features:**
 377 | 
 378 | - Support for remote MCP servers via integrations UI in settings
 379 | - Access to tools, prompts, and resources from configured MCP servers
 380 | - Seamless integration with Claude's conversational interface
 381 | - Enterprise-grade security and compliance features
 382 | 
 383 | ### Claude Desktop App
 384 | 
 385 | The Claude desktop application provides comprehensive support for MCP, enabling deep integration with local tools and data sources.
 386 | 
 387 | **Key features:**
 388 | 
 389 | - Full support for resources, allowing attachment of local files and data
 390 | - Support for prompt templates
 391 | - Tool integration for executing commands and scripts
 392 | - Local server connections for enhanced privacy and security
 393 | 
 394 | ### Chorus
 395 | 
 396 | [Chorus](https://chorus.sh) is a native Mac app for chatting with AIs. Chat with multiple models at once, run tools and MCPs, create projects, quick chat, bring your own key, all in a blazing fast, keyboard shortcut friendly app.
 397 | 
 398 | **Key features:**
 399 | 
 400 | - MCP support with one-click install
 401 | - Built in tools, like web search, terminal, and image generation
 402 | - Chat with multiple models at once (cloud or local)
 403 | - Create projects with scoped memory
 404 | - Quick chat with an AI that can see your screen
 405 | 
 406 | ### Cline
 407 | 
 408 | [Cline](https://github.com/cline/cline) is an autonomous coding agent in VS Code that edits files, runs commands, uses a browser, and more–with your permission at each step.
 409 | 
 410 | **Key features:**
 411 | 
 412 | - Create and add tools through natural language (e.g. "add a tool that searches the web")
 413 | - Share custom MCP servers Cline creates with others via the `~/Documents/Cline/MCP` directory
 414 | - Displays configured MCP servers along with their tools, resources, and any error logs
 415 | 
 416 | ### CodeGPT
 417 | 
 418 | [CodeGPT](https://codegpt.co) is a popular VS Code and Jetbrains extension that brings AI-powered coding assistance to your editor. It supports integration with MCP servers for tools, allowing users to leverage external AI capabilities directly within their development workflow.
 419 | 
 420 | **Key features:**
 421 | 
 422 | - Use MCP tools from any configured MCP server
 423 | - Seamless integration with VS Code and Jetbrains UI
 424 | - Supports multiple LLM providers and custom endpoints
 425 | 
 426 | **Learn more:**
 427 | 
 428 | - [CodeGPT Documentation](https://docs.codegpt.co/)
 429 | 
 430 | ### Continue
 431 | 
 432 | [Continue](https://github.com/continuedev/continue) is an open-source AI code assistant, with built-in support for all MCP features.
 433 | 
 434 | **Key features:**
 435 | 
 436 | - Type "@" to mention MCP resources
 437 | - Prompt templates surface as slash commands
 438 | - Use both built-in and MCP tools directly in chat
 439 | - Supports VS Code and JetBrains IDEs, with any LLM
 440 | 
 441 | ### Copilot-MCP
 442 | 
 443 | [Copilot-MCP](https://github.com/VikashLoomba/copilot-mcp) enables AI coding assistance via MCP.
 444 | 
 445 | **Key features:**
 446 | 
 447 | - Support for MCP tools and resources
 448 | - Integration with development workflows
 449 | - Extensible AI capabilities
 450 | 
 451 | ### Cursor
 452 | 
 453 | [Cursor](https://docs.cursor.com/advanced/model-context-protocol) is an AI code editor.
 454 | 
 455 | **Key features:**
 456 | 
 457 | - Support for MCP tools in Cursor Composer
 458 | - Support for both STDIO and SSE
 459 | 
 460 | ### Daydreams
 461 | 
 462 | [Daydreams](https://github.com/daydreamsai/daydreams) is a generative agent framework for executing anything onchain
 463 | 
 464 | **Key features:**
 465 | 
 466 | - Supports MCP Servers in config
 467 | - Exposes MCP Client
 468 | 
 469 | ### Emacs Mcp
 470 | 
 471 | [Emacs Mcp](https://github.com/lizqwerscott/mcp.el) is an Emacs client designed to interface with MCP servers, enabling seamless connections and interactions. It provides MCP tool invocation support for AI plugins like [gptel](https://github.com/karthink/gptel) and [llm](https://github.com/ahyatt/llm), adhering to Emacs' standard tool invocation format. This integration enhances the functionality of AI tools within the Emacs ecosystem.
 472 | 
 473 | **Key features:**
 474 | 
 475 | - Provides MCP tool support for Emacs.
 476 | 
 477 | ### fast-agent
 478 | 
 479 | [fast-agent](https://github.com/evalstate/fast-agent) is a Python Agent framework, with simple declarative support for creating Agents and Workflows, with full multi-modal support for Anthropic and OpenAI models.
 480 | 
 481 | **Key features:**
 482 | 
 483 | - PDF and Image support, based on MCP Native types
 484 | - Interactive front-end to develop and diagnose Agent applications, including passthrough and playback simulators
 485 | - Built in support for "Building Effective Agents" workflows.
 486 | - Deploy Agents as MCP Servers
 487 | 
 488 | ### FlowDown
 489 | 
 490 | [FlowDown](https://github.com/Lakr233/FlowDown) is a blazing fast and smooth client app for using AI/LLM, with a strong emphasis on privacy and user experience. It supports MCP servers to extend its capabilities with external tools, allowing users to build powerful, customized workflows.
 491 | 
 492 | **Key features:**
 493 | 
 494 | - **Seamless MCP Integration**: Easily connect to MCP servers to utilize a wide range of external tools.
 495 | - **Privacy-First Design**: Your data stays on your device. We don't collect any user data, ensuring complete privacy.
 496 | - **Lightweight & Efficient**: A compact and optimized design ensures a smooth and responsive experience with any AI model.
 497 | - **Broad Compatibility**: Works with all OpenAI-compatible service providers and supports local offline models through MLX.
 498 | - **Rich User Experience**: Features beautifully formatted Markdown, blazing-fast text rendering, and intelligent, automated chat titling.
 499 | 
 500 | **Learn more:**
 501 | 
 502 | - [FlowDown website](https://flowdown.ai/)
 503 | - [FlowDown documentation](https://apps.qaq.wiki/docs/flowdown/)
 504 | 
 505 | ### FLUJO
 506 | 
 507 | Think n8n + ChatGPT. FLUJO is an desktop application that integrates with MCP to provide a workflow-builder interface for AI interactions. Built with Next.js and React, it supports both online and offline (ollama) models, it manages API Keys and environment variables centrally and can install MCP Servers from GitHub. FLUJO has an ChatCompletions endpoint and flows can be executed from other AI applications like Cline, Roo or Claude.
 508 | 
 509 | **Key features:**
 510 | 
 511 | - Environment & API Key Management
 512 | - Model Management
 513 | - MCP Server Integration
 514 | - Workflow Orchestration
 515 | - Chat Interface
 516 | 
 517 | ### Genkit
 518 | 
 519 | [Genkit](https://github.com/firebase/genkit) is a cross-language SDK for building and integrating GenAI features into applications. The [genkitx-mcp](https://github.com/firebase/genkit/tree/main/js/plugins/mcp) plugin enables consuming MCP servers as a client or creating MCP servers from Genkit tools and prompts.
 520 | 
 521 | **Key features:**
 522 | 
 523 | - Client support for tools and prompts (resources partially supported)
 524 | - Rich discovery with support in Genkit's Dev UI playground
 525 | - Seamless interoperability with Genkit's existing tools and prompts
 526 | - Works across a wide variety of GenAI models from top providers
 527 | 
 528 | ### Glama
 529 | 
 530 | [Glama](https://glama.ai/chat) is a comprehensive AI workspace and integration platform that offers a unified interface to leading LLM providers, including OpenAI, Anthropic, and others. It supports the Model Context Protocol (MCP) ecosystem, enabling developers and enterprises to easily discover, build, and manage MCP servers.
 531 | 
 532 | **Key features:**
 533 | 
 534 | - Integrated [MCP Server Directory](https://glama.ai/mcp/servers)
 535 | - Integrated [MCP Tool Directory](https://glama.ai/mcp/tools)
 536 | - Host MCP servers and access them via the Chat or SSE endpoints
 537 |   – Ability to chat with multiple LLMs and MCP servers at once
 538 | - Upload and analyze local files and data
 539 | - Full-text search across all your chats and data
 540 | 
 541 | ### GenAIScript
 542 | 
 543 | Programmatically assemble prompts for LLMs using [GenAIScript](https://microsoft.github.io/genaiscript/) (in JavaScript). Orchestrate LLMs, tools, and data in JavaScript.
 544 | 
 545 | **Key features:**
 546 | 
 547 | - JavaScript toolbox to work with prompts
 548 | - Abstraction to make it easy and productive
 549 | - Seamless Visual Studio Code integration
 550 | 
 551 | ### Goose
 552 | 
 553 | [Goose](https://github.com/block/goose) is an open source AI agent that supercharges your software development by automating coding tasks.
 554 | 
 555 | **Key features:**
 556 | 
 557 | - Expose MCP functionality to Goose through tools.
 558 | - MCPs can be installed directly via the [extensions directory](https://block.github.io/goose/v1/extensions/), CLI, or UI.
 559 | - Goose allows you to extend its functionality by [building your own MCP servers](https://block.github.io/goose/docs/tutorials/custom-extensions).
 560 | - Includes built-in tools for development, web scraping, automation, memory, and integrations with JetBrains and Google Drive.
 561 | 
 562 | ### GitHub Copilot coding agent
 563 | 
 564 | Delegate tasks to [GitHub Copilot coding agent](https://docs.github.com/en/copilot/concepts/about-copilot-coding-agent) and let it work in the background while you stay focused on the highest-impact and most interesting work
 565 | 
 566 | **Key features:**
 567 | 
 568 | - Delegate tasks to Copilot from GitHub Issues, Visual Studio Code, GitHub Copilot Chat or from your favorite MCP host using the GitHub MCP Server
 569 | - Tailor Copilot to your project by [customizing the agent's development environment](https://docs.github.com/en/enterprise-cloud@latest/copilot/how-tos/agents/copilot-coding-agent/customizing-the-development-environment-for-copilot-coding-agent#preinstalling-tools-or-dependencies-in-copilots-environment) or [writing custom instructions](https://docs.github.com/en/enterprise-cloud@latest/copilot/how-tos/agents/copilot-coding-agent/best-practices-for-using-copilot-to-work-on-tasks#adding-custom-instructions-to-your-repository)
 570 | - [Augment Copilot's context and capabilities with MCP tools](https://docs.github.com/en/enterprise-cloud@latest/copilot/how-tos/agents/copilot-coding-agent/extending-copilot-coding-agent-with-mcp), with support for both local and remote MCP servers
 571 | 
 572 | ### gptme
 573 | 
 574 | [gptme](https://github.com/gptme/gptme) is a open-source terminal-based personal AI assistant/agent, designed to assist with programming tasks and general knowledge work.
 575 | 
 576 | **Key features:**
 577 | 
 578 | - CLI-first design with a focus on simplicity and ease of use
 579 | - Rich set of built-in tools for shell commands, Python execution, file operations, and web browsing
 580 | - Local-first approach with support for multiple LLM providers
 581 | - Open-source, built to be extensible and easy to modify
 582 | 
 583 | ### HyperAgent
 584 | 
 585 | [HyperAgent](https://github.com/hyperbrowserai/HyperAgent) is Playwright supercharged with AI. With HyperAgent, you no longer need brittle scripts, just powerful natural language commands. Using MCP servers, you can extend the capability of HyperAgent, without having to write any code.
 586 | 
 587 | **Key features:**
 588 | 
 589 | - AI Commands: Simple APIs like page.ai(), page.extract() and executeTask() for any AI automation
 590 | - Fallback to Regular Playwright: Use regular Playwright when AI isn't needed
 591 | - Stealth Mode – Avoid detection with built-in anti-bot patches
 592 | - Cloud Ready – Instantly scale to hundreds of sessions via [Hyperbrowser](https://www.hyperbrowser.ai/)
 593 | - MCP Client – Connect to tools like Composio for full workflows (e.g. writing web data to Google Sheets)
 594 | 
 595 | ### JetBrains AI Assistant
 596 | 
 597 | [JetBrains AI Assistant](https://plugins.jetbrains.com/plugin/22282-jetbrains-ai-assistant) plugin provides AI-powered features for software development available in all JetBrains IDEs.
 598 | 
 599 | **Key features:**
 600 | 
 601 | - Unlimited code completion powered by Mellum, JetBrains’ proprietary AI model.
 602 | - Context-aware AI chat that understands your code and helps you in real time.
 603 | - Access to top-tier models from OpenAI, Anthropic, and Google.
 604 | - Offline mode with connected local LLMs via Ollama or LM Studio.
 605 | - Deep integration into IDE workflows, including code suggestions in the editor, VCS assistance, runtime error explanation, and more.
 606 | 
 607 | ### Kilo Code
 608 | 
 609 | [Kilo Code](https://github.com/Kilo-Org/kilocode) is an autonomous coding AI dev team in VS Code that edits files, runs commands, uses a browser, and more.
 610 | 
 611 | **Key features:**
 612 | 
 613 | - Create and add tools through natural language (e.g. "add a tool that searches the web")
 614 | - Discover MCP servers via the MCP Marketplace
 615 | - One click MCP server installs via MCP Marketplace
 616 | - Displays configured MCP servers along with their tools, resources, and any error logs
 617 | 
 618 | ### Klavis AI Slack/Discord/Web
 619 | 
 620 | [Klavis AI](https://www.klavis.ai/) is an Open-Source Infra to Use, Build & Scale MCPs with ease.
 621 | 
 622 | **Key features:**
 623 | 
 624 | - Slack/Discord/Web MCP clients for using MCPs directly
 625 | - Simple web UI dashboard for easy MCP configuration
 626 | - Direct OAuth integration with Slack & Discord Clients and MCP Servers for secure user authentication
 627 | - SSE transport support
 628 | - Open-source infrastructure ([GitHub repository](https://github.com/Klavis-AI/klavis))
 629 | 
 630 | **Learn more:**
 631 | 
 632 | - [Demo video showing MCP usage in Slack/Discord](https://youtu.be/9-QQAhrQWw8)
 633 | 
 634 | ### LibreChat
 635 | 
 636 | [LibreChat](https://github.com/danny-avila/LibreChat) is an open-source, customizable AI chat UI that supports multiple AI providers, now including MCP integration.
 637 | 
 638 | **Key features:**
 639 | 
 640 | - Extend current tool ecosystem, including [Code Interpreter](https://www.librechat.ai/docs/features/code_interpreter) and Image generation tools, through MCP servers
 641 | - Add tools to customizable [Agents](https://www.librechat.ai/docs/features/agents), using a variety of LLMs from top providers
 642 | - Open-source and self-hostable, with secure multi-user support
 643 | - Future roadmap includes expanded MCP feature support
 644 | 
 645 | ### LM Studio
 646 | 
 647 | [LM Studio](https://lmstudio.ai) is a cross-platform desktop app for discovering, downloading, and running open-source LLMs locally. You can now connect local models to tools via Model Context Protocol (MCP).
 648 | 
 649 | **Key features:**
 650 | 
 651 | - Use MCP servers with local models on your computer. Add entries to `mcp.json` and save to get started.
 652 | - Tool confirmation UI: when a model calls a tool, you can confirm the call in the LM Studio app.
 653 | - Cross-platform: runs on macOS, Windows, and Linux, one-click installer with no need to fiddle in the command line
 654 | - Supports GGUF (llama.cpp) or MLX models with GPU acceleration
 655 | - GUI & terminal mode: use the LM Studio app or CLI (lms) for scripting and automation
 656 | 
 657 | **Learn more:**
 658 | 
 659 | - [Docs: Using MCP in LM Studio](https://lmstudio.ai/docs/app/plugins/mcp)
 660 | - [Create a 'Add to LM Studio' button for your server](https://lmstudio.ai/docs/app/plugins/mcp/deeplink)
 661 | - [Announcement blog: LM Studio + MCP](https://lmstudio.ai/blog/mcp)
 662 | 
 663 | ### Lutra
 664 | 
 665 | [Lutra](https://lutra.ai) is an AI agent that transforms conversations into actionable, automated workflows.
 666 | 
 667 | **Key features:**
 668 | 
 669 | - Easy MCP Integration: Connecting Lutra to MCP servers is as simple as providing the server URL; Lutra handles the rest behind the scenes.
 670 | - Chat to Take Action: Lutra understands your conversational context and goals, automatically integrating with your existing apps to perform tasks.
 671 | - Reusable Playbooks: After completing a task, save the steps as reusable, automated workflows—simplifying repeatable processes and reducing manual effort.
 672 | - Shareable Automations: Easily share your saved playbooks with teammates to standardize best practices and accelerate collaborative workflows.
 673 | 
 674 | **Learn more:**
 675 | 
 676 | - [Lutra AI agent explained](https://www.youtube.com/watch?v=W5ZpN0cMY70)
 677 | 
 678 | ### mcp-agent
 679 | 
 680 | [mcp-agent] is a simple, composable framework to build agents using Model Context Protocol.
 681 | 
 682 | **Key features:**
 683 | 
 684 | - Automatic connection management of MCP servers.
 685 | - Expose tools from multiple servers to an LLM.
 686 | - Implements every pattern defined in [Building Effective Agents](https://www.anthropic.com/research/building-effective-agents).
 687 | - Supports workflow pause/resume signals, such as waiting for human feedback.
 688 | 
 689 | ### mcp-client-chatbot
 690 | 
 691 | [mcp-client-chatbot](https://github.com/cgoinglove/mcp-client-chatbot) is a local-first chatbot built with Vercel's Next.js, AI SDK, and Shadcn UI.
 692 | 
 693 | **Key features:**
 694 | 
 695 | - It supports standard MCP tool calling and includes both a custom MCP server and a standalone UI for testing MCP tools outside the chat flow.
 696 | - All MCP tools are provided to the LLM by default, but the project also includes an optional `@toolname` mention feature to make tool invocation more explicit—particularly useful when connecting to multiple MCP servers with many tools.
 697 | - Visual workflow builder that lets you create custom tools by chaining LLM nodes and MCP tools together. Published workflows become callable as `@workflow_name` tools in chat, enabling complex multi-step automation sequences.
 698 | 
 699 | ### mcp-use
 700 | 
 701 | [mcp-use] is an open source python library to very easily connect any LLM to any MCP server both locally and remotely.
 702 | 
 703 | **Key features:**
 704 | 
 705 | - Very simple interface to connect any LLM to any MCP.
 706 | - Support the creation of custom agents, workflows.
 707 | - Supports connection to multiple MCP servers simultaneously.
 708 | - Supports all langchain supported models, also locally.
 709 | - Offers efficient tool orchestration and search functionalities.
 710 | 
 711 | ### modelcontextchat.com
 712 | 
 713 | [modelcontextchat.com](https://modelcontextchat.com) is a web-based MCP client designed for working with remote MCP servers, featuring comprehensive authentication support and integration with OpenRouter.
 714 | 
 715 | **Key features:**
 716 | 
 717 | - Web-based interface for remote MCP server connections
 718 | - Header-based Authorization support for secure server access
 719 | - OAuth authentication integration
 720 | - OpenRouter API Key support for accessing various LLM providers
 721 | - No installation required - accessible from any web browser
 722 | 
 723 | ### MCPHub
 724 | 
 725 | [MCPHub] is a powerful Neovim plugin that integrates MCP (Model Context Protocol) servers into your workflow.
 726 | 
 727 | **Key features:**
 728 | 
 729 | - Install, configure and manage MCP servers with an intuitive UI.
 730 | - Built-in Neovim MCP server with support for file operations (read, write, search, replace), command execution, terminal integration, LSP integration, buffers, and diagnostics.
 731 | - Create Lua-based MCP servers directly in Neovim.
 732 | - Inegrates with popular Neovim chat plugins Avante.nvim and CodeCompanion.nvim
 733 | 
 734 | ### MCPOmni-Connect
 735 | 
 736 | [MCPOmni-Connect](https://github.com/Abiorh001/mcp_omni_connect) is a versatile command-line interface (CLI) client designed to connect to various Model Context Protocol (MCP) servers using both stdio and SSE transport.
 737 | 
 738 | **Key features:**
 739 | 
 740 | - Support for resources, prompts, tools, and sampling
 741 | - Agentic mode with ReAct and orchestrator capabilities
 742 | - Seamless integration with OpenAI models and other LLMs
 743 | - Dynamic tool and resource management across multiple servers
 744 | - Support for both stdio and SSE transport protocols
 745 | - Comprehensive tool orchestration and resource analysis capabilities
 746 | 
 747 | ### Memex
 748 | 
 749 | [Memex](https://memex.tech/) is the first MCP client and MCP server builder - all-in-one desktop app. Unlike traditional MCP clients that only consume existing servers, Memex can create custom MCP servers from natural language prompts, immediately integrate them into its toolkit, and use them to solve problems—all within a single conversation.
 750 | 
 751 | **Key features:**
 752 | 
 753 | - **Prompt-to-MCP Server**: Generate fully functional MCP servers from natural language descriptions
 754 | - **Self-Testing & Debugging**: Autonomously test, debug, and improve created MCP servers
 755 | - **Universal MCP Client**: Works with any MCP server through intuitive, natural language integration
 756 | - **Curated MCP Directory**: Access to tested, one-click installable MCP servers (Neon, Netlify, GitHub, Context7, and more)
 757 | - **Multi-Server Orchestration**: Leverage multiple MCP servers simultaneously for complex workflows
 758 | 
 759 | **Learn more:**
 760 | 
 761 | - [Memex Launch 2: MCP Teams and Agent API](https://memex.tech/blog/memex-launch-2-mcp-teams-and-agent-api-private-preview-125f)
 762 | 
 763 | ### Microsoft Copilot Studio
 764 | 
 765 | [Microsoft Copilot Studio] is a robust SaaS platform designed for building custom AI-driven applications and intelligent agents, empowering developers to create, deploy, and manage sophisticated AI solutions.
 766 | 
 767 | **Key features:**
 768 | 
 769 | - Support for MCP tools
 770 | - Extend Copilot Studio agents with MCP servers
 771 | - Leveraging Microsoft unified, governed, and secure API management solutions
 772 | 
 773 | ### MindPal
 774 | 
 775 | [MindPal](https://mindpal.io) is a no-code platform for building and running AI agents and multi-agent workflows for business processes.
 776 | 
 777 | **Key features:**
 778 | 
 779 | - Build custom AI agents with no-code
 780 | - Connect any SSE MCP server to extend agent tools
 781 | - Create multi-agent workflows for complex business processes
 782 | - User-friendly for both technical and non-technical professionals
 783 | - Ongoing development with continuous improvement of MCP support
 784 | 
 785 | **Learn more:**
 786 | 
 787 | - [MindPal MCP Documentation](https://docs.mindpal.io/agent/mcp)
 788 | 
 789 | ### MooPoint
 790 | 
 791 | [MooPoint](https://moopoint.io)
 792 | 
 793 | MooPoint is a web-based AI chat platform built for developers and advanced users, letting you interact with multiple large language models (LLMs) through a single, unified interface. Connect your own API keys (OpenAI, Anthropic, and more) and securely manage custom MCP server integrations.
 794 | 
 795 | **Key features:**
 796 | 
 797 | - Accessible from any PC or smartphone—no installation required
 798 | - Choose your preferred LLM provider
 799 | - Supports `SSE`, `Streamable HTTP`, `npx`, and `uvx` MCP servers
 800 | - OAuth and sampling support
 801 | - New features added daily
 802 | 
 803 | ### Msty Studio
 804 | 
 805 | [Msty Studio](https://msty.ai) is a privacy-first AI productivity platform that seamlessly integrates local and online language models (LLMs) into customizable workflows. Designed for both technical and non-technical users, Msty Studio offers a suite of tools to enhance AI interactions, automate tasks, and maintain full control over data and model behavior.
 806 | 
 807 | **Key features:**
 808 | 
 809 | - **Toolbox & Toolsets**: Connect AI models to local tools and scripts using MCP-compliant configurations. Group tools into Toolsets to enable dynamic, multi-step workflows within conversations.
 810 | - **Turnstiles**: Create automated, multi-step AI interactions, allowing for complex data processing and decision-making flows.
 811 | - **Real-Time Data Integration**: Enhance AI responses with up-to-date information by integrating real-time web search capabilities.
 812 | - **Split Chats & Branching**: Engage in parallel conversations with multiple models simultaneously, enabling comparative analysis and diverse perspectives.
 813 | 
 814 | **Learn more:**
 815 | 
 816 | - [Msty Studio Documentation](https://docs.msty.studio/features/toolbox/tools)
 817 | 
 818 | ### NVIDIA Agent Intelligence (AIQ) toolkit
 819 | 
 820 | [NVIDIA Agent Intelligence (AIQ) toolkit](https://github.com/NVIDIA/AIQToolkit) is a flexible, lightweight, and unifying library that allows you to easily connect existing enterprise agents to data sources and tools across any framework.
 821 | 
 822 | **Key features:**
 823 | 
 824 | - Acts as an MCP **client** to consume remote tools
 825 | - Acts as an MCP **server** to expose tools
 826 | - Framework agnostic and compatible with LangChain, CrewAI, Semantic Kernel, and custom agents
 827 | - Includes built-in observability and evaluation tools
 828 | 
 829 | **Learn more:**
 830 | 
 831 | - [AIQ toolkit GitHub repository](https://github.com/NVIDIA/AIQToolkit)
 832 | - [AIQ toolkit MCP documentation](https://docs.nvidia.com/aiqtoolkit/latest/workflows/mcp/index.html)
 833 | 
 834 | ### OpenSumi
 835 | 
 836 | [OpenSumi](https://github.com/opensumi/core) is a framework helps you quickly build AI Native IDE products.
 837 | 
 838 | **Key features:**
 839 | 
 840 | - Supports MCP tools in OpenSumi
 841 | - Supports built-in IDE MCP servers and custom MCP servers
 842 | 
 843 | ### oterm
 844 | 
 845 | [oterm] is a terminal client for Ollama allowing users to create chats/agents.
 846 | 
 847 | **Key features:**
 848 | 
 849 | - Support for multiple fully customizable chat sessions with Ollama connected with tools.
 850 | - Support for MCP tools.
 851 | 
 852 | ### Roo Code
 853 | 
 854 | [Roo Code](https://roocode.com) enables AI coding assistance via MCP.
 855 | 
 856 | **Key features:**
 857 | 
 858 | - Support for MCP tools and resources
 859 | - Integration with development workflows
 860 | - Extensible AI capabilities
 861 | 
 862 | ### Postman
 863 | 
 864 | [Postman](https://postman.com/downloads) is the most popular API client and now supports MCP server testing and debugging.
 865 | 
 866 | **Key features:**
 867 | 
 868 | - Full support of all major MCP features (tools, prompts, resources, and subscriptions)
 869 | - Fast, seamless UI for debugging MCP capabilities
 870 | - MCP config integration (Claude, VSCode, etc.) for fast first-time experience in testing MCPs
 871 | - Integration with history, variables, and collections for reuse and collaboration
 872 | 
 873 | ### RecurseChat
 874 | 
 875 | [RecurseChat](https://recurse.chat) is a powerful, fast, local-first chat client with MCP support. RecurseChat supports multiple AI providers including LLaMA.cpp, Ollama, and OpenAI, Anthropic.
 876 | 
 877 | **Key features:**
 878 | 
 879 | - Local AI: Support MCP with Ollama models.
 880 | - MCP Tools: Individual MCP server management. Easily visualize the connection states of MCP servers.
 881 | - MCP Import: Import configuration from Claude Desktop app or JSON
 882 | 
 883 | **Learn more:**
 884 | 
 885 | - [RecurseChat docs](https://recurse.chat/docs/features/mcp/)
 886 | 
 887 | ### Shortwave
 888 | 
 889 | [Shortwave](https://www.shortwave.com) is an AI-powered email client that supports MCP tools to enhance email productivity and workflow automation.
 890 | 
 891 | **Key features:**
 892 | 
 893 | - MCP tool integration for enhanced email workflows
 894 | - Rich UI for adding, managing and interacting with a wide range of MCP servers
 895 | - Support for both remote (Streamable HTTP and SSE) and local (Stdio) MCP servers
 896 | - AI assistance for managing your emails, calendar, tasks and other third-party services
 897 | 
 898 | ### Slack MCP Client
 899 | 
 900 | [Slack MCP Client](https://github.com/tuannvm/slack-mcp-client) acts as a bridge between Slack and Model Context Protocol (MCP) servers. Using Slack as the interface, it enables large language models (LLMs) to connect and interact with various MCP servers through standardized MCP tools.
 901 | 
 902 | **Key features:**
 903 | 
 904 | - **Supports Popular LLM Providers:** Integrates seamlessly with leading large language model providers such as OpenAI, Anthropic, and Ollama, allowing users to leverage advanced conversational AI and orchestration capabilities within Slack.
 905 | - **Dynamic and Secure Integration:** Supports dynamic registration of MCP tools, works in both channels and direct messages and manages credentials securely via environment variables or Kubernetes secrets.
 906 | - **Easy Deployment and Extensibility:** Offers official Docker images, a Helm chart for Kubernetes, and Docker Compose for local development, making it simple to deploy, configure, and extend with additional MCP servers or tools.
 907 | 
 908 | ### Sourcegraph Cody
 909 | 
 910 | [Cody](https://openctx.org/docs/providers/modelcontextprotocol) is Sourcegraph's AI coding assistant, which implements MCP through OpenCTX.
 911 | 
 912 | **Key features:**
 913 | 
 914 | - Support for MCP resources
 915 | - Integration with Sourcegraph's code intelligence
 916 | - Uses OpenCTX as an abstraction layer
 917 | - Future support planned for additional MCP features
 918 | 
 919 | ### SpinAI
 920 | 
 921 | [SpinAI](https://spinai.dev) is an open-source TypeScript framework for building observable AI agents. The framework provides native MCP compatibility, allowing agents to seamlessly integrate with MCP servers and tools.
 922 | 
 923 | **Key features:**
 924 | 
 925 | - Built-in MCP compatibility for AI agents
 926 | - Open-source TypeScript framework
 927 | - Observable agent architecture
 928 | - Native support for MCP tools integration
 929 | 
 930 | ### Superinterface
 931 | 
 932 | [Superinterface](https://superinterface.ai) is AI infrastructure and a developer platform to build in-app AI assistants with support for MCP, interactive components, client-side function calling and more.
 933 | 
 934 | **Key features:**
 935 | 
 936 | - Use tools from MCP servers in assistants embedded via React components or script tags
 937 | - SSE transport support
 938 | - Use any AI model from any AI provider (OpenAI, Anthropic, Ollama, others)
 939 | 
 940 | ### Superjoin
 941 | 
 942 | [Superjoin](https://superjoin.ai) brings the power of MCP directly into Google Sheets extension. With Superjoin, users can access and invoke MCP tools and agents without leaving their spreadsheets, enabling powerful AI workflows and automation right where their data lives.
 943 | 
 944 | **Key features:**
 945 | 
 946 | - Native Google Sheets add-on providing effortless access to MCP capabilities
 947 | - Supports OAuth 2.1 and header-based authentication for secure and flexible connections
 948 | - Compatible with both SSE and Streamable HTTP transport for efficient, real-time streaming communication
 949 | - Fully web-based, cross-platform client requiring no additional software installation
 950 | 
 951 | ### systemprompt
 952 | 
 953 | [systemprompt](https://systemprompt.io) is a voice-controlled mobile app that manages your MCP servers. Securely leverage MCP agents from your pocket. Available on iOS and Android.
 954 | 
 955 | **Key features:**
 956 | 
 957 | - **Native Mobile Experience**: Access and manage your MCP servers anytime, anywhere on both Android and iOS devices
 958 | - **Advanced AI-Powered Voice Recognition**: Sophisticated voice recognition engine enhanced with cutting-edge AI and Natural Language Processing (NLP), specifically tuned to understand complex developer terminology and command structures
 959 | - **Unified Multi-MCP Server Management**: Effortlessly manage and interact with multiple Model Context Protocol (MCP) servers from a single, centralized mobile application
 960 | 
 961 | ### Tambo
 962 | 
 963 | [Tambo](https://tambo.co) is a platform for building custom chat experiences in React, with integrated custom user interface components.
 964 | 
 965 | **Key features:**
 966 | 
 967 | - Hosted platform with React SDK for integrating chat or other LLM-based experiences into your own app.
 968 | - Support for selection of arbitrary React components in the chat experience, with state management and tool calling.
 969 | - Support for MCP servers, from Tambo's servers or directly from the browser.
 970 | - Supports OAuth 2.1 and custom header-based authentication.
 971 | - Support for MCP tools, with additional MCP features coming soon.
 972 | 
 973 | ### Tencent CloudBase AI DevKit
 974 | 
 975 | [Tencent CloudBase AI DevKit](https://docs.cloudbase.net/ai/agent/mcp) is a tool for building AI agents in minutes, featuring zero-code tools, secure data integration, and extensible plugins via MCP.
 976 | 
 977 | **Key features:**
 978 | 
 979 | - Support for MCP tools
 980 | - Extend agents with MCP servers
 981 | - MCP servers hosting: serverless hosting and authentication support
 982 | 
 983 | ### TheiaAI/TheiaIDE
 984 | 
 985 | [Theia AI](https://eclipsesource.com/blogs/2024/10/07/introducing-theia-ai/) is a framework for building AI-enhanced tools and IDEs. The [AI-powered Theia IDE](https://eclipsesource.com/blogs/2024/10/08/introducting-ai-theia-ide/) is an open and flexible development environment built on Theia AI.
 986 | 
 987 | **Key features:**
 988 | 
 989 | - **Tool Integration**: Theia AI enables AI agents, including those in the Theia IDE, to utilize MCP servers for seamless tool interaction.
 990 | - **Customizable Prompts**: The Theia IDE allows users to define and adapt prompts, dynamically integrating MCP servers for tailored workflows.
 991 | - **Custom agents**: The Theia IDE supports creating custom agents that leverage MCP capabilities, enabling users to design dedicated workflows on the fly.
 992 | 
 993 | Theia AI and Theia IDE's MCP integration provide users with flexibility, making them powerful platforms for exploring and adapting MCP.
 994 | 
 995 | **Learn more:**
 996 | 
 997 | - [Theia IDE and Theia AI MCP Announcement](https://eclipsesource.com/blogs/2024/12/19/theia-ide-and-theia-ai-support-mcp/)
 998 | - [Download the AI-powered Theia IDE](https://theia-ide.org/)
 999 | 
1000 | ### Tome
1001 | 
1002 | [Tome](https://github.com/runebookai/tome) is an open source cross-platform desktop app designed for working with local LLMs and MCP servers. It is designed to be beginner friendly and abstract away the nitty gritty of configuration for people getting started with MCP.
1003 | 
1004 | **Key features:**
1005 | 
1006 | - MCP servers are managed by Tome so there is no need to install uv or npm or configure JSON
1007 | - Users can quickly add or remove MCP servers via UI
1008 | - Any tool-supported local model on Ollama is compatible
1009 | 
1010 | ### TypingMind App
1011 | 
1012 | [TypingMind](https://www.typingmind.com) is an advanced frontend for LLMs with MCP support. TypingMind supports all popular LLM providers like OpenAI, Gemini, Claude, and users can use with their own API keys.
1013 | 
1014 | **Key features:**
1015 | 
1016 | - **MCP Tool Integration**: Once MCP is configured, MCP tools will show up as plugins that can be enabled/disabled easily via the main app interface.
1017 | - **Assign MCP Tools to Agents**: TypingMind allows users to create AI agents that have a set of MCP servers assigned.
1018 | - **Remote MCP servers**: Allows users to customize where to run the MCP servers via its MCP Connector configuration, allowing the use of MCP tools across multiple devices (laptop, mobile devices, etc.) or control MCP servers from a remote private server.
1019 | 
1020 | **Learn more:**
1021 | 
1022 | - [TypingMind MCP Document](https://www.typingmind.com/mcp)
1023 | - [Download TypingMind (PWA)](https://www.typingmind.com/)
1024 | 
1025 | ### VS Code GitHub Copilot
1026 | 
1027 | [VS Code](https://code.visualstudio.com/) integrates MCP with GitHub Copilot through [agent mode](https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode), allowing direct interaction with MCP-provided tools within your agentic coding workflow. Configure servers in Claude Desktop, workspace or user settings, with guided MCP installation and secure handling of keys in input variables to avoid leaking hard-coded keys.
1028 | 
1029 | **Key features:**
1030 | 
1031 | - Support for stdio and server-sent events (SSE) transport
1032 | - Per-session selection of tools per agent session for optimal performance
1033 | - Easy server debugging with restart commands and output logging
1034 | - Tool calls with editable inputs and always-allow toggle
1035 | - Integration with existing VS Code extension system to register MCP servers from extensions
1036 | 
1037 | ### Warp
1038 | 
1039 | [Warp](https://www.warp.dev/) is the intelligent terminal with AI and your dev team's knowledge built-in. With natural language capabilities integrated directly into an agentic command line, Warp enables developers to code, automate, and collaborate more efficiently -- all within a terminal that features a modern UX.
1040 | 
1041 | **Key features:**
1042 | 
1043 | - **Agent Mode with MCP support**: invoke tools and access data from MCP servers using natural language prompts
1044 | - **Flexible server management**: add and manage CLI or SSE-based MCP servers via Warp's built-in UI
1045 | - **Live tool/resource discovery**: view tools and resources from each running MCP server
1046 | - **Configurable startup**: set MCP servers to start automatically with Warp or launch them manually as needed
1047 | 
1048 | ### WhatsMCP
1049 | 
1050 | [WhatsMCP](https://wassist.app/mcp/) is an MCP client for WhatsApp. WhatsMCP lets you interact with your AI stack from the comfort of a WhatsApp chat.
1051 | 
1052 | **Key features:**
1053 | 
1054 | - Supports MCP tools
1055 | - SSE transport, full OAuth2 support
1056 | - Chat flow management for WhatsApp messages
1057 | - One click setup for connecting to your MCP servers
1058 | - In chat management of MCP servers
1059 | - Oauth flow natively supported in WhatsApp
1060 | 
1061 | ### Windsurf Editor
1062 | 
1063 | [Windsurf Editor](https://codeium.com/windsurf) is an agentic IDE that combines AI assistance with developer workflows. It features an innovative AI Flow system that enables both collaborative and independent AI interactions while maintaining developer control.
1064 | 
1065 | **Key features:**
1066 | 
1067 | - Revolutionary AI Flow paradigm for human-AI collaboration
1068 | - Intelligent code generation and understanding
1069 | - Rich development tools with multi-model support
1070 | 
1071 | ### Witsy
1072 | 
1073 | [Witsy](https://github.com/nbonamy/witsy) is an AI desktop assistant, supporting Anthropic models and MCP servers as LLM tools.
1074 | 
1075 | **Key features:**
1076 | 
1077 | - Multiple MCP servers support
1078 | - Tool integration for executing commands and scripts
1079 | - Local server connections for enhanced privacy and security
1080 | - Easy-install from Smithery.ai
1081 | - Open-source, available for macOS, Windows and Linux
1082 | 
1083 | ### Zed
1084 | 
1085 | [Zed](https://zed.dev/docs/assistant/model-context-protocol) is a high-performance code editor with built-in MCP support, focusing on prompt templates and tool integration.
1086 | 
1087 | **Key features:**
1088 | 
1089 | - Prompt templates surface as slash commands in the editor
1090 | - Tool integration for enhanced coding workflows
1091 | - Tight integration with editor features and workspace context
1092 | - Does not support MCP resources
1093 | 
1094 | ### Zencoder
1095 | 
1096 | [Zencoder](https://zecoder.ai) is a coding agent that's available as an extension for VS Code and JetBrains family of IDEs, meeting developers where they already work. It comes with RepoGrokking (deep contextual codebase understanding), agentic pipeline, and the ability to create and share custom agents.
1097 | 
1098 | **Key features:**
1099 | 
1100 | - RepoGrokking - deep contextual understanding of codebases
1101 | - Agentic pipeline - runs, tests, and executes code before outputting it
1102 | - Zen Agents platform - ability to build and create custom agents and share with the team
1103 | - Integrated MCP tool library with one-click installations
1104 | - Specialized agents for Unit and E2E Testing
1105 | 
1106 | **Learn more:**
1107 | 
1108 | - [Zencoder Documentation](https://docs.zencoder.ai)
1109 | 
1110 | ## Adding MCP support to your application
1111 | 
1112 | If you've added MCP support to your application, we encourage you to submit a pull request to add it to this list. MCP integration can provide your users with powerful contextual AI capabilities and make your application part of the growing MCP ecosystem.
1113 | 
1114 | Benefits of adding MCP support:
1115 | 
1116 | - Enable users to bring their own context and tools
1117 | - Join a growing ecosystem of interoperable AI applications
1118 | - Provide users with flexible integration options
1119 | - Support local-first AI workflows
1120 | 
1121 | To get started with implementing MCP in your application, check out our [Python](https://github.com/modelcontextprotocol/python-sdk) or [TypeScript SDK Documentation](https://github.com/modelcontextprotocol/typescript-sdk)
1122 | 
1123 | ## Updates and corrections
1124 | 
1125 | This list is maintained by the community. If you notice any inaccuracies or would like to update information about MCP support in your application, please submit a pull request or [open an issue in our documentation repository](https://github.com/modelcontextprotocol/modelcontextprotocol/issues).
1126 | 


--------------------------------------------------------------------------------
/docs/community/communication.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Contributor Communication
  3 | description: Communication strategy and framework for the Model Context Protocol community
  4 | ---
  5 | 
  6 | This document explains how to communicate and collaborate within the Model Context Protocol (MCP) project.
  7 | 
  8 | ## Communication Channels
  9 | 
 10 | In short:
 11 | 
 12 | - **[Discord][discord-join]**: For real-time or ad-hoc discussions.
 13 | - **[GitHub Discussions](https://github.com/modelcontextprotocol/modelcontextprotocol/discussions)**: For structured, longer-form discussions.
 14 | - **[GitHub Issues](https://github.com/modelcontextprotocol/modelcontextprotocol/issues)**: For actionable tasks, bug reports, and feature requests.
 15 | - **For security-sensitive issues**: Follow the process in [SECURITY.md](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/SECURITY.md).
 16 | 
 17 | All communication is governed by our [Code of Conduct](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/CODE_OF_CONDUCT.md). We expect all participants to maintain respectful, professional, and inclusive interactions across all channels.
 18 | 
 19 | ### Discord
 20 | 
 21 | For real-time contributor discussion and collaboration. The server is designed around **MCP contributors** and is not intended
 22 | to be a place for general MCP support.
 23 | 
 24 | The Discord server will have both public and private channels.
 25 | 
 26 | [Join the Discord server here][discord-join].
 27 | 
 28 | #### Public Channels (Default)
 29 | 
 30 | - **Purpose**: Open community engagement, collaborative development, and transparent project coordination.
 31 | - Primary use cases:
 32 |   - **Public SDK and tooling development**: All development, from ideation to release planning, happens in public channels (e.g., `#typescript-sdk-dev`, `#inspector-dev`).
 33 |   - **Working and interest group discussions** (`#client-implementors`, `#agents-wg`, etc.)
 34 |     - **Working Group**: Some specific goal or project in mind (such as an SDK, inspector, registry, server-identity, load-balancing, etc).
 35 |     - **Interest Group**: An abstract gathering of folks that might raise a range of various topics. Some might get actioned on as one-offs, others might spin into Working Groups.
 36 |   - **Community onboarding** and contribution guidance.
 37 |   - **Community feedback** and collaborative brainstorming.
 38 |   - Public **office hours** and **maintainer availability**.
 39 | - Avoid:
 40 |   - MCP user support: participants are expected to read official documentation and start new GitHub Discussions for questions or support.
 41 |   - Service or product marketing: interactions on this Discord are expected to be vendor-neutral and not used for brand-building or sales. Mentions of brands or products are discouraged outside of being used as examples or responses to conversations that start off focused on the specification.
 42 | 
 43 | #### Private channels (Exceptions)
 44 | 
 45 | - **Purpose**: Confidential coordination and sensitive matters that cannot be discussed publicly. Access will be restricted to designated maintainers.
 46 | - **Strict criteria for private use**:
 47 |   - **Security incidents** (CVEs, protocol vulnerabilities).
 48 |   - **People matters** (maintainer-related discussions, code of conduct policies).
 49 |   - Select channels will be configured to be **read-only**. This can be good for example for maintainer decision making.
 50 |   - Coordination requiring **immediate** or otherwise **focused response** with a limited audience.
 51 | - **Transparency**:
 52 |   - **All technical and governance decisions** affecting the community **must be documented** in GitHub Discussions and/or Issues, and will be labeled with `notes`.
 53 |   - **Some matters related to individual contributors** may remain private when appropriate (e.g., personal circumstances, disciplinary actions, or other sensitive individual matters).
 54 |   - Private channels are to be used as **temporary "incident rooms,"** not for routine development.
 55 | 
 56 | Any significant discussion on Discord that leads to a potential decision or proposal must be moved to a GitHub Discussion or GitHub Issue to create a persistent, searchable record. Proposals will then be promoted to full-fledged PRs with associated work items (GitHub Issues) as needed.
 57 | 
 58 | ### GitHub Discussions
 59 | 
 60 | For structured, long-form discussion and debate on project direction, features, improvements, and community topics.
 61 | 
 62 | When to use:
 63 | 
 64 | - Project roadmap planning and milestone discussions
 65 | - Announcements and release communications
 66 | - Community polls and consensus-building processes
 67 | - Feature requests with context and rationale
 68 |   - If a particular repository does not have GitHub Discussions enabled, feel free to open a GitHub Issue instead.
 69 | 
 70 | ### GitHub Issues
 71 | 
 72 | For bug reports, feature tracking, and actionable development tasks.
 73 | 
 74 | When to use:
 75 | 
 76 | - Submit SEP proposals (following the [SEP guidelines](./sep-guidelines))
 77 | - Bug reports with reproducible steps
 78 | - Documentation improvements with specific scope
 79 | - CI/CD problems and infrastructure issues
 80 | - Release tasks and milestone tracking
 81 | 
 82 | ### Security Issues
 83 | 
 84 | **Do not post security issues publicly.** Instead:
 85 | 
 86 | 1. Use the private security reporting process. For protocol-level security issues, follow the process in [SECURITY.md in the modelcontextprotocol GitHub repository](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/SECURITY.md).
 87 | 2. Contact lead and/or [core maintainers](./governance#current-core-maintainers) directly.
 88 | 3. Follow responsible disclosure guidelines.
 89 | 
 90 | ## Decision Records
 91 | 
 92 | All MCP decisions are documented and captured in public channels.
 93 | 
 94 | - **Technical decisions**: [GitHub Issues](https://github.com/modelcontextprotocol/modelcontextprotocol/issues) and SEPs.
 95 | - **Specification changes**: [On the Model Context Protocol website](https://modelcontextprotocol.io/specification/draft/changelog).
 96 | - **Process changes**: [Community documentation](https://modelcontextprotocol.io/community/governance).
 97 | - **Governance decisions and updates**: [GitHub Issues](https://github.com/modelcontextprotocol/modelcontextprotocol/issues) and SEPs.
 98 | 
 99 | When documenting decisions, we will retain as much context as possible:
100 | 
101 | - Decision makers
102 | - Background context and motivation
103 | - Options that were considered
104 | - Rationale for the chosen approach
105 | - Implementation steps
106 | 
107 | [discord-join]: https://discord.gg/6CSzBmMkjX
108 | 


--------------------------------------------------------------------------------
/docs/community/governance.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Governance and Stewardship
  3 | description: Learn about the Model Context Protocol's governance structure and how to participate in the community
  4 | ---
  5 | 
  6 | The Model Context Protocol (MCP) follows a formal governance model to ensure transparent decision-making and community participation. This document outlines how the project is organized and how decisions are made.
  7 | 
  8 | ## Technical Governance
  9 | 
 10 | The MCP project adopts a hierarchical structure, similar to Python, PyTorch and other open source projects:
 11 | 
 12 | - A community of **contributors** who file issues, make pull requests, and contribute to the project.
 13 | - A small set of **maintainers** drive components within the MCP project, such as SDKs, documentation, and others.
 14 | - Contributors and maintainers are overseen by **core maintainers**, who drive the overall project direction.
 15 | - The core maintainers have two **lead core maintainers** who are the catch-all decision makers.
 16 | - Maintainers, core maintainers, and lead core maintainers form the **MCP steering group**.
 17 | 
 18 | All maintainers are expected to have a strong bias towards MCP's design philosophy. Membership in the technical governance process is for individuals, not companies. That is, there are no seats reserved for specific companies, and membership is associated with the person rather than the company employing that person. This ensures that maintainers act in the best interests of the protocol itself and the open source community.
 19 | 
 20 | ### Channels
 21 | 
 22 | Technical Governance is facilitated through a shared [Discord server](/community/communication#discord) of all **maintainers, core maintainers** and **lead maintainers**. Each maintainer group can choose additional communication channels, but all decisions and their supporting discussions must be recorded and made transparently available on the Discord server.
 23 | 
 24 | ### Maintainers
 25 | 
 26 | Maintainers are responsible for individual projects or technical working groups within the MCP project. These generally are independent repositories such as language-specific SDKs, but can also extend to subdirectories of a repository, such as the MCP documentation. Maintainers may adopt their own rules and procedures for making decisions. Maintainers are expected to make decisions for their respective projects independently, but can defer or escalate to the core maintainers when needed.
 27 | 
 28 | Maintainers are responsible for the:
 29 | 
 30 | - Thoughtful and productive engagement with community contributors,
 31 | - Maintaining and improving their respective area of the MCP project,
 32 | - Supporting documentation, roadmaps and other adjacent parts of the MCP project,
 33 | - Present ideas from community to core.
 34 | 
 35 | Maintainers are encouraged to propose additional maintainers when needed. Maintainers can only be appointed and removed by core maintainers or lead core maintainers at any time and without reason.
 36 | 
 37 | Maintainers have write and/or admin access to their respective repositories.
 38 | 
 39 | ### Core Maintainers
 40 | 
 41 | The core maintainers are expected to have a deep understanding of the Model Context Protocol and its specification. Their responsibilities include:
 42 | 
 43 | - Designing, reviewing and steering the evolution of the MCP specification, as well as all other parts of the MCP project, such as documentation,
 44 | - Articulating a cohesive long-term vision for the project,
 45 | - Mediating and resolving contentious issues with fairness and transparency, seeking consensus where possible while making decisive choices when necessary,
 46 | - Appoint or remove maintainers,
 47 | - Stewardship of the MCP project in the best interest of MCP.
 48 | 
 49 | The core maintainers as a group have the power to veto any decisions made by maintainers by majority vote. The core maintainers have power to resolve disputes as they see fit. The core maintainers should publicly articulate their decision-making. The core group is responsible for adopting their own procedures for making decisions.
 50 | 
 51 | Core maintainers generally have write and admin access to all MCP repositories, but should use the same contribution (usually pull-requests) mechanism as outside contributors. Exceptions can be made based on security considerations.
 52 | 
 53 | ### Lead Maintainers (BDFL)
 54 | 
 55 | MCP has two lead maintainers: Justin Spahr-Summers and David Soria Parra. Lead Maintainers can veto any decision by core maintainers or maintainers. This model is also commonly known as Benevolent Dictator for Life (BDFL) in the open source community. The Lead Maintainers should publicly articulate their decision-making and give clear reasoning for their decisions. Lead maintainers are part of the core maintainer group.
 56 | 
 57 | The Lead Maintainers are responsible for confirming or removing core maintainers.
 58 | 
 59 | Lead Maintainers are administrators on all infrastructure for the MCP project where possible. This includes but is not restricted to all communication channels, GitHub organizations and repositories.
 60 | 
 61 | ### Decision Process
 62 | 
 63 | The core maintainer group meets every two weeks to discuss and vote on proposals, as well as discuss any topics needed. The shared Discord server can be used to discuss and vote on smaller proposals if needed.
 64 | 
 65 | The lead maintainer, core maintainer, and maintainer group should attempt to meet in person every three to six months.
 66 | 
 67 | ## Processes
 68 | 
 69 | Core and lead maintainers are responsible for all aspects of Model Context Protocol, including documentation, issues, suggestions for content, and all other parts under the [MCP project](https://github.com/modelcontextprotocol). Maintainers are responsible for documentation, issues, and suggestions of content for their area of the MCP project, but are encouraged to partake in general maintenance of the MCP projects. Maintainers, core maintainers, and lead maintainers should use the same contribution process as external contributors, rather than making direct changes to repos. This provides insight into intent and opportunity for discussion.
 70 | 
 71 | ### Projects and Working Groups
 72 | 
 73 | The MCP project is organized into two main structures: projects and working groups.
 74 | 
 75 | Projects are concrete components maintained in dedicated repositories. These include the Specification, TypeScript SDK, Go SDK, Inspector, and other implementation artifacts.
 76 | 
 77 | Working groups are forums for collaboration where interested parties discuss specific aspects of MCP without maintaining code repositories. These include groups focused on transport protocols, client implementation, and other cross-cutting concerns.
 78 | 
 79 | #### Governance Principles
 80 | 
 81 | All projects and working groups are self-governed while adhering to these core principles:
 82 | 
 83 | 1. Clear contribution and decision-making processes
 84 | 2. Open communication and transparent decisions
 85 | 
 86 | Both must:
 87 | 
 88 | - Document their contribution process
 89 | - Maintain transparent communication
 90 | - Make decisions publicly (working groups must publish meeting notes and proposals)
 91 | 
 92 | Projects and working groups without specified processes default to:
 93 | 
 94 | - GitHub pull requests and issues for contributions
 95 | - A public channel in the official [MCP Contributor Discord](/community/communication#discord)
 96 | 
 97 | #### Maintenance Responsibilities
 98 | 
 99 | Components without dedicated maintainers (such as documentation) fall under core maintainer responsibility. These follow standard contribution guidelines through pull requests, with maintainers handling reviews and escalating to core maintainer review for any significant changes.
100 | 
101 | Core maintainers and maintainers are encouraged to improve any part of the MCP project, regardless of formal maintenance assignments.
102 | 
103 | ### Specification Project
104 | 
105 | #### Specification Enhancement Proposal (SEP)
106 | 
107 | Proposed changes to the specification must come in the form of a written version, starting with a summary of the proposal, outlining the **problem** it tries to solve, propose **solution**, **alternatives**, **considerations, outcomes** and **risks**. The [SEP Guidelines](/community/sep-guidelines) outline information on the expected structure of SEPs. SEP's should be created as issues in the [specification repository](https://github.com/modelcontextprotocol/specification) and tagged with the labels `proposal, sep`.
108 | 
109 | All proposals must have a **sponsor** from the MCP steering group (maintainer, core maintainer or lead core maintainer). The sponsor is responsible for ensuring that the proposal is actively developed, meets the quality standard for proposals and is responsible for presenting and discussing it in meetings of core maintainers. Maintainer and Core Maintainer groups should review open proposals without sponsors in regular intervals. Proposals that do not find a sponsor within six months are automatically rejected.
110 | 
111 | Once proposals have a sponsor, they are assigned to the sponsor and are tagged `draft`.
112 | 
113 | ## Communication
114 | 
115 | ### Core Maintainer Meetings
116 | 
117 | The core maintainer group meets on a bi-weekly basis to discuss proposals and the project. Notes on proposals should be made public. The core maintainer group will strive to meet in person every 3-6 months.
118 | 
119 | ### Public Chat
120 | 
121 | The MCP project maintains a [public Discord server](/community/communication#discord) with open chats for interest groups. The MCP project may have private channels for certain communications.
122 | 
123 | ## Nominating, Confirming and Removing Maintainers
124 | 
125 | ### The Principles
126 | 
127 | - Membership in module maintainer groups is given to **individuals** on merit basis after they demonstrated strong expertise of their area of work through contributions, reviews, and discussions and are aligned with the overall MCP direction.
128 | - For membership in the **maintainer** group the individual has to demonstrate strong and continued alignment with the overall MCP principles.
129 | - No term limits for module maintainers or core maintainers
130 | - Light criteria of moving working-group or sub-project maintenance to 'emeritus' status if they don't actively participate over long periods of time. Each maintainer group may define the inactive period that's appropriate for their area.
131 | - The membership is for an individual, not a company.
132 | 
133 | ### Nomination and Removal
134 | 
135 | - Core Maintainers are responsible for adding and removing maintainers. They will take the consideration of existing maintainers into account.
136 | - The lead maintainers are responsible for adding and removing core maintainers.
137 | 
138 | ## Current Core Maintainers
139 | 
140 | - Inna Harper
141 | - Basil Hosmer
142 | - Paul Carleton
143 | - Nick Cooper
144 | - Nick Aldridge
145 | - Che Liu
146 | - Den Delimarsky
147 | 
148 | ## Current Maintainers and Working Groups
149 | 
150 | Refer to [the maintainer list](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/MAINTAINERS.md).
151 | 


--------------------------------------------------------------------------------
/docs/community/sep-guidelines.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: SEP Guidelines
  3 | description: Specification Enhancement Proposal (SEP) guidelines for proposing changes to the Model Context Protocol
  4 | ---
  5 | 
  6 | ## What is a SEP?
  7 | 
  8 | SEP stands for Specification Enhancement Proposal. A SEP is a design document providing information to the MCP community, or describing a new feature for the Model Context Protocol or its processes or environment. The SEP should provide a concise technical specification of the feature and a rationale for the feature.
  9 | 
 10 | We intend SEPs to be the primary mechanisms for proposing major new features, for collecting community input on an issue, and for documenting the design decisions that have gone into MCP. The SEP author is responsible for building consensus within the community and documenting dissenting opinions.
 11 | 
 12 | Because the SEPs are maintained as text files in a versioned repository (GitHub Issues), their revision history is the historical record of the feature proposal.
 13 | 
 14 | ## What qualifies a SEP?
 15 | 
 16 | The goal is to reserve the SEP process for changes that are substantial enough to require broad community discussion, a formal design document, and a historical record of the decision-making process. A regular GitHub issue or pull request is often more appropriate for smaller, more direct changes.
 17 | 
 18 | Consider proposing a SEP if your change involves any of the following:
 19 | 
 20 | - **A New Feature or Protocol Change**: Any change that adds, modifies, or removes features in the Model Context Protocol. This includes:
 21 |   - Adding new API endpoints or methods.
 22 |   - Changing the syntax or semantics of existing data structures or messages.
 23 |   - Introducing a new standard for interoperability between different MCP-compatible tools.
 24 |   - Significant changes to how the specification itself is defined, presented, or validated.
 25 | - **A Breaking Change**: Any change that is not backwards-compatible.
 26 | - **A Change to Governance or Process**: Any proposal that alters the project's decision-making, contribution guidelines (like this document itself).
 27 | - **A Complex or Controversial Topic**: If a change is likely to have multiple valid solutions or generate significant debate, the SEP process provides the necessary framework to explore alternatives, document the rationale, and build community consensus before implementation begins.
 28 | 
 29 | ## SEP Types
 30 | 
 31 | There are three kinds of SEP:
 32 | 
 33 | 1. **Standards Track** SEP describes a new feature or implementation for the Model Context Protocol. It may also describe an interoperability standard that will be supported outside the core protocol specification.
 34 | 2. **Informational** SEP describes a Model Context Protocol design issue, or provides general guidelines or information to the MCP community, but does not propose a new feature. Informational SEPs do not necessarily represent an MCP community consensus or recommendation.
 35 | 3. **Process** SEP describes a process surrounding MCP, or proposes a change to (or an event in) a process. Process SEPs are like Standards Track SEPs but apply to areas other than the MCP protocol itself.
 36 | 
 37 | ## Submitting a SEP
 38 | 
 39 | The SEP process begins with a new idea for the Model Context Protocol. It is highly recommended that a single SEP contain a single key proposal or new idea. Small enhancements or patches often don't need a SEP and can be injected into the MCP development workflow with a pull request to the MCP repo. The more focused the SEP, the more successful it tends to be.
 40 | 
 41 | Each SEP must have an **SEP author** -- someone who writes the SEP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea. The SEP author should first attempt to ascertain whether the idea is SEP-able. Posting to the MCP community forums (Discord, GitHub Discussions) is the best way to go about this.
 42 | 
 43 | ### SEP Workflow
 44 | 
 45 | SEPs should be submitted as a GitHub Issue in the [specification repository](https://github.com/modelcontextprotocol/modelcontextprotocol). The standard SEP workflow is:
 46 | 
 47 | 1. You, the SEP author, create a [well-formatted](#sep-format) GitHub Issue with the `SEP` and `proposal` tags. The SEP number is the same as the GitHub Issue number, the two can be used interchangably.
 48 | 2. Find a Core Maintainer or Maintainer to sponsor your proposal. Core Maintainers and Maintainers will regularly go over the list of open proposals to determine which proposals to sponsor. You can tag relevant maintainers from [the maintainer list](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/MAINTAINERS.md) in your proposal.
 49 | 3. Once a sponsor is found, the GitHub Issue is assigned to the sponsor. The sponsor will add the `draft` tag, ensure the SEP number is in the title, and assign a milestone.
 50 | 4. The sponsor will informally review the proposal and may request changes based on community feedback. When ready for formal review, the sponsor will add the `in-review` tag.
 51 | 5. After the `in-review` tag is added, the SEP enters formal review by the Core Maintainers team. The SEP may be accepted, rejected, or returned for revision.
 52 | 6. If the SEP has not found a sponsor within three months, Core Maintainers may close the SEP as `dormant`.
 53 | 
 54 | ### SEP Format
 55 | 
 56 | Each SEP should have the following parts:
 57 | 
 58 | 1. **Preamble** -- A short descriptive title, the names and contact info for each author, the current status.
 59 | 2. **Abstract** -- A short (~200 word) description of the technical issue being addressed.
 60 | 3. **Motivation** -- The motivation should clearly explain why the existing protocol specification is inadequate to address the problem that the SEP solves. The motivation is critical for SEPs that want to change the Model Context Protocol. SEP submissions without sufficient motivation may be rejected outright.
 61 | 4. **Specification** -- The technical specification should describe the syntax and semantics of any new protocol feature. The specification should be detailed enough to allow competing, interoperable implementations. A PR with the changes to the specification should be provided.
 62 | 5. **Rationale** -- The rationale explains why particular design decisions were made. It should describe alternate designs that were considered and related work. The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
 63 | 6. **Backward Compatibility** -- All SEPs that introduce backward incompatibilities must include a section describing these incompatibilities and their severity. The SEP must explain how the author proposes to deal with these incompatibilities.
 64 | 7. **Reference Implementation** -- The reference implementation must be completed before any SEP is given status "Final", but it need not be completed before the SEP is accepted. While there is merit to the approach of reaching consensus on the specification and rationale before writing code, the principle of "rough consensus and running code" is still useful when it comes to resolving many discussions of protocol details.
 65 | 8. **Security Implications** -- If there are security concerns in relation to the SEP, those concerns should be explicitly written out to make sure reviewers of the SEP are aware of them.
 66 | 
 67 | ### SEP States
 68 | 
 69 | SEPs can be one one of the following states
 70 | 
 71 | - `proposal`: SEP proposal without a sponsor.
 72 | - `draft`: SEP proposal with a sponsor.
 73 | - `in-review`: SEP proposal ready for review.
 74 | - `accepted`: SEP accepted by Core Maintainers, but still requires final wording and reference implementation.
 75 | - `rejected`: SEP rejected by Core Maintainers.
 76 | - `withdrawn`: SEP withdrawn.
 77 | - `final`: SEP finalized.
 78 | - `superseded`: SEP has been replaced by a newer SEP.
 79 | - `dormant`: SEP that has not found sponsors and was subsequently closed.
 80 | 
 81 | ### SEP Review & Resolution
 82 | 
 83 | SEPs are reviewed by the MCP Core Maintainers team on a bi-weekly basis.
 84 | 
 85 | For a SEP to be accepted it must meet certain minimum criteria:
 86 | 
 87 | - A prototype implementation demonstrating the proposal
 88 | - Clear benefit to the MCP ecosystem
 89 | - Community support and consensus
 90 | 
 91 | Once a SEP has been accepted, the reference implementation must be completed. When the reference implementation is complete and incorporated into the main source code repository, the status will be changed to "Final".
 92 | 
 93 | A SEP can also be "Rejected" or "Withdrawn". A SEP that is "Withdrawn" may be re-submitted at a later date.
 94 | 
 95 | ## Reporting SEP Bugs, or Submitting SEP Updates
 96 | 
 97 | How you report a bug, or submit a SEP update depends on several factors, such as the maturity of the SEP, the preferences of the SEP author, and the nature of your comments. For SEPs not yet reaching `final` state, it's probably best to send your comments and changes directly to the SEP author. Once SEP is finalized, you may want to submit corrections as a GitHub comment on the issue or pull request to the reference implementation.
 98 | 
 99 | ## Transferring SEP Ownership
100 | 
101 | It occasionally becomes necessary to transfer ownership of SEPs to a new SEP author. In general, we'd like to retain the original author as a co-author of the transferred SEP, but that's really up to the original author. A good reason to transfer ownership is because the original author no longer has the time or interest in updating it or following through with the SEP process, or has fallen off the face of the 'net (i.e. is unreachable or not responding to email). A bad reason to transfer ownership is because you don't agree with the direction of the SEP. We try to build consensus around a SEP, but if that's not possible, you can always submit a competing SEP.
102 | 
103 | ## Copyright
104 | 
105 | This document is placed in the public domain or under the CC0-1.0-Universal license, whichever is more permissive.
106 | 


--------------------------------------------------------------------------------
/docs/development/contributing.mdx:
--------------------------------------------------------------------------------
1 | ---
2 | title: Contributing
3 | description: How to participate in Model Context Protocol development
4 | ---
5 | 
6 | {/* NB: hidden from docs, deprecated page */}
7 | 
8 | We welcome contributions from the community! Most repositories should have a README.md or CONTRIBUTING.md file with instructions for how to get started.
9 | 


--------------------------------------------------------------------------------
/docs/development/roadmap.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Roadmap
 3 | description: Our plans for evolving Model Context Protocol
 4 | ---
 5 | 
 6 | <Info>Last updated: **2025-07-22**</Info>
 7 | 
 8 | The Model Context Protocol is rapidly evolving. This page outlines our current thinking on key priorities and direction for approximately **the next six months**, though these may change significantly as the project develops. To see what's changed recently, check out the **[specification changelog](/specification/2025-06-18/changelog/)**.
 9 | 
10 | <Note>
11 | 
12 | The ideas presented here are not commitments—we may solve these challenges differently than described, or some may not materialize at all. This is also not an _exhaustive_ list; we may incorporate work that isn't mentioned here.
13 | 
14 | </Note>
15 | 
16 | We value community participation! Each section links to relevant discussions where you can learn more and contribute your thoughts.
17 | 
18 | For a technical view of our standardization process, visit the [Standards Track](https://github.com/orgs/modelcontextprotocol/projects/2/views/2) on GitHub, which tracks how proposals progress toward inclusion in the official [MCP specification](https://spec.modelcontextprotocol.io).
19 | 
20 | ## Agents
21 | 
22 | As MCP increasingly becomes part of agentic workflows, we're focusing on key improvements:
23 | 
24 | - **Asynchronous Operations**: supporting long-running operations that may take extended periods, with resilient handling of disconnections and reconnections
25 | 
26 | ## Authentication and Security
27 | 
28 | We're evolving our authorization and security resources to improve user safety and provide a better developer experience:
29 | 
30 | - **Guides and Best Practices**: documenting specifics about deploying MCP securely in the form of guides and best practices to help developers avoid common pitfalls.
31 | - **Alternatives to Dynamic Client Registration (DCR)**: exploring alternatives to DCR, attempting to address operational challenges while preserving a smooth user experience.
32 | - **Fine-grained Authorization**: developing mechanisms and guidelines for primitive authorization for sensitive actions
33 | - **Enterprise Managed Authorization**: adding the capability for enterprises to simplify MCP server authorization with the help of Single Sign-On (SSO)
34 | - **Secure Authorization Elicitation**: enable developers to integrate secure authorization flows for downstream APIs outside the main MCP server authorization
35 | 
36 | ## Validation
37 | 
38 | To foster a robust developer ecosystem, we plan to invest in:
39 | 
40 | - **Reference Client Implementations**: demonstrating protocol features with high-quality AI applications
41 | - **Reference Server Implementation**: showcasing authentication patterns and remote deployment best practices
42 | - **Compliance Test Suites**: automated verification that clients, servers, and SDKs properly implement the specification
43 | 
44 | These tools will help developers confidently implement MCP while ensuring consistent behavior across the ecosystem.
45 | 
46 | ## Registry
47 | 
48 | For MCP to reach its full potential, we need streamlined ways to distribute and discover MCP servers.
49 | 
50 | We plan to develop an [**MCP Registry**](https://github.com/orgs/modelcontextprotocol/discussions/159) that will enable centralized server discovery and metadata. This registry will primarily function as an API layer that third-party marketplaces and discovery services can build upon.
51 | 
52 | ## Multimodality
53 | 
54 | Supporting the full spectrum of AI capabilities in MCP, including:
55 | 
56 | - **Additional Modalities**: video and other media types
57 | - **[Streaming](https://github.com/modelcontextprotocol/specification/issues/117)**: multipart, chunked messages, and bidirectional communication for interactive experiences
58 | 
59 | ## Get Involved
60 | 
61 | We welcome your contributions to MCP's future! Join our [GitHub Discussions](https://github.com/orgs/modelcontextprotocol/discussions) to share ideas, provide feedback, or participate in the development process.
62 | 


--------------------------------------------------------------------------------
/docs/docs.json:
--------------------------------------------------------------------------------
  1 | {
  2 |   "$schema": "https://mintlify.com/docs.json",
  3 |   "theme": "mint",
  4 |   "name": "Model Context Protocol",
  5 |   "colors": {
  6 |     "primary": "#09090b",
  7 |     "light": "#FAFAFA",
  8 |     "dark": "#09090b"
  9 |   },
 10 |   "favicon": "/favicon.svg",
 11 |   "navbar": {
 12 |     "links": [
 13 |       {
 14 |         "label": "Blog",
 15 |         "href": "https://blog.modelcontextprotocol.io"
 16 |       },
 17 |       {
 18 |         "label": "GitHub",
 19 |         "href": "https://github.com/modelcontextprotocol"
 20 |       }
 21 |     ]
 22 |   },
 23 |   "navigation": {
 24 |     "tabs": [
 25 |       {
 26 |         "tab": "Documentation",
 27 |         "pages": [
 28 |           "docs/getting-started/intro",
 29 |           "docs/sdk",
 30 |           {
 31 |             "group": "Concepts",
 32 |             "pages": [
 33 |               "docs/learn/architecture",
 34 |               "docs/learn/server-concepts",
 35 |               "docs/learn/client-concepts",
 36 |               "specification/versioning"
 37 |             ]
 38 |           },
 39 |           {
 40 |             "group": "Tutorials",
 41 |             "pages": [
 42 |               {
 43 |                 "group": "Using MCP",
 44 |                 "pages": [
 45 |                   "docs/tutorials/use-remote-mcp-server",
 46 |                   "quickstart/user"
 47 |                 ]
 48 |               },
 49 |               {
 50 |                 "group": "Server Development",
 51 |                 "pages": [
 52 |                   "quickstart/server",
 53 |                   "legacy/tools/inspector"
 54 |                 ]
 55 |               },
 56 |               {
 57 |                 "group": "Client Development",
 58 |                 "pages": [
 59 |                   "quickstart/client"
 60 |                 ]
 61 |               }
 62 |             ]
 63 |           },
 64 |           "faqs"
 65 |         ]
 66 |       },
 67 |       {
 68 |         "tab": "Specification",
 69 |         "versions": [
 70 |           {
 71 |             "version": "Version 2025-06-18 (latest)",
 72 |             "pages": [
 73 |               "specification/2025-06-18/index",
 74 |               "specification/2025-06-18/changelog",
 75 |               "specification/2025-06-18/architecture/index",
 76 |               {
 77 |                 "group": "Base Protocol",
 78 |                 "pages": [
 79 |                   "specification/2025-06-18/basic/index",
 80 |                   "specification/2025-06-18/basic/lifecycle",
 81 |                   "specification/2025-06-18/basic/transports",
 82 |                   "specification/2025-06-18/basic/authorization",
 83 |                   "specification/2025-06-18/basic/security_best_practices",
 84 |                   {
 85 |                     "group": "Utilities",
 86 |                     "pages": [
 87 |                       "specification/2025-06-18/basic/utilities/cancellation",
 88 |                       "specification/2025-06-18/basic/utilities/ping",
 89 |                       "specification/2025-06-18/basic/utilities/progress"
 90 |                     ]
 91 |                   }
 92 |                 ]
 93 |               },
 94 |               {
 95 |                 "group": "Client Features",
 96 |                 "pages": [
 97 |                   "specification/2025-06-18/client/roots",
 98 |                   "specification/2025-06-18/client/sampling",
 99 |                   "specification/2025-06-18/client/elicitation"
100 |                 ]
101 |               },
102 |               {
103 |                 "group": "Server Features",
104 |                 "pages": [
105 |                   "specification/2025-06-18/server/index",
106 |                   "specification/2025-06-18/server/prompts",
107 |                   "specification/2025-06-18/server/resources",
108 |                   "specification/2025-06-18/server/tools",
109 |                   {
110 |                     "group": "Utilities",
111 |                     "pages": [
112 |                       "specification/2025-06-18/server/utilities/completion",
113 |                       "specification/2025-06-18/server/utilities/logging",
114 |                       "specification/2025-06-18/server/utilities/pagination"
115 |                     ]
116 |                   }
117 |                 ]
118 |               },
119 |               "specification/2025-06-18/schema"
120 |             ]
121 |           },
122 |           {
123 |             "version": "Version 2025-03-26",
124 |             "pages": [
125 |               "specification/2025-03-26/index",
126 |               "specification/2025-03-26/changelog",
127 |               "specification/2025-03-26/architecture/index",
128 |               {
129 |                 "group": "Base Protocol",
130 |                 "pages": [
131 |                   "specification/2025-03-26/basic/index",
132 |                   "specification/2025-03-26/basic/lifecycle",
133 |                   "specification/2025-03-26/basic/transports",
134 |                   "specification/2025-03-26/basic/authorization",
135 |                   {
136 |                     "group": "Utilities",
137 |                     "pages": [
138 |                       "specification/2025-03-26/basic/utilities/cancellation",
139 |                       "specification/2025-03-26/basic/utilities/ping",
140 |                       "specification/2025-03-26/basic/utilities/progress"
141 |                     ]
142 |                   }
143 |                 ]
144 |               },
145 |               {
146 |                 "group": "Client Features",
147 |                 "pages": [
148 |                   "specification/2025-03-26/client/roots",
149 |                   "specification/2025-03-26/client/sampling"
150 |                 ]
151 |               },
152 |               {
153 |                 "group": "Server Features",
154 |                 "pages": [
155 |                   "specification/2025-03-26/server/index",
156 |                   "specification/2025-03-26/server/prompts",
157 |                   "specification/2025-03-26/server/resources",
158 |                   "specification/2025-03-26/server/tools",
159 |                   {
160 |                     "group": "Utilities",
161 |                     "pages": [
162 |                       "specification/2025-03-26/server/utilities/completion",
163 |                       "specification/2025-03-26/server/utilities/logging",
164 |                       "specification/2025-03-26/server/utilities/pagination"
165 |                     ]
166 |                   }
167 |                 ]
168 |               }
169 |             ]
170 |           },
171 |           {
172 |             "version": "Version 2024-11-05",
173 |             "pages": [
174 |               "specification/2024-11-05/index",
175 |               "specification/2024-11-05/architecture/index",
176 |               {
177 |                 "group": "Base Protocol",
178 |                 "pages": [
179 |                   "specification/2024-11-05/basic/index",
180 |                   "specification/2024-11-05/basic/lifecycle",
181 |                   "specification/2024-11-05/basic/messages",
182 |                   "specification/2024-11-05/basic/transports",
183 |                   {
184 |                     "group": "Utilities",
185 |                     "pages": [
186 |                       "specification/2024-11-05/basic/utilities/cancellation",
187 |                       "specification/2024-11-05/basic/utilities/ping",
188 |                       "specification/2024-11-05/basic/utilities/progress"
189 |                     ]
190 |                   }
191 |                 ]
192 |               },
193 |               {
194 |                 "group": "Client Features",
195 |                 "pages": [
196 |                   "specification/2024-11-05/client/roots",
197 |                   "specification/2024-11-05/client/sampling"
198 |                 ]
199 |               },
200 |               {
201 |                 "group": "Server Features",
202 |                 "pages": [
203 |                   "specification/2024-11-05/server/index",
204 |                   "specification/2024-11-05/server/prompts",
205 |                   "specification/2024-11-05/server/resources",
206 |                   "specification/2024-11-05/server/tools",
207 |                   {
208 |                     "group": "Utilities",
209 |                     "pages": [
210 |                       "specification/2024-11-05/server/utilities/completion",
211 |                       "specification/2024-11-05/server/utilities/logging",
212 |                       "specification/2024-11-05/server/utilities/pagination"
213 |                     ]
214 |                   }
215 |                 ]
216 |               }
217 |             ]
218 |           },
219 |           {
220 |             "version": "Draft",
221 |             "pages": [
222 |               "specification/draft/index",
223 |               "specification/draft/changelog",
224 |               "specification/draft/architecture/index",
225 |               {
226 |                 "group": "Base Protocol",
227 |                 "pages": [
228 |                   "specification/draft/basic/index",
229 |                   "specification/draft/basic/lifecycle",
230 |                   "specification/draft/basic/transports",
231 |                   "specification/draft/basic/authorization",
232 |                   "specification/draft/basic/security_best_practices",
233 |                   {
234 |                     "group": "Utilities",
235 |                     "pages": [
236 |                       "specification/draft/basic/utilities/cancellation",
237 |                       "specification/draft/basic/utilities/ping",
238 |                       "specification/draft/basic/utilities/progress"
239 |                     ]
240 |                   }
241 |                 ]
242 |               },
243 |               {
244 |                 "group": "Client Features",
245 |                 "pages": [
246 |                   "specification/draft/client/roots",
247 |                   "specification/draft/client/sampling",
248 |                   "specification/draft/client/elicitation"
249 |                 ]
250 |               },
251 |               {
252 |                 "group": "Server Features",
253 |                 "pages": [
254 |                   "specification/draft/server/index",
255 |                   "specification/draft/server/prompts",
256 |                   "specification/draft/server/resources",
257 |                   "specification/draft/server/tools",
258 |                   {
259 |                     "group": "Utilities",
260 |                     "pages": [
261 |                       "specification/draft/server/utilities/completion",
262 |                       "specification/draft/server/utilities/logging",
263 |                       "specification/draft/server/utilities/pagination"
264 |                     ]
265 |                   }
266 |                 ]
267 |               },
268 |               "specification/draft/schema"
269 |             ]
270 |           }
271 |         ]
272 |       },
273 |       {
274 |         "tab": "Community",
275 |         "pages": [
276 |           "community/communication",
277 |           "community/governance",
278 |           "community/sep-guidelines",
279 |           "development/roadmap",
280 |           "clients",
281 |           "examples"
282 |         ]
283 |       },
284 |       {
285 |         "tab": "About MCP",
286 |         "pages": ["about/index"]
287 |       }
288 |     ]
289 |   },
290 |   "logo": {
291 |     "light": "/logo/light.svg",
292 |     "dark": "/logo/dark.svg"
293 |   },
294 |   "seo": {
295 |     "metatags": {
296 |       "og:image": "https://raw.githubusercontent.com/modelcontextprotocol/docs/2eb6171ddbfeefde349dc3b8d5e2b87414c26250/images/og-image.png"
297 |     },
298 |     "indexing": "navigable"
299 |   },
300 |   "footer": {
301 |     "socials": {
302 |       "github": "https://github.com/modelcontextprotocol"
303 |     }
304 |   },
305 |   "redirects": [
306 |     {
307 |       "source": "/tutorials/building-a-client",
308 |       "destination": "/quickstart/client"
309 |     },
310 |     {
311 |       "source": "/quickstart",
312 |       "destination": "/quickstart/server"
313 |     },
314 |     {
315 |       "source": "/specification/latest",
316 |       "destination": "/specification/2025-06-18",
317 |       "permanent": false
318 |     },
319 |     {
320 |       "source": "/docs/concepts/architecture",
321 |       "destination": "/docs/learn/architecture"
322 |     },
323 |     {
324 |       "source": "/docs/concepts/elicitation",
325 |       "destination": "/specification/2025-06-18/client/elicitation"
326 |     },
327 |     {
328 |       "source": "/docs/concepts/prompts",
329 |       "destination": "/specification/2025-06-18/server/prompts"
330 |     },
331 |     {
332 |       "source": "/docs/concepts/resources",
333 |       "destination": "/specification/2025-06-18/server/resources"
334 |     },
335 |     {
336 |       "source": "/docs/concepts/roots",
337 |       "destination": "/specification/2025-06-18/client/roots"
338 |     },
339 |     {
340 |       "source": "/docs/concepts/sampling",
341 |       "destination": "/specification/2025-06-18/client/sampling"
342 |     },
343 |     {
344 |       "source": "/docs/concepts/tools",
345 |       "destination": "/specification/2025-06-18/server/tools"
346 |     },
347 |     {
348 |       "source": "/docs/concepts/transports",
349 |       "destination": "/specification/2025-06-18/basic/transports"
350 |     },
351 |     {
352 |       "source": "/docs/tools/debugging",
353 |       "destination": "/legacy/tools/debugging"
354 |     },
355 |     {
356 |       "source": "/docs/tools/inspector",
357 |       "destination": "/legacy/tools/inspector"
358 |     },
359 |     {
360 |       "source": "/introduction",
361 |       "destination": "/docs/getting-started/intro"
362 |     },
363 |     {
364 |       "source": "/docs/concepts",
365 |       "destination": "/docs/learn/architecture"
366 |     },
367 |     {
368 |       "source": "/docs/tools",
369 |       "destination": "/legacy/tools/inspector"
370 |     }
371 |   ],
372 |   "contextual": {
373 |     "options": ["copy", "view"]
374 |   }
375 | }
376 | 


--------------------------------------------------------------------------------
/docs/docs/getting-started/intro.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Introduction
 3 | description: "Get started with the Model Context Protocol (MCP)"
 4 | ---
 5 | 
 6 | MCP is an open protocol that standardizes how applications provide context to large language models (LLMs). Think of MCP like a USB-C port for AI applications. Just as USB-C provides a standardized way to connect your devices to various peripherals and accessories, MCP provides a standardized way to connect AI models to different data sources and tools. MCP enables you to build agents and complex workflows on top of LLMs and connects your models with the world.
 7 | 
 8 | MCP provides:
 9 | 
10 | - **A growing list of pre-built integrations** that your LLM can directly plug into
11 | - **A standardized way** to build custom integrations for AI applications
12 | - **An open protocol** that everyone is free to implement and use
13 | - **The flexibility to change** between different apps and take your context with you
14 | 
15 | ## Choose Your Path
16 | 
17 | <CardGroup cols={2}>
18 |   <Card title="Understand Concepts" icon="book" href="/docs/learn/architecture">
19 |     Learn the core concepts and architecture of MCP
20 |   </Card>
21 | 
22 | {" "}
23 | 
24 | <Card title="Use MCP" icon="plug" href="/docs/tutorials/use-remote-mcp-server">
25 |   Connect to existing MCP servers and start using them
26 | </Card>
27 | 
28 | {" "}
29 | 
30 | <Card title="Build Servers" icon="server" href="/quickstart/server">
31 |   Create MCP servers to expose your data and tools
32 | </Card>
33 | 
34 |   <Card title="Build Clients" icon="computer" href="/quickstart/client">
35 |     Develop applications that connect to MCP servers
36 |   </Card>
37 | </CardGroup>
38 | 
39 | ## Ready to Build?
40 | 
41 | MCP provides official **SDKs** in multiple languages, see the [SDK documentation](/docs/sdk) to find the right SDK for your project. The SDKs handle the protocol details so you can focus on building your features.
42 | 


--------------------------------------------------------------------------------
/docs/docs/learn/architecture.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Architecture Overview
  3 | type: docs
  4 | ---
  5 | 
  6 | This overview of the Model Context Protocol (MCP) discusses its [scope](#scope) and [core concepts](#concepts-of-mcp), and provides an [example](#example) demonstrating each core concept.
  7 | 
  8 | Because MCP SDKs abstract away many concerns, most developers will likely find the [data layer protocol](#data-layer-protocol) section to be the most useful. It discusses how MCP servers can provide context to an AI application.
  9 | 
 10 | For specific implementation details, please refer to the documentation for your [language-specific SDK](/docs/sdk).
 11 | 
 12 | ## Scope
 13 | 
 14 | The Model Context Protocol includes the following projects:
 15 | 
 16 | - [MCP Specification](https://modelcontextprotocol.io/specification/latest): A specification of MCP that outlines the implementation requirements for clients and servers.
 17 | - [MCP SDKs](/docs/sdk): SDKs for different programming languages that implement MCP.
 18 | - **MCP Development Tools**: Tools for developing MCP servers and clients, including the [MCP Inspector](https://github.com/modelcontextprotocol/inspector)
 19 | - [MCP Reference Server Implementations](https://github.com/modelcontextprotocol/servers): Reference implementations of MCP servers.
 20 | 
 21 | <Note>
 22 |   MCP focuses solely on the protocol for context exchange—it does not dictate
 23 |   how AI applications use LLMs or manage the provided context.
 24 | </Note>
 25 | 
 26 | ## Concepts of MCP
 27 | 
 28 | ### Participants
 29 | 
 30 | MCP follows a client-server architecture where an MCP host — an AI application like [Claude Code](https://www.anthropic.com/claude-code) or [Claude Desktop](https://www.claude.ai/download) — establishes connections to one or more MCP servers. The MCP host accomplishes this by creating one MCP client for each MCP server. Each MCP client maintains a dedicated one-to-one connection with its corresponding MCP server.
 31 | 
 32 | The key participants in the MCP architecture are:
 33 | 
 34 | - **MCP Host**: The AI application that coordinates and manages one or multiple MCP clients
 35 | - **MCP Client**: A component that maintains a connection to an MCP server and obtains context from an MCP server for the MCP host to use
 36 | - **MCP Server**: A program that provides context to MCP clients
 37 | 
 38 | **For example**: Visual Studio Code acts as an MCP host. When Visual Studio Code establishes a connection to an MCP server, such as the [Sentry MCP server](https://docs.sentry.io/product/sentry-mcp/), the Visual Studio Code runtime instantiates an MCP client object that maintains the connection to the Sentry MCP server.
 39 | When Visual Studio Code subsequently connects to another MCP server, such as the [local filesystem server](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem), the Visual Studio Code runtime instantiates an additional MCP client object to maintain this connection, hence maintaining a one-to-one
 40 | relationship of MCP clients to MCP servers.
 41 | 
 42 | ```mermaid
 43 | graph TB
 44 |     subgraph "MCP Host (AI Application)"
 45 |         Client1["MCP Client 1"]
 46 |         Client2["MCP Client 2"]
 47 |         Client3["MCP Client 3"]
 48 |     end
 49 | 
 50 |     Server1["MCP Server 1<br/>(e.g., Sentry)"]
 51 |     Server2["MCP Server 2<br/>(e.g., Filesystem)"]
 52 |     Server3["MCP Server 3<br/>(e.g., Database)"]
 53 | 
 54 |     Client1 ---|"One-to-one<br/>connection"| Server1
 55 |     Client2 ---|"One-to-one<br/>connection"| Server2
 56 |     Client3 ---|"One-to-one<br/>connection"| Server3
 57 | 
 58 |     style Client1 fill:#e1f5fe
 59 |     style Client2 fill:#e1f5fe
 60 |     style Client3 fill:#e1f5fe
 61 |     style Server1 fill:#f3e5f5
 62 |     style Server2 fill:#f3e5f5
 63 |     style Server3 fill:#f3e5f5
 64 | ```
 65 | 
 66 | Note that **MCP server** refers to the program that serves context data, regardless of
 67 | where it runs. MCP servers can execute locally or remotely. For example, when
 68 | Claude Desktop launches the [filesystem
 69 | server](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem),
 70 | the server runs locally on the same machine because it uses the STDIO
 71 | transport. This is commonly referred to as a "local" MCP server. The official
 72 | [Sentry MCP server](https://docs.sentry.io/product/sentry-mcp/) runs on the
 73 | Sentry platform, and uses the Streamable HTTP transport. This is commonly
 74 | referred to as a "remote" MCP server.
 75 | 
 76 | ### Layers
 77 | 
 78 | MCP consists of two layers:
 79 | 
 80 | - **Data layer**: Defines the JSON-RPC based protocol for client-server communication, including lifecycle management, and core primitives, such as tools, resources, prompts and notifications.
 81 | - **Transport layer**: Defines the communication mechanisms and channels that enable data exchange between clients and servers, including transport-specific connection establishment, message framing, and authorization.
 82 | 
 83 | Conceptually the data layer is the inner layer, while the transport layer is the outer layer.
 84 | 
 85 | #### Data layer
 86 | 
 87 | The data layer implements a [JSON-RPC 2.0](https://www.jsonrpc.org/) based exchange protocol that defines the message structure and semantics.
 88 | This layer includes:
 89 | 
 90 | - **Lifecycle management**: Handles connection initialization, capability negotiation, and connection termination between clients and servers
 91 | - **Server features**: Enables servers to provide core functionality including tools for AI actions, resources for context data, and prompts for interaction templates from and to the client
 92 | - **Client features**: Enables servers to ask the client to sample from the host LLM, elicit input from the user, and log messages to the client
 93 | - **Utility features**: Supports additional capabilities like notifications for real-time updates and progress tracking for long-running operations
 94 | 
 95 | #### Transport layer
 96 | 
 97 | The transport layer manages communication channels and authentication between clients and servers. It handles connection establishment, message framing, and secure communication between MCP participants.
 98 | 
 99 | MCP supports two transport mechanisms:
100 | 
101 | - **Stdio transport**: Uses standard input/output streams for direct process communication between local processes on the same machine, providing optimal performance with no network overhead.
102 | - **Streamable HTTP transport**: Uses HTTP POST for client-to-server messages with optional Server-Sent Events for streaming capabilities. This transport enables remote server communication and supports standard HTTP authentication methods including bearer tokens, API keys, and custom headers. MCP recommends using OAuth to obtain authentication tokens.
103 | 
104 | The transport layer abstracts communication details from the protocol layer, enabling the same JSON-RPC 2.0 message format across all transport mechanisms.
105 | 
106 | ### Data Layer Protocol
107 | 
108 | A core part of MCP is defining the schema and semantics between MCP clients and MCP servers. Developers will likely find the data layer — in particular, the set of [primitives](#primitives) — to be the most interesting part of MCP. It is the part of MCP that defines the ways developers can share context from MCP servers to MCP clients.
109 | 
110 | MCP uses [JSON-RPC 2.0](https://www.jsonrpc.org/) as its underlying RPC protocol. Client and servers send requests to each other and respond accordingly. Notifications can be used when no response is required.
111 | 
112 | #### Lifecycle management
113 | 
114 | MCP is a <Tooltip tip="A subset of MCP can be made stateless using the Streamable HTTP transport">stateful protocol</Tooltip> that requires lifecycle management. The purpose of lifecycle management is to negotiate the <Tooltip tip="Features and operations that a client or server supports, such as tools, resources, or prompts">capabilities</Tooltip> that both client and server support. Detailed information can be found in the [specification](/specification/2025-06-18/basic/lifecycle), and the [example](#example) showcases the initialization sequence.
115 | 
116 | #### Primitives
117 | 
118 | MCP primitives are the most important concept within MCP. They define what clients and servers can offer each other. These primitives specify the types of contextual information that can be shared with AI applications and the range of actions that can be performed.
119 | 
120 | MCP defines three core primitives that _servers_ can expose:
121 | 
122 | - **Tools**: Executable functions that AI applications can invoke to perform actions (e.g., file operations, API calls, database queries)
123 | - **Resources**: Data sources that provide contextual information to AI applications (e.g., file contents, database records, API responses)
124 | - **Prompts**: Reusable templates that help structure interactions with language models (e.g., system prompts, few-shot examples)
125 | 
126 | Each primitive type has associated methods for discovery (`*/list`), retrieval (`*/get`), and in some cases, execution (`tools/call`).
127 | MCP clients will use the `*/list` methods to discover available primitives. For example, a client can first list all available tools (`tools/list`) and then execute them. This design allows listings to be dynamic.
128 | 
129 | As a concrete example, consider an MCP server that provides context about a database. It can expose tools for querying the database, a resource that contains the schema of the database, and a prompt that includes few-shot examples for interacting with the tools.
130 | 
131 | For more details about server primitives see [server concepts](./server-concepts).
132 | 
133 | MCP also defines primitives that _clients_ can expose. These primitives allow MCP server authors to build richer interactions.
134 | 
135 | - **Sampling**: Allows servers to request language model completions from the client's AI application. This is useful when servers' authors want access to a language model, but want to stay model independent and not include a language model SDK in their MCP server. They can use the `sampling/complete` method to request a language model completion from the client's AI application.
136 | - **Elicitation**: Allows servers to request additional information from users. This is useful when servers' authors want to get more information from the user, or ask for confirmation of an action. They can use the `elicitation/request` method to request additional information from the user.
137 | - **Logging**: Enables servers to send log messages to clients for debugging and monitoring purposes.
138 | 
139 | For more details about client primitives see [client concepts](./client-concepts).
140 | 
141 | #### Notifications
142 | 
143 | The protocol supports real-time notifications to enable dynamic updates between servers and clients. For example, when a server's available tools change—such as when new functionality becomes available or existing tools are modified—the server can send tool update notifications to inform connected clients about these changes. Notifications are sent as JSON-RPC 2.0 notification messages (without expecting a response) and enable MCP servers to provide real-time updates to connected clients.
144 | 
145 | ## Example
146 | 
147 | ### Data Layer
148 | 
149 | This section provides a step-by-step walkthrough of an MCP client-server interaction, focusing on the data layer protocol. We'll demonstrate the lifecycle sequence, tool operations, and notifications using JSON-RPC 2.0 messages.
150 | 
151 | <Steps>
152 | <Step title="Initialization (Lifecycle Management)">
153 | 
154 | MCP begins with lifecycle management through a capability negotiation handshake. As described in the [lifecycle management](#lifecycle-management) section, the client sends an `initialize` request to establish the connection and negotiate supported features.
155 | 
156 | <CodeGroup>
157 |   ```json Request
158 |   {
159 |     "jsonrpc": "2.0",
160 |     "id": 1,
161 |     "method": "initialize",
162 |     "params": {
163 |       "protocolVersion": "2025-06-18",
164 |       "capabilities": {
165 |         "elicitation": {}
166 |       },
167 |       "clientInfo": {
168 |         "name": "example-client",
169 |         "version": "1.0.0"
170 |       }
171 |     }
172 |   }
173 |   ```
174 |   ```json Response
175 |   {
176 |     "jsonrpc": "2.0",
177 |     "id": 1,
178 |     "result": {
179 |       "protocolVersion": "2025-06-18",
180 |       "capabilities": {
181 |         "tools": {
182 |           "listChanged": true
183 |         },
184 |         "resources": {}
185 |       },
186 |       "serverInfo": {
187 |         "name": "example-server",
188 |         "version": "1.0.0"
189 |       }
190 |     }
191 |   }
192 |   ```
193 | </CodeGroup>
194 | 
195 | #### Understanding the Initialization Exchange
196 | 
197 | The initialization process is a key part of MCP's lifecycle management and serves several critical purposes:
198 | 
199 | 1. **Protocol Version Negotiation**: The `protocolVersion` field (e.g., "2025-06-18") ensures both client and server are using compatible protocol versions. This prevents communication errors that could occur when different versions attempt to interact. If a mutually compatible version is not negotiated, the connection should be terminated.
200 | 
201 | 2. **Capability Discovery**: The `capabilities` object allows each party to declare what features they support, including which [primitives](#primitives) they can handle (tools, resources, prompts) and whether they support features like [notifications](#notifications). This enables efficient communication by avoiding unsupported operations.
202 | 
203 | 3. **Identity Exchange**: The `clientInfo` and `serverInfo` objects provide identification and versioning information for debugging and compatibility purposes.
204 | 
205 | In this example, the capability negotiation demonstrates how MCP primitives are declared:
206 | 
207 | **Client Capabilities**:
208 | 
209 | - `"elicitation": {}` - The client declares it can work with user interaction requests (can receive `elicitation/create` method calls)
210 | 
211 | **Server Capabilities**:
212 | 
213 | - `"tools": {"listChanged": true}` - The server supports the tools primitive AND can send `tools/list_changed` notifications when its tool list changes
214 | - `"resources": {}` - The server also supports the resources primitive (can handle `resources/list` and `resources/read` methods)
215 | 
216 | After successful initialization, the client sends a notification to indicate it's ready:
217 | 
218 | ```json Notification
219 | {
220 |   "jsonrpc": "2.0",
221 |   "method": "notifications/initialized"
222 | }
223 | ```
224 | 
225 | #### How This Works in AI Applications
226 | 
227 | During initialization, the AI application's MCP client manager establishes connections to configured servers and stores their capabilities for later use. The application uses this information to determine which servers can provide specific types of functionality (tools, resources, prompts) and whether they support real-time updates.
228 | 
229 | ```python Pseudo-code for AI application initialization
230 | # Pseudo Code
231 | async with stdio_client(server_config) as (read, write):
232 |     async with ClientSession(read, write) as session:
233 |         init_response = await session.initialize()
234 |         if init_response.capabilities.tools:
235 |             app.register_mcp_server(session, supports_tools=True)
236 |         app.set_server_ready(session)
237 | ```
238 | 
239 | </Step>
240 | 
241 | <Step title="Tool Discovery (Primitives)">
242 | Now that the connection is established, the client can discover available tools by sending a `tools/list` request. This request is fundamental to MCP's tool discovery mechanism — it allows clients to understand what tools are available on the server before attempting to use them.
243 | 
244 | <CodeGroup>
245 |   ```json Request
246 |   {
247 |     "jsonrpc": "2.0",
248 |     "id": 2,
249 |     "method": "tools/list"
250 |   }
251 |   ```
252 |   ```json Response
253 |   {
254 |     "jsonrpc": "2.0",
255 |     "id": 2,
256 |     "result": {
257 |       "tools": [
258 |         {
259 |           "name": "calculator_arithmetic",
260 |           "title": "Calculator",
261 |           "description": "Perform mathematical calculations including basic arithmetic, trigonometric functions, and algebraic operations",
262 |           "inputSchema": {
263 |             "type": "object",
264 |             "properties": {
265 |               "expression": {
266 |                 "type": "string",
267 |                 "description": "Mathematical expression to evaluate (e.g., '2 + 3 * 4', 'sin(30)', 'sqrt(16)')"
268 |               }
269 |             },
270 |             "required": ["expression"]
271 |           }
272 |         },
273 |         {
274 |           "name": "weather_current",
275 |           "title": "Weather Information",
276 |           "description": "Get current weather information for any location worldwide",
277 |           "inputSchema": {
278 |             "type": "object",
279 |             "properties": {
280 |               "location": {
281 |                 "type": "string",
282 |                 "description": "City name, address, or coordinates (latitude,longitude)"
283 |               },
284 |               "units": {
285 |                 "type": "string",
286 |                 "enum": ["metric", "imperial", "kelvin"],
287 |                 "description": "Temperature units to use in response",
288 |                 "default": "metric"
289 |               }
290 |             },
291 |             "required": ["location"]
292 |           }
293 |         }
294 |       ]
295 |     }
296 |   }
297 |   ```
298 | </CodeGroup>
299 | 
300 | #### Understanding the Tool Discovery Request
301 | 
302 | The `tools/list` request is simple, containing no parameters.
303 | 
304 | #### Understanding the Tool Discovery Response
305 | 
306 | The response contains a `tools` array that provides comprehensive metadata about each available tool. This array-based structure allows servers to expose multiple tools simultaneously while maintaining clear boundaries between different functionalities.
307 | 
308 | Each tool object in the response includes several key fields:
309 | 
310 | - **`name`**: A unique identifier for the tool within the server's namespace. This serves as the primary key for tool execution and should follow a clear naming pattern (e.g., `calculator_arithmetic` rather than just `calculate`)
311 | - **`title`**: A human-readable display name for the tool that clients can show to users
312 | - **`description`**: Detailed explanation of what the tool does and when to use it
313 | - **`inputSchema`**: A JSON Schema that defines the expected input parameters, enabling type validation and providing clear documentation about required and optional parameters
314 | 
315 | #### How This Works in AI Applications
316 | 
317 | The AI application fetches available tools from all connected MCP servers and combines them into a unified tool registry that the language model can access. This allows the LLM to understand what actions it can perform and automatically generates the appropriate tool calls during conversations.
318 | 
319 | ```python Pseudo-code for AI application tool discovery
320 | # Pseudo-code using MCP Python SDK patterns
321 | available_tools = []
322 | for session in app.mcp_server_sessions():
323 |     tools_response = await session.list_tools()
324 |     available_tools.extend(tools_response.tools)
325 | conversation.register_available_tools(available_tools)
326 | ```
327 | 
328 | </Step>
329 | 
330 | <Step title="Tool Execution (Primitives)">
331 | The client can now execute a tool using the `tools/call` method. This demonstrates how MCP primitives are used in practice: after discovering available tools, the client can invoke them with appropriate arguments.
332 | 
333 | #### Understanding the Tool Execution Request
334 | 
335 | The `tools/call` request follows a structured format that ensures type safety and clear communication between client and server. Note that we're using the proper tool name from the discovery response (`weather_current`) rather than a simplified name:
336 | 
337 | <CodeGroup>
338 |   ```json Request
339 |   {
340 |     "jsonrpc": "2.0",
341 |     "id": 3,
342 |     "method": "tools/call",
343 |     "params": {
344 |       "name": "weather_current",
345 |       "arguments": {
346 |         "location": "San Francisco",
347 |         "units": "imperial"
348 |       }
349 |     }
350 |   }
351 |   ```
352 |   ```json Response
353 |   {
354 |     "jsonrpc": "2.0",
355 |     "id": 3,
356 |     "result": {
357 |       "content": [
358 |         {
359 |           "type": "text",
360 |           "text": "Current weather in San Francisco: 68°F, partly cloudy with light winds from the west at 8 mph. Humidity: 65%"
361 |         }
362 |       ]
363 |     }
364 |   }
365 |   ```
366 | </CodeGroup>
367 | 
368 | #### Key Elements of Tool Execution
369 | 
370 | The request structure includes several important components:
371 | 
372 | 1. **`name`**: Must match exactly the tool name from the discovery response (`weather_current`). This ensures the server can correctly identify which tool to execute.
373 | 
374 | 2. **`arguments`**: Contains the input parameters as defined by the tool's `inputSchema`. In this example:
375 |    - `location`: "San Francisco" (required parameter)
376 |    - `units`: "imperial" (optional parameter, defaults to "metric" if not specified)
377 | 
378 | 3. **JSON-RPC Structure**: Uses standard JSON-RPC 2.0 format with unique `id` for request-response correlation.
379 | 
380 | #### Understanding the Tool Execution Response
381 | 
382 | The response demonstrates MCP's flexible content system:
383 | 
384 | 1. **`content` Array**: Tool responses return an array of content objects, allowing for rich, multi-format responses (text, images, resources, etc.)
385 | 
386 | 2. **Content Types**: Each content object has a `type` field. In this example, `"type": "text"` indicates plain text content, but MCP supports various content types for different use cases.
387 | 
388 | 3. **Structured Output**: The response provides actionable information that the AI application can use as context for language model interactions.
389 | 
390 | This execution pattern allows AI applications to dynamically invoke server functionality and receive structured responses that can be integrated into conversations with language models.
391 | 
392 | #### How This Works in AI Applications
393 | 
394 | When the language model decides to use a tool during a conversation, the AI application intercepts the tool call, routes it to the appropriate MCP server, executes it, and returns the results back to the LLM as part of the conversation flow. This enables the LLM to access real-time data and perform actions in the external world.
395 | 
396 | ```python
397 | # Pseudo-code for AI application tool execution
398 | async def handle_tool_call(conversation, tool_name, arguments):
399 |     session = app.find_mcp_session_for_tool(tool_name)
400 |     result = await session.call_tool(tool_name, arguments)
401 |     conversation.add_tool_result(result.content)
402 | ```
403 | 
404 | </Step>
405 | 
406 | <Step title="Real-time Updates (Notifications)">
407 | MCP supports real-time notifications that enable servers to inform clients about changes without being explicitly requested. This demonstrates the notification system, a key feature that keeps MCP connections synchronized and responsive.
408 | 
409 | #### Understanding Tool List Change Notifications
410 | 
411 | When the server's available tools change—such as when new functionality becomes available, existing tools are modified, or tools become temporarily unavailable—the server can proactively notify connected clients:
412 | 
413 | ```json Request
414 | {
415 |   "jsonrpc": "2.0",
416 |   "method": "notifications/tools/list_changed"
417 | }
418 | ```
419 | 
420 | #### Key Features of MCP Notifications
421 | 
422 | 1. **No Response Required**: Notice there's no `id` field in the notification. This follows JSON-RPC 2.0 notification semantics where no response is expected or sent.
423 | 
424 | 2. **Capability-Based**: This notification is only sent by servers that declared `"listChanged": true` in their tools capability during initialization (as shown in Step 1).
425 | 
426 | 3. **Event-Driven**: The server decides when to send notifications based on internal state changes, making MCP connections dynamic and responsive.
427 | 
428 | #### Client Response to Notifications
429 | 
430 | Upon receiving this notification, the client typically reacts by requesting the updated tool list. This creates a refresh cycle that keeps the client's understanding of available tools current:
431 | 
432 | ```json Request
433 | {
434 |   "jsonrpc": "2.0",
435 |   "id": 4,
436 |   "method": "tools/list"
437 | }
438 | ```
439 | 
440 | #### Why Notifications Matter
441 | 
442 | This notification system is crucial for several reasons:
443 | 
444 | 1. **Dynamic Environments**: Tools may come and go based on server state, external dependencies, or user permissions
445 | 2. **Efficiency**: Clients don't need to poll for changes; they're notified when updates occur
446 | 3. **Consistency**: Ensures clients always have accurate information about available server capabilities
447 | 4. **Real-time Collaboration**: Enables responsive AI applications that can adapt to changing contexts
448 | 
449 | This notification pattern extends beyond tools to other MCP primitives, enabling comprehensive real-time synchronization between clients and servers.
450 | 
451 | #### How This Works in AI Applications
452 | 
453 | When the AI application receives a notification about changed tools, it immediately refreshes its tool registry and updates the LLM's available capabilities. This ensures that ongoing conversations always have access to the most current set of tools, and the LLM can dynamically adapt to new functionality as it becomes available.
454 | 
455 | ```python
456 | # Pseudo-code for AI application notification handling
457 | async def handle_tools_changed_notification(session):
458 |     tools_response = await session.list_tools()
459 |     app.update_available_tools(session, tools_response.tools)
460 |     if app.conversation.is_active():
461 |         app.conversation.notify_llm_of_new_capabilities()
462 | ```
463 | 
464 | </Step>
465 | </Steps>
466 | 


--------------------------------------------------------------------------------
/docs/docs/learn/client-concepts.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Client Concepts
  3 | description: "Understanding MCP client concepts"
  4 | ---
  5 | 
  6 | MCP clients are instantiated by host applications to communicate with particular MCP servers. The host application, like Claude.ai or an IDE, manages the overall user experience and coordinates multiple clients. Each client handles one direct communication with one server.
  7 | 
  8 | Understanding the distinction is important: the _host_ is the application users interact with, while _clients_ are the protocol-level components that enable server connections.
  9 | 
 10 | ## Core Client Features
 11 | 
 12 | In addition to making use of context provided by servers, clients may provide several features to servers. These client features allow server authors to build richer interactions. For example, clients can allow MCP servers to request additional information from the user via elicitations. Clients can offer the following capabilities:
 13 | 
 14 | ### Sampling
 15 | 
 16 | Sampling allows servers to request language model completions through the client, enabling agentic behaviors while maintaining security and user control.
 17 | 
 18 | #### Overview
 19 | 
 20 | Sampling enables servers to perform AI-dependent tasks without directly integrating with or paying for AI models. Instead, servers can request that the client—which already has AI model access—handle these tasks on their behalf. This approach puts the client in complete control of user permissions and security measures. Because sampling requests occur within the context of other operations—like a tool analyzing data—and are processed as separate model calls, they maintain clear boundaries between different contexts, allowing for more efficient use of the context window.
 21 | 
 22 | **Sampling flow:**
 23 | 
 24 | ```mermaid
 25 | sequenceDiagram
 26 |     participant LLM
 27 |     participant User
 28 |     participant Client
 29 |     participant Server
 30 | 
 31 |     Note over Server,Client: Server initiates sampling
 32 |     Server->>Client: sampling/createMessage
 33 | 
 34 |     Note over Client,User: Human-in-the-loop review
 35 |     Client->>User: Present request for approval
 36 |     User-->>Client: Review and approve/modify
 37 | 
 38 |     Note over Client,LLM: Model interaction
 39 |     Client->>LLM: Forward approved request
 40 |     LLM-->>Client: Return generation
 41 | 
 42 |     Note over Client,User: Response review
 43 |     Client->>User: Present response for approval
 44 |     User-->>Client: Review and approve/modify
 45 | 
 46 |     Note over Server,Client: Complete request
 47 |     Client-->>Server: Return approved response
 48 | ```
 49 | 
 50 | The flow ensures security through multiple human-in-the-loop checkpoints. Users review and can modify both the initial request and the generated response before it returns to the server.
 51 | 
 52 | **Request parameters example:**
 53 | 
 54 | ```typescript
 55 | {
 56 |   messages: [
 57 |     {
 58 |       role: "user",
 59 |       content: "Analyze these flight options and recommend the best choice:\n" +
 60 |                "[47 flights with prices, times, airlines, and layovers]\n" +
 61 |                "User preferences: morning departure, max 1 layover"
 62 |     }
 63 |   ],
 64 |   modelPreferences: {
 65 |     hints: [{
 66 |       name: "claude-3-5-sonnet"  // Suggested model
 67 |     }],
 68 |     costPriority: 0.3,      // Less concerned about API cost
 69 |     speedPriority: 0.2,     // Can wait for thorough analysis
 70 |     intelligencePriority: 0.9  // Need complex trade-off evaluation
 71 |   },
 72 |   systemPrompt: "You are a travel expert helping users find the best flights based on their preferences",
 73 |   maxTokens: 1500
 74 | }
 75 | ```
 76 | 
 77 | #### Example: Flight Analysis Tool
 78 | 
 79 | Consider a travel booking server with a tool called `findBestFlight` that uses sampling to analyze available flights and recommend the optimal choice. When a user asks "Book me the best flight to Barcelona next month," the tool needs AI assistance to evaluate complex trade-offs.
 80 | 
 81 | The tool queries airline APIs and gathers 47 flight options. It then requests AI assistance to analyze these options: "Analyze these flight options and recommend the best choice: [47 flights with prices, times, airlines, and layovers] User preferences: morning departure, max 1 layover."
 82 | 
 83 | The client asks the user: "Allow sampling request?" Upon approval, the AI evaluates trade-offs—like cheaper red-eye flights versus convenient morning departures. The tool uses this analysis to present the top three recommendations.
 84 | 
 85 | #### User Interaction Model
 86 | 
 87 | Sampling is designed with human-in-the-loop control as a fundamental principle. Users maintain oversight through several mechanisms:
 88 | 
 89 | **Approval controls**: Every sampling request needs explicit user consent. Clients show what the server wants to analyze and why. Users can approve, deny, or modify requests.
 90 | 
 91 | **Transparency features**: Clients display the exact prompt, model selection, and token limits. Users review AI responses before they return to the server.
 92 | 
 93 | **Configuration options**: Users can set model preferences, configure auto-approval for trusted operations, or require approval for everything. Clients may provide options to redact sensitive information. Users decide how much conversation context may be included in sampling requests through the `includeContext` parameter.
 94 | 
 95 | **Isolation**: Sampling requests are isolated from the main conversation context by default. Servers cannot access user conversations.
 96 | 
 97 | **Security considerations**: Both clients and servers must handle sensitive data appropriately during sampling. Clients should implement rate limiting and validate all message content. The human-in-the-loop design ensures that server-initiated AI interactions cannot compromise security or access sensitive data without explicit user consent.
 98 | 
 99 | ### Roots
100 | 
101 | Roots define filesystem boundaries for server operations, allowing clients to specify which directories servers should focus on.
102 | 
103 | #### Overview
104 | 
105 | Roots are a mechanism for clients to communicate filesystem access boundaries to servers. They consist of file URIs that indicate directories where servers can operate, helping servers understand the scope of available files and folders. Rather than giving servers unrestricted filesystem access, roots guide them to relevant working directories while maintaining security boundaries.
106 | 
107 | **Root structure:**
108 | 
109 | ```json
110 | {
111 |   "uri": "file:///Users/agent/travel-planning",
112 |   "name": "Travel Planning Workspace"
113 | }
114 | ```
115 | 
116 | Roots are exclusively filesystem paths and always use the `file://` URI scheme. They help servers understand project boundaries, workspace organization, and accessible directories. The roots list can be updated dynamically as users work with different projects or folders, with servers receiving notifications through `roots/list_changed` when boundaries change.
117 | 
118 | It's important to note that while roots provide guidance to servers about where to operate, the client is always in full control of file access. Roots simply communicate intended boundaries—actual file access is always mediated by the client's security policies.
119 | 
120 | #### Example: Travel Planning Workspace
121 | 
122 | A travel agent working with multiple client trips benefits from roots to organize filesystem access. Consider a workspace with different directories for various aspects of travel planning.
123 | 
124 | The client provides filesystem roots to the travel planning server:
125 | 
126 | - `file:///Users/agent/travel-planning` - Main workspace containing all travel files
127 | - `file:///Users/agent/travel-templates` - Reusable itinerary templates and resources
128 | - `file:///Users/agent/client-documents` - Client passports and travel documents
129 | 
130 | When the agent creates a Barcelona itinerary, the server works within these boundaries—accessing templates, saving the new itinerary, and referencing client documents. It cannot access files outside these roots. Servers typically access files within roots by using relative paths from the root directories or by utilizing file search tools that respect the root boundaries.
131 | 
132 | If the agent opens an archive folder like `file:///Users/agent/archive/2023-trips`, the client updates the roots list via `roots/list_changed`.
133 | 
134 | #### User Interaction Model
135 | 
136 | Roots are typically managed automatically by host applications based on user actions, though some applications may expose manual root management:
137 | 
138 | **Automatic root detection**: When users open folders, clients automatically expose them as roots. Opening a travel workspace gives servers access to itineraries and documents within that directory.
139 | 
140 | **Manual root configuration**: Advanced users can specify roots through configuration. For example, adding `/travel-templates` for reusable resources while excluding directories with financial records.
141 | 
142 | ### Elicitation
143 | 
144 | Elicitation enables servers to request specific information from users during interactions, creating more dynamic and responsive workflows.
145 | 
146 | #### Overview
147 | 
148 | Elicitation provides a structured way for servers to gather necessary information on demand. Instead of requiring all information up front or failing when data is missing, servers can pause their operations to request specific inputs from users. This creates more flexible interactions where servers adapt to user needs rather than following rigid patterns.
149 | 
150 | **Elicitation flow:**
151 | 
152 | ```mermaid
153 | sequenceDiagram
154 |     participant User
155 |     participant Client
156 |     participant Server
157 | 
158 |     Note over Server,Client: Server initiates elicitation
159 |     Server->>Client: elicitation/create
160 | 
161 |     Note over Client,User: Human interaction
162 |     Client->>User: Present elicitation UI
163 |     User-->>Client: Provide requested information
164 | 
165 |     Note over Server,Client: Complete request
166 |     Client-->>Server: Return user response
167 | 
168 |     Note over Server: Continue processing with new information
169 | ```
170 | 
171 | The flow enables dynamic information gathering. Servers can request specific data when needed, users provide information through appropriate UI, and servers continue processing with the newly acquired context.
172 | 
173 | **Elicitation components example:**
174 | 
175 | ```typescript
176 | {
177 |   method: "elicitation/requestInput",
178 |   params: {
179 |     message: "Please confirm your Barcelona vacation booking details:",
180 |     schema: {
181 |       type: "object",
182 |       properties: {
183 |         confirmBooking: {
184 |           type: "boolean",
185 |           description: "Confirm the booking (Flights + Hotel = $3,000)"
186 |         },
187 |         seatPreference: {
188 |           type: "string",
189 |           enum: ["window", "aisle", "no preference"],
190 |           description: "Preferred seat type for flights"
191 |         },
192 |         roomType: {
193 |           type: "string",
194 |           enum: ["sea view", "city view", "garden view"],
195 |           description: "Preferred room type at hotel"
196 |         },
197 |         travelInsurance: {
198 |           type: "boolean",
199 |           default: false,
200 |           description: "Add travel insurance ($150)"
201 |         }
202 |       },
203 |       required: ["confirmBooking"]
204 |     }
205 |   }
206 | }
207 | ```
208 | 
209 | #### Example: Holiday Booking Approval
210 | 
211 | A travel booking server demonstrates elicitation's power through the final booking confirmation process. When a user has selected their ideal vacation package to Barcelona, the server needs to gather final approval and any missing details before proceeding.
212 | 
213 | The server elicits booking confirmation with a structured request that includes the trip summary (Barcelona flights June 15-22, beachfront hotel, total $3,000) and fields for any additional preferences—such as seat selection, room type, or travel insurance options.
214 | 
215 | As the booking progresses, the server elicits contact information needed to complete the reservation. It might ask for traveler details for flight bookings, special requests for the hotel, or emergency contact information.
216 | 
217 | #### User Interaction Model
218 | 
219 | Elicitation interactions are designed to be clear, contextual, and respectful of user autonomy:
220 | 
221 | **Request presentation**: Clients display elicitation requests with clear context about which server is asking, why the information is needed, and how it will be used. The request message explains the purpose while the schema provides structure and validation.
222 | 
223 | **Response options**: Users can provide the requested information through appropriate UI controls (text fields, dropdowns, checkboxes), decline to provide information with optional explanation, or cancel the entire operation. Clients validate responses against the provided schema before returning them to servers.
224 | 
225 | **Privacy considerations**: Elicitation never requests passwords or API keys. Clients warn about suspicious requests and let users review data before sending.
226 | 


--------------------------------------------------------------------------------
/docs/docs/learn/server-concepts.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Server Concepts
  3 | description: "Understanding MCP server concepts"
  4 | ---
  5 | 
  6 | MCP servers are programs that expose specific capabilities to AI applications through standardized protocol interfaces. Each server provides focused functionality for a particular domain.
  7 | 
  8 | Common examples include file system servers for document management, email servers for message handling, travel servers for trip planning, and database servers for data queries. Each server brings domain-specific capabilities to the AI application.
  9 | 
 10 | ## Core Building Blocks
 11 | 
 12 | Servers provide functionality through three building blocks:
 13 | 
 14 | | Building Block | Purpose                   | Who Controls It        | Real-World Example                                           |
 15 | | -------------- | ------------------------- | ---------------------- | ------------------------------------------------------------ |
 16 | | **Tools**      | For AI actions            | Model-controlled       | Search flights, send messages, create calendar events        |
 17 | | **Resources**  | For context data          | Application-controlled | Documents, calendars, emails, weather data                   |
 18 | | **Prompts**    | For interaction templates | User-controlled        | "Plan a vacation", "Summarize my meetings", "Draft an email" |
 19 | 
 20 | ### Tools - AI Actions
 21 | 
 22 | Tools enable AI models to perform actions through server-implemented functions. Each tool defines a specific operation with typed inputs and outputs. The model requests tool execution based on context.
 23 | 
 24 | #### Overview
 25 | 
 26 | Tools are schema-defined interfaces that LLMs can invoke. MCP uses JSON Schema for validation. Each tool performs a single operation with clearly defined inputs and outputs. Most importantly, tool execution requires explicit user approval, ensuring users maintain control over actions taken by a model.
 27 | 
 28 | **Protocol operations:**
 29 | 
 30 | | Method       | Purpose                  | Returns                                |
 31 | | ------------ | ------------------------ | -------------------------------------- |
 32 | | `tools/list` | Discover available tools | Array of tool definitions with schemas |
 33 | | `tools/call` | Execute a specific tool  | Tool execution result                  |
 34 | 
 35 | **Example tool definition:**
 36 | 
 37 | ```typescript
 38 | {
 39 |   name: "searchFlights",
 40 |   description: "Search for available flights",
 41 |   inputSchema: {
 42 |     type: "object",
 43 |     properties: {
 44 |       origin: { type: "string", description: "Departure city" },
 45 |       destination: { type: "string", description: "Arrival city" },
 46 |       date: { type: "string", format: "date", description: "Travel date" }
 47 |     },
 48 |     required: ["origin", "destination", "date"]
 49 |   }
 50 | }
 51 | ```
 52 | 
 53 | #### Example: Taking Action
 54 | 
 55 | Tools enable AI applications to perform actions on behalf of users. In a travel planning scenario, the AI application might use several tools to help book a vacation.
 56 | 
 57 | First, it searches for flights using
 58 | 
 59 | ```
 60 | searchFlights(origin: "NYC", destination: "Barcelona", date: "2024-06-15")
 61 | ```
 62 | 
 63 | `searchFlights` queries multiple airlines and returns structured flight options. Once flights are selected, it creates a calendar event with
 64 | 
 65 | ```
 66 | createCalendarEvent(title: "Barcelona Trip", startDate: "2024-06-15", endDate: "2024-06-22")
 67 | ```
 68 | 
 69 | to mark the travel dates. Finally, it sends an out-of-office notification using
 70 | 
 71 | ```
 72 | sendEmail(to: "team@work.com", subject: "Out of Office", body: "...")
 73 | ```
 74 | 
 75 | to inform colleagues about the absence.
 76 | 
 77 | Each tool execution requires explicit user approval, ensuring full control over actions taken.
 78 | 
 79 | #### User Interaction Model
 80 | 
 81 | Tools are model-controlled, meaning AI models can discover and invoke them automatically. However, MCP emphasizes human oversight through several mechanisms. Applications should clearly display available tools in the UI and provide visual indicators when tools are being considered or used. Before any tool execution, users must be presented with clear approval dialogs that explain exactly what the tool will do.
 82 | 
 83 | For trust and safety, applications often enforce manual approval to give humans the ability to deny tool invocations. Applications typically implement this through approval dialogs, permission settings for pre-approving certain safe operations, and activity logs that show all tool executions with their results.
 84 | 
 85 | ### Resources - Context Data
 86 | 
 87 | Resources provide structured access to information that the host application can retrieve and provide to AI models as context.
 88 | 
 89 | #### Overview
 90 | 
 91 | Resources expose data from files, APIs, databases, or any other source that an AI needs to understand context. Applications can access this information directly and decide how to use it - whether that's selecting relevant portions, searching with embeddings, or passing it all to the model.
 92 | 
 93 | Resources use URI-based identification, with each resource having a unique URI such as `file:///path/to/document.md`. They declare MIME types for appropriate content handling and support two discovery patterns: **direct resources** with fixed URIs, and **resource templates** with parameterized URIs.
 94 | 
 95 | **Resource Templates** enable dynamic resource access through URI templates. A template like `travel://activities/{city}/{category}` would access filtered activity data by substituting both `{city}` and `{category}` parameters. For example, `travel://activities/barcelona/museums` would return all museums in Barcelona. Resource Templates include metadata such as title, description, and expected MIME type, making them discoverable and self-documenting.
 96 | 
 97 | **Protocol operations:**
 98 | 
 99 | | Method                     | Purpose                         | Returns                                |
100 | | -------------------------- | ------------------------------- | -------------------------------------- |
101 | | `resources/list`           | List available direct resources | Array of resource descriptors          |
102 | | `resources/templates/list` | Discover resource templates     | Array of resource template definitions |
103 | | `resources/read`           | Retrieve resource contents      | Resource data with metadata            |
104 | | `resources/subscribe`      | Monitor resource changes        | Subscription confirmation              |
105 | 
106 | #### Example: Accessing Context Data
107 | 
108 | Continuing with the travel planning example, resources provide the AI application with access to relevant information:
109 | 
110 | - **Calendar data** (`calendar://events/2024`) - To check availability
111 | - **Travel documents** (`file:///Documents/Travel/passport.pdf`) - For important information
112 | - **Previous itineraries** (`trips://history/barcelona-2023`) - User selects which past trip style to follow
113 | 
114 | Instead of manually copying this information, resources provide raw information to AI applications. The application can choose how to best handle the data. Applications might choose to select a subset of data, using embeddings or keyword search, or pass the raw data from a resource directly to a model. In our example, during the planning phase, the AI application can pass the calendar data, weather data and travel preferences, so that the model can check availability, look up weather patterns, and reference travel preferences.
115 | 
116 | **Resource Template Examples:**
117 | 
118 | ```json
119 | {
120 |   "uriTemplate": "weather://forecast/{city}/{date}",
121 |   "name": "weather-forecast",
122 |   "title": "Weather Forecast",
123 |   "description": "Get weather forecast for any city and date",
124 |   "mimeType": "application/json"
125 | }
126 | 
127 | {
128 |   "uriTemplate": "travel://flights/{origin}/{destination}",
129 |   "name": "flight-search",
130 |   "title": "Flight Search",
131 |   "description": "Search available flights between cities",
132 |   "mimeType": "application/json"
133 | }
134 | ```
135 | 
136 | These templates enable flexible queries. For weather data, users can access forecasts for any city/date combination. For flights, they can search routes between any two airports. When a user has input "NYC" as the `origin` airport and begins to input "Bar" as the `destination` airport, the system can suggest "Barcelona (BCN)" or "Barbados (BGI)".
137 | 
138 | #### Parameter Completion
139 | 
140 | Dynamic resources support parameter completion. For example:
141 | 
142 | - Typing "Par" as input for `weather://forecast/{city}` might suggest "Paris" or "Park City"
143 | - The system helps discover valid values without requiring exact format knowledge
144 | 
145 | #### User Interaction Model
146 | 
147 | Resources are application-driven, giving hosts flexibility in how they retrieve, process, and present available context. Common interaction patterns include tree or list views for browsing resources in familiar folder-like structures, search and filter interfaces for finding specific resources, automatic context inclusion based on heuristics or AI selection, and manual selection interfaces.
148 | 
149 | Applications are free to implement resource discovery through any interface pattern that suits their needs. The protocol doesn't mandate specific UI patterns, allowing for resource pickers with preview capabilities, smart suggestions based on current conversation context, bulk selection for including multiple resources, or integration with existing file browsers and data explorers.
150 | 
151 | ### Prompts - Interaction Templates
152 | 
153 | Prompts provide reusable templates. They allow MCP server authors to provide parameterized prompts for a domain, or showcase how to best use the MCP server.
154 | 
155 | #### Overview
156 | 
157 | Prompts are structured templates that define expected inputs and interaction patterns. They are user-controlled, requiring explicit invocation rather than automatic triggering. Prompts can be context-aware, referencing available resources and tools to create comprehensive workflows. Like resources, prompts support parameter completion to help users discover valid argument values.
158 | 
159 | **Protocol operations:**
160 | 
161 | | Method         | Purpose                    | Returns                               |
162 | | -------------- | -------------------------- | ------------------------------------- |
163 | | `prompts/list` | Discover available prompts | Array of prompt descriptors           |
164 | | `prompts/get`  | Retrieve prompt details    | Full prompt definition with arguments |
165 | 
166 | #### Example: Streamlined Workflows
167 | 
168 | Prompts provide structured templates for common tasks. In the travel planning context:
169 | 
170 | **"Plan a vacation" prompt:**
171 | 
172 | ```json
173 | {
174 |   "name": "plan-vacation",
175 |   "title": "Plan a vacation",
176 |   "description": "Guide through vacation planning process",
177 |   "arguments": [
178 |     { "name": "destination", "type": "string", "required": true },
179 |     { "name": "duration", "type": "number", "description": "days" },
180 |     { "name": "budget", "type": "number", "required": false },
181 |     { "name": "interests", "type": "array", "items": { "type": "string" } }
182 |   ]
183 | }
184 | ```
185 | 
186 | Rather than unstructured natural language input, the prompt system enables:
187 | 
188 | 1. Selection of the "Plan a vacation" template
189 | 2. Structured input: Barcelona, 7 days, $3000, ["beaches", "architecture", "food"]
190 | 3. Consistent workflow execution based on the template
191 | 
192 | #### User Interaction Model
193 | 
194 | Prompts are user-controlled, requiring explicit invocation. Applications typically expose prompts through various UI patterns such as slash commands (typing "/" to see available prompts like /plan-vacation), command palettes for searchable access, dedicated UI buttons for frequently used prompts, or context menus that suggest relevant prompts.
195 | 
196 | The protocol gives implementers freedom to design interfaces that feel natural within their application. Key principles include easy discovery of available prompts, clear descriptions of what each prompt does, natural argument input with validation, and transparent display of the prompt's underlying template.
197 | 
198 | ## How It All Works Together
199 | 
200 | The real power of MCP emerges when multiple servers work together, combining their specialized capabilities through a unified interface.
201 | 
202 | ### Example: Multi-Server Travel Planning
203 | 
204 | Consider an AI application with three connected servers:
205 | 
206 | 1. **Travel Server** - Handles flights, hotels, and itineraries
207 | 2. **Weather Server** - Provides climate data and forecasts
208 | 3. **Calendar/Email Server** - Manages schedules and communications
209 | 
210 | #### The Complete Flow
211 | 
212 | 1. **User invokes a prompt with parameters:**
213 | 
214 |    ```json
215 |    {
216 |      "prompt": "plan-vacation",
217 |      "arguments": {
218 |        "destination": "Barcelona",
219 |        "departure_date": "2024-06-15",
220 |        "return_date": "2024-06-22",
221 |        "budget": 3000,
222 |        "travelers": 2
223 |      }
224 |    }
225 |    ```
226 | 
227 | 2. **User selects resources to include:**
228 |    - `calendar://my-calendar/June-2024` (from Calendar Server)
229 |    - `travel://preferences/europe` (from Travel Server)
230 |    - `travel://past-trips/Spain-2023` (from Travel Server)
231 | 
232 | 3. **AI processes the request:**
233 | 
234 |    The AI first reads all selected resources to gather context. From the calendar, it identifies available dates. From travel preferences, it learns preferred airlines and hotel types. From past trips, it discovers previously enjoyed locations. From weather data, it checks climate conditions for the travel period.
235 | 
236 |    Using this context, the AI then requests user approval to execute a series of coordinated actions: searching for flights from NYC to Barcelona, finding hotels within the specified budget, creating a calendar event for the trip duration, and sending confirmation emails with the trip details.
237 | 


--------------------------------------------------------------------------------
/docs/docs/reference/client.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Client
 3 | description: "Create an MCP server with tools and resources"
 4 | ---
 5 | 
 6 | Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
 7 | 
 8 | ### Heading
 9 | 
10 | Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit.
11 | 
12 | ### List
13 | 
14 | Lorem ipsum dolor sit amet consectetur adipiscing elit:
15 | 
16 | 1. **Sed**: Ut enim ad minim veniam quis nostrud exercitation (ullamco laboris nisi aliquip)
17 | 2. **Duis**: Aute irure dolor in reprehenderit in voluptate velit esse (cillum dolore eu fugiat)
18 | 3. **Excepteur**: Sint occaecat cupidatat non proident sunt in culpa (qui officia deserunt mollit)
19 | 


--------------------------------------------------------------------------------
/docs/docs/reference/server.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Server
 3 | description: "Use LLMs to quickly generate a prototype"
 4 | ---
 5 | 
 6 | Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
 7 | 
 8 | ### Heading
 9 | 
10 | Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit.
11 | 
12 | ### List
13 | 
14 | Lorem ipsum dolor sit amet consectetur adipiscing elit:
15 | 
16 | 1. **Sed**: Ut enim ad minim veniam quis nostrud exercitation (ullamco laboris nisi aliquip)
17 | 2. **Duis**: Aute irure dolor in reprehenderit in voluptate velit esse (cillum dolore eu fugiat)
18 | 3. **Excepteur**: Sint occaecat cupidatat non proident sunt in culpa (qui officia deserunt mollit)
19 | 


--------------------------------------------------------------------------------
/docs/docs/sdk.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: SDKs
 3 | description: Official SDKs for building with the Model Context Protocol
 4 | ---
 5 | 
 6 | Build MCP servers and clients using our official SDKs. Choose the SDK that matches your technology stack - all SDKs provide the same core functionality and full protocol support.
 7 | 
 8 | ## Available SDKs
 9 | 
10 | <CardGroup cols={3}>
11 |   <Card
12 |     title="TypeScript"
13 |     icon="square-js"
14 |     href="https://github.com/modelcontextprotocol/typescript-sdk"
15 |   />
16 |   <Card
17 |     title="Python"
18 |     icon="python"
19 |     href="https://github.com/modelcontextprotocol/python-sdk"
20 |   />
21 |   <Card
22 |     title="Go"
23 |     icon="golang"
24 |     href="https://github.com/modelcontextprotocol/go-sdk"
25 |   />
26 |   <Card
27 |     title="Kotlin"
28 |     icon="square-k"
29 |     href="https://github.com/modelcontextprotocol/kotlin-sdk"
30 |   />
31 |   <Card
32 |     title="Swift"
33 |     icon="swift"
34 |     href="https://github.com/modelcontextprotocol/swift-sdk"
35 |   />
36 |   <Card
37 |     title="Java"
38 |     icon="java"
39 |     href="https://github.com/modelcontextprotocol/java-sdk"
40 |   />
41 |   <Card
42 |     title="C#"
43 |     icon="square-c"
44 |     href="https://github.com/modelcontextprotocol/csharp-sdk"
45 |   />
46 |   <Card
47 |     title="Ruby"
48 |     icon="gem"
49 |     href="https://github.com/modelcontextprotocol/ruby-sdk"
50 |   />
51 |   <Card
52 |     title="Rust"
53 |     icon="rust"
54 |     href="https://github.com/modelcontextprotocol/rust-sdk"
55 |   />
56 | </CardGroup>
57 | 
58 | ## Getting Started
59 | 
60 | Each SDK provides the same functionality but follows the idioms and best practices of its language. All SDKs support:
61 | 
62 | - Creating MCP servers that expose tools, resources, and prompts
63 | - Building MCP clients that can connect to any MCP server
64 | - Local and Remote transport protocols
65 | - Protocol compliance with type safety
66 | 
67 | Visit the SDK page for your chosen language to find installation instructions, documentation, and examples.
68 | 
69 | ## Next Steps
70 | 
71 | Ready to start building with MCP? Choose your path:
72 | 
73 | <CardGroup cols={2}>
74 |   <Card title="Build a Server" icon="server" href="/quickstart/server">
75 |     Learn how to create your first MCP server
76 |   </Card>
77 |   <Card title="Build a Client" icon="computer" href="/quickstart/client">
78 |     Create applications that connect to MCP servers
79 |   </Card>
80 |   <Card
81 |     title="Explore Examples"
82 |     icon="code"
83 |     href="https://github.com/modelcontextprotocol/servers"
84 |   >
85 |     Browse pre-built servers for inspiration
86 |   </Card>
87 |   <Card
88 |     title="Understand the Architecture"
89 |     icon="book"
90 |     href="/docs/learn/architecture"
91 |   >
92 |     Dive deeper into how MCP works
93 |   </Card>
94 | </CardGroup>
95 | 


--------------------------------------------------------------------------------
/docs/docs/tutorials/use-local-mcp-server.mdx:
--------------------------------------------------------------------------------
1 | todo
2 | 


--------------------------------------------------------------------------------
/docs/docs/tutorials/use-remote-mcp-server.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Connect to Remote MCP Servers
  3 | description: Learn how to connect Claude to remote MCP servers and extend its capabilities with internet-hosted tools and data sources
  4 | ---
  5 | 
  6 | Remote MCP servers extend AI applications' capabilities beyond your local environment, providing access to internet-hosted tools, services, and data sources. By connecting to remote MCP servers, you transform AI assistants from helpful tools into informed teammates capable of handling complex, multi-step projects with real-time access to external resources.
  7 | 
  8 | Many clients now support remote MCP servers, enabling a wide range of integration possibilities. This guide demonstrates how to connect to remote MCP servers using [Claude](https://claude.ai/) as an example, one of the [many clients that support MCP](/clients). While we focus on Claude's implementation through Custom Connectors, the concepts apply broadly to other MCP-compatible clients.
  9 | 
 10 | ## Understanding Remote MCP Servers
 11 | 
 12 | Remote MCP servers function similarly to local MCP servers but are hosted on the internet rather than your local machine. They expose tools, prompts, and resources that Claude can use to perform tasks on your behalf. These servers can integrate with various services such as project management tools, documentation systems, code repositories, and any other API-enabled service.
 13 | 
 14 | The key advantage of remote MCP servers is their accessibility. Unlike local servers that require installation and configuration on each device, remote servers are available from any MCP client with an internet connection. This makes them ideal for web-based AI applications, integrations that emphasize ease-of-use and services that require server-side processing or authentication.
 15 | 
 16 | ## What are Custom Connectors?
 17 | 
 18 | Custom Connectors serve as the bridge between Claude and remote MCP servers. They allow you to connect Claude directly to the tools and data sources that matter most to your workflows, enabling Claude to operate within your favorite software and draw insights from the complete context of your external tools.
 19 | 
 20 | With Custom Connectors, you can:
 21 | 
 22 | - [Connect Claude to existing remote MCP servers](https://support.anthropic.com/en/articles/11175166-getting-started-with-custom-connectors-using-remote-mcp) provided by third-party developers
 23 | - [Build your own remote MCP servers to connect with any tool](https://support.anthropic.com/en/articles/11503834-building-custom-connectors-via-remote-mcp-servers)
 24 | 
 25 | ## Connecting to a Remote MCP Server
 26 | 
 27 | The process of connecting Claude to a remote MCP server involves adding a Custom Connector through the [Claude interface](https://claude.ai/). This establishes a secure connection between Claude and your chosen remote server.
 28 | 
 29 | <Steps>
 30 | <Step title="Navigate to Connector Settings">
 31 | Open Claude in your browser and navigate to the settings page. You can access this by clicking on your profile icon and selecting "Settings" from the dropdown menu. Once in settings, locate and click on the "Connectors" section in the sidebar.
 32 | 
 33 | This will display your currently configured connectors and provide options to add new ones.
 34 | 
 35 | </Step>
 36 | 
 37 | <Step title="Add a Custom Connector">
 38 | In the Connectors section, scroll to the bottom where you'll find the "Add custom connector" button. Click this button to begin the connection process.
 39 | 
 40 | <Frame>
 41 |   <img
 42 |     src="/images/quickstart-remote/1-add-connector.png"
 43 |     alt="Add custom connector button in Claude settings"
 44 |   />
 45 | </Frame>
 46 | 
 47 | A dialog will appear prompting you to enter the remote MCP server URL. This URL should be provided by the server developer or administrator. Enter the complete URL, ensuring it includes the proper protocol (https://) and any necessary path components.
 48 | 
 49 | <Frame>
 50 |   <img
 51 |     src="/images/quickstart-remote/2-connect.png"
 52 |     alt="Dialog for entering remote MCP server URL"
 53 |   />
 54 | </Frame>
 55 | 
 56 | After entering the URL, click "Add" to proceed with the connection.
 57 | 
 58 | </Step>
 59 | 
 60 | <Step title="Complete Authentication">
 61 | Most remote MCP servers require authentication to ensure secure access to their resources. The authentication process varies depending on the server implementation but commonly involves OAuth, API keys, or username/password combinations.
 62 | 
 63 | <Frame>
 64 |   <img
 65 |     src="/images/quickstart-remote/3-auth.png"
 66 |     alt="Authentication screen for remote MCP server"
 67 |   />
 68 | </Frame>
 69 | 
 70 | Follow the authentication prompts provided by the server. This may redirect you to a third-party authentication provider or display a form within Claude. Once authentication is complete, Claude will establish a secure connection to the remote server.
 71 | 
 72 | </Step>
 73 | 
 74 | <Step title="Access Resources and Prompts">
 75 | After successful connection, the remote server's resources and prompts become available in your Claude conversations. You can access these by clicking the paperclip icon in the message input area, which opens the attachment menu.
 76 | 
 77 | <Frame>
 78 |   <img
 79 |     src="/images/quickstart-remote/4-select-resources-menu.png"
 80 |     alt="Attachment menu showing available resources"
 81 |   />
 82 | </Frame>
 83 | 
 84 | The menu displays all available resources and prompts from your connected servers. Select the items you want to include in your conversation. These resources provide Claude with context and information from your external tools.
 85 | 
 86 | <Frame>
 87 |   <img src="/images/quickstart-remote/5-select-prompts-resources.png" alt="Selecting specific resources and prompts from the menu" />
 88 | </Frame>
 89 | </Step>
 90 | 
 91 | <Step title="Configure Tool Permissions">
 92 | Remote MCP servers often expose multiple tools with varying capabilities. You can control which tools Claude is allowed to use by configuring permissions in the connector settings. This ensures Claude only performs actions you've explicitly authorized.
 93 | 
 94 | <Frame>
 95 |   <img
 96 |     src="/images/quickstart-remote/6-configure-tools.png"
 97 |     alt="Tool permission configuration interface"
 98 |   />
 99 | </Frame>
100 | 
101 | Navigate back to the Connectors settings and click on your connected server. Here you can enable or disable specific tools, set usage limits, and configure other security parameters according to your needs.
102 | 
103 | </Step>
104 | </Steps>
105 | 
106 | ## Best Practices for Using Remote MCP Servers
107 | 
108 | When working with remote MCP servers, consider these recommendations to ensure a secure and efficient experience:
109 | 
110 | **Security considerations**: Always verify the authenticity of remote MCP servers before connecting. Only connect to servers from trusted sources, and review the permissions requested during authentication. Be cautious about granting access to sensitive data or systems.
111 | 
112 | **Managing multiple connectors**: You can connect to multiple remote MCP servers simultaneously. Organize your connectors by purpose or project to maintain clarity. Regularly review and remove connectors you no longer use to keep your workspace organized and secure.
113 | 
114 | ## Next Steps
115 | 
116 | Now that you've connected Claude to a remote MCP server, you can explore its capabilities in your conversations. Try using the connected tools to automate tasks, access external data, or integrate with your existing workflows.
117 | 
118 | <CardGroup cols={2}>
119 |   <Card
120 |     title="Build your own remote server"
121 |     icon="cloud"
122 |     href="https://support.anthropic.com/en/articles/11503834-building-custom-connectors-via-remote-mcp-servers"
123 |   >
124 |     Create custom remote MCP servers to integrate with proprietary tools and
125 |     services
126 |   </Card>
127 |   <Card
128 |     title="Explore available servers"
129 |     icon="grid"
130 |     href="https://github.com/modelcontextprotocol/servers"
131 |   >
132 |     Browse our collection of official and community-created MCP servers
133 |   </Card>
134 |   <Card title="Connect local servers" icon="computer" href="/quickstart/user">
135 |     Learn how to connect Claude Desktop to local MCP servers for direct system
136 |     access
137 |   </Card>
138 |   <Card
139 |     title="Understand the architecture"
140 |     icon="book"
141 |     href="/docs/learn/architecture"
142 |   >
143 |     Dive deeper into how MCP works and its architecture
144 |   </Card>
145 | </CardGroup>
146 | 
147 | Remote MCP servers unlock powerful possibilities for extending Claude's capabilities. As you become familiar with these integrations, you'll discover new ways to streamline your workflows and accomplish complex tasks more efficiently.
148 | 


--------------------------------------------------------------------------------
/docs/examples.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Example Servers
  3 | description: "A list of example servers and implementations"
  4 | ---
  5 | 
  6 | This page showcases various Model Context Protocol (MCP) servers that demonstrate the protocol's capabilities and versatility. These servers enable Large Language Models (LLMs) to securely access tools and data sources.
  7 | 
  8 | ## Reference implementations
  9 | 
 10 | These official reference servers demonstrate core MCP features and SDK usage:
 11 | 
 12 | ### Current reference servers
 13 | 
 14 | - **[Everything](https://github.com/modelcontextprotocol/servers/tree/main/src/everything)** - Reference / test server with prompts, resources, and tools
 15 | - **[Fetch](https://github.com/modelcontextprotocol/servers/tree/main/src/fetch)** - Web content fetching and conversion for efficient LLM usage
 16 | - **[Filesystem](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem)** - Secure file operations with configurable access controls
 17 | - **[Git](https://github.com/modelcontextprotocol/servers/tree/main/src/git)** - Tools to read, search, and manipulate Git repositories
 18 | - **[Memory](https://github.com/modelcontextprotocol/servers/tree/main/src/memory)** - Knowledge graph-based persistent memory system
 19 | - **[Sequential Thinking](https://github.com/modelcontextprotocol/servers/tree/main/src/sequentialthinking)** - Dynamic and reflective problem-solving through thought sequences
 20 | - **[Time](https://github.com/modelcontextprotocol/servers/tree/main/src/time)** - Time and timezone conversion capabilities
 21 | 
 22 | ### Archived servers (historical reference)
 23 | 
 24 | ⚠️ **Note**: The following servers have been moved to the [servers-archived repository](https://github.com/modelcontextprotocol/servers-archived) and are no longer actively maintained. They are provided for historical reference only.
 25 | 
 26 | #### Data and file systems
 27 | 
 28 | - **[PostgreSQL](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/postgres)** - Read-only database access with schema inspection capabilities
 29 | - **[SQLite](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/sqlite)** - Database interaction and business intelligence features
 30 | - **[Google Drive](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/gdrive)** - File access and search capabilities for Google Drive
 31 | 
 32 | #### Development tools
 33 | 
 34 | - **[Git](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/git)** - Tools to read, search, and manipulate Git repositories
 35 | - **[GitHub](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/github)** - Repository management, file operations, and GitHub API integration
 36 | - **[GitLab](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/gitlab)** - GitLab API integration enabling project management
 37 | - **[Sentry](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/sentry)** - Retrieving and analyzing issues from Sentry.io
 38 | 
 39 | #### Web and browser automation
 40 | 
 41 | - **[Brave Search](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/brave-search)** - Web and local search using Brave's Search API
 42 | - **[Puppeteer](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/puppeteer)** - Browser automation and web scraping capabilities
 43 | 
 44 | #### Productivity and communication
 45 | 
 46 | - **[Slack](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/slack)** - Channel management and messaging capabilities
 47 | - **[Google Maps](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/google-maps)** - Location services, directions, and place details
 48 | 
 49 | #### AI and specialized tools
 50 | 
 51 | - **[EverArt](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/everart)** - AI image generation using various models
 52 | - **[AWS KB Retrieval](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/aws-kb-retrieval-server)** - Retrieval from AWS Knowledge Base using Bedrock Agent Runtime
 53 | 
 54 | ## Official integrations
 55 | 
 56 | Visit the [MCP Servers Repository (Official Integrations section)](https://github.com/modelcontextprotocol/servers?tab=readme-ov-file#%EF%B8%8F-official-integrations) for a list of MCP servers maintained by companies for their platforms.
 57 | 
 58 | ## Community implementations
 59 | 
 60 | Visit the [MCP Servers Repository (Community section)](https://github.com/modelcontextprotocol/servers?tab=readme-ov-file#-community-servers) for a list of MCP servers maintained by community members.
 61 | 
 62 | ## Getting started
 63 | 
 64 | ### Using reference servers
 65 | 
 66 | TypeScript-based servers can be used directly with `npx`:
 67 | 
 68 | ```bash
 69 | npx -y @modelcontextprotocol/server-memory
 70 | ```
 71 | 
 72 | Python-based servers can be used with `uvx` (recommended) or `pip`:
 73 | 
 74 | ```bash
 75 | # Using uvx
 76 | uvx mcp-server-git
 77 | 
 78 | # Using pip
 79 | pip install mcp-server-git
 80 | python -m mcp_server_git
 81 | ```
 82 | 
 83 | ### Configuring with Claude
 84 | 
 85 | To use an MCP server with Claude, add it to your configuration:
 86 | 
 87 | ```json
 88 | {
 89 |   "mcpServers": {
 90 |     "memory": {
 91 |       "command": "npx",
 92 |       "args": ["-y", "@modelcontextprotocol/server-memory"]
 93 |     },
 94 |     "filesystem": {
 95 |       "command": "npx",
 96 |       "args": [
 97 |         "-y",
 98 |         "@modelcontextprotocol/server-filesystem",
 99 |         "/path/to/allowed/files"
100 |       ]
101 |     },
102 |     "github": {
103 |       "command": "npx",
104 |       "args": ["-y", "@modelcontextprotocol/server-github"],
105 |       "env": {
106 |         "GITHUB_PERSONAL_ACCESS_TOKEN": "<YOUR_TOKEN>"
107 |       }
108 |     }
109 |   }
110 | }
111 | ```
112 | 
113 | ## Additional resources
114 | 
115 | Visit the [MCP Servers Repository (Resources section)](https://github.com/modelcontextprotocol/servers?tab=readme-ov-file#-resources) for a collection of other resources and projects related to MCP.
116 | 
117 | Visit our [GitHub Discussions](https://github.com/orgs/modelcontextprotocol/discussions) to engage with the MCP community.
118 | 


--------------------------------------------------------------------------------
/docs/faqs.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: "FAQs"
 3 | description: "Explaining MCP and why it matters in simple terms"
 4 | ---
 5 | 
 6 | ## What is MCP?
 7 | 
 8 | MCP (Model Context Protocol) is a standard way for AI applications and agents to connect to and work with your data sources (e.g. local files, databases, or content repositories) and tools (e.g. GitHub, Google Maps, or Puppeteer).
 9 | 
10 | Think of MCP as a universal adapter for AI applications, similar to what USB-C is for physical devices. USB-C acts as a universal adapter to connect devices to various peripherals and accessories. Similarly, MCP provides a standardized way to connect AI applications to different data and tools.
11 | 
12 | Before USB-C, you needed different cables for different connections. Similarly, before MCP, developers had to build custom connections to each data source or tool they wanted their AI application to work with—a time-consuming process that often resulted in limited functionality. Now, with MCP, developers can easily add connections to their AI applications, making their applications much more powerful from day one.
13 | 
14 | ## Why does MCP matter?
15 | 
16 | ### For AI application users
17 | 
18 | MCP means your AI applications can access the information and tools you work with every day, making them much more helpful. Rather than AI being limited to what it already knows about, it can now understand your specific documents, data, and work context.
19 | 
20 | For example, by using MCP servers, applications can access your personal documents from Google Drive or data about your codebase from GitHub, providing more personalized and contextually relevant assistance.
21 | 
22 | Imagine asking an AI assistant: "Summarize last week's team meeting notes and schedule follow-ups with everyone."
23 | 
24 | By using connections to data sources powered by MCP, the AI assistant can:
25 | 
26 | - Connect to your Google Drive through an MCP server to read meeting notes
27 | - Understand who needs follow-ups based on the notes
28 | - Connect to your calendar through another MCP server to schedule the meetings automatically
29 | 
30 | ### For developers
31 | 
32 | MCP reduces development time and complexity when building AI applications that need to access various data sources. With MCP, developers can focus on building great AI experiences rather than repeatedly creating custom connectors.
33 | 
34 | Traditionally, connecting applications with data sources required building custom, one-off connections for each data source and each application. This created significant duplicative work—every developer wanting to connect their AI application to Google Drive or Slack needed to build their own connection.
35 | 
36 | MCP simplifies this by enabling developers to build MCP servers for data sources that are then reusable by various applications. For example, using the open source Google Drive MCP server, many different applications can access data from Google Drive without each developer needing to build a custom connection.
37 | 
38 | This open source ecosystem of MCP servers means developers can leverage existing work rather than starting from scratch, making it easier to build powerful AI applications that seamlessly integrate with the tools and data sources their users already rely on.
39 | 
40 | ## How does MCP work?
41 | 
42 | <Frame>
43 |   <img src="/images/mcp-simple-diagram.png" />
44 | </Frame>
45 | 
46 | MCP creates a bridge between your AI applications and your data through a straightforward system:
47 | 
48 | - **MCP servers** connect to your data sources and tools (like Google Drive or Slack)
49 | - **MCP clients** are run by AI applications (like Claude Desktop) to connect them to these servers
50 | - When you give permission, your AI application discovers available MCP servers
51 | - The AI model can then use these connections to read information and take actions
52 | 
53 | This modular system means new capabilities can be added without changing AI applications themselves—just like adding new accessories to your computer without upgrading your entire system.
54 | 
55 | ## Who creates and maintains MCP servers?
56 | 
57 | MCP servers are developed and maintained by:
58 | 
59 | - Developers at Anthropic who build servers for common tools and data sources
60 | - Open source contributors who create servers for tools they use
61 | - Enterprise development teams building servers for their internal systems
62 | - Software providers making their applications AI-ready
63 | 
64 | Once an open source MCP server is created for a data source, it can be used by any MCP-compatible AI application, creating a growing ecosystem of connections. See our [list of example servers](/examples), or [get started building your own server](/quickstart/server).
65 | 


--------------------------------------------------------------------------------
/docs/favicon.svg:
--------------------------------------------------------------------------------
 1 | <svg width="180" height="180" viewBox="0 0 180 180" fill="none" xmlns="http://www.w3.org/2000/svg">
 2 | <rect width="180" height="180" rx="24" fill="black"/>
 3 | <mask id="mask0_246_1229" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="7" y="7" width="166" height="166">
 4 | <path d="M173 7H7V173H173V7Z" fill="white"/>
 5 | </mask>
 6 | <g mask="url(#mask0_246_1229)">
 7 | <path d="M23.5996 85.2532L86.2021 22.6507C94.8457 14.0071 108.86 14.0071 117.503 22.6507C126.147 31.2942 126.147 45.3083 117.503 53.9519L70.2254 101.23" stroke="white" stroke-width="11.0667" stroke-linecap="round"/>
 8 | <path d="M70.8789 100.578L117.504 53.952C126.148 45.3083 140.163 45.3083 148.806 53.952L149.132 54.278C157.776 62.9216 157.776 76.9357 149.132 85.5792L92.5139 142.198C89.6327 145.079 89.6327 149.75 92.5139 152.631L104.14 164.257" stroke="white" stroke-width="11.0667" stroke-linecap="round"/>
 9 | <path d="M101.853 38.3013L55.553 84.6011C46.9094 93.2447 46.9094 107.258 55.553 115.902C64.1966 124.546 78.2106 124.546 86.8543 115.902L133.154 69.6025" stroke="white" stroke-width="11.0667" stroke-linecap="round"/>
10 | </g>
11 | </svg>
12 | 


--------------------------------------------------------------------------------
/docs/images/available-mcp-tools.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/available-mcp-tools.png


--------------------------------------------------------------------------------
/docs/images/claude-desktop-mcp-plug-icon.svg:
--------------------------------------------------------------------------------
1 | <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
2 | <path d="M18.7076 17.2926C18.6147 17.1996 18.5044 17.1258 18.383 17.0755C18.2616 17.0252 18.1315 16.9993 18.0001 16.9993C17.8687 16.9993 17.7385 17.0252 17.6171 17.0755C17.4957 17.1258 17.3854 17.1996 17.2926 17.2926L15.0001 19.5863L12.4138 17.0001L14.7076 14.7076C14.8952 14.5199 15.0006 14.2654 15.0006 14.0001C15.0006 13.7347 14.8952 13.4802 14.7076 13.2926C14.5199 13.1049 14.2654 12.9995 14.0001 12.9995C13.7347 12.9995 13.4802 13.1049 13.2926 13.2926L11.0001 15.5863L8.70757 13.2926C8.51993 13.1049 8.26543 12.9995 8.00007 12.9995C7.7347 12.9995 7.48021 13.1049 7.29257 13.2926C7.10493 13.4802 6.99951 13.7347 6.99951 14.0001C6.99951 14.2654 7.10493 14.5199 7.29257 14.7076L8.08632 15.5001L5.17132 18.4138C4.79979 18.7852 4.50507 19.2262 4.30399 19.7116C4.10292 20.197 3.99942 20.7172 3.99942 21.2426C3.99942 21.7679 4.10292 22.2881 4.30399 22.7735C4.50507 23.2589 4.79979 23.6999 5.17132 24.0713L5.84382 24.7426L2.29257 28.2926C2.19966 28.3855 2.12596 28.4958 2.07567 28.6172C2.02539 28.7386 1.99951 28.8687 1.99951 29.0001C1.99951 29.1314 2.02539 29.2616 2.07567 29.3829C2.12596 29.5043 2.19966 29.6146 2.29257 29.7076C2.48021 29.8952 2.7347 30.0006 3.00007 30.0006C3.13146 30.0006 3.26157 29.9747 3.38296 29.9244C3.50436 29.8742 3.61466 29.8005 3.70757 29.7076L7.25757 26.1563L7.92882 26.8288C8.30026 27.2003 8.74126 27.4951 9.22662 27.6961C9.71198 27.8972 10.2322 28.0007 10.7576 28.0007C11.2829 28.0007 11.8032 27.8972 12.2885 27.6961C12.7739 27.4951 13.2149 27.2003 13.5863 26.8288L16.5001 23.9138L17.2926 24.7076C17.3855 24.8005 17.4958 24.8742 17.6172 24.9244C17.7386 24.9747 17.8687 25.0006 18.0001 25.0006C18.1315 25.0006 18.2616 24.9747 18.383 24.9244C18.5044 24.8742 18.6147 24.8005 18.7076 24.7076C18.8005 24.6146 18.8742 24.5043 18.9245 24.3829C18.9747 24.2616 19.0006 24.1314 19.0006 24.0001C19.0006 23.8687 18.9747 23.7386 18.9245 23.6172C18.8742 23.4958 18.8005 23.3855 18.7076 23.2926L16.4138 21.0001L18.7076 18.7076C18.8005 18.6147 18.8743 18.5044 18.9246 18.383C18.975 18.2616 19.0009 18.1315 19.0009 18.0001C19.0009 17.8686 18.975 17.7385 18.9246 17.6171C18.8743 17.4957 18.8005 17.3854 18.7076 17.2926ZM12.1713 25.4176C11.7963 25.7923 11.2878 26.0029 10.7576 26.0029C10.2274 26.0029 9.71885 25.7923 9.34382 25.4176L6.58632 22.6563C6.21153 22.2813 6.00099 21.7728 6.00099 21.2426C6.00099 20.7123 6.21153 20.2038 6.58632 19.8288L9.50007 16.9138L15.0863 22.5001L12.1713 25.4176ZM29.7076 2.29255C29.6147 2.19958 29.5044 2.12582 29.383 2.07549C29.2616 2.02517 29.1315 1.99927 29.0001 1.99927C28.8687 1.99927 28.7385 2.02517 28.6171 2.07549C28.4957 2.12582 28.3854 2.19958 28.2926 2.29255L24.7426 5.8438L24.0713 5.1713C23.3203 4.42249 22.3031 4.00199 21.2426 4.00199C20.1821 4.00199 19.1648 4.42249 18.4138 5.1713L15.5001 8.0863L14.7076 7.29255C14.5199 7.10491 14.2654 6.9995 14.0001 6.9995C13.7347 6.9995 13.4802 7.10491 13.2926 7.29255C13.1049 7.4802 12.9995 7.73469 12.9995 8.00005C12.9995 8.26542 13.1049 8.51991 13.2926 8.70755L23.2926 18.7076C23.3855 18.8005 23.4958 18.8742 23.6172 18.9244C23.7386 18.9747 23.8687 19.0006 24.0001 19.0006C24.1315 19.0006 24.2616 18.9747 24.383 18.9244C24.5044 18.8742 24.6147 18.8005 24.7076 18.7076C24.8005 18.6146 24.8742 18.5043 24.9245 18.3829C24.9747 18.2616 25.0006 18.1314 25.0006 18.0001C25.0006 17.8687 24.9747 17.7386 24.9245 17.6172C24.8742 17.4958 24.8005 17.3855 24.7076 17.2926L23.9138 16.5001L26.8288 13.5863C27.2003 13.2149 27.4951 12.7739 27.6961 12.2885C27.8972 11.8031 28.0007 11.2829 28.0007 10.7576C28.0007 10.2322 27.8972 9.71197 27.6961 9.22661C27.4951 8.74125 27.2003 8.30025 26.8288 7.9288L26.1563 7.25755L29.7076 3.70755C29.8005 3.61468 29.8743 3.50439 29.9246 3.38299C29.975 3.2616 30.0009 3.13147 30.0009 3.00005C30.0009 2.86864 29.975 2.73851 29.9246 2.61711C29.8743 2.49572 29.8005 2.38543 29.7076 2.29255ZM25.4138 12.1676L22.5001 15.0863L16.9138 9.50005L19.8288 6.5863C20.2039 6.21151 20.7124 6.00098 21.2426 6.00098C21.7728 6.00098 22.2813 6.21151 22.6563 6.5863L25.4138 9.3363C25.6005 9.52214 25.7487 9.74303 25.8498 9.98629C25.9509 10.2295 26.0029 10.4904 26.0029 10.7538C26.0029 11.0172 25.9509 11.2781 25.8498 11.5213C25.7487 11.7646 25.6005 11.9855 25.4138 12.1713V12.1676Z" fill="#343330"/>
3 | </svg>
4 | 


--------------------------------------------------------------------------------
/docs/images/claude-desktop-mcp-slider.svg:
--------------------------------------------------------------------------------
1 | <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
2 |   <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 6h9.75M10.5 6a1.5 1.5 0 1 1-3 0m3 0a1.5 1.5 0 1 0-3 0M3.75 6H7.5m3 12h9.75m-9.75 0a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m-3.75 0H7.5m9-6h3.75m-3.75 0a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m-9.75 0h9.75" />
3 | </svg>
4 | 


--------------------------------------------------------------------------------
/docs/images/client-claude-cli-python.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/client-claude-cli-python.png


--------------------------------------------------------------------------------
/docs/images/current-weather.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/current-weather.png


--------------------------------------------------------------------------------
/docs/images/hero-dark.svg:
--------------------------------------------------------------------------------
  1 | <svg width="700" height="320" viewBox="0 0 700 320" fill="none" xmlns="http://www.w3.org/2000/svg">
  2 | <g clip-path="url(#clip0_2862_30)">
  3 | <rect width="700" height="320" rx="16" fill="url(#paint0_linear_2862_30)"/>
  4 | <path d="M311.889 247.3C283.097 247.215 258.226 231.466 246.292 201.629C234.357 171.793 238.02 134.523 253.414 101.112C282.206 101.197 307.077 116.945 319.011 146.782C330.946 176.619 327.283 213.888 311.889 247.3Z" fill="white"/>
  5 | <path d="M311.889 247.3C283.097 247.215 258.226 231.466 246.292 201.629C234.357 171.793 238.02 134.523 253.414 101.112C282.206 101.197 307.077 116.945 319.011 146.782C330.946 176.619 327.283 213.888 311.889 247.3Z" fill="url(#paint1_radial_2862_30)"/>
  6 | <path d="M311.889 247.3C283.097 247.215 258.226 231.466 246.292 201.629C234.357 171.793 238.02 134.523 253.414 101.112C282.206 101.197 307.077 116.945 319.011 146.782C330.946 176.619 327.283 213.888 311.889 247.3Z" fill="black" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
  7 | <path d="M311.889 247.3C283.097 247.215 258.226 231.466 246.292 201.629C234.357 171.793 238.02 134.523 253.414 101.112C282.206 101.197 307.077 116.945 319.011 146.782C330.946 176.619 327.283 213.888 311.889 247.3Z" fill="url(#paint2_linear_2862_30)" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
  8 | <path d="M311.72 247.034C283.108 246.887 258.409 231.208 246.538 201.531C234.656 171.825 238.271 134.702 253.583 101.377C282.195 101.524 306.894 117.203 318.765 146.88C330.647 176.586 327.031 213.709 311.72 247.034Z" stroke="url(#paint3_linear_2862_30)" stroke-opacity="0.05" stroke-width="0.530516"/>
  9 | <path d="M305.839 247.174C343.92 237.419 377.154 210.619 393.585 171.64C410.017 132.661 405.98 90.1988 386.347 56.1934C348.266 65.9477 315.032 92.7486 298.601 131.728C282.169 170.706 286.206 213.168 305.839 247.174Z" fill="white"/>
 10 | <path d="M305.839 247.174C343.92 237.419 377.154 210.619 393.585 171.64C410.017 132.661 405.98 90.1988 386.347 56.1934C348.266 65.9477 315.032 92.7486 298.601 131.728C282.169 170.706 286.206 213.168 305.839 247.174Z" fill="url(#paint4_radial_2862_30)"/>
 11 | <path d="M393.341 171.537C376.971 210.369 343.89 237.091 305.969 246.867C286.462 212.959 282.476 170.663 298.845 131.831C315.215 92.9978 348.295 66.2765 386.217 56.5004C405.724 90.4077 409.71 132.704 393.341 171.537Z" stroke="url(#paint5_linear_2862_30)" stroke-opacity="0.05" stroke-width="0.530516"/>
 12 | <path d="M305.686 246.995C329.749 266.114 361.965 272.832 393.67 262.129C425.376 251.426 449.499 225.691 461.03 194.556C436.967 175.437 404.751 168.719 373.045 179.422C341.34 190.125 317.217 215.86 305.686 246.995Z" fill="white"/>
 13 | <path d="M305.686 246.995C329.749 266.114 361.965 272.832 393.67 262.129C425.376 251.426 449.499 225.691 461.03 194.556C436.967 175.437 404.751 168.719 373.045 179.422C341.34 190.125 317.217 215.86 305.686 246.995Z" fill="url(#paint6_radial_2862_30)"/>
 14 | <path d="M305.686 246.995C329.749 266.114 361.965 272.832 393.67 262.129C425.376 251.426 449.499 225.691 461.03 194.556C436.967 175.437 404.751 168.719 373.045 179.422C341.34 190.125 317.217 215.86 305.686 246.995Z" fill="black" fill-opacity="0.2" style="mix-blend-mode:hard-light"/>
 15 | <path d="M305.686 246.995C329.749 266.114 361.965 272.832 393.67 262.129C425.376 251.426 449.499 225.691 461.03 194.556C436.967 175.437 404.751 168.719 373.045 179.422C341.34 190.125 317.217 215.86 305.686 246.995Z" fill="url(#paint7_linear_2862_30)" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
 16 | <path d="M393.586 261.878C362.034 272.529 329.98 265.88 306.002 246.907C317.534 215.919 341.57 190.327 373.13 179.673C404.681 169.023 436.735 175.671 460.714 194.644C449.181 225.632 425.145 251.224 393.586 261.878Z" stroke="url(#paint8_linear_2862_30)" stroke-opacity="0.05" stroke-width="0.530516"/>
 17 | <g opacity="0.8" filter="url(#filter0_f_2862_30)">
 18 | <circle cx="660" cy="-60" r="160" fill="#18E244" fill-opacity="0.4"/>
 19 | </g>
 20 | <g opacity="0.8" filter="url(#filter1_f_2862_30)">
 21 | <circle cx="20" cy="213" r="160" fill="#18CAE2" fill-opacity="0.33"/>
 22 | </g>
 23 | <g opacity="0.8" filter="url(#filter2_f_2862_30)">
 24 | <circle cx="660" cy="480" r="160" fill="#18E2B2" fill-opacity="0.52"/>
 25 | </g>
 26 | <g opacity="0.8" filter="url(#filter3_f_2862_30)">
 27 | <circle cx="20" cy="413" r="160" fill="#4018E2" fill-opacity="0.22"/>
 28 | </g>
 29 | <path opacity="0.2" d="M0 50H700" stroke="url(#paint9_radial_2862_30)" stroke-dasharray="4 4"/>
 30 | <path opacity="0.1" d="M0 82H700" stroke="url(#paint10_radial_2862_30)" stroke-dasharray="4 4"/>
 31 | <path opacity="0.2" d="M239 0L239 320" stroke="url(#paint11_radial_2862_30)" stroke-dasharray="4 4"/>
 32 | <path opacity="0.1" d="M271 0L271 320" stroke="url(#paint12_radial_2862_30)" stroke-dasharray="4 4"/>
 33 | <path opacity="0.2" d="M461 0L461 320" stroke="url(#paint13_radial_2862_30)" stroke-dasharray="4 4"/>
 34 | <path opacity="0.1" d="M429 0L429 320" stroke="url(#paint14_radial_2862_30)" stroke-dasharray="4 4"/>
 35 | <path opacity="0.2" d="M0 271H700" stroke="url(#paint15_radial_2862_30)" stroke-dasharray="4 4"/>
 36 | <path opacity="0.1" d="M0 239H700" stroke="url(#paint16_radial_2862_30)" stroke-dasharray="4 4"/>
 37 | <g style="mix-blend-mode:overlay" opacity="0.1">
 38 | <path d="M0 160H700" stroke="url(#paint17_linear_2862_30)"/>
 39 | </g>
 40 | <g style="mix-blend-mode:overlay" opacity="0.2">
 41 | <path d="M511 -1L189 321" stroke="url(#paint18_linear_2862_30)"/>
 42 | </g>
 43 | <g style="mix-blend-mode:overlay" opacity="0.2">
 44 | <path d="M511 321L189 -1" stroke="url(#paint19_linear_2862_30)"/>
 45 | </g>
 46 | <g style="mix-blend-mode:overlay" opacity="0.1">
 47 | <circle cx="350" cy="160" r="111" stroke="white"/>
 48 | </g>
 49 | <g style="mix-blend-mode:overlay" opacity="0.1">
 50 | <circle cx="350" cy="160" r="79" stroke="white"/>
 51 | </g>
 52 | </g>
 53 | <defs>
 54 | <filter id="filter0_f_2862_30" x="260" y="-460" width="800" height="800" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
 55 | <feFlood flood-opacity="0" result="BackgroundImageFix"/>
 56 | <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
 57 | <feGaussianBlur stdDeviation="120" result="effect1_foregroundBlur_2862_30"/>
 58 | </filter>
 59 | <filter id="filter1_f_2862_30" x="-380" y="-187" width="800" height="800" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
 60 | <feFlood flood-opacity="0" result="BackgroundImageFix"/>
 61 | <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
 62 | <feGaussianBlur stdDeviation="120" result="effect1_foregroundBlur_2862_30"/>
 63 | </filter>
 64 | <filter id="filter2_f_2862_30" x="260" y="80" width="800" height="800" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
 65 | <feFlood flood-opacity="0" result="BackgroundImageFix"/>
 66 | <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
 67 | <feGaussianBlur stdDeviation="120" result="effect1_foregroundBlur_2862_30"/>
 68 | </filter>
 69 | <filter id="filter3_f_2862_30" x="-380" y="13" width="800" height="800" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
 70 | <feFlood flood-opacity="0" result="BackgroundImageFix"/>
 71 | <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
 72 | <feGaussianBlur stdDeviation="120" result="effect1_foregroundBlur_2862_30"/>
 73 | </filter>
 74 | <linearGradient id="paint0_linear_2862_30" x1="1.04308e-05" y1="320" x2="710.784" y2="26.0793" gradientUnits="userSpaceOnUse">
 75 | <stop stop-color="#18E299" stop-opacity="0.09"/>
 76 | <stop offset="0.729167" stop-color="#0D9373" stop-opacity="0.08"/>
 77 | </linearGradient>
 78 | <radialGradient id="paint1_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(208.697 189.703) rotate(-10.029) scale(169.097 167.466)">
 79 | <stop stop-color="#00B0BB"/>
 80 | <stop offset="1" stop-color="#00DB65"/>
 81 | </radialGradient>
 82 | <linearGradient id="paint2_linear_2862_30" x1="306.587" y1="93.5598" x2="252.341" y2="224.228" gradientUnits="userSpaceOnUse">
 83 | <stop stop-color="#18E299"/>
 84 | <stop offset="1"/>
 85 | </linearGradient>
 86 | <linearGradient id="paint3_linear_2862_30" x1="311.84" y1="123.717" x2="253.579" y2="224.761" gradientUnits="userSpaceOnUse">
 87 | <stop/>
 88 | <stop offset="1" stop-opacity="0"/>
 89 | </linearGradient>
 90 | <radialGradient id="paint4_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(313.407 243.64) rotate(-75.7542) scale(203.632 223.902)">
 91 | <stop stop-color="#00BBBB"/>
 92 | <stop offset="0.712616" stop-color="#00DB65"/>
 93 | </radialGradient>
 94 | <linearGradient id="paint5_linear_2862_30" x1="308.586" y1="102.284" x2="383.487" y2="201.169" gradientUnits="userSpaceOnUse">
 95 | <stop/>
 96 | <stop offset="1" stop-opacity="0"/>
 97 | </linearGradient>
 98 | <radialGradient id="paint6_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(311.446 249.925) rotate(-20.3524) scale(174.776 163.096)">
 99 | <stop stop-color="#00B0BB"/>
100 | <stop offset="1" stop-color="#00DB65"/>
101 | </radialGradient>
102 | <linearGradient id="paint7_linear_2862_30" x1="395.842" y1="169.781" x2="332.121" y2="263.82" gradientUnits="userSpaceOnUse">
103 | <stop stop-color="#00B1BC"/>
104 | <stop offset="1"/>
105 | </linearGradient>
106 | <linearGradient id="paint8_linear_2862_30" x1="395.842" y1="169.781" x2="370.99" y2="271.799" gradientUnits="userSpaceOnUse">
107 | <stop/>
108 | <stop offset="1" stop-opacity="0"/>
109 | </linearGradient>
110 | <radialGradient id="paint9_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(350 50) scale(398.125 182)">
111 | <stop offset="0.348958" stop-color="#84FFD3"/>
112 | <stop offset="0.880208" stop-color="#18E299" stop-opacity="0"/>
113 | </radialGradient>
114 | <radialGradient id="paint10_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(350 82) scale(398.125 182)">
115 | <stop offset="0.348958" stop-color="#84FFD3"/>
116 | <stop offset="0.880208" stop-color="#18E299" stop-opacity="0"/>
117 | </radialGradient>
118 | <radialGradient id="paint11_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(239 160) rotate(90) scale(182 182)">
119 | <stop offset="0.348958" stop-color="#84FFD3"/>
120 | <stop offset="0.880208" stop-color="#18E299" stop-opacity="0"/>
121 | </radialGradient>
122 | <radialGradient id="paint12_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(271 160) rotate(90) scale(182 182)">
123 | <stop offset="0.348958" stop-color="#84FFD3"/>
124 | <stop offset="0.880208" stop-color="#18E299" stop-opacity="0"/>
125 | </radialGradient>
126 | <radialGradient id="paint13_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(461 160) rotate(90) scale(182 182)">
127 | <stop offset="0.348958" stop-color="#84FFD3"/>
128 | <stop offset="0.880208" stop-color="#18E299" stop-opacity="0"/>
129 | </radialGradient>
130 | <radialGradient id="paint14_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(429 160) rotate(90) scale(182 182)">
131 | <stop offset="0.348958" stop-color="#84FFD3"/>
132 | <stop offset="0.880208" stop-color="#18E299" stop-opacity="0"/>
133 | </radialGradient>
134 | <radialGradient id="paint15_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(350 271) scale(398.125 182)">
135 | <stop offset="0.348958" stop-color="#84FFD3"/>
136 | <stop offset="0.880208" stop-color="#18E299" stop-opacity="0"/>
137 | </radialGradient>
138 | <radialGradient id="paint16_radial_2862_30" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(350 239) scale(398.125 182)">
139 | <stop offset="0.348958" stop-color="#84FFD3"/>
140 | <stop offset="0.880208" stop-color="#18E299" stop-opacity="0"/>
141 | </radialGradient>
142 | <linearGradient id="paint17_linear_2862_30" x1="0" y1="160" x2="700" y2="160" gradientUnits="userSpaceOnUse">
143 | <stop stop-color="white" stop-opacity="0.1"/>
144 | <stop offset="0.5" stop-color="white"/>
145 | <stop offset="1" stop-color="white" stop-opacity="0.1"/>
146 | </linearGradient>
147 | <linearGradient id="paint18_linear_2862_30" x1="511" y1="-1" x2="189" y2="321" gradientUnits="userSpaceOnUse">
148 | <stop stop-color="white" stop-opacity="0.1"/>
149 | <stop offset="0.5" stop-color="white"/>
150 | <stop offset="1" stop-color="white" stop-opacity="0.1"/>
151 | </linearGradient>
152 | <linearGradient id="paint19_linear_2862_30" x1="511" y1="321" x2="189" y2="-0.999997" gradientUnits="userSpaceOnUse">
153 | <stop stop-color="white" stop-opacity="0.1"/>
154 | <stop offset="0.5" stop-color="white"/>
155 | <stop offset="1" stop-color="white" stop-opacity="0.1"/>
156 | </linearGradient>
157 | <clipPath id="clip0_2862_30">
158 | <rect width="700" height="320" rx="16" fill="white"/>
159 | </clipPath>
160 | </defs>
161 | </svg>
162 | 


--------------------------------------------------------------------------------
/docs/images/hero-light.svg:
--------------------------------------------------------------------------------
  1 | <svg width="700" height="320" viewBox="0 0 700 320" fill="none" xmlns="http://www.w3.org/2000/svg">
  2 | <g clip-path="url(#clip0_2862_278)">
  3 | <rect width="700" height="320" rx="16" fill="url(#paint0_linear_2862_278)"/>
  4 | <path d="M311.889 247.3C283.097 247.215 258.226 231.466 246.292 201.629C234.357 171.793 238.02 134.523 253.414 101.112C282.206 101.197 307.077 116.945 319.011 146.782C330.946 176.619 327.283 213.888 311.889 247.3Z" fill="white"/>
  5 | <path d="M311.889 247.3C283.097 247.215 258.226 231.466 246.292 201.629C234.357 171.793 238.02 134.523 253.414 101.112C282.206 101.197 307.077 116.945 319.011 146.782C330.946 176.619 327.283 213.888 311.889 247.3Z" fill="url(#paint1_radial_2862_278)"/>
  6 | <path d="M311.889 247.3C283.097 247.215 258.226 231.466 246.292 201.629C234.357 171.793 238.02 134.523 253.414 101.112C282.206 101.197 307.077 116.945 319.011 146.782C330.946 176.619 327.283 213.888 311.889 247.3Z" fill="black" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
  7 | <path d="M311.889 247.3C283.097 247.215 258.226 231.466 246.292 201.629C234.357 171.793 238.02 134.523 253.414 101.112C282.206 101.197 307.077 116.945 319.011 146.782C330.946 176.619 327.283 213.888 311.889 247.3Z" fill="url(#paint2_linear_2862_278)" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
  8 | <path d="M311.72 247.034C283.108 246.887 258.409 231.208 246.538 201.531C234.656 171.825 238.271 134.702 253.583 101.377C282.195 101.524 306.894 117.203 318.765 146.88C330.647 176.586 327.031 213.709 311.72 247.034Z" stroke="url(#paint3_linear_2862_278)" stroke-opacity="0.05" stroke-width="0.530516"/>
  9 | <path d="M305.839 247.174C343.92 237.419 377.154 210.619 393.585 171.64C410.017 132.661 405.98 90.1988 386.347 56.1934C348.266 65.9477 315.032 92.7486 298.601 131.728C282.169 170.706 286.206 213.168 305.839 247.174Z" fill="white"/>
 10 | <path d="M305.839 247.174C343.92 237.419 377.154 210.619 393.585 171.64C410.017 132.661 405.98 90.1988 386.347 56.1934C348.266 65.9477 315.032 92.7486 298.601 131.728C282.169 170.706 286.206 213.168 305.839 247.174Z" fill="url(#paint4_radial_2862_278)"/>
 11 | <path d="M393.341 171.537C376.971 210.369 343.89 237.091 305.969 246.867C286.462 212.959 282.476 170.663 298.845 131.831C315.215 92.9978 348.295 66.2765 386.217 56.5004C405.724 90.4077 409.71 132.704 393.341 171.537Z" stroke="url(#paint5_linear_2862_278)" stroke-opacity="0.05" stroke-width="0.530516"/>
 12 | <path d="M305.686 246.995C329.75 266.114 361.965 272.832 393.671 262.129C425.376 251.426 449.499 225.691 461.03 194.556C436.967 175.437 404.751 168.719 373.046 179.422C341.34 190.125 317.217 215.86 305.686 246.995Z" fill="white"/>
 13 | <path d="M305.686 246.995C329.75 266.114 361.965 272.832 393.671 262.129C425.376 251.426 449.499 225.691 461.03 194.556C436.967 175.437 404.751 168.719 373.046 179.422C341.34 190.125 317.217 215.86 305.686 246.995Z" fill="url(#paint6_radial_2862_278)"/>
 14 | <path d="M305.686 246.995C329.75 266.114 361.965 272.832 393.671 262.129C425.376 251.426 449.499 225.691 461.03 194.556C436.967 175.437 404.751 168.719 373.046 179.422C341.34 190.125 317.217 215.86 305.686 246.995Z" fill="black" fill-opacity="0.2" style="mix-blend-mode:hard-light"/>
 15 | <path d="M305.686 246.995C329.75 266.114 361.965 272.832 393.671 262.129C425.376 251.426 449.499 225.691 461.03 194.556C436.967 175.437 404.751 168.719 373.046 179.422C341.34 190.125 317.217 215.86 305.686 246.995Z" fill="url(#paint7_linear_2862_278)" fill-opacity="0.5" style="mix-blend-mode:hard-light"/>
 16 | <path d="M393.586 261.878C362.035 272.529 329.981 265.88 306.002 246.907C317.535 215.919 341.571 190.327 373.13 179.673C404.682 169.023 436.736 175.671 460.715 194.644C449.182 225.632 425.146 251.224 393.586 261.878Z" stroke="url(#paint8_linear_2862_278)" stroke-opacity="0.05" stroke-width="0.530516"/>
 17 | <g opacity="0.8" filter="url(#filter0_f_2862_278)">
 18 | <circle cx="660" cy="-60" r="160" fill="#18E299" fill-opacity="0.4"/>
 19 | </g>
 20 | <g opacity="0.8" filter="url(#filter1_f_2862_278)">
 21 | <circle cx="20" cy="213" r="160" fill="#18E299" fill-opacity="0.33"/>
 22 | </g>
 23 | <g opacity="0.8" filter="url(#filter2_f_2862_278)">
 24 | <circle cx="660" cy="480" r="160" fill="#18E299" fill-opacity="0.52"/>
 25 | </g>
 26 | <g opacity="0.8" filter="url(#filter3_f_2862_278)">
 27 | <circle cx="20" cy="413" r="160" fill="#18E299" fill-opacity="0.22"/>
 28 | </g>
 29 | <g style="mix-blend-mode:overlay" opacity="0.1">
 30 | <path d="M0 50H700" stroke="black" stroke-dasharray="4 4"/>
 31 | </g>
 32 | <g style="mix-blend-mode:overlay" opacity="0.1">
 33 | <path d="M0 82H700" stroke="black" stroke-dasharray="4 4"/>
 34 | </g>
 35 | <g style="mix-blend-mode:overlay" opacity="0.1">
 36 | <path d="M239 0L239 320" stroke="black" stroke-dasharray="4 4"/>
 37 | </g>
 38 | <g style="mix-blend-mode:overlay" opacity="0.1">
 39 | <path d="M271 0L271 320" stroke="black" stroke-dasharray="4 4"/>
 40 | </g>
 41 | <g style="mix-blend-mode:overlay" opacity="0.1">
 42 | <path d="M461 0L461 320" stroke="black" stroke-dasharray="4 4"/>
 43 | </g>
 44 | <g style="mix-blend-mode:overlay" opacity="0.1">
 45 | <path d="M350 0L350 320" stroke="url(#paint9_linear_2862_278)"/>
 46 | </g>
 47 | <g style="mix-blend-mode:overlay" opacity="0.1">
 48 | <path d="M429 0L429 320" stroke="black" stroke-dasharray="4 4"/>
 49 | </g>
 50 | <g style="mix-blend-mode:overlay" opacity="0.1">
 51 | <path d="M0 271H700" stroke="black" stroke-dasharray="4 4"/>
 52 | </g>
 53 | <g style="mix-blend-mode:overlay" opacity="0.1">
 54 | <path d="M0 239H700" stroke="black" stroke-dasharray="4 4"/>
 55 | </g>
 56 | <g style="mix-blend-mode:overlay" opacity="0.1">
 57 | <path d="M0 160H700" stroke="url(#paint10_linear_2862_278)"/>
 58 | </g>
 59 | <g style="mix-blend-mode:overlay" opacity="0.1">
 60 | <path d="M511 -1L189 321" stroke="url(#paint11_linear_2862_278)"/>
 61 | </g>
 62 | <g style="mix-blend-mode:overlay" opacity="0.1">
 63 | <path d="M511 321L189 -1" stroke="url(#paint12_linear_2862_278)"/>
 64 | </g>
 65 | <g style="mix-blend-mode:overlay" opacity="0.05">
 66 | <circle cx="350" cy="160" r="111" stroke="black"/>
 67 | </g>
 68 | <g style="mix-blend-mode:overlay" opacity="0.05">
 69 | <circle cx="350" cy="160" r="79" stroke="black"/>
 70 | </g>
 71 | </g>
 72 | <defs>
 73 | <filter id="filter0_f_2862_278" x="260" y="-460" width="800" height="800" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
 74 | <feFlood flood-opacity="0" result="BackgroundImageFix"/>
 75 | <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
 76 | <feGaussianBlur stdDeviation="120" result="effect1_foregroundBlur_2862_278"/>
 77 | </filter>
 78 | <filter id="filter1_f_2862_278" x="-380" y="-187" width="800" height="800" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
 79 | <feFlood flood-opacity="0" result="BackgroundImageFix"/>
 80 | <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
 81 | <feGaussianBlur stdDeviation="120" result="effect1_foregroundBlur_2862_278"/>
 82 | </filter>
 83 | <filter id="filter2_f_2862_278" x="260" y="80" width="800" height="800" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
 84 | <feFlood flood-opacity="0" result="BackgroundImageFix"/>
 85 | <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
 86 | <feGaussianBlur stdDeviation="120" result="effect1_foregroundBlur_2862_278"/>
 87 | </filter>
 88 | <filter id="filter3_f_2862_278" x="-380" y="13" width="800" height="800" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
 89 | <feFlood flood-opacity="0" result="BackgroundImageFix"/>
 90 | <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
 91 | <feGaussianBlur stdDeviation="120" result="effect1_foregroundBlur_2862_278"/>
 92 | </filter>
 93 | <linearGradient id="paint0_linear_2862_278" x1="1.04308e-05" y1="320" x2="710.784" y2="26.0793" gradientUnits="userSpaceOnUse">
 94 | <stop stop-color="#18E299" stop-opacity="0.09"/>
 95 | <stop offset="0.729167" stop-color="#0D9373" stop-opacity="0.08"/>
 96 | </linearGradient>
 97 | <radialGradient id="paint1_radial_2862_278" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(208.697 189.703) rotate(-10.029) scale(169.097 167.466)">
 98 | <stop stop-color="#00B0BB"/>
 99 | <stop offset="1" stop-color="#00DB65"/>
100 | </radialGradient>
101 | <linearGradient id="paint2_linear_2862_278" x1="306.587" y1="93.5598" x2="252.341" y2="224.228" gradientUnits="userSpaceOnUse">
102 | <stop stop-color="#18E299"/>
103 | <stop offset="1"/>
104 | </linearGradient>
105 | <linearGradient id="paint3_linear_2862_278" x1="311.84" y1="123.717" x2="253.579" y2="224.761" gradientUnits="userSpaceOnUse">
106 | <stop/>
107 | <stop offset="1" stop-opacity="0"/>
108 | </linearGradient>
109 | <radialGradient id="paint4_radial_2862_278" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(313.407 243.64) rotate(-75.7542) scale(203.632 223.902)">
110 | <stop stop-color="#00BBBB"/>
111 | <stop offset="0.712616" stop-color="#00DB65"/>
112 | </radialGradient>
113 | <linearGradient id="paint5_linear_2862_278" x1="308.586" y1="102.284" x2="383.487" y2="201.169" gradientUnits="userSpaceOnUse">
114 | <stop/>
115 | <stop offset="1" stop-opacity="0"/>
116 | </linearGradient>
117 | <radialGradient id="paint6_radial_2862_278" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(311.447 249.925) rotate(-20.3524) scale(174.776 163.096)">
118 | <stop stop-color="#00B0BB"/>
119 | <stop offset="1" stop-color="#00DB65"/>
120 | </radialGradient>
121 | <linearGradient id="paint7_linear_2862_278" x1="395.843" y1="169.781" x2="332.121" y2="263.82" gradientUnits="userSpaceOnUse">
122 | <stop stop-color="#00B1BC"/>
123 | <stop offset="1"/>
124 | </linearGradient>
125 | <linearGradient id="paint8_linear_2862_278" x1="395.843" y1="169.781" x2="370.991" y2="271.799" gradientUnits="userSpaceOnUse">
126 | <stop/>
127 | <stop offset="1" stop-opacity="0"/>
128 | </linearGradient>
129 | <linearGradient id="paint9_linear_2862_278" x1="350" y1="0" x2="350" y2="320" gradientUnits="userSpaceOnUse">
130 | <stop stop-opacity="0"/>
131 | <stop offset="0.0001" stop-opacity="0.3"/>
132 | <stop offset="0.333333"/>
133 | <stop offset="0.666667"/>
134 | <stop offset="1" stop-opacity="0.3"/>
135 | </linearGradient>
136 | <linearGradient id="paint10_linear_2862_278" x1="0" y1="160" x2="700" y2="160" gradientUnits="userSpaceOnUse">
137 | <stop stop-opacity="0.1"/>
138 | <stop offset="0.5"/>
139 | <stop offset="1" stop-opacity="0.1"/>
140 | </linearGradient>
141 | <linearGradient id="paint11_linear_2862_278" x1="511" y1="-1" x2="189" y2="321" gradientUnits="userSpaceOnUse">
142 | <stop stop-opacity="0.1"/>
143 | <stop offset="0.5"/>
144 | <stop offset="1" stop-opacity="0.1"/>
145 | </linearGradient>
146 | <linearGradient id="paint12_linear_2862_278" x1="511" y1="321" x2="189" y2="-0.999997" gradientUnits="userSpaceOnUse">
147 | <stop stop-opacity="0.1"/>
148 | <stop offset="0.5"/>
149 | <stop offset="1" stop-opacity="0.1"/>
150 | </linearGradient>
151 | <clipPath id="clip0_2862_278">
152 | <rect width="700" height="320" rx="16" fill="white"/>
153 | </clipPath>
154 | </defs>
155 | </svg>
156 | 


--------------------------------------------------------------------------------
/docs/images/java/class-diagrams.puml:
--------------------------------------------------------------------------------
  1 | @startuml Core Components
  2 | 
  3 | ' Core Interfaces
  4 | interface McpTransport {
  5 |   +Mono<Void> connect(Function<Mono<JSONRPCMessage>, Mono<JSONRPCMessage>> handler)
  6 |   +Mono<Void> sendMessage(JSONRPCMessage message)
  7 |   +void close()
  8 |   +Mono<Void> closeGracefully()
  9 |   +<T> T unmarshalFrom(Object data, TypeReference<T> typeRef)
 10 | }
 11 | 
 12 | interface McpSession {
 13 |   +<T> Mono<T> sendRequest(String method, Object requestParams, TypeReference<T> typeRef)
 14 |   +Mono<Void> sendNotification(String method, Map<String, Object> params)
 15 |   +Mono<Void> closeGracefully()
 16 |   +void close()
 17 | }
 18 | 
 19 | ' Core Implementation Classes
 20 | class DefaultMcpSession {
 21 |   +interface RequestHandler
 22 |   +interface NotificationHandler
 23 | }
 24 | 
 25 | ' Client Classes
 26 | class McpClient {
 27 |   +{static} Builder using(ClientMcpTransport transport)
 28 | }
 29 | 
 30 | class McpAsyncClient {
 31 |   +Mono<InitializeResult> initialize()
 32 |   +ServerCapabilities getServerCapabilities()
 33 |   +Implementation getServerInfo()
 34 |   +ClientCapabilities getClientCapabilities()
 35 |   +Implementation getClientInfo()
 36 |   +void close()
 37 |   +Mono<Void> closeGracefully()
 38 |   +Mono<Object> ping()
 39 |   +Mono<Void> addRoot(Root root)
 40 |   +Mono<Void> removeRoot(String rootUri)
 41 |   +Mono<Void> rootsListChangedNotification()
 42 |   +Mono<CallToolResult> callTool(CallToolRequest request)
 43 |   +Mono<ListToolsResult> listTools()
 44 |   +Mono<ListResourcesResult> listResources()
 45 |   +Mono<ReadResourceResult> readResource(ReadResourceRequest request)
 46 |   +Mono<ListResourceTemplatesResult> listResourceTemplates()
 47 |   +Mono<Void> subscribeResource(SubscribeRequest request)
 48 |   +Mono<Void> unsubscribeResource(UnsubscribeRequest request)
 49 |   +Mono<ListPromptsResult> listPrompts()
 50 |   +Mono<GetPromptResult> getPrompt(GetPromptRequest request)
 51 |   +Mono<Void> setLoggingLevel(LoggingLevel level)
 52 | }
 53 | 
 54 | class McpSyncClient {
 55 |   +InitializeResult initialize()
 56 |   +ServerCapabilities getServerCapabilities()
 57 |   +Implementation getServerInfo()
 58 |   +ClientCapabilities getClientCapabilities()
 59 |   +Implementation getClientInfo()
 60 |   +void close()
 61 |   +boolean closeGracefully()
 62 |   +Object ping()
 63 |   +void addRoot(Root root)
 64 |   +void removeRoot(String rootUri)
 65 |   +void rootsListChangedNotification()
 66 |   +CallToolResult callTool(CallToolRequest request)
 67 |   +ListToolsResult listTools()
 68 |   +ListResourcesResult listResources()
 69 |   +ReadResourceResult readResource(ReadResourceRequest request)
 70 |   +ListResourceTemplatesResult listResourceTemplates()
 71 |   +void subscribeResource(SubscribeRequest request)
 72 |   +void unsubscribeResource(UnsubscribeRequest request)
 73 |   +ListPromptsResult listPrompts()
 74 |   +GetPromptResult getPrompt(GetPromptRequest request)
 75 |   +void setLoggingLevel(LoggingLevel level)
 76 | }
 77 | 
 78 | ' Server Classes
 79 | class McpServer {
 80 |   +{static} Builder using(ServerMcpTransport transport)
 81 | }
 82 | 
 83 | class McpAsyncServer {
 84 |   
 85 |   +ServerCapabilities getServerCapabilities()
 86 |   +Implementation getServerInfo()
 87 |   +ClientCapabilities getClientCapabilities()
 88 |   +Implementation getClientInfo()
 89 |   +void close()
 90 |   +Mono<Void> closeGracefully()
 91 |   
 92 |   ' Tool Management
 93 |   +Mono<Void> addTool(ToolRegistration toolRegistration)
 94 |   +Mono<Void> removeTool(String toolName)
 95 |   +Mono<Void> notifyToolsListChanged()
 96 |   
 97 |   ' Resource Management
 98 |   +Mono<Void> addResource(ResourceRegistration resourceHandler)
 99 |   +Mono<Void> removeResource(String resourceUri)
100 |   +Mono<Void> notifyResourcesListChanged()
101 |   
102 |   ' Prompt Management
103 |   +Mono<Void> addPrompt(PromptRegistration promptRegistration)
104 |   +Mono<Void> removePrompt(String promptName)
105 |   +Mono<Void> notifyPromptsListChanged()
106 |   
107 |   ' Logging
108 |   +Mono<Void> loggingNotification(LoggingMessageNotification notification)
109 |   
110 |   ' Sampling
111 |   +Mono<CreateMessageResult> createMessage(CreateMessageRequest request)
112 | }
113 | 
114 | class McpSyncServer {
115 |   +McpAsyncServer getAsyncServer()
116 |   
117 |   +ServerCapabilities getServerCapabilities()
118 |   +Implementation getServerInfo()
119 |   +ClientCapabilities getClientCapabilities()
120 |   +Implementation getClientInfo()
121 |   +void close()
122 |   +void closeGracefully()
123 |   
124 |   ' Tool Management
125 |   +void addTool(ToolRegistration toolHandler)
126 |   +void removeTool(String toolName)
127 |   +void notifyToolsListChanged()
128 |   
129 |   ' Resource Management
130 |   +void addResource(ResourceRegistration resourceHandler)
131 |   +void removeResource(String resourceUri)
132 |   +void notifyResourcesListChanged()
133 |   
134 |   ' Prompt Management
135 |   +void addPrompt(PromptRegistration promptRegistration)
136 |   +void removePrompt(String promptName)
137 |   +void notifyPromptsListChanged()
138 |   
139 |   ' Logging
140 |   +void loggingNotification(LoggingMessageNotification notification)
141 |   
142 |   ' Sampling
143 |   +CreateMessageResult createMessage(CreateMessageRequest request)
144 | }
145 | 
146 | ' Transport Implementations
147 | class StdioClientTransport implements ClientMcpTransport {  
148 |   +void setErrorHandler(Consumer<String> errorHandler)
149 |   +Sinks.Many<String> getErrorSink()
150 | }
151 | 
152 | class StdioServerTransport implements ServerMcpTransport {
153 | }
154 | 
155 | 
156 | class HttpServletSseServerTransport implements ServerMcpTransport {
157 | }
158 | 
159 | 
160 | class HttpClientSseClientTransport implements ClientMcpTransport {  
161 | }
162 | 
163 | 
164 | class WebFluxSseClientTransport implements ClientMcpTransport {
165 | }
166 | 
167 | 
168 | class WebFluxSseServerTransport implements ServerMcpTransport {
169 |   +RouterFunction<?> getRouterFunction()
170 | }
171 | 
172 | class WebMvcSseServerTransport implements ServerMcpTransport {
173 |   +RouterFunction<?> getRouterFunction()
174 | }
175 | 
176 | 
177 | ' Schema and Error Classes
178 | class McpSchema {
179 |   +class ErrorCodes
180 |   +interface Request
181 |   +interface JSONRPCMessage
182 |   +interface ResourceContents
183 |   +interface Content
184 |   +interface ServerCapabilities
185 |   +{static} JSONRPCMessage deserializeJsonRpcMessage()
186 | }
187 | 
188 | class McpError {
189 | }
190 | 
191 | ' Relationships
192 | McpTransport <|.. ClientMcpTransport
193 | McpTransport <|.. ServerMcpTransport
194 | 
195 | McpSession <|.. DefaultMcpSession
196 | DefaultMcpSession --o McpAsyncClient
197 | DefaultMcpSession --o McpAsyncServer
198 | 
199 | McpClient ..> McpAsyncClient : creates
200 | McpClient ..> McpSyncClient : creates
201 | McpSyncClient --> McpAsyncClient : delegates to
202 | 
203 | McpServer ..> McpAsyncServer : creates
204 | McpServer ..> McpSyncServer : creates
205 | McpSyncServer o-- McpAsyncServer
206 | 
207 | DefaultMcpSession o-- McpTransport
208 | McpSchema <.. McpSession : uses
209 | McpError ..> McpSession : throws
210 | 
211 | @enduml
212 | 
213 | @startuml Message Flow
214 | 
215 | package "MCP Schema" {
216 |   interface JSONRPCMessage {
217 |     +String jsonrpc()
218 |   }
219 |   
220 |   interface Request {
221 |   }
222 |   
223 |   class InitializeRequest
224 |   class CallToolRequest
225 |   class ListToolsRequest
226 |   class ListResourcesRequest
227 |   class ReadResourceRequest
228 |   class ListResourceTemplatesRequest
229 |   class ListPromptsRequest
230 |   class GetPromptRequest
231 | }
232 | 
233 | package "Resource Types" {
234 |   interface ResourceContents {
235 |     +String uri()
236 |     +String mimeType()
237 |   }
238 |   
239 |   class TextResourceContents
240 |   class BlobResourceContents
241 |   
242 |   interface Content {
243 |     +String type()
244 |   }
245 |   
246 |   class TextContent
247 |   class ImageContent
248 |   class EmbeddedResource
249 |   
250 |   interface Annotated {
251 |     +Annotations annotations()
252 |   }
253 |   
254 |   interface PromptOrResourceReference {
255 |     +String type()
256 |   }
257 |   
258 |   class PromptReference
259 |   class ResourceReference
260 | }
261 | 
262 | JSONRPCMessage <|.. Request
263 | Request <|.. InitializeRequest
264 | Request <|.. CallToolRequest
265 | Request <|.. ListToolsRequest
266 | Request <|.. ListResourcesRequest
267 | Request <|.. ReadResourceRequest
268 | Request <|.. ListResourceTemplatesRequest
269 | Request <|.. ListPromptsRequest
270 | Request <|.. GetPromptRequest
271 | 
272 | ResourceContents <|.. TextResourceContents
273 | ResourceContents <|.. BlobResourceContents
274 | 
275 | Content <|.. TextContent
276 | Content <|.. ImageContent
277 | Content <|.. EmbeddedResource
278 | 
279 | PromptOrResourceReference <|.. PromptReference
280 | PromptOrResourceReference <|.. ResourceReference
281 | 
282 | @enduml
283 | 


--------------------------------------------------------------------------------
/docs/images/java/java-mcp-client-architecture.jpg:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/java/java-mcp-client-architecture.jpg


--------------------------------------------------------------------------------
/docs/images/java/java-mcp-server-architecture.jpg:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/java/java-mcp-server-architecture.jpg


--------------------------------------------------------------------------------
/docs/images/java/java-mcp-uml-classdiagram.svg:
--------------------------------------------------------------------------------
1 | <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="1616px" preserveAspectRatio="none" style="width:2294px;height:1616px;background:#FFFFFF;" version="1.1" viewBox="0 0 2294 1616" width="2294px" zoomAndPan="magnify"><defs/><g><!--class McpTransport--><g id="elem_McpTransport"><rect codeLine="2" fill="#F1F1F1" height="129.4844" id="McpTransport" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="710.9541" x="731.5" y="1091"/><ellipse cx="1034.52" cy="1107" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1;"/><path d="M1030.4419,1102.7656 L1030.4419,1100.6094 L1037.8325,1100.6094 L1037.8325,1102.7656 L1035.3638,1102.7656 L1035.3638,1110.8438 L1037.8325,1110.8438 L1037.8325,1113 L1030.4419,1113 L1030.4419,1110.8438 L1032.9106,1110.8438 L1032.9106,1102.7656 L1030.4419,1102.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="96.4141" x="1055.02" y="1111.8467">McpTransport</text><line style="stroke:#181818;stroke-width:0.5;" x1="732.5" x2="1441.4541" y1="1123" y2="1123"/><line style="stroke:#181818;stroke-width:0.5;" x1="732.5" x2="1441.4541" y1="1131" y2="1131"/><ellipse cx="742.5" cy="1144.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="684.9541" x="751.5" y="1147.9951">Mono&lt;Void&gt; connect(Function&lt;Mono&lt;JSONRPCMessage&gt;, Mono&lt;JSONRPCMessage&gt;&gt; handler)</text><ellipse cx="742.5" cy="1160.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="394.0439" x="751.5" y="1164.292">Mono&lt;Void&gt; sendMessage(JSONRPCMessage message)</text><ellipse cx="742.5" cy="1177.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81.0605" x="751.5" y="1180.5889">void close()</text><ellipse cx="742.5" cy="1193.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215.2568" x="751.5" y="1196.8857">Mono&lt;Void&gt; closeGracefully()</text><ellipse cx="742.5" cy="1209.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="458.0146" x="751.5" y="1213.1826">&lt;T&gt; T unmarshalFrom(Object data, TypeReference&lt;T&gt; typeRef)</text></g><!--class McpSession--><g id="elem_McpSession"><rect codeLine="10" fill="#F1F1F1" height="113.1875" id="McpSession" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="709.833" x="732" y="246"/><ellipse cx="1041.627" cy="262" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1;"/><path d="M1037.5488,257.7656 L1037.5488,255.6094 L1044.9395,255.6094 L1044.9395,257.7656 L1042.4707,257.7656 L1042.4707,265.8438 L1044.9395,265.8438 L1044.9395,268 L1037.5488,268 L1037.5488,265.8438 L1040.0176,265.8438 L1040.0176,257.7656 L1037.5488,257.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="82.0791" x="1062.127" y="266.8467">McpSession</text><line style="stroke:#181818;stroke-width:0.5;" x1="733" x2="1440.833" y1="278" y2="278"/><line style="stroke:#181818;stroke-width:0.5;" x1="733" x2="1440.833" y1="286" y2="286"/><ellipse cx="743" cy="299.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="683.833" x="752" y="302.9951">&lt;T&gt; Mono&lt;T&gt; sendRequest(String method, Object requestParams, TypeReference&lt;T&gt; typeRef)</text><ellipse cx="743" cy="315.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="537.4961" x="752" y="319.292">Mono&lt;Void&gt; sendNotification(String method, Map&lt;String, Object&gt; params)</text><ellipse cx="743" cy="332.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215.2568" x="752" y="335.5889">Mono&lt;Void&gt; closeGracefully()</text><ellipse cx="743" cy="348.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81.0605" x="752" y="351.8857">void close()</text></g><!--class DefaultMcpSession--><g id="elem_DefaultMcpSession"><rect codeLine="18" fill="#F1F1F1" height="80.5938" id="DefaultMcpSession" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="228.3438" x="973" y="615"/><ellipse cx="1016.4001" cy="631" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1;"/><path d="M1019.3688,636.6406 Q1018.7907,636.9375 1018.1501,637.0781 Q1017.5095,637.2344 1016.8063,637.2344 Q1014.3063,637.2344 1012.9782,635.5938 Q1011.6657,633.9375 1011.6657,630.8125 Q1011.6657,627.6875 1012.9782,626.0313 Q1014.3063,624.375 1016.8063,624.375 Q1017.5095,624.375 1018.1501,624.5313 Q1018.8063,624.6875 1019.3688,624.9844 L1019.3688,627.7031 Q1018.7438,627.125 1018.1501,626.8594 Q1017.5563,626.5781 1016.9313,626.5781 Q1015.5876,626.5781 1014.9001,627.6563 Q1014.2126,628.7188 1014.2126,630.8125 Q1014.2126,632.9063 1014.9001,633.9844 Q1015.5876,635.0469 1016.9313,635.0469 Q1017.5563,635.0469 1018.1501,634.7813 Q1018.7438,634.5 1019.3688,633.9219 L1019.3688,636.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="133.2324" x="1036.7112" y="635.8467">DefaultMcpSession</text><line style="stroke:#181818;stroke-width:0.5;" x1="974" x2="1200.3438" y1="647" y2="647"/><ellipse cx="984" cy="660.6484" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="179.5117" x="993" y="663.9951">interface RequestHandler</text><ellipse cx="984" cy="676.9453" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="202.3438" x="993" y="680.292">interface NotificationHandler</text><line style="stroke:#181818;stroke-width:0.5;" x1="974" x2="1200.3438" y1="687.5938" y2="687.5938"/></g><!--class McpClient--><g id="elem_McpClient"><rect codeLine="24" fill="#F1F1F1" height="64.2969" id="McpClient" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="334.7861" x="316.5" y="270.5"/><ellipse cx="445.0464" cy="286.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1;"/><path d="M448.0151,292.1406 Q447.437,292.4375 446.7964,292.5781 Q446.1558,292.7344 445.4526,292.7344 Q442.9526,292.7344 441.6245,291.0938 Q440.312,289.4375 440.312,286.3125 Q440.312,283.1875 441.6245,281.5313 Q442.9526,279.875 445.4526,279.875 Q446.1558,279.875 446.7964,280.0313 Q447.4526,280.1875 448.0151,280.4844 L448.0151,283.2031 Q447.3901,282.625 446.7964,282.3594 Q446.2026,282.0781 445.5776,282.0781 Q444.2339,282.0781 443.5464,283.1563 Q442.8589,284.2188 442.8589,286.3125 Q442.8589,288.4063 443.5464,289.4844 Q444.2339,290.5469 445.5776,290.5469 Q446.2026,290.5469 446.7964,290.2813 Q447.3901,290 448.0151,289.4219 L448.0151,292.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69.1934" x="465.5464" y="291.3467">McpClient</text><line style="stroke:#181818;stroke-width:0.5;" x1="317.5" x2="650.2861" y1="302.5" y2="302.5"/><line style="stroke:#181818;stroke-width:0.5;" x1="317.5" x2="650.2861" y1="310.5" y2="310.5"/><ellipse cx="327.5" cy="324.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="308.7861" x="336.5" y="327.4951">Builder using(ClientMcpTransport transport)</text></g><!--class McpAsyncClient--><g id="elem_McpAsyncClient"><rect codeLine="28" fill="#F1F1F1" height="390.2344" id="McpAsyncClient" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="561.1445" x="135.5" y="960.5"/><ellipse cx="356.3623" cy="976.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1;"/><path d="M359.3311,982.1406 Q358.7529,982.4375 358.1123,982.5781 Q357.4717,982.7344 356.7686,982.7344 Q354.2686,982.7344 352.9404,981.0938 Q351.6279,979.4375 351.6279,976.3125 Q351.6279,973.1875 352.9404,971.5313 Q354.2686,969.875 356.7686,969.875 Q357.4717,969.875 358.1123,970.0313 Q358.7686,970.1875 359.3311,970.4844 L359.3311,973.2031 Q358.7061,972.625 358.1123,972.3594 Q357.5186,972.0781 356.8936,972.0781 Q355.5498,972.0781 354.8623,973.1563 Q354.1748,974.2188 354.1748,976.3125 Q354.1748,978.4063 354.8623,979.4844 Q355.5498,980.5469 356.8936,980.5469 Q357.5186,980.5469 358.1123,980.2813 Q358.7061,980 359.3311,979.4219 L359.3311,982.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110.9199" x="376.8623" y="981.3467">McpAsyncClient</text><line style="stroke:#181818;stroke-width:0.5;" x1="136.5" x2="695.6445" y1="992.5" y2="992.5"/><line style="stroke:#181818;stroke-width:0.5;" x1="136.5" x2="695.6445" y1="1000.5" y2="1000.5"/><ellipse cx="146.5" cy="1014.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="237.7471" x="155.5" y="1017.4951">Mono&lt;InitializeResult&gt; initialize()</text><ellipse cx="146.5" cy="1030.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="293.5078" x="155.5" y="1033.792">ServerCapabilities getServerCapabilities()</text><ellipse cx="146.5" cy="1046.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221.9355" x="155.5" y="1050.0889">Implementation getServerInfo()</text><ellipse cx="146.5" cy="1063.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="282.748" x="155.5" y="1066.3857">ClientCapabilities getClientCapabilities()</text><ellipse cx="146.5" cy="1079.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216.5557" x="155.5" y="1082.6826">Implementation getClientInfo()</text><ellipse cx="146.5" cy="1095.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81.0605" x="155.5" y="1098.9795">void close()</text><ellipse cx="146.5" cy="1111.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215.2568" x="155.5" y="1115.2764">Mono&lt;Void&gt; closeGracefully()</text><ellipse cx="146.5" cy="1128.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153.0498" x="155.5" y="1131.5732">Mono&lt;Object&gt; ping()</text><ellipse cx="146.5" cy="1144.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="231.7109" x="155.5" y="1147.8701">Mono&lt;Void&gt; addRoot(Root root)</text><ellipse cx="146.5" cy="1160.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="288.1553" x="155.5" y="1164.167">Mono&lt;Void&gt; removeRoot(String rootUri)</text><ellipse cx="146.5" cy="1177.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="310.7959" x="155.5" y="1180.4639">Mono&lt;Void&gt; rootsListChangedNotification()</text><ellipse cx="146.5" cy="1193.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="401.3174" x="155.5" y="1196.7607">Mono&lt;CallToolResult&gt; callTool(CallToolRequest request)</text><ellipse cx="146.5" cy="1209.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="239.5723" x="155.5" y="1213.0576">Mono&lt;ListToolsResult&gt; listTools()</text><ellipse cx="146.5" cy="1226.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="310.707" x="155.5" y="1229.3545">Mono&lt;ListResourcesResult&gt; listResources()</text><ellipse cx="146.5" cy="1242.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="535.1445" x="155.5" y="1245.6514">Mono&lt;ReadResourceResult&gt; readResource(ReadResourceRequest request)</text><ellipse cx="146.5" cy="1258.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="443.2285" x="155.5" y="1261.9482">Mono&lt;ListResourceTemplatesResult&gt; listResourceTemplates()</text><ellipse cx="146.5" cy="1274.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="424.4229" x="155.5" y="1278.2451">Mono&lt;Void&gt; subscribeResource(SubscribeRequest request)</text><ellipse cx="146.5" cy="1291.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="459.6963" x="155.5" y="1294.542">Mono&lt;Void&gt; unsubscribeResource(UnsubscribeRequest request)</text><ellipse cx="146.5" cy="1307.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="281.9824" x="155.5" y="1310.8389">Mono&lt;ListPromptsResult&gt; listPrompts()</text><ellipse cx="146.5" cy="1323.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="461.501" x="155.5" y="1327.1357">Mono&lt;GetPromptResult&gt; getPrompt(GetPromptRequest request)</text><ellipse cx="146.5" cy="1340.0859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="352.9531" x="155.5" y="1343.4326">Mono&lt;Void&gt; setLoggingLevel(LoggingLevel level)</text></g><!--class McpSyncClient--><g id="elem_McpSyncClient"><rect codeLine="52" fill="#F1F1F1" height="390.2344" id="McpSyncClient" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="499.6006" x="7" y="460.5"/><ellipse cx="201.0825" cy="476.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1;"/><path d="M204.0513,482.1406 Q203.4731,482.4375 202.8325,482.5781 Q202.1919,482.7344 201.4888,482.7344 Q198.9888,482.7344 197.6606,481.0938 Q196.3481,479.4375 196.3481,476.3125 Q196.3481,473.1875 197.6606,471.5313 Q198.9888,469.875 201.4888,469.875 Q202.1919,469.875 202.8325,470.0313 Q203.4888,470.1875 204.0513,470.4844 L204.0513,473.2031 Q203.4263,472.625 202.8325,472.3594 Q202.2388,472.0781 201.6138,472.0781 Q200.27,472.0781 199.5825,473.1563 Q198.895,474.2188 198.895,476.3125 Q198.895,478.4063 199.5825,479.4844 Q200.27,480.5469 201.6138,480.5469 Q202.2388,480.5469 202.8325,480.2813 Q203.4263,480 204.0513,479.4219 L204.0513,482.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102.9355" x="221.5825" y="481.3467">McpSyncClient</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="505.6006" y1="492.5" y2="492.5"/><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="505.6006" y1="500.5" y2="500.5"/><ellipse cx="18" cy="514.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176.2031" x="27" y="517.4951">InitializeResult initialize()</text><ellipse cx="18" cy="530.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="293.5078" x="27" y="533.792">ServerCapabilities getServerCapabilities()</text><ellipse cx="18" cy="546.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221.9355" x="27" y="550.0889">Implementation getServerInfo()</text><ellipse cx="18" cy="563.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="282.748" x="27" y="566.3857">ClientCapabilities getClientCapabilities()</text><ellipse cx="18" cy="579.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216.5557" x="27" y="582.6826">Implementation getClientInfo()</text><ellipse cx="18" cy="595.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81.0605" x="27" y="598.9795">void close()</text><ellipse cx="18" cy="611.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="178.7666" x="27" y="615.2764">boolean closeGracefully()</text><ellipse cx="18" cy="628.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91.5059" x="27" y="631.5732">Object ping()</text><ellipse cx="18" cy="644.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168.875" x="27" y="647.8701">void addRoot(Root root)</text><ellipse cx="18" cy="660.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="225.3193" x="27" y="664.167">void removeRoot(String rootUri)</text><ellipse cx="18" cy="677.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="247.96" x="27" y="680.4639">void rootsListChangedNotification()</text><ellipse cx="18" cy="693.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="339.7734" x="27" y="696.7607">CallToolResult callTool(CallToolRequest request)</text><ellipse cx="18" cy="709.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="178.0283" x="27" y="713.0576">ListToolsResult listTools()</text><ellipse cx="18" cy="726.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="249.1631" x="27" y="729.3545">ListResourcesResult listResources()</text><ellipse cx="18" cy="742.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="473.6006" x="27" y="745.6514">ReadResourceResult readResource(ReadResourceRequest request)</text><ellipse cx="18" cy="758.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="381.6846" x="27" y="761.9482">ListResourceTemplatesResult listResourceTemplates()</text><ellipse cx="18" cy="774.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="361.5869" x="27" y="778.2451">void subscribeResource(SubscribeRequest request)</text><ellipse cx="18" cy="791.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="396.8604" x="27" y="794.542">void unsubscribeResource(UnsubscribeRequest request)</text><ellipse cx="18" cy="807.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="220.4385" x="27" y="810.8389">ListPromptsResult listPrompts()</text><ellipse cx="18" cy="823.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="399.957" x="27" y="827.1357">GetPromptResult getPrompt(GetPromptRequest request)</text><ellipse cx="18" cy="840.0859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="290.1172" x="27" y="843.4326">void setLoggingLevel(LoggingLevel level)</text></g><!--class McpServer--><g id="elem_McpServer"><rect codeLine="77" fill="#F1F1F1" height="64.2969" id="McpServer" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="340.166" x="1639" y="270.5"/><ellipse cx="1767.5464" cy="286.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1;"/><path d="M1770.5151,292.1406 Q1769.937,292.4375 1769.2964,292.5781 Q1768.6558,292.7344 1767.9526,292.7344 Q1765.4526,292.7344 1764.1245,291.0938 Q1762.812,289.4375 1762.812,286.3125 Q1762.812,283.1875 1764.1245,281.5313 Q1765.4526,279.875 1767.9526,279.875 Q1768.6558,279.875 1769.2964,280.0313 Q1769.9526,280.1875 1770.5151,280.4844 L1770.5151,283.2031 Q1769.8901,282.625 1769.2964,282.3594 Q1768.7026,282.0781 1768.0776,282.0781 Q1766.7339,282.0781 1766.0464,283.1563 Q1765.3589,284.2188 1765.3589,286.3125 Q1765.3589,288.4063 1766.0464,289.4844 Q1766.7339,290.5469 1768.0776,290.5469 Q1768.7026,290.5469 1769.2964,290.2813 Q1769.8901,290 1770.5151,289.4219 L1770.5151,292.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74.5732" x="1788.0464" y="291.3467">McpServer</text><line style="stroke:#181818;stroke-width:0.5;" x1="1640" x2="1978.166" y1="302.5" y2="302.5"/><line style="stroke:#181818;stroke-width:0.5;" x1="1640" x2="1978.166" y1="310.5" y2="310.5"/><ellipse cx="1650" cy="324.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="314.166" x="1659" y="327.4951">Builder using(ServerMcpTransport transport)</text></g><!--class McpAsyncServer--><g id="elem_McpAsyncServer"><rect codeLine="81" fill="#F1F1F1" height="406.5313" id="McpAsyncServer" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="584.7559" x="1477.5" y="952"/><ellipse cx="1707.478" cy="968" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1;"/><path d="M1710.4468,973.6406 Q1709.8687,973.9375 1709.228,974.0781 Q1708.5874,974.2344 1707.8843,974.2344 Q1705.3843,974.2344 1704.0562,972.5938 Q1702.7437,970.9375 1702.7437,967.8125 Q1702.7437,964.6875 1704.0562,963.0313 Q1705.3843,961.375 1707.8843,961.375 Q1708.5874,961.375 1709.228,961.5313 Q1709.8843,961.6875 1710.4468,961.9844 L1710.4468,964.7031 Q1709.8218,964.125 1709.228,963.8594 Q1708.6343,963.5781 1708.0093,963.5781 Q1706.6655,963.5781 1705.978,964.6563 Q1705.2905,965.7188 1705.2905,967.8125 Q1705.2905,969.9063 1705.978,970.9844 Q1706.6655,972.0469 1708.0093,972.0469 Q1708.6343,972.0469 1709.228,971.7813 Q1709.8218,971.5 1710.4468,970.9219 L1710.4468,973.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116.2998" x="1727.978" y="972.8467">McpAsyncServer</text><line style="stroke:#181818;stroke-width:0.5;" x1="1478.5" x2="2061.2559" y1="984" y2="984"/><line style="stroke:#181818;stroke-width:0.5;" x1="1478.5" x2="2061.2559" y1="992" y2="992"/><ellipse cx="1488.5" cy="1005.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="293.5078" x="1497.5" y="1008.9951">ServerCapabilities getServerCapabilities()</text><ellipse cx="1488.5" cy="1021.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221.9355" x="1497.5" y="1025.292">Implementation getServerInfo()</text><ellipse cx="1488.5" cy="1038.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="282.748" x="1497.5" y="1041.5889">ClientCapabilities getClientCapabilities()</text><ellipse cx="1488.5" cy="1054.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216.5557" x="1497.5" y="1057.8857">Implementation getClientInfo()</text><ellipse cx="1488.5" cy="1070.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81.0605" x="1497.5" y="1074.1826">void close()</text><ellipse cx="1488.5" cy="1087.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215.2568" x="1497.5" y="1090.4795">Mono&lt;Void&gt; closeGracefully()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4.4502" x="1497.5" y="1106.7764">&#160;</text><ellipse cx="1488.5" cy="1119.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="394.3994" x="1497.5" y="1123.0732">Mono&lt;Void&gt; addTool(ToolRegistration toolRegistration)</text><ellipse cx="1488.5" cy="1136.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="304.9238" x="1497.5" y="1139.3701">Mono&lt;Void&gt; removeTool(String toolName)</text><ellipse cx="1488.5" cy="1152.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="271.6943" x="1497.5" y="1155.667">Mono&lt;Void&gt; notifyToolsListChanged()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4.4502" x="1497.5" y="1171.9639">&#160;</text><ellipse cx="1488.5" cy="1184.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="470.2646" x="1497.5" y="1188.2607">Mono&lt;Void&gt; addResource(ResourceRegistration resourceHandler)</text><ellipse cx="1488.5" cy="1201.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="353.7393" x="1497.5" y="1204.5576">Mono&lt;Void&gt; removeResource(String resourceUri)</text><ellipse cx="1488.5" cy="1217.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="307.2617" x="1497.5" y="1220.8545">Mono&lt;Void&gt; notifyResourcesListChanged()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4.4502" x="1497.5" y="1237.1514">&#160;</text><ellipse cx="1488.5" cy="1250.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="461.5215" x="1497.5" y="1253.4482">Mono&lt;Void&gt; addPrompt(PromptRegistration promptRegistration)</text><ellipse cx="1488.5" cy="1266.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="350.8408" x="1497.5" y="1269.7451">Mono&lt;Void&gt; removePrompt(String promptName)</text><ellipse cx="1488.5" cy="1282.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="292.8994" x="1497.5" y="1286.042">Mono&lt;Void&gt; notifyPromptsListChanged()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4.4502" x="1497.5" y="1302.3389">&#160;</text><ellipse cx="1488.5" cy="1315.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="520.7002" x="1497.5" y="1318.6357">Mono&lt;Void&gt; loggingNotification(LoggingMessageNotification notification)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4.4502" x="1497.5" y="1334.9326">&#160;</text><ellipse cx="1488.5" cy="1347.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="558.7559" x="1497.5" y="1351.2295">Mono&lt;CreateMessageResult&gt; createMessage(CreateMessageRequest request)</text></g><!--class McpSyncServer--><g id="elem_McpSyncServer"><rect codeLine="112" fill="#F1F1F1" height="439.125" id="McpSyncServer" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="523.2119" x="1764.5" y="436"/><ellipse cx="1967.6982" cy="452" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1;"/><path d="M1970.667,457.6406 Q1970.0889,457.9375 1969.4482,458.0781 Q1968.8076,458.2344 1968.1045,458.2344 Q1965.6045,458.2344 1964.2764,456.5938 Q1962.9639,454.9375 1962.9639,451.8125 Q1962.9639,448.6875 1964.2764,447.0313 Q1965.6045,445.375 1968.1045,445.375 Q1968.8076,445.375 1969.4482,445.5313 Q1970.1045,445.6875 1970.667,445.9844 L1970.667,448.7031 Q1970.042,448.125 1969.4482,447.8594 Q1968.8545,447.5781 1968.2295,447.5781 Q1966.8857,447.5781 1966.1982,448.6563 Q1965.5107,449.7188 1965.5107,451.8125 Q1965.5107,453.9063 1966.1982,454.9844 Q1966.8857,456.0469 1968.2295,456.0469 Q1968.8545,456.0469 1969.4482,455.7813 Q1970.042,455.5 1970.667,454.9219 L1970.667,457.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108.3154" x="1988.1982" y="456.8467">McpSyncServer</text><line style="stroke:#181818;stroke-width:0.5;" x1="1765.5" x2="2286.7119" y1="468" y2="468"/><line style="stroke:#181818;stroke-width:0.5;" x1="1765.5" x2="2286.7119" y1="476" y2="476"/><ellipse cx="1775.5" cy="489.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="242.2998" x="1784.5" y="492.9951">McpAsyncServer getAsyncServer()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4.4502" x="1784.5" y="509.292">&#160;</text><ellipse cx="1775.5" cy="522.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="293.5078" x="1784.5" y="525.5889">ServerCapabilities getServerCapabilities()</text><ellipse cx="1775.5" cy="538.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221.9355" x="1784.5" y="541.8857">Implementation getServerInfo()</text><ellipse cx="1775.5" cy="554.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="282.748" x="1784.5" y="558.1826">ClientCapabilities getClientCapabilities()</text><ellipse cx="1775.5" cy="571.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216.5557" x="1784.5" y="574.4795">Implementation getClientInfo()</text><ellipse cx="1775.5" cy="587.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81.0605" x="1784.5" y="590.7764">void close()</text><ellipse cx="1775.5" cy="603.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="152.4209" x="1784.5" y="607.0732">void closeGracefully()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4.4502" x="1784.5" y="623.3701">&#160;</text><ellipse cx="1775.5" cy="636.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="301.6357" x="1784.5" y="639.667">void addTool(ToolRegistration toolHandler)</text><ellipse cx="1775.5" cy="652.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="242.0879" x="1784.5" y="655.9639">void removeTool(String toolName)</text><ellipse cx="1775.5" cy="668.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="208.8584" x="1784.5" y="672.2607">void notifyToolsListChanged()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4.4502" x="1784.5" y="688.5576">&#160;</text><ellipse cx="1775.5" cy="701.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="407.4287" x="1784.5" y="704.8545">void addResource(ResourceRegistration resourceHandler)</text><ellipse cx="1775.5" cy="717.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="290.9033" x="1784.5" y="721.1514">void removeResource(String resourceUri)</text><ellipse cx="1775.5" cy="734.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="244.4258" x="1784.5" y="737.4482">void notifyResourcesListChanged()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4.4502" x="1784.5" y="753.7451">&#160;</text><ellipse cx="1775.5" cy="766.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="398.6855" x="1784.5" y="770.042">void addPrompt(PromptRegistration promptRegistration)</text><ellipse cx="1775.5" cy="782.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="288.0049" x="1784.5" y="786.3389">void removePrompt(String promptName)</text><ellipse cx="1775.5" cy="799.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="230.0635" x="1784.5" y="802.6357">void notifyPromptsListChanged()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4.4502" x="1784.5" y="818.9326">&#160;</text><ellipse cx="1775.5" cy="831.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="457.8643" x="1784.5" y="835.2295">void loggingNotification(LoggingMessageNotification notification)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4.4502" x="1784.5" y="851.5264">&#160;</text><ellipse cx="1775.5" cy="864.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="497.2119" x="1784.5" y="867.8232">CreateMessageResult createMessage(CreateMessageRequest request)</text></g><!--class StdioClientTransport--><g id="elem_StdioClientTransport"><rect codeLine="145" fill="#F1F1F1" height="80.5938" id="StdioClientTransport" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="412.8525" x="639.5" y="1529"/><ellipse cx="769.6768" cy="1545" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1;"/><path d="M772.6455,1550.6406 Q772.0674,1550.9375 771.4268,1551.0781 Q770.7861,1551.2344 770.083,1551.2344 Q767.583,1551.2344 766.2549,1549.5938 Q764.9424,1547.9375 764.9424,1544.8125 Q764.9424,1541.6875 766.2549,1540.0313 Q767.583,1538.375 770.083,1538.375 Q770.7861,1538.375 771.4268,1538.5313 Q772.083,1538.6875 772.6455,1538.9844 L772.6455,1541.7031 Q772.0205,1541.125 771.4268,1540.8594 Q770.833,1540.5781 770.208,1540.5781 Q768.8643,1540.5781 768.1768,1541.6563 Q767.4893,1542.7188 767.4893,1544.8125 Q767.4893,1546.9063 768.1768,1547.9844 Q768.8643,1549.0469 770.208,1549.0469 Q770.833,1549.0469 771.4268,1548.7813 Q772.0205,1548.5 772.6455,1547.9219 L772.6455,1550.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="143.999" x="790.1768" y="1549.8467">StdioClientTransport</text><line style="stroke:#181818;stroke-width:0.5;" x1="640.5" x2="1051.3525" y1="1561" y2="1561"/><line style="stroke:#181818;stroke-width:0.5;" x1="640.5" x2="1051.3525" y1="1569" y2="1569"/><ellipse cx="650.5" cy="1582.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="386.8525" x="659.5" y="1585.9951">void setErrorHandler(Consumer&lt;String&gt; errorHandler)</text><ellipse cx="650.5" cy="1598.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="247.3584" x="659.5" y="1602.292">Sinks.Many&lt;String&gt; getErrorSink()</text></g><!--class ClientMcpTransport--><g id="elem_ClientMcpTransport"><rect fill="#F1F1F1" height="48" id="ClientMcpTransport" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="168.9443" x="584.5" y="1420"/><ellipse cx="599.5" cy="1436" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1;"/><path d="M595.4219,1431.7656 L595.4219,1429.6094 L602.8125,1429.6094 L602.8125,1431.7656 L600.3438,1431.7656 L600.3438,1439.8438 L602.8125,1439.8438 L602.8125,1442 L595.4219,1442 L595.4219,1439.8438 L597.8906,1439.8438 L597.8906,1431.7656 L595.4219,1431.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="136.9443" x="613.5" y="1440.8467">ClientMcpTransport</text><line style="stroke:#181818;stroke-width:0.5;" x1="585.5" x2="752.4443" y1="1452" y2="1452"/><line style="stroke:#181818;stroke-width:0.5;" x1="585.5" x2="752.4443" y1="1460" y2="1460"/></g><!--class StdioServerTransport--><g id="elem_StdioServerTransport"><rect codeLine="150" fill="#F1F1F1" height="48" id="StdioServerTransport" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="181.3789" x="1433.5" y="1545.5"/><ellipse cx="1448.5" cy="1561.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1;"/><path d="M1451.4688,1567.1406 Q1450.8906,1567.4375 1450.25,1567.5781 Q1449.6094,1567.7344 1448.9063,1567.7344 Q1446.4063,1567.7344 1445.0781,1566.0938 Q1443.7656,1564.4375 1443.7656,1561.3125 Q1443.7656,1558.1875 1445.0781,1556.5313 Q1446.4063,1554.875 1448.9063,1554.875 Q1449.6094,1554.875 1450.25,1555.0313 Q1450.9063,1555.1875 1451.4688,1555.4844 L1451.4688,1558.2031 Q1450.8438,1557.625 1450.25,1557.3594 Q1449.6563,1557.0781 1449.0313,1557.0781 Q1447.6875,1557.0781 1447,1558.1563 Q1446.3125,1559.2188 1446.3125,1561.3125 Q1446.3125,1563.4063 1447,1564.4844 Q1447.6875,1565.5469 1449.0313,1565.5469 Q1449.6563,1565.5469 1450.25,1565.2813 Q1450.8438,1565 1451.4688,1564.4219 L1451.4688,1567.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="149.3789" x="1462.5" y="1566.3467">StdioServerTransport</text><line style="stroke:#181818;stroke-width:0.5;" x1="1434.5" x2="1613.8789" y1="1577.5" y2="1577.5"/><line style="stroke:#181818;stroke-width:0.5;" x1="1434.5" x2="1613.8789" y1="1585.5" y2="1585.5"/></g><!--class ServerMcpTransport--><g id="elem_ServerMcpTransport"><rect fill="#F1F1F1" height="48" id="ServerMcpTransport" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="174.3242" x="1437" y="1420"/><ellipse cx="1452" cy="1436" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1;"/><path d="M1447.9219,1431.7656 L1447.9219,1429.6094 L1455.3125,1429.6094 L1455.3125,1431.7656 L1452.8438,1431.7656 L1452.8438,1439.8438 L1455.3125,1439.8438 L1455.3125,1442 L1447.9219,1442 L1447.9219,1439.8438 L1450.3906,1439.8438 L1450.3906,1431.7656 L1447.9219,1431.7656 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="142.3242" x="1466" y="1440.8467">ServerMcpTransport</text><line style="stroke:#181818;stroke-width:0.5;" x1="1438" x2="1610.3242" y1="1452" y2="1452"/><line style="stroke:#181818;stroke-width:0.5;" x1="1438" x2="1610.3242" y1="1460" y2="1460"/></g><!--class HttpServletSseServerTransport--><g id="elem_HttpServletSseServerTransport"><rect codeLine="154" fill="#F1F1F1" height="48" id="HttpServletSseServerTransport" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="250.3809" x="1650" y="1545.5"/><ellipse cx="1665" cy="1561.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1;"/><path d="M1667.9688,1567.1406 Q1667.3906,1567.4375 1666.75,1567.5781 Q1666.1094,1567.7344 1665.4063,1567.7344 Q1662.9063,1567.7344 1661.5781,1566.0938 Q1660.2656,1564.4375 1660.2656,1561.3125 Q1660.2656,1558.1875 1661.5781,1556.5313 Q1662.9063,1554.875 1665.4063,1554.875 Q1666.1094,1554.875 1666.75,1555.0313 Q1667.4063,1555.1875 1667.9688,1555.4844 L1667.9688,1558.2031 Q1667.3438,1557.625 1666.75,1557.3594 Q1666.1563,1557.0781 1665.5313,1557.0781 Q1664.1875,1557.0781 1663.5,1558.1563 Q1662.8125,1559.2188 1662.8125,1561.3125 Q1662.8125,1563.4063 1663.5,1564.4844 Q1664.1875,1565.5469 1665.5313,1565.5469 Q1666.1563,1565.5469 1666.75,1565.2813 Q1667.3438,1565 1667.9688,1564.4219 L1667.9688,1567.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="218.3809" x="1679" y="1566.3467">HttpServletSseServerTransport</text><line style="stroke:#181818;stroke-width:0.5;" x1="1651" x2="1899.3809" y1="1577.5" y2="1577.5"/><line style="stroke:#181818;stroke-width:0.5;" x1="1651" x2="1899.3809" y1="1585.5" y2="1585.5"/></g><!--class HttpClientSseClientTransport--><g id="elem_HttpClientSseClientTransport"><rect codeLine="158" fill="#F1F1F1" height="48" id="HttpClientSseClientTransport" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="235.998" x="107" y="1545.5"/><ellipse cx="122" cy="1561.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1;"/><path d="M124.9688,1567.1406 Q124.3906,1567.4375 123.75,1567.5781 Q123.1094,1567.7344 122.4063,1567.7344 Q119.9063,1567.7344 118.5781,1566.0938 Q117.2656,1564.4375 117.2656,1561.3125 Q117.2656,1558.1875 118.5781,1556.5313 Q119.9063,1554.875 122.4063,1554.875 Q123.1094,1554.875 123.75,1555.0313 Q124.4063,1555.1875 124.9688,1555.4844 L124.9688,1558.2031 Q124.3438,1557.625 123.75,1557.3594 Q123.1563,1557.0781 122.5313,1557.0781 Q121.1875,1557.0781 120.5,1558.1563 Q119.8125,1559.2188 119.8125,1561.3125 Q119.8125,1563.4063 120.5,1564.4844 Q121.1875,1565.5469 122.5313,1565.5469 Q123.1563,1565.5469 123.75,1565.2813 Q124.3438,1565 124.9688,1564.4219 L124.9688,1567.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203.998" x="136" y="1566.3467">HttpClientSseClientTransport</text><line style="stroke:#181818;stroke-width:0.5;" x1="108" x2="341.998" y1="1577.5" y2="1577.5"/><line style="stroke:#181818;stroke-width:0.5;" x1="108" x2="341.998" y1="1585.5" y2="1585.5"/></g><!--class WebFluxSseClientTransport--><g id="elem_WebFluxSseClientTransport"><rect codeLine="162" fill="#F1F1F1" height="48" id="WebFluxSseClientTransport" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="225.5186" x="378" y="1545.5"/><ellipse cx="393" cy="1561.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1;"/><path d="M395.9688,1567.1406 Q395.3906,1567.4375 394.75,1567.5781 Q394.1094,1567.7344 393.4063,1567.7344 Q390.9063,1567.7344 389.5781,1566.0938 Q388.2656,1564.4375 388.2656,1561.3125 Q388.2656,1558.1875 389.5781,1556.5313 Q390.9063,1554.875 393.4063,1554.875 Q394.1094,1554.875 394.75,1555.0313 Q395.4063,1555.1875 395.9688,1555.4844 L395.9688,1558.2031 Q395.3438,1557.625 394.75,1557.3594 Q394.1563,1557.0781 393.5313,1557.0781 Q392.1875,1557.0781 391.5,1558.1563 Q390.8125,1559.2188 390.8125,1561.3125 Q390.8125,1563.4063 391.5,1564.4844 Q392.1875,1565.5469 393.5313,1565.5469 Q394.1563,1565.5469 394.75,1565.2813 Q395.3438,1565 395.9688,1564.4219 L395.9688,1567.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="193.5186" x="407" y="1566.3467">WebFluxSseClientTransport</text><line style="stroke:#181818;stroke-width:0.5;" x1="379" x2="602.5186" y1="1577.5" y2="1577.5"/><line style="stroke:#181818;stroke-width:0.5;" x1="379" x2="602.5186" y1="1585.5" y2="1585.5"/></g><!--class WebFluxSseServerTransport--><g id="elem_WebFluxSseServerTransport"><rect codeLine="166" fill="#F1F1F1" height="64.2969" id="WebFluxSseServerTransport" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="309.9307" x="1935" y="1537.5"/><ellipse cx="1986.2661" cy="1553.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1;"/><path d="M1989.2349,1559.1406 Q1988.6567,1559.4375 1988.0161,1559.5781 Q1987.3755,1559.7344 1986.6724,1559.7344 Q1984.1724,1559.7344 1982.8442,1558.0938 Q1981.5317,1556.4375 1981.5317,1553.3125 Q1981.5317,1550.1875 1982.8442,1548.5313 Q1984.1724,1546.875 1986.6724,1546.875 Q1987.3755,1546.875 1988.0161,1547.0313 Q1988.6724,1547.1875 1989.2349,1547.4844 L1989.2349,1550.2031 Q1988.6099,1549.625 1988.0161,1549.3594 Q1987.4224,1549.0781 1986.7974,1549.0781 Q1985.4536,1549.0781 1984.7661,1550.1563 Q1984.0786,1551.2188 1984.0786,1553.3125 Q1984.0786,1555.4063 1984.7661,1556.4844 Q1985.4536,1557.5469 1986.7974,1557.5469 Q1987.4224,1557.5469 1988.0161,1557.2813 Q1988.6099,1557 1989.2349,1556.4219 L1989.2349,1559.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198.8984" x="2006.7661" y="1558.3467">WebFluxSseServerTransport</text><line style="stroke:#181818;stroke-width:0.5;" x1="1936" x2="2243.9307" y1="1569.5" y2="1569.5"/><line style="stroke:#181818;stroke-width:0.5;" x1="1936" x2="2243.9307" y1="1577.5" y2="1577.5"/><ellipse cx="1946" cy="1591.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="283.9307" x="1955" y="1594.4951">RouterFunction&lt;?&gt; getRouterFunction()</text></g><!--class WebMvcSseServerTransport--><g id="elem_WebMvcSseServerTransport"><rect codeLine="170" fill="#F1F1F1" height="64.2969" id="WebMvcSseServerTransport" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="309.9307" x="1088" y="1537.5"/><ellipse cx="1139.7856" cy="1553.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1;"/><path d="M1142.7544,1559.1406 Q1142.1763,1559.4375 1141.5356,1559.5781 Q1140.895,1559.7344 1140.1919,1559.7344 Q1137.6919,1559.7344 1136.3638,1558.0938 Q1135.0513,1556.4375 1135.0513,1553.3125 Q1135.0513,1550.1875 1136.3638,1548.5313 Q1137.6919,1546.875 1140.1919,1546.875 Q1140.895,1546.875 1141.5356,1547.0313 Q1142.1919,1547.1875 1142.7544,1547.4844 L1142.7544,1550.2031 Q1142.1294,1549.625 1141.5356,1549.3594 Q1140.9419,1549.0781 1140.3169,1549.0781 Q1138.9731,1549.0781 1138.2856,1550.1563 Q1137.5981,1551.2188 1137.5981,1553.3125 Q1137.5981,1555.4063 1138.2856,1556.4844 Q1138.9731,1557.5469 1140.3169,1557.5469 Q1140.9419,1557.5469 1141.5356,1557.2813 Q1142.1294,1557 1142.7544,1556.4219 L1142.7544,1559.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="197.8594" x="1160.2856" y="1558.3467">WebMvcSseServerTransport</text><line style="stroke:#181818;stroke-width:0.5;" x1="1089" x2="1396.9307" y1="1569.5" y2="1569.5"/><line style="stroke:#181818;stroke-width:0.5;" x1="1089" x2="1396.9307" y1="1577.5" y2="1577.5"/><ellipse cx="1099" cy="1591.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="283.9307" x="1108" y="1594.4951">RouterFunction&lt;?&gt; getRouterFunction()</text></g><!--class McpSchema--><g id="elem_McpSchema"><rect codeLine="176" fill="#F1F1F1" height="162.0781" id="McpSchema" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="357.0918" x="778.5" y="7"/><ellipse cx="910.3208" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1;"/><path d="M913.2896,28.6406 Q912.7114,28.9375 912.0708,29.0781 Q911.4302,29.2344 910.7271,29.2344 Q908.2271,29.2344 906.8989,27.5938 Q905.5864,25.9375 905.5864,22.8125 Q905.5864,19.6875 906.8989,18.0313 Q908.2271,16.375 910.7271,16.375 Q911.4302,16.375 912.0708,16.5313 Q912.7271,16.6875 913.2896,16.9844 L913.2896,19.7031 Q912.6646,19.125 912.0708,18.8594 Q911.4771,18.5781 910.8521,18.5781 Q909.5083,18.5781 908.8208,19.6563 Q908.1333,20.7188 908.1333,22.8125 Q908.1333,24.9063 908.8208,25.9844 Q909.5083,27.0469 910.8521,27.0469 Q911.4771,27.0469 912.0708,26.7813 Q912.6646,26.5 913.2896,25.9219 L913.2896,28.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84.9502" x="930.8208" y="27.8467">McpSchema</text><line style="stroke:#181818;stroke-width:0.5;" x1="779.5" x2="1134.5918" y1="39" y2="39"/><ellipse cx="789.5" cy="52.6484" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="117.0176" x="798.5" y="55.9951">class ErrorCodes</text><ellipse cx="789.5" cy="68.9453" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124.3867" x="798.5" y="72.292">interface Request</text><ellipse cx="789.5" cy="85.2422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="190.7021" x="798.5" y="88.5889">interface JSONRPCMessage</text><ellipse cx="789.5" cy="101.5391" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195.002" x="798.5" y="104.8857">interface ResourceContents</text><ellipse cx="789.5" cy="117.8359" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="122.5684" x="798.5" y="121.1826">interface Content</text><ellipse cx="789.5" cy="134.1328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="194.4619" x="798.5" y="137.4795">interface ServerCapabilities</text><line style="stroke:#181818;stroke-width:0.5;" x1="779.5" x2="1134.5918" y1="144.7813" y2="144.7813"/><ellipse cx="789.5" cy="158.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="331.0918" x="798.5" y="161.7764">JSONRPCMessage deserializeJsonRpcMessage()</text></g><!--class McpError--><g id="elem_McpError"><rect codeLine="186" fill="#F1F1F1" height="48" id="McpError" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="95.3418" x="1170.5" y="64"/><ellipse cx="1185.5" cy="80" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1;"/><path d="M1188.4688,85.6406 Q1187.8906,85.9375 1187.25,86.0781 Q1186.6094,86.2344 1185.9063,86.2344 Q1183.4063,86.2344 1182.0781,84.5938 Q1180.7656,82.9375 1180.7656,79.8125 Q1180.7656,76.6875 1182.0781,75.0313 Q1183.4063,73.375 1185.9063,73.375 Q1186.6094,73.375 1187.25,73.5313 Q1187.9063,73.6875 1188.4688,73.9844 L1188.4688,76.7031 Q1187.8438,76.125 1187.25,75.8594 Q1186.6563,75.5781 1186.0313,75.5781 Q1184.6875,75.5781 1184,76.6563 Q1183.3125,77.7188 1183.3125,79.8125 Q1183.3125,81.9063 1184,82.9844 Q1184.6875,84.0469 1186.0313,84.0469 Q1186.6563,84.0469 1187.25,83.7813 Q1187.8438,83.5 1188.4688,82.9219 L1188.4688,85.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="63.3418" x="1199.5" y="84.8467">McpError</text><line style="stroke:#181818;stroke-width:0.5;" x1="1171.5" x2="1264.8418" y1="96" y2="96"/><line style="stroke:#181818;stroke-width:0.5;" x1="1171.5" x2="1264.8418" y1="104" y2="104"/></g><!--reverse link ClientMcpTransport to StdioClientTransport--><g id="link_ClientMcpTransport_StdioClientTransport"><path d="M717.0526,1478.5288 C741.4926,1495.5788 760.51,1508.85 789.18,1528.86 " fill="none" id="ClientMcpTransport-backto-StdioClientTransport" style="stroke:#181818;stroke-width:1;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="702.29,1468.23,713.6197,1483.4497,720.4855,1473.6079,702.29,1468.23" style="stroke:#181818;stroke-width:1;"/></g><!--reverse link ServerMcpTransport to StdioServerTransport--><g id="link_ServerMcpTransport_StdioServerTransport"><path d="M1524,1486.23 C1524,1508.31 1524,1523.33 1524,1545.37 " fill="none" id="ServerMcpTransport-backto-StdioServerTransport" style="stroke:#181818;stroke-width:1;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="1524,1468.23,1518,1486.23,1530,1486.23,1524,1468.23" style="stroke:#181818;stroke-width:1;"/></g><!--reverse link ServerMcpTransport to HttpServletSseServerTransport--><g id="link_ServerMcpTransport_HttpServletSseServerTransport"><path d="M1587.0691,1476.0303 C1631.8991,1498.1003 1682.99,1523.23 1727.89,1545.32 " fill="none" id="ServerMcpTransport-backto-HttpServletSseServerTransport" style="stroke:#181818;stroke-width:1;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="1570.92,1468.08,1584.419,1481.4133,1589.7192,1470.6472,1570.92,1468.08" style="stroke:#181818;stroke-width:1;"/></g><!--reverse link ClientMcpTransport to HttpClientSseClientTransport--><g id="link_ClientMcpTransport_HttpClientSseClientTransport"><path d="M566.9043,1472.2225 C504.7443,1488.8925 435.71,1507.64 360,1529 C341.43,1534.24 321.47,1540.01 302.74,1545.48 " fill="none" id="ClientMcpTransport-backto-HttpClientSseClientTransport" style="stroke:#181818;stroke-width:1;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="584.29,1467.56,565.3502,1466.4272,568.4585,1478.0177,584.29,1467.56" style="stroke:#181818;stroke-width:1;"/></g><!--reverse link ClientMcpTransport to WebFluxSseClientTransport--><g id="link_ClientMcpTransport_WebFluxSseClientTransport"><path d="M620.7316,1478.4917 C588.9116,1500.5717 556.1,1523.33 524.33,1545.37 " fill="none" id="ClientMcpTransport-backto-WebFluxSseClientTransport" style="stroke:#181818;stroke-width:1;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="635.52,1468.23,617.311,1473.5623,624.1522,1483.4212,635.52,1468.23" style="stroke:#181818;stroke-width:1;"/></g><!--reverse link ServerMcpTransport to WebFluxSseServerTransport--><g id="link_ServerMcpTransport_WebFluxSseServerTransport"><path d="M1628.947,1466.9032 C1708.847,1483.6532 1812.67,1505.68 1918,1529 C1930.26,1531.72 1943.01,1534.57 1955.77,1537.46 " fill="none" id="ServerMcpTransport-backto-WebFluxSseServerTransport" style="stroke:#181818;stroke-width:1;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="1611.33,1463.21,1627.716,1472.7755,1630.1781,1461.0308,1611.33,1463.21" style="stroke:#181818;stroke-width:1;"/></g><!--reverse link ServerMcpTransport to WebMvcSseServerTransport--><g id="link_ServerMcpTransport_WebMvcSseServerTransport"><path d="M1455.0021,1475.3242 C1410.4421,1494.9142 1362.61,1515.93 1313.56,1537.49 " fill="none" id="ServerMcpTransport-backto-WebMvcSseServerTransport" style="stroke:#181818;stroke-width:1;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="1471.48,1468.08,1452.5874,1469.8316,1457.4168,1480.8168,1471.48,1468.08" style="stroke:#181818;stroke-width:1;"/></g><!--reverse link McpTransport to ClientMcpTransport--><g id="link_McpTransport_ClientMcpTransport"><path codeLine="190" d="M979.3828,1230.2564 C887.2628,1293.3964 765.82,1376.64 702.99,1419.7 " fill="none" id="McpTransport-backto-ClientMcpTransport" style="stroke:#181818;stroke-width:1;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="994.23,1220.08,975.9906,1225.3074,982.7749,1235.2055,994.23,1220.08" style="stroke:#181818;stroke-width:1;"/></g><!--reverse link McpTransport to ServerMcpTransport--><g id="link_McpTransport_ServerMcpTransport"><path codeLine="191" d="M1199.0331,1229.9494 C1295.4731,1293.1794 1423.15,1376.88 1488.72,1419.87 " fill="none" id="McpTransport-backto-ServerMcpTransport" style="stroke:#181818;stroke-width:1;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="1183.98,1220.08,1195.7433,1234.9671,1202.3229,1224.9317,1183.98,1220.08" style="stroke:#181818;stroke-width:1;"/></g><!--reverse link McpSession to DefaultMcpSession--><g id="link_McpSession_DefaultMcpSession"><path codeLine="193" d="M1087,377.12 C1087,448.45 1087,552.39 1087,614.94 " fill="none" id="McpSession-backto-DefaultMcpSession" style="stroke:#181818;stroke-width:1;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="1087,359.12,1081,377.12,1093,377.12,1087,359.12" style="stroke:#181818;stroke-width:1;"/></g><!--link DefaultMcpSession to McpAsyncClient--><g id="link_DefaultMcpSession_McpAsyncClient"><path codeLine="194" d="M1033.51,696.2 C956.43,753.41 818.5558,855.728 687.0458,953.338 " fill="none" id="DefaultMcpSession-to-McpAsyncClient" style="stroke:#181818;stroke-width:1;"/><polygon fill="none" points="677.41,960.49,684.6119,960.126,687.0458,953.338,679.8439,953.7021,677.41,960.49" style="stroke:#181818;stroke-width:1;"/></g><!--link DefaultMcpSession to McpAsyncServer--><g id="link_DefaultMcpSession_McpAsyncServer"><path codeLine="195" d="M1141.45,696.2 C1217.62,751.74 1351.6438,849.46 1482.4538,944.84 " fill="none" id="DefaultMcpSession-to-McpAsyncServer" style="stroke:#181818;stroke-width:1;"/><polygon fill="none" points="1492.15,951.91,1489.6586,945.143,1482.4538,944.84,1484.9453,951.6071,1492.15,951.91" style="stroke:#181818;stroke-width:1;"/></g><!--link McpClient to McpAsyncClient--><g id="link_McpClient_McpAsyncClient"><path codeLine="197" d="M496.28,334.76 C505.99,361.24 518.75,400.46 524,436 C552.5,629.02 559.77,683.2 524,875 C518.75,903.13 512.6628,926.3731 503.3728,954.4831 " fill="none" id="McpClient-to-McpAsyncClient" style="stroke:#181818;stroke-width:1;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="501.49,960.18,508.1121,952.8898,503.059,955.4325,500.5162,950.3794,501.49,960.18" style="stroke:#181818;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="48.3247" x="550" y="660.0669">creates</text></g><!--link McpClient to McpSyncClient--><g id="link_McpClient_McpSyncClient"><path codeLine="198" d="M463.86,334.65 C444.76,364.18 417.6084,406.1618 385.9184,455.1618 " fill="none" id="McpClient-to-McpSyncClient" style="stroke:#181818;stroke-width:1;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="382.66,460.2,390.9063,454.815,385.3753,456.0015,384.1888,450.4705,382.66,460.2" style="stroke:#181818;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="48.3247" x="425" y="402.0669">creates</text></g><!--link McpSyncClient to McpAsyncClient--><g id="link_McpSyncClient_McpAsyncClient"><path codeLine="199" d="M319.04,850.82 C330.5,886.72 340.6454,918.4842 352.1054,954.3842 " fill="none" id="McpSyncClient-to-McpAsyncClient" style="stroke:#181818;stroke-width:1;"/><polygon fill="#181818" points="353.93,960.1,355.0036,950.3098,352.4095,955.3368,347.3825,952.7427,353.93,960.1" style="stroke:#181818;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="81.1294" x="343" y="918.0669">delegates to</text></g><!--link McpServer to McpAsyncServer--><g id="link_McpServer_McpAsyncServer"><path codeLine="201" d="M1771.45,334.52 C1745.02,358.95 1711.8,395.55 1697,436 C1636.02,602.61 1663.2546,798.7393 1701.1646,946.0493 " fill="none" id="McpServer-to-McpAsyncServer" style="stroke:#181818;stroke-width:1;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="1702.66,951.86,1704.2907,942.1471,1701.4139,947.0178,1696.5432,944.1409,1702.66,951.86" style="stroke:#181818;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="48.3247" x="1698" y="660.0669">creates</text></g><!--link McpServer to McpSyncServer--><g id="link_McpServer_McpSyncServer"><path codeLine="202" d="M1828.26,334.65 C1843.45,359.23 1862.9848,390.8266 1887.6348,430.6966 " fill="none" id="McpServer-to-McpSyncServer" style="stroke:#181818;stroke-width:1;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="1890.79,435.8,1889.4594,426.0414,1888.1607,431.5472,1882.6549,430.2484,1890.79,435.8" style="stroke:#181818;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="48.3247" x="1868" y="402.0669">creates</text></g><!--reverse link McpSyncServer to McpAsyncServer--><g id="link_McpSyncServer_McpAsyncServer"><path codeLine="203" d="M1908.0431,885.9621 C1894.9531,911.4221 1887.13,926.64 1874.16,951.87 " fill="none" id="McpSyncServer-backto-McpAsyncServer" style="stroke:#181818;stroke-width:1;"/><polygon fill="none" points="1913.53,875.29,1907.2292,878.7971,1908.0431,885.9621,1914.3439,882.455,1913.53,875.29" style="stroke:#181818;stroke-width:1;"/></g><!--reverse link DefaultMcpSession to McpTransport--><g id="link_DefaultMcpSession_McpTransport"><path codeLine="205" d="M1087,708.41 C1087,794.62 1087,986.83 1087,1091 " fill="none" id="DefaultMcpSession-backto-McpTransport" style="stroke:#181818;stroke-width:1;"/><polygon fill="none" points="1087,696.41,1083,702.41,1087,708.41,1091,702.41,1087,696.41" style="stroke:#181818;stroke-width:1;"/></g><!--reverse link McpSchema to McpSession--><g id="link_McpSchema_McpSession"><path codeLine="206" d="M1009.0909,174.1484 C1024.7809,199.7984 1038.67,222.5 1053.05,246 " fill="none" id="McpSchema-backto-McpSession" style="stroke:#181818;stroke-width:1;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="1005.96,169.03,1007.2441,178.7948,1008.5691,173.2953,1014.0686,174.6203,1005.96,169.03" style="stroke:#181818;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="29.7832" x="1035" y="212.0669">uses</text></g><!--link McpError to McpSession--><g id="link_McpError_McpSession"><path codeLine="207" d="M1203.73,112.15 C1184.1,143.99 1151.2982,197.1923 1124.4682,240.7223 " fill="none" id="McpError-to-McpSession" style="stroke:#181818;stroke-width:1;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="1121.32,245.83,1129.4474,240.2672,1123.9435,241.5736,1122.6371,236.0696,1121.32,245.83" style="stroke:#181818;stroke-width:1;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="44.04" x="1149" y="212.0669">throws</text></g><!--SRC=[tLZTSk8s5BxdANGNxpJa0NOOEYrjDjb9iXbWssjX7y2ja5n9Jfkc- -xLhot9me6qlTZEC82FllEZe_FfoBf02yO1tL89V8jB49FQ_qNtPRFcc8g6SObU9WXzSyyec_t4wcgEIaOfbBAuRcafQqPdPkpZwjF3yd5n3qBW7SmlKKuwHtjCAmByNM9J0AqSg8XrqC7-6eqd1KObOGAAr8AHVk0g-crBoBCTdwtdQ8rQUi1Sx36vvknGVDhyeg975PRu4gsV6rZ25ZZG4ZHQMi6xoPT9d8-L2aDDrcP38utljGrz2R-r86InahocEnMotBFg4ZbNt8u-OeuFOipdC2SFJDRRkiGwpwdrUzpChCXxcgF6-3WfDr4krMmlN3qS6W87eDBuH0k2XL2rKUfVz0DiSKjaceu-KIuHDtQLux5mBXvW_P9Q-KjSAHzERboy21rG-GLztzQa0evQeIPUM4XKhjB_CxFgZ7qddcaPMZJvkQMrh36f_rGB8DJCvgZk93PDA-1Fm1UumPkQg24GQ0ToABNe97iTyfPkcKNO459xG-anUnRPspkN4cQyAnUTmrGDLzMICLdeByJLLmhWS61FO32k93NgCwy7G2KMTxMG2qNx7SJLt8CNc90rOyGlGUcUYtx0L9KdKg-fRMk0yAh42ueOfCPPozKc5m8xOG1U0gwyt6Dv82jYm4XS7hG6jOPOvbrtWuDL4Er6bBpUGETvrKkEkBMQBHtgVWvb8q4_gXsoaL6eJXG4-06SqCDsNb04GwCn2f1tRBTJjNC7Jq2Ay04H_HspTvMGD-NjLq_RZIfQm3JFMTT7UhOQxJnFpT0uGotaLMx6j3oDbGaXKpvcg9XZuf24vt5mX7vZx3DvEPDtHkSDZ1kGRSYrX6QdiipEuZH-NI1RvyFUw-HZlTT2JkwzWSN_OLzLdmkaArqTowWwhchRmxvg-6EvirFBpQrtcGZo_TReEZPhZGTyW1H9DOcV3U42QlS1-keS3JAWcQTO42ntmflyGTxjF1rttExZdZDd11jojm5amxR5FXgqOuQdHH1mCn3bOtOMNCHMwtYE7LEpuJgo9Nh4IgDzrY7TgquuPDsuXyxo2gkw3KqlrBuemUbtvwTGM2IGPCD8csp8-uIvYYJ1ev_kLqVa_lb42ljcUvoy8HU2_dkKiGRpHgvshVzibeOdWrVu6GJu1cRw4C_cP13XA1k3y4xaeT7ujncO8T-vt5C5rpNFk9HzBrx9gcQsfdjexQ42PTw0Nomn_K7WHyuPTuLGB9JbzW3StHpC4GIZzkHSqr_5bLhHvmwpSqRqK17i6IOsozziR9aJmelMTketKffp1b6RW81_PiUcGPavFrMzePzXSqtQFywtahLnxeJqmPUr4dXtiVQjINqi3FElVDq_bV-nAtr8BFTmm4WL2J9ra3akMeInR8K6k62LGkLkY69XVEMNAjWDI5Mkr3EAHvqq5WwRJtICJIuOLOZ0xRlZHy7eiYazVUFsQAV-Occx169fkgyRCOdIE_lhwYfJ9HdGS6qca-1kpM06LswJuINSTCgIAwvNGDQnSURUgg-kvkajsNktcOaXR7K45SYdqup12WZiD5ZrGpTLSxG8lJjHR3U2hOwXUZcRJWUJ7QR4eQ8bSfKyKwaFaE_LEuzrOgl0Hz8Doprdluk_0G00]--></g></svg>


--------------------------------------------------------------------------------
/docs/images/java/mcp-stack.svg:
--------------------------------------------------------------------------------
  1 | <?xml version="1.0" encoding="UTF-8" standalone="no"?>
  2 | <svg
  3 |    version="1.1"
  4 |    viewBox="0 0 343.69525 195.14102"
  5 |    fill="none"
  6 |    stroke="none"
  7 |    stroke-linecap="square"
  8 |    stroke-miterlimit="10"
  9 |    id="svg27"
 10 |    sodipodi:docname="MCP draft.svg"
 11 |    width="343.69525"
 12 |    height="195.14102"
 13 |    inkscape:version="1.3.2 (091e20e, 2023-11-25)"
 14 |    xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
 15 |    xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
 16 |    xmlns="http://www.w3.org/2000/svg"
 17 |    xmlns:svg="http://www.w3.org/2000/svg">
 18 |   <defs
 19 |      id="defs27" />
 20 |   <sodipodi:namedview
 21 |      id="namedview27"
 22 |      pagecolor="#ffffff"
 23 |      bordercolor="#000000"
 24 |      borderopacity="0.25"
 25 |      inkscape:showpageshadow="2"
 26 |      inkscape:pageopacity="0.0"
 27 |      inkscape:pagecheckerboard="0"
 28 |      inkscape:deskcolor="#d1d1d1"
 29 |      inkscape:zoom="1.0974637"
 30 |      inkscape:cx="188.61671"
 31 |      inkscape:cy="182.23837"
 32 |      inkscape:window-width="1312"
 33 |      inkscape:window-height="983"
 34 |      inkscape:window-x="0"
 35 |      inkscape:window-y="38"
 36 |      inkscape:window-maximized="0"
 37 |      inkscape:current-layer="svg27">
 38 |     <inkscape:page
 39 |        x="0"
 40 |        y="0"
 41 |        width="343.69525"
 42 |        height="195.14102"
 43 |        id="page29"
 44 |        margin="0 0 0 0"
 45 |        bleed="0" />
 46 |   </sodipodi:namedview>
 47 |   <clipPath
 48 |      id="p.0">
 49 |     <path
 50 |        d="M 0,0 H 1024 V 768 H 0 Z"
 51 |        clip-rule="nonzero"
 52 |        id="path1" />
 53 |   </clipPath>
 54 |   <g
 55 |      clip-path="url(#p.0)"
 56 |      id="g27"
 57 |      transform="translate(-334.47681,-179.33106)">
 58 |     <path
 59 |        fill="#ffffff"
 60 |        d="M 530.6168,196.96588 H 668.0026 V 315.04462 H 530.6168 Z"
 61 |        fill-rule="evenodd"
 62 |        id="path4" />
 63 |     <path
 64 |        stroke="#999999"
 65 |        stroke-width="1"
 66 |        stroke-linejoin="round"
 67 |        stroke-linecap="butt"
 68 |        d="M 530.6168,196.96588 H 668.0026 V 315.04462 H 530.6168 Z"
 69 |        fill-rule="evenodd"
 70 |        id="path5" />
 71 |     <path
 72 |        fill="#999999"
 73 |        d="m 552.9071,221.32588 q -0.35937,0 -0.60937,-0.23438 -0.23438,-0.25 -0.23438,-0.59375 v -10.82812 q 0,-0.375 0.23438,-0.60938 0.25,-0.23437 0.60937,-0.23437 0.46875,0 0.73438,0.45312 l 5,10.03125 h -0.51563 l 4.89063,-10.03125 q 0.25,-0.45312 0.73437,-0.45312 0.34375,0 0.57813,0.23437 0.25,0.23438 0.25,0.60938 v 10.82812 q 0,0.34375 -0.25,0.59375 -0.25,0.23438 -0.57813,0.23438 -0.35937,0 -0.59375,-0.23438 -0.23437,-0.25 -0.23437,-0.59375 v -8.53125 l 0.3125,-0.0781 -4.1875,8.54687 q -0.28125,0.40625 -0.71875,0.40625 -0.53125,0 -0.76563,-0.48437 l -4.15625,-8.3125 0.32813,-0.0781 v 8.53125 q 0,0.34375 -0.25,0.59375 -0.23438,0.23438 -0.57813,0.23438 z m 20.47766,0.15625 q -1.29687,0 -2.4375,-0.48438 -1.125,-0.48437 -1.96875,-1.35937 -0.82812,-0.875 -1.29687,-2.03125 -0.46875,-1.17188 -0.46875,-2.53125 0,-1.34375 0.46875,-2.5 0.46875,-1.17188 1.29687,-2.03125 0.84375,-0.875 1.96875,-1.375 1.125,-0.5 2.4375,-0.5 1.23438,0 2.10938,0.32812 0.89062,0.3125 1.79687,1.04688 0.125,0.0937 0.1875,0.20312 0.0781,0.10938 0.0937,0.21875 0.0312,0.0937 0.0312,0.23438 0,0.3125 -0.21875,0.51562 -0.21875,0.1875 -0.51562,0.21875 -0.29688,0.0156 -0.59375,-0.20312 -0.59375,-0.51563 -1.23438,-0.78125 -0.625,-0.28125 -1.65625,-0.28125 -0.95312,0 -1.78125,0.39062 -0.82812,0.375 -1.46875,1.04688 -0.625,0.67187 -0.98437,1.5625 -0.34375,0.89062 -0.34375,1.90625 0,1.01562 0.34375,1.90625 0.35937,0.89062 0.98437,1.5625 0.64063,0.67187 1.46875,1.04687 0.82813,0.375 1.78125,0.375 0.8125,0 1.53125,-0.28125 0.73438,-0.28125 1.40625,-0.78125 0.29688,-0.20312 0.5625,-0.17187 0.28125,0.0156 0.46875,0.21875 0.20313,0.20312 0.20313,0.54687 0,0.17188 -0.0625,0.32813 -0.0625,0.14062 -0.1875,0.26562 -0.875,0.6875 -1.85938,1.04688 -0.98437,0.34375 -2.0625,0.34375 z m 7.66638,-0.15625 q -0.35937,0 -0.60937,-0.23438 -0.23438,-0.25 -0.23438,-0.59375 v -10.82812 q 0,-0.375 0.23438,-0.60938 0.25,-0.23437 0.60937,-0.23437 h 3.1875 q 1.20313,0 2.125,0.53125 0.9375,0.53125 1.45313,1.46875 0.53125,0.9375 0.53125,2.14062 0,1.17188 -0.53125,2.09375 -0.51563,0.90625 -1.45313,1.42188 -0.92187,0.5 -2.125,0.5 h -2.35937 v 3.51562 q 0,0.34375 -0.23438,0.59375 -0.23437,0.23438 -0.59375,0.23438 z m 0.82813,-5.875 h 2.35937 q 0.75,0 1.29688,-0.3125 0.5625,-0.32813 0.875,-0.875 0.32812,-0.5625 0.32812,-1.29688 0,-0.76562 -0.32812,-1.34375 -0.3125,-0.57812 -0.875,-0.90625 -0.54688,-0.34375 -1.29688,-0.34375 h -2.35937 z m 16.95294,6.03125 q -1.01562,0 -1.95312,-0.3125 -0.92188,-0.32813 -1.60938,-0.89063 -0.6875,-0.57812 -1.01562,-1.34375 -0.15625,-0.32812 0.0156,-0.60937 0.17188,-0.29688 0.5625,-0.375 0.29688,-0.0625 0.57813,0.0937 0.28125,0.14062 0.42187,0.45312 0.1875,0.39063 0.625,0.73438 0.4375,0.32812 1.0625,0.54687 0.625,0.20313 1.3125,0.20313 0.78125,0 1.42188,-0.23438 0.64062,-0.25 1.04687,-0.70312 0.40625,-0.45313 0.40625,-1.125 0,-0.84375 -0.67187,-1.51563 -0.65625,-0.67187 -2.1875,-0.84375 -1.98438,-0.1875 -3.125,-1.15625 -1.125,-0.98437 -1.125,-2.42187 0,-1.0625 0.59375,-1.79688 0.59375,-0.73437 1.60937,-1.10937 1.01563,-0.39063 2.26563,-0.39063 0.96875,0 1.6875,0.28125 0.73437,0.26563 1.28125,0.75 0.54687,0.46875 0.95312,1.125 0.21875,0.35938 0.17188,0.67188 -0.0312,0.3125 -0.3125,0.48437 -0.29688,0.1875 -0.65625,0.0781 -0.34375,-0.10938 -0.51563,-0.40625 -0.26562,-0.46875 -0.64062,-0.78125 -0.35938,-0.32813 -0.85938,-0.51563 -0.48437,-0.1875 -1.15625,-0.1875 -1.1875,-0.0156 -2,0.45313 -0.79687,0.45312 -0.79687,1.39062 0,0.48438 0.25,0.92188 0.25,0.4375 0.90625,0.76562 0.67187,0.3125 1.92187,0.4375 1.90625,0.20313 2.96875,1.17188 1.0625,0.95312 1.0625,2.54687 0,0.90625 -0.375,1.57813 -0.375,0.67187 -1.01562,1.14062 -0.625,0.45313 -1.4375,0.67188 -0.79688,0.21875 -1.67188,0.21875 z m 10.99237,-0.0937 q -1.32812,0 -2.35937,-0.5625 -1.03125,-0.57813 -1.625,-1.57813 -0.57813,-1 -0.57813,-2.29687 0,-1.3125 0.54688,-2.3125 0.5625,-1 1.53125,-1.5625 0.98437,-0.5625 2.25,-0.5625 1.25,0 2.14062,0.54687 0.90625,0.54688 1.375,1.51563 0.46875,0.96875 0.46875,2.23437 0,0.3125 -0.21875,0.51563 -0.20312,0.1875 -0.51562,0.1875 h -6.45313 v -1.28125 h 6.40625 l -0.65625,0.45312 q -0.0156,-0.79687 -0.32812,-1.42187 -0.29688,-0.64063 -0.85938,-1 -0.5625,-0.375 -1.35937,-0.375 -0.90625,0 -1.5625,0.40625 -0.64063,0.39062 -0.98438,1.09375 -0.32812,0.6875 -0.32812,1.5625 0,0.89062 0.39062,1.57812 0.40625,0.6875 1.10938,1.09375 0.70312,0.39063 1.60937,0.39063 0.5,0 1.01563,-0.1875 0.53125,-0.1875 0.84375,-0.42188 0.23437,-0.17187 0.51562,-0.17187 0.28125,-0.0156 0.5,0.15625 0.26563,0.23437 0.28125,0.53125 0.0156,0.28125 -0.25,0.5 -0.54687,0.42187 -1.35937,0.70312 -0.8125,0.26563 -1.54688,0.26563 z m 6.60791,-5.53125 q 0,-0.96875 0.46875,-1.71875 0.48438,-0.76563 1.28125,-1.20313 0.79688,-0.45312 1.76563,-0.45312 0.95312,0 1.42187,0.3125 0.46875,0.3125 0.35938,0.73437 -0.0469,0.23438 -0.1875,0.35938 -0.125,0.10937 -0.3125,0.14062 -0.17188,0.0312 -0.375,-0.0156 -1.03125,-0.20313 -1.84375,-0.0312 -0.8125,0.17187 -1.28125,0.65625 -0.46875,0.48437 -0.46875,1.21875 z m 0.0156,5.46875 q -0.375,0 -0.59375,-0.20313 -0.20313,-0.20312 -0.20313,-0.59375 v -7.15625 q 0,-0.39062 0.20313,-0.59375 0.21875,-0.20312 0.59375,-0.20312 0.40625,0 0.60937,0.20312 0.20313,0.1875 0.20313,0.59375 v 7.15625 q 0,0.375 -0.20313,0.59375 -0.20312,0.20313 -0.60937,0.20313 z m 9.94787,-0.0156 q -0.5,0 -0.78125,-0.53125 l -3.39062,-7.15625 q -0.125,-0.26562 -0.0312,-0.53125 0.10937,-0.26562 0.42187,-0.40625 0.26563,-0.14062 0.54688,-0.0469 0.28125,0.0937 0.42187,0.375 l 3.17188,6.82812 h -0.76563 l 3.14063,-6.82812 q 0.14062,-0.28125 0.4375,-0.375 0.29687,-0.0937 0.59375,0.0469 0.29687,0.125 0.39062,0.40625 0.0937,0.26563 -0.0312,0.53125 l -3.39062,7.15625 q -0.25,0.53125 -0.73438,0.53125 z m 9.58862,0.0781 q -1.32812,0 -2.35937,-0.5625 -1.03125,-0.57813 -1.625,-1.57813 -0.57813,-1 -0.57813,-2.29687 0,-1.3125 0.54688,-2.3125 0.5625,-1 1.53125,-1.5625 0.98437,-0.5625 2.25,-0.5625 1.25,0 2.14062,0.54687 0.90625,0.54688 1.375,1.51563 0.46875,0.96875 0.46875,2.23437 0,0.3125 -0.21875,0.51563 -0.20312,0.1875 -0.51562,0.1875 h -6.45313 v -1.28125 h 6.40625 l -0.65625,0.45312 q -0.0156,-0.79687 -0.32812,-1.42187 -0.29688,-0.64063 -0.85938,-1 -0.5625,-0.375 -1.35937,-0.375 -0.90625,0 -1.5625,0.40625 -0.64063,0.39062 -0.98438,1.09375 -0.32812,0.6875 -0.32812,1.5625 0,0.89062 0.39062,1.57812 0.40625,0.6875 1.10938,1.09375 0.70312,0.39063 1.60937,0.39063 0.5,0 1.01563,-0.1875 0.53125,-0.1875 0.84375,-0.42188 0.23437,-0.17187 0.51562,-0.17187 0.28125,-0.0156 0.5,0.15625 0.26563,0.23437 0.28125,0.53125 0.0156,0.28125 -0.25,0.5 -0.54687,0.42187 -1.35937,0.70312 -0.8125,0.26563 -1.54688,0.26563 z m 6.60791,-5.53125 q 0,-0.96875 0.46875,-1.71875 0.48438,-0.76563 1.28125,-1.20313 0.79688,-0.45312 1.76563,-0.45312 0.95312,0 1.42187,0.3125 0.46875,0.3125 0.35938,0.73437 -0.0469,0.23438 -0.1875,0.35938 -0.125,0.10937 -0.3125,0.14062 -0.17188,0.0312 -0.375,-0.0156 -1.03125,-0.20313 -1.84375,-0.0312 -0.8125,0.17187 -1.28125,0.65625 -0.46875,0.48437 -0.46875,1.21875 z m 0.0156,5.46875 q -0.375,0 -0.59375,-0.20313 -0.20313,-0.20312 -0.20313,-0.59375 v -7.15625 q 0,-0.39062 0.20313,-0.59375 0.21875,-0.20312 0.59375,-0.20312 0.40625,0 0.60937,0.20312 0.20313,0.1875 0.20313,0.59375 v 7.15625 q 0,0.375 -0.20313,0.59375 -0.20312,0.20313 -0.60937,0.20313 z"
 74 |        fill-rule="nonzero"
 75 |        id="path6" />
 76 |     <path
 77 |        fill="#ffffff"
 78 |        d="m 530.66406,233.5643 h 137.3858 v 74.77167 h -137.3858 z"
 79 |        fill-rule="evenodd"
 80 |        id="path7" />
 81 |     <path
 82 |        stroke="#999999"
 83 |        stroke-width="1"
 84 |        stroke-linejoin="round"
 85 |        stroke-linecap="butt"
 86 |        d="m 530.66406,233.5643 h 137.3858 v 74.77167 h -137.3858 z"
 87 |        fill-rule="evenodd"
 88 |        id="path8" />
 89 |     <path
 90 |        fill="#999999"
 91 |        d="m 552.6487,256.64432 q -0.23438,0 -0.40625,-0.17188 -0.15625,-0.17187 -0.15625,-0.40625 V 245.7693 q 0,-0.25 0.15625,-0.40625 0.17187,-0.17187 0.40625,-0.17187 0.35937,0 0.51562,0.29687 l 4.9375,9.82813 h -0.5 l 4.85938,-9.82813 q 0.17187,-0.29687 0.51562,-0.29687 0.23438,0 0.39063,0.17187 0.15625,0.15625 0.15625,0.40625 v 10.29689 q 0,0.23438 -0.15625,0.40625 -0.15625,0.17188 -0.39063,0.17188 -0.25,0 -0.42187,-0.17188 -0.17188,-0.17187 -0.17188,-0.40625 v -8.81251 l 0.25,0.0156 -4.32812,8.82814 q -0.15625,0.28125 -0.48438,0.28125 -0.375,0 -0.53125,-0.34375 l -4.35937,-8.71876 0.29687,-0.0625 v 8.81251 q 0,0.23438 -0.17187,0.40625 -0.17188,0.17188 -0.40625,0.17188 z m 18.95593,0.14062 q -1.1875,0 -2.21875,-0.45312 -1.03125,-0.45314 -1.82812,-1.26564 -0.78125,-0.8125 -1.21875,-1.875 -0.4375,-1.0625 -0.4375,-2.28125 0,-1.20313 0.42187,-2.26563 0.4375,-1.0625 1.21875,-1.85937 0.79688,-0.8125 1.82813,-1.26563 1.03125,-0.46875 2.23437,-0.46875 1.0625,0 1.92188,0.3125 0.85937,0.29688 1.67187,0.98438 0.125,0.0937 0.14063,0.23437 0.0312,0.14063 -0.0312,0.26563 -0.0469,0.125 -0.17188,0.1875 -0.0312,0.10937 -0.15625,0.17187 -0.10937,0.0625 -0.26562,0.0469 -0.14063,-0.0156 -0.29688,-0.14063 -0.5625,-0.5 -1.25,-0.73437 -0.67187,-0.25 -1.5625,-0.25 -0.95312,0 -1.78125,0.39062 -0.82812,0.375 -1.46875,1.04688 -0.625,0.65625 -0.98437,1.51562 -0.35938,0.85938 -0.35938,1.82813 0,1 0.35938,1.875 0.35937,0.85937 0.98437,1.51562 0.64063,0.65625 1.46875,1.03125 0.82813,0.375 1.78125,0.375 0.8125,0 1.53125,-0.26562 0.71875,-0.26563 1.35938,-0.76563 0.17187,-0.14062 0.35937,-0.10937 0.20313,0.0312 0.34375,0.17187 0.15625,0.14063 0.15625,0.375 0,0.125 -0.0469,0.21875 -0.0312,0.0937 -0.10938,0.20313 -0.75,0.68751 -1.67187,0.96876 -0.92188,0.28125 -1.92188,0.28125 z m 6.67792,-0.14062 q -0.25,0 -0.40625,-0.15625 -0.15625,-0.17188 -0.15625,-0.42188 V 245.7693 q 0,-0.25 0.15625,-0.40625 0.15625,-0.17187 0.40625,-0.17187 h 2.9375 q 1.07813,0 1.90625,0.48437 0.84375,0.46875 1.3125,1.3125 0.46875,0.82813 0.46875,1.9375 0,1.0625 -0.46875,1.89063 -0.46875,0.82812 -1.3125,1.3125 -0.82812,0.46875 -1.90625,0.46875 h -2.35937 v 3.46877 q 0,0.25 -0.17188,0.42187 -0.15625,0.15625 -0.40625,0.15625 z m 0.57813,-5.14064 h 2.35937 q 0.75,0 1.32813,-0.32813 0.59375,-0.32812 0.92187,-0.90625 0.32813,-0.59375 0.32813,-1.34375 0,-0.78125 -0.32813,-1.35937 -0.32812,-0.59375 -0.92187,-0.92188 -0.57813,-0.34375 -1.32813,-0.34375 h -2.35937 z m 15.63897,5.28126 q -0.9375,0 -1.73437,-0.26562 -0.79688,-0.26563 -1.39063,-0.76564 -0.57812,-0.5 -0.89062,-1.15625 -0.125,-0.23438 -0.0156,-0.4375 0.10938,-0.20313 0.375,-0.26563 0.20313,-0.0625 0.40625,0.0469 0.20313,0.0937 0.29688,0.29687 0.21875,0.42188 0.64062,0.76563 0.4375,0.34375 1.01563,0.53125 0.59375,0.17187 1.29687,0.17187 0.78125,0 1.375,-0.25 0.60938,-0.26562 0.95313,-0.75 0.34375,-0.5 0.34375,-1.20312 0,-0.89063 -0.67188,-1.53125 -0.65625,-0.64063 -2.0625,-0.82813 -1.71875,-0.20312 -2.6875,-1.0625 -0.95312,-0.85937 -0.95312,-2.09375 0,-0.90625 0.46875,-1.5625 0.48437,-0.65625 1.3125,-1.01562 0.84375,-0.35938 1.92187,-0.35938 0.8125,0 1.46875,0.26563 0.65625,0.25 1.14063,0.67187 0.5,0.40625 0.79687,0.90625 0.15625,0.23438 0.0937,0.45313 -0.0469,0.21875 -0.25,0.34375 -0.21875,0.0937 -0.45312,0.0312 -0.21875,-0.0781 -0.32813,-0.28125 -0.23437,-0.34375 -0.5625,-0.64063 -0.32812,-0.29687 -0.79687,-0.46875 -0.46875,-0.1875 -1.125,-0.20312 -1.15625,0 -1.85938,0.5 -0.70312,0.48437 -0.70312,1.42187 0,0.5 0.26562,0.92188 0.26563,0.42187 0.85938,0.71875 0.60937,0.29687 1.64062,0.45312 1.82813,0.25 2.71875,1.10938 0.89063,0.85937 0.89063,2.23437 0,0.79688 -0.29688,1.42188 -0.28125,0.60937 -0.79687,1.03125 -0.51563,0.40626 -1.21875,0.62501 -0.6875,0.21875 -1.48438,0.21875 z m 9.67121,-0.0625 q -1.1875,0 -2.10938,-0.51562 -0.90625,-0.53127 -1.4375,-1.45314 -0.51562,-0.92188 -0.51562,-2.10938 0,-1.20312 0.48437,-2.10937 0.5,-0.92188 1.35938,-1.45313 0.875,-0.53125 2,-0.53125 1.10937,0 1.9375,0.51563 0.82812,0.5 1.28125,1.39062 0.45312,0.89063 0.45312,2.04688 0,0.23437 -0.14062,0.375 -0.14063,0.125 -0.375,0.125 h -6.23438 v -0.9375 h 6.34375 l -0.625,0.45312 q 0.0156,-0.84375 -0.3125,-1.51562 -0.32812,-0.67188 -0.92187,-1.04688 -0.57813,-0.39062 -1.40625,-0.39062 -0.82813,0 -1.46875,0.40625 -0.625,0.39062 -0.96875,1.09375 -0.34375,0.6875 -0.34375,1.57812 0,0.89063 0.375,1.57813 0.39062,0.6875 1.0625,1.09375 0.6875,0.39062 1.5625,0.39062 0.53125,0 1.0625,-0.17187 0.53125,-0.1875 0.85937,-0.46875 0.15625,-0.14063 0.35938,-0.14063 0.21875,-0.0156 0.35937,0.10938 0.1875,0.17187 0.1875,0.375 0.0156,0.20312 -0.15625,0.35937 -0.48437,0.40627 -1.23437,0.68752 -0.75,0.26562 -1.4375,0.26562 z m 8.17083,0 q -0.875,0 -1.73437,-0.29687 -0.84375,-0.29688 -1.35938,-0.87502 -0.17187,-0.1875 -0.14062,-0.40625 0.0312,-0.21875 0.21875,-0.375 0.20312,-0.14062 0.42187,-0.10937 0.23438,0.0156 0.375,0.1875 0.34375,0.40625 0.92188,0.625 0.59375,0.21875 1.29687,0.21875 1.07813,0 1.5625,-0.375 0.48438,-0.375 0.5,-0.90625 0,-0.51563 -0.5,-0.85938 -0.5,-0.34375 -1.64062,-0.54687 -1.48438,-0.23438 -2.17188,-0.8125 -0.6875,-0.59375 -0.6875,-1.39063 0,-0.75 0.39063,-1.25 0.40625,-0.5 1.0625,-0.75 0.65625,-0.25 1.45312,-0.25 0.98438,0 1.6875,0.34375 0.71875,0.32813 1.15625,0.90625 0.14063,0.1875 0.10938,0.39063 -0.0312,0.20312 -0.23438,0.34375 -0.17187,0.0937 -0.40625,0.0625 -0.21875,-0.0312 -0.375,-0.21875 -0.375,-0.42188 -0.85937,-0.60938 -0.48438,-0.20312 -1.10938,-0.20312 -0.8125,0 -1.29687,0.32812 -0.48438,0.32813 -0.48438,0.82813 0,0.34375 0.1875,0.59375 0.1875,0.25 0.625,0.4375 0.45313,0.1875 1.26563,0.3125 1.09375,0.1875 1.73437,0.53125 0.64063,0.34375 0.90625,0.8125 0.26563,0.45312 0.26563,0.98437 0,0.70313 -0.40625,1.21875 -0.39063,0.51564 -1.10938,0.81252 -0.70312,0.29687 -1.625,0.29687 z m 7.89978,0 q -0.875,0 -1.73437,-0.29687 -0.84375,-0.29688 -1.35938,-0.87502 -0.17187,-0.1875 -0.14062,-0.40625 0.0312,-0.21875 0.21875,-0.375 0.20312,-0.14062 0.42187,-0.10937 0.23438,0.0156 0.375,0.1875 0.34375,0.40625 0.92188,0.625 0.59375,0.21875 1.29687,0.21875 1.07813,0 1.5625,-0.375 0.48438,-0.375 0.5,-0.90625 0,-0.51563 -0.5,-0.85938 -0.5,-0.34375 -1.64062,-0.54687 -1.48438,-0.23438 -2.17188,-0.8125 -0.6875,-0.59375 -0.6875,-1.39063 0,-0.75 0.39063,-1.25 0.40625,-0.5 1.0625,-0.75 0.65625,-0.25 1.45312,-0.25 0.98438,0 1.6875,0.34375 0.71875,0.32813 1.15625,0.90625 0.14063,0.1875 0.10938,0.39063 -0.0312,0.20312 -0.23438,0.34375 -0.17187,0.0937 -0.40625,0.0625 -0.21875,-0.0312 -0.375,-0.21875 -0.375,-0.42188 -0.85937,-0.60938 -0.48438,-0.20312 -1.10938,-0.20312 -0.8125,0 -1.29687,0.32812 -0.48438,0.32813 -0.48438,0.82813 0,0.34375 0.1875,0.59375 0.1875,0.25 0.625,0.4375 0.45313,0.1875 1.26563,0.3125 1.09375,0.1875 1.73437,0.53125 0.64063,0.34375 0.90625,0.8125 0.26563,0.45312 0.26563,0.98437 0,0.70313 -0.40625,1.21875 -0.39063,0.51564 -1.10938,0.81252 -0.70312,0.29687 -1.625,0.29687 z m 5.89972,-0.0781 q -0.26562,0 -0.42187,-0.15625 -0.15625,-0.15625 -0.15625,-0.42188 v -6.87501 q 0,-0.25 0.15625,-0.40625 0.15625,-0.15625 0.42187,-0.15625 0.25,0 0.40625,0.15625 0.15625,0.15625 0.15625,0.40625 v 6.87501 q 0,0.26563 -0.15625,0.42188 -0.15625,0.15625 -0.40625,0.15625 z m -0.0156,-9.54689 q -0.32813,0 -0.5625,-0.23438 -0.23438,-0.23437 -0.23438,-0.5625 0,-0.375 0.23438,-0.57812 0.25,-0.21875 0.57812,-0.21875 0.29688,0 0.53125,0.21875 0.25,0.20312 0.25,0.57812 0,0.32813 -0.23437,0.5625 -0.23438,0.23438 -0.5625,0.23438 z m 7.09509,9.62501 q -1.17187,0 -2.09375,-0.53125 -0.92187,-0.53126 -1.45312,-1.45314 -0.53125,-0.92187 -0.53125,-2.09375 0,-1.1875 0.53125,-2.10937 0.53125,-0.92188 1.45312,-1.45313 0.92188,-0.53125 2.09375,-0.53125 1.17188,0 2.07813,0.53125 0.92187,0.53125 1.45312,1.45313 0.53125,0.92187 0.54688,2.10937 0,1.17188 -0.54688,2.09375 -0.53125,0.92188 -1.45312,1.45314 -0.90625,0.53125 -2.07813,0.53125 z m 0,-1.03126 q 0.84375,0 1.51563,-0.39063 0.6875,-0.40625 1.0625,-1.09375 0.375,-0.6875 0.375,-1.5625 0,-0.875 -0.375,-1.5625 -0.375,-0.70312 -1.0625,-1.09375 -0.67188,-0.40625 -1.51563,-0.40625 -0.84375,0 -1.53125,0.40625 -0.67187,0.39063 -1.0625,1.09375 -0.375,0.6875 -0.375,1.5625 0,0.875 0.375,1.5625 0.39063,0.6875 1.0625,1.09375 0.6875,0.39063 1.53125,0.39063 z m 13.14105,0.95314 q -0.25,0 -0.40625,-0.15625 -0.15625,-0.17188 -0.15625,-0.40625 v -3.81252 q 0,-0.90625 -0.34375,-1.48437 -0.34375,-0.59375 -0.9375,-0.875 -0.59375,-0.29688 -1.34375,-0.29688 -0.71875,0 -1.29687,0.28125 -0.57813,0.26563 -0.92188,0.75 -0.32812,0.48438 -0.32812,1.10938 h -0.8125 q 0.0312,-0.92188 0.5,-1.64063 0.46875,-0.73437 1.23437,-1.15625 0.78125,-0.42187 1.73438,-0.42187 1.04687,0 1.85937,0.4375 0.82813,0.4375 1.29688,1.28125 0.48437,0.82812 0.48437,2.01562 v 3.81252 q 0,0.23437 -0.17187,0.40625 -0.15625,0.15625 -0.39063,0.15625 z m -6.29687,0 q -0.26563,0 -0.42188,-0.15625 -0.15625,-0.15625 -0.15625,-0.40625 v -6.89064 q 0,-0.25 0.15625,-0.40625 0.15625,-0.15625 0.42188,-0.15625 0.25,0 0.40625,0.15625 0.15625,0.15625 0.15625,0.40625 v 6.89064 q 0,0.25 -0.15625,0.40625 -0.15625,0.15625 -0.40625,0.15625 z"
 92 |        fill-rule="nonzero"
 93 |        id="path9" />
 94 |     <path
 95 |        fill="#999999"
 96 |        d="m 530.66406,269.38315 h 137.3858 v 45.66928 h -137.3858 z"
 97 |        fill-rule="evenodd"
 98 |        id="path10" />
 99 |     <path
100 |        stroke="#999999"
101 |        stroke-width="1"
102 |        stroke-linejoin="round"
103 |        stroke-linecap="butt"
104 |        d="m 530.66406,269.38315 h 137.3858 v 45.66928 h -137.3858 z"
105 |        fill-rule="evenodd"
106 |        id="path11" />
107 |     <path
108 |        fill="#ffffff"
109 |        d="m 544.7865,288.2978 q -0.23437,0 -0.40625,-0.17188 -0.15625,-0.17187 -0.15625,-0.40625 V 277.4228 q 0,-0.25 0.15625,-0.40625 0.17188,-0.17188 0.40625,-0.17188 0.35938,0 0.51563,0.29688 l 4.9375,9.82812 h -0.5 l 4.85937,-9.82812 q 0.17188,-0.29688 0.51563,-0.29688 0.23437,0 0.39062,0.17188 0.15625,0.15625 0.15625,0.40625 v 10.29687 q 0,0.23438 -0.15625,0.40625 -0.15625,0.17188 -0.39062,0.17188 -0.25,0 -0.42188,-0.17188 -0.17187,-0.17187 -0.17187,-0.40625 v -8.8125 l 0.25,0.0156 -4.32813,8.82812 q -0.15625,0.28125 -0.48437,0.28125 -0.375,0 -0.53125,-0.34375 l -4.35938,-8.71875 0.29688,-0.0625 v 8.8125 q 0,0.23438 -0.17188,0.40625 -0.17187,0.17188 -0.40625,0.17188 z m 18.95593,0.14062 q -1.1875,0 -2.21875,-0.45312 -1.03125,-0.45313 -1.82812,-1.26563 -0.78125,-0.8125 -1.21875,-1.875 -0.4375,-1.0625 -0.4375,-2.28125 0,-1.20312 0.42187,-2.26562 0.4375,-1.0625 1.21875,-1.85938 0.79688,-0.8125 1.82813,-1.26562 1.03125,-0.46875 2.23437,-0.46875 1.0625,0 1.92188,0.3125 0.85937,0.29687 1.67187,0.98437 0.125,0.0937 0.14063,0.23438 0.0312,0.14062 -0.0312,0.26562 -0.0469,0.125 -0.17188,0.1875 -0.0312,0.10938 -0.15625,0.17188 -0.10937,0.0625 -0.26562,0.0469 -0.14063,-0.0156 -0.29688,-0.14062 -0.5625,-0.5 -1.25,-0.73438 -0.67187,-0.25 -1.5625,-0.25 -0.95312,0 -1.78125,0.39063 -0.82812,0.375 -1.46875,1.04687 -0.625,0.65625 -0.98437,1.51563 -0.35938,0.85937 -0.35938,1.82812 0,1 0.35938,1.875 0.35937,0.85938 0.98437,1.51563 0.64063,0.65625 1.46875,1.03125 0.82813,0.375 1.78125,0.375 0.8125,0 1.53125,-0.26563 0.71875,-0.26562 1.35938,-0.76562 0.17187,-0.14063 0.35937,-0.10938 0.20313,0.0312 0.34375,0.17188 0.15625,0.14062 0.15625,0.375 0,0.125 -0.0469,0.21875 -0.0312,0.0937 -0.10938,0.20312 -0.75,0.6875 -1.67187,0.96875 -0.92188,0.28125 -1.92188,0.28125 z m 6.67792,-0.14062 q -0.25,0 -0.40625,-0.15625 -0.15625,-0.17188 -0.15625,-0.42188 V 277.4228 q 0,-0.25 0.15625,-0.40625 0.15625,-0.17188 0.40625,-0.17188 h 2.9375 q 1.07813,0 1.90625,0.48438 0.84375,0.46875 1.3125,1.3125 0.46875,0.82812 0.46875,1.9375 0,1.0625 -0.46875,1.89062 -0.46875,0.82813 -1.3125,1.3125 -0.82812,0.46875 -1.90625,0.46875 h -2.35937 v 3.46875 q 0,0.25 -0.17188,0.42188 -0.15625,0.15625 -0.40625,0.15625 z m 0.57813,-5.14063 h 2.35937 q 0.75,0 1.32813,-0.32812 0.59375,-0.32813 0.92187,-0.90625 0.32813,-0.59375 0.32813,-1.34375 0,-0.78125 -0.32813,-1.35938 -0.32812,-0.59375 -0.92187,-0.92187 -0.57813,-0.34375 -1.32813,-0.34375 h -2.35937 z m 15.45147,5.14063 q -0.23437,0 -0.40625,-0.17188 -0.17187,-0.17187 -0.17187,-0.40625 v -10.875 h 1.14062 v 10.875 q 0,0.23438 -0.15625,0.40625 -0.15625,0.17188 -0.40625,0.17188 z m -4.04687,-10.40625 q -0.23438,0 -0.39063,-0.14063 -0.14062,-0.15625 -0.14062,-0.375 0,-0.23437 0.14062,-0.375 0.15625,-0.15625 0.39063,-0.15625 h 8.10937 q 0.23438,0 0.375,0.15625 0.14063,0.14063 0.14063,0.375 0,0.21875 -0.14063,0.375 -0.14062,0.14063 -0.375,0.14063 z m 8.57782,5.46875 q 0.0469,-0.90625 0.48437,-1.625 0.4375,-0.71875 1.125,-1.125 0.70313,-0.42188 1.54688,-0.42188 0.67187,0 1.03125,0.20313 0.375,0.1875 0.29687,0.54687 -0.0625,0.21875 -0.20312,0.29688 -0.14063,0.0781 -0.34375,0.0625 -0.1875,-0.0156 -0.4375,-0.0312 -0.82813,-0.0781 -1.46875,0.17187 -0.625,0.23438 -1,0.73438 -0.375,0.5 -0.375,1.1875 z m 0.0937,4.9375 q -0.26563,0 -0.42188,-0.14063 -0.14062,-0.15625 -0.14062,-0.42187 v -6.89063 q 0,-0.26562 0.14062,-0.40625 0.15625,-0.15625 0.42188,-0.15625 0.26562,0 0.40625,0.15625 0.15625,0.14063 0.15625,0.40625 v 6.89063 q 0,0.26562 -0.15625,0.42187 -0.14063,0.14063 -0.40625,0.14063 z m 9.09466,0.0781 q -1.125,0 -2.01562,-0.53125 -0.89063,-0.54687 -1.42188,-1.46875 -0.51562,-0.92187 -0.51562,-2.07812 0,-1.17188 0.53125,-2.09375 0.54687,-0.92188 1.46875,-1.45313 0.92187,-0.54687 2.07812,-0.54687 1.15625,0 2.0625,0.54687 0.92188,0.53125 1.45313,1.45313 0.54687,0.92187 0.5625,2.09375 l -0.45313,0.34375 q 0,1.0625 -0.5,1.90625 -0.48437,0.84375 -1.32812,1.34375 -0.84375,0.48437 -1.92188,0.48437 z m 0.125,-1.03125 q 0.84375,0 1.51563,-0.39062 0.67187,-0.40625 1.04687,-1.09375 0.39063,-0.70313 0.39063,-1.5625 0,-0.875 -0.39063,-1.5625 -0.375,-0.70313 -1.04687,-1.09375 -0.67188,-0.40625 -1.51563,-0.40625 -0.82812,0 -1.51562,0.40625 -0.67188,0.39062 -1.0625,1.09375 -0.39063,0.6875 -0.39063,1.5625 0,0.85937 0.39063,1.5625 0.39062,0.6875 1.0625,1.09375 0.6875,0.39062 1.51562,0.39062 z m 3.5,0.95313 q -0.25,0 -0.40625,-0.15625 -0.15625,-0.15625 -0.15625,-0.40625 v -2.5 l 0.26563,-1.15625 0.875,0.21875 v 3.4375 q 0,0.25 -0.17188,0.40625 -0.15625,0.15625 -0.40625,0.15625 z m 9.64106,0 q -0.25,0 -0.40625,-0.15625 -0.15625,-0.17188 -0.15625,-0.40625 v -3.8125 q 0,-0.90625 -0.34375,-1.48438 -0.34375,-0.59375 -0.9375,-0.875 -0.59375,-0.29687 -1.34375,-0.29687 -0.71875,0 -1.29688,0.28125 -0.57812,0.26562 -0.92187,0.75 -0.32813,0.48437 -0.32813,1.10937 h -0.8125 q 0.0312,-0.92187 0.5,-1.64062 0.46875,-0.73438 1.23438,-1.15625 0.78125,-0.42188 1.73437,-0.42188 1.04688,0 1.85938,0.4375 0.82812,0.4375 1.29687,1.28125 0.48438,0.82813 0.48438,2.01563 v 3.8125 q 0,0.23437 -0.17188,0.40625 -0.15625,0.15625 -0.39062,0.15625 z m -6.29688,0 q -0.26562,0 -0.42187,-0.15625 -0.15625,-0.15625 -0.15625,-0.40625 v -6.89063 q 0,-0.25 0.15625,-0.40625 0.15625,-0.15625 0.42187,-0.15625 0.25,0 0.40625,0.15625 0.15625,0.15625 0.15625,0.40625 v 6.89063 q 0,0.25 -0.15625,0.40625 -0.15625,0.15625 -0.40625,0.15625 z m 12.15668,0.0781 q -0.875,0 -1.73438,-0.29687 -0.84375,-0.29688 -1.35937,-0.875 -0.17188,-0.1875 -0.14063,-0.40625 0.0312,-0.21875 0.21875,-0.375 0.20313,-0.14063 0.42188,-0.10938 0.23437,0.0156 0.375,0.1875 0.34375,0.40625 0.92187,0.625 0.59375,0.21875 1.29688,0.21875 1.07812,0 1.5625,-0.375 0.48437,-0.375 0.5,-0.90625 0,-0.51562 -0.5,-0.85937 -0.5,-0.34375 -1.64063,-0.54688 -1.48437,-0.23437 -2.17187,-0.8125 -0.6875,-0.59375 -0.6875,-1.39062 0,-0.75 0.39062,-1.25 0.40625,-0.5 1.0625,-0.75 0.65625,-0.25 1.45313,-0.25 0.98437,0 1.6875,0.34375 0.71875,0.32812 1.15625,0.90625 0.14062,0.1875 0.10937,0.39062 -0.0312,0.20313 -0.23437,0.34375 -0.17188,0.0937 -0.40625,0.0625 -0.21875,-0.0312 -0.375,-0.21875 -0.375,-0.42187 -0.85938,-0.60937 -0.48437,-0.20313 -1.10937,-0.20313 -0.8125,0 -1.29688,0.32813 -0.48437,0.32812 -0.48437,0.82812 0,0.34375 0.1875,0.59375 0.1875,0.25 0.625,0.4375 0.45312,0.1875 1.26562,0.3125 1.09375,0.1875 1.73438,0.53125 0.64062,0.34375 0.90625,0.8125 0.26562,0.45313 0.26562,0.98438 0,0.70312 -0.40625,1.21875 -0.39062,0.51562 -1.10937,0.8125 -0.70313,0.29687 -1.625,0.29687 z m 5.6654,3.34375 q -0.26562,0 -0.42187,-0.15625 -0.15625,-0.14062 -0.15625,-0.40625 v -6.92187 q 0.0156,-1.14063 0.54687,-2.04688 0.54688,-0.92187 1.45313,-1.45312 0.92187,-0.53125 2.0625,-0.53125 1.17187,0 2.09375,0.54687 0.92187,0.53125 1.45312,1.45313 0.54688,0.92187 0.54688,2.09375 0,1.15625 -0.53125,2.07812 -0.51563,0.92188 -1.40625,1.46875 -0.89063,0.53125 -2.01563,0.53125 -0.98437,0 -1.78125,-0.42187 -0.79687,-0.42188 -1.28125,-1.10938 v 4.3125 q 0,0.26563 -0.15625,0.40625 -0.15625,0.15625 -0.40625,0.15625 z m 3.48438,-4.375 q 0.85937,0 1.53125,-0.39062 0.67187,-0.40625 1.0625,-1.09375 0.39062,-0.70313 0.39062,-1.5625 0,-0.875 -0.39062,-1.5625 -0.39063,-0.70313 -1.0625,-1.09375 -0.67188,-0.40625 -1.53125,-0.40625 -0.82813,0 -1.51563,0.40625 -0.67187,0.39062 -1.04687,1.09375 -0.375,0.6875 -0.375,1.5625 0,0.85937 0.375,1.5625 0.375,0.6875 1.04687,1.09375 0.6875,0.39062 1.51563,0.39062 z m 9.95575,1.03125 q -1.17188,0 -2.09375,-0.53125 -0.92188,-0.53125 -1.45313,-1.45312 -0.53125,-0.92188 -0.53125,-2.09375 0,-1.1875 0.53125,-2.10938 0.53125,-0.92187 1.45313,-1.45312 0.92187,-0.53125 2.09375,-0.53125 1.17187,0 2.07812,0.53125 0.92188,0.53125 1.45313,1.45312 0.53125,0.92188 0.54687,2.10938 0,1.17187 -0.54687,2.09375 -0.53125,0.92187 -1.45313,1.45312 -0.90625,0.53125 -2.07812,0.53125 z m 0,-1.03125 q 0.84375,0 1.51562,-0.39062 0.6875,-0.40625 1.0625,-1.09375 0.375,-0.6875 0.375,-1.5625 0,-0.875 -0.375,-1.5625 -0.375,-0.70313 -1.0625,-1.09375 -0.67187,-0.40625 -1.51562,-0.40625 -0.84375,0 -1.53125,0.40625 -0.67188,0.39062 -1.0625,1.09375 -0.375,0.6875 -0.375,1.5625 0,0.875 0.375,1.5625 0.39062,0.6875 1.0625,1.09375 0.6875,0.39062 1.53125,0.39062 z m 6.7348,-3.98437 q 0.0469,-0.90625 0.48437,-1.625 0.4375,-0.71875 1.125,-1.125 0.70313,-0.42188 1.54688,-0.42188 0.67187,0 1.03125,0.20313 0.375,0.1875 0.29687,0.54687 -0.0625,0.21875 -0.20312,0.29688 -0.14063,0.0781 -0.34375,0.0625 -0.1875,-0.0156 -0.4375,-0.0312 -0.82813,-0.0781 -1.46875,0.17187 -0.625,0.23438 -1,0.73438 -0.375,0.5 -0.375,1.1875 z m 0.0937,4.9375 q -0.26563,0 -0.42188,-0.14063 -0.14062,-0.15625 -0.14062,-0.42187 v -6.89063 q 0,-0.26562 0.14062,-0.40625 0.15625,-0.15625 0.42188,-0.15625 0.26562,0 0.40625,0.15625 0.15625,0.14063 0.15625,0.40625 v 6.89063 q 0,0.26562 -0.15625,0.42187 -0.14063,0.14063 -0.40625,0.14063 z m 9.29071,0 q -0.78125,0 -1.39063,-0.35938 -0.59375,-0.375 -0.95312,-1.01562 -0.34375,-0.64063 -0.34375,-1.45313 v -7.17187 q 0,-0.25 0.14062,-0.40625 0.15625,-0.15625 0.40625,-0.15625 0.25,0 0.40625,0.15625 0.17188,0.15625 0.17188,0.40625 v 7.17187 q 0,0.75 0.4375,1.23438 0.4375,0.46875 1.125,0.46875 h 0.39062 q 0.23438,0 0.375,0.15625 0.15625,0.15625 0.15625,0.40625 0,0.25 -0.17187,0.40625 -0.17188,0.15625 -0.4375,0.15625 z m -3.64063,-6.73438 q -0.21875,0 -0.375,-0.14062 -0.14062,-0.14063 -0.14062,-0.34375 0,-0.23438 0.14062,-0.35938 0.15625,-0.14062 0.375,-0.14062 h 3.73438 q 0.21875,0 0.35937,0.14062 0.15625,0.125 0.15625,0.35938 0,0.20312 -0.15625,0.34375 -0.14062,0.14062 -0.35937,0.14062 z"
110 |        fill-rule="nonzero"
111 |        id="path12" />
112 |     <path
113 |        fill="#ffffff"
114 |        d="m 574.1676,309.71967 q -0.17188,0 -0.3125,-0.0937 -0.125,-0.0781 -0.23438,-0.28125 -0.85937,-1.76563 -1.28125,-3.53125 -0.42187,-1.76563 -0.42187,-3.54688 0,-1.76562 0.42187,-3.53125 0.42188,-1.76562 1.28125,-3.51562 0.1875,-0.39063 0.54688,-0.39063 0.23437,0 0.39062,0.17188 0.17188,0.15625 0.17188,0.39062 0,0.17188 -0.0937,0.32813 -1.60938,3.26562 -1.60938,6.5625 0,1.64062 0.40625,3.29687 0.42188,1.65625 1.21875,3.28125 0.0937,0.17188 0.0937,0.3125 0,0.23438 -0.17187,0.39063 -0.15625,0.15625 -0.40625,0.15625 z m 5.70514,-3.28125 q -0.9375,0 -1.73438,-0.26563 -0.79687,-0.26562 -1.39062,-0.76562 -0.57813,-0.5 -0.89063,-1.15625 -0.125,-0.23438 -0.0156,-0.4375 0.10937,-0.20313 0.375,-0.26563 0.20312,-0.0625 0.40625,0.0469 0.20312,0.0937 0.29687,0.29687 0.21875,0.42188 0.64063,0.76563 0.4375,0.34375 1.01562,0.53125 0.59375,0.17187 1.29688,0.17187 0.78125,0 1.375,-0.25 0.60937,-0.26562 0.95312,-0.75 0.34375,-0.5 0.34375,-1.20312 0,-0.89063 -0.67187,-1.53125 -0.65625,-0.64063 -2.0625,-0.82813 -1.71875,-0.20312 -2.6875,-1.0625 -0.95313,-0.85937 -0.95313,-2.09375 0,-0.90625 0.46875,-1.5625 0.48438,-0.65625 1.3125,-1.01562 0.84375,-0.35938 1.92188,-0.35938 0.8125,0 1.46875,0.26563 0.65625,0.25 1.14062,0.67187 0.5,0.40625 0.79688,0.90625 0.15625,0.23438 0.0937,0.45313 -0.0469,0.21875 -0.25,0.34375 -0.21875,0.0937 -0.45313,0.0312 -0.21875,-0.0781 -0.32812,-0.28125 -0.23438,-0.34375 -0.5625,-0.64063 -0.32813,-0.29687 -0.79688,-0.46875 -0.46875,-0.1875 -1.125,-0.20312 -1.15625,0 -1.85937,0.5 -0.70313,0.48437 -0.70313,1.42187 0,0.5 0.26563,0.92188 0.26562,0.42187 0.85937,0.71875 0.60938,0.29687 1.64063,0.45312 1.82812,0.25 2.71875,1.10938 0.89062,0.85937 0.89062,2.23437 0,0.79688 -0.29687,1.42188 -0.28125,0.60937 -0.79688,1.03125 -0.51562,0.40625 -1.21875,0.625 -0.6875,0.21875 -1.48437,0.21875 z m 9.6712,-0.0625 q -1.1875,0 -2.10937,-0.51563 -0.90625,-0.53125 -1.4375,-1.45312 -0.51563,-0.92188 -0.51563,-2.10938 0,-1.20312 0.48438,-2.10937 0.5,-0.92188 1.35937,-1.45313 0.875,-0.53125 2,-0.53125 1.10938,0 1.9375,0.51563 0.82813,0.5 1.28125,1.39062 0.45313,0.89063 0.45313,2.04688 0,0.23437 -0.14063,0.375 -0.14062,0.125 -0.375,0.125 h -6.23437 v -0.9375 h 6.34375 l -0.625,0.45312 q 0.0156,-0.84375 -0.3125,-1.51562 -0.32813,-0.67188 -0.92188,-1.04688 -0.57812,-0.39062 -1.40625,-0.39062 -0.82812,0 -1.46875,0.40625 -0.625,0.39062 -0.96875,1.09375 -0.34375,0.6875 -0.34375,1.57812 0,0.89063 0.375,1.57813 0.39063,0.6875 1.0625,1.09375 0.6875,0.39062 1.5625,0.39062 0.53125,0 1.0625,-0.17187 0.53125,-0.1875 0.85938,-0.46875 0.15625,-0.14063 0.35937,-0.14063 0.21875,-0.0156 0.35938,0.10938 0.1875,0.17187 0.1875,0.375 0.0156,0.20312 -0.15625,0.35937 -0.48438,0.40625 -1.23438,0.6875 -0.75,0.26563 -1.4375,0.26563 z m 5.82709,-5.01563 q 0.0469,-0.90625 0.48438,-1.625 0.4375,-0.71875 1.125,-1.125 0.70312,-0.42187 1.54687,-0.42187 0.67188,0 1.03125,0.20312 0.375,0.1875 0.29688,0.54688 -0.0625,0.21875 -0.20313,0.29687 -0.14062,0.0781 -0.34375,0.0625 -0.1875,-0.0156 -0.4375,-0.0312 -0.82812,-0.0781 -1.46875,0.17188 -0.625,0.23437 -1,0.73437 -0.375,0.5 -0.375,1.1875 z m 0.0937,4.9375 q -0.26562,0 -0.42187,-0.14062 -0.14063,-0.15625 -0.14063,-0.42188 v -6.89062 q 0,-0.26563 0.14063,-0.40625 0.15625,-0.15625 0.42187,-0.15625 0.26563,0 0.40625,0.15625 0.15625,0.14062 0.15625,0.40625 v 6.89062 q 0,0.26563 -0.15625,0.42188 -0.14062,0.14062 -0.40625,0.14062 z m 8.90009,0 q -0.35938,0 -0.53125,-0.375 l -3.25,-6.90625 q -0.0937,-0.1875 -0.0156,-0.375 0.0781,-0.20312 0.29688,-0.29687 0.20312,-0.10938 0.39062,-0.0312 0.1875,0.0625 0.29688,0.26562 l 3.125,6.75 h -0.60938 l 3.07813,-6.75 q 0.0937,-0.20312 0.29687,-0.26562 0.21875,-0.0781 0.42188,0.0156 0.20312,0.0937 0.28125,0.29688 0.0781,0.20312 -0.0156,0.375 l -3.21875,6.92187 q -0.17187,0.375 -0.54687,0.375 z m 8.70227,0.0781 q -1.1875,0 -2.10938,-0.51563 -0.90625,-0.53125 -1.4375,-1.45312 -0.51562,-0.92188 -0.51562,-2.10938 0,-1.20312 0.48437,-2.10937 0.5,-0.92188 1.35938,-1.45313 0.875,-0.53125 2,-0.53125 1.10937,0 1.9375,0.51563 0.82812,0.5 1.28125,1.39062 0.45312,0.89063 0.45312,2.04688 0,0.23437 -0.14062,0.375 -0.14063,0.125 -0.375,0.125 h -6.23438 v -0.9375 h 6.34375 l -0.625,0.45312 q 0.0156,-0.84375 -0.3125,-1.51562 -0.32812,-0.67188 -0.92187,-1.04688 -0.57813,-0.39062 -1.40625,-0.39062 -0.82813,0 -1.46875,0.40625 -0.625,0.39062 -0.96875,1.09375 -0.34375,0.6875 -0.34375,1.57812 0,0.89063 0.375,1.57813 0.39062,0.6875 1.0625,1.09375 0.6875,0.39062 1.5625,0.39062 0.53125,0 1.0625,-0.17187 0.53125,-0.1875 0.85937,-0.46875 0.15625,-0.14063 0.35938,-0.14063 0.21875,-0.0156 0.35937,0.10938 0.1875,0.17187 0.1875,0.375 0.0156,0.20312 -0.15625,0.35937 -0.48437,0.40625 -1.23437,0.6875 -0.75,0.26563 -1.4375,0.26563 z m 5.82708,-5.01563 q 0.0469,-0.90625 0.48438,-1.625 0.4375,-0.71875 1.125,-1.125 0.70312,-0.42187 1.54687,-0.42187 0.67188,0 1.03125,0.20312 0.375,0.1875 0.29688,0.54688 -0.0625,0.21875 -0.20313,0.29687 -0.14062,0.0781 -0.34375,0.0625 -0.1875,-0.0156 -0.4375,-0.0312 -0.82812,-0.0781 -1.46875,0.17188 -0.625,0.23437 -1,0.73437 -0.375,0.5 -0.375,1.1875 z m 0.0937,4.9375 q -0.26562,0 -0.42187,-0.14062 -0.14063,-0.15625 -0.14063,-0.42188 v -6.89062 q 0,-0.26563 0.14063,-0.40625 0.15625,-0.15625 0.42187,-0.15625 0.26563,0 0.40625,0.15625 0.15625,0.14062 0.15625,0.40625 v 6.89062 q 0,0.26563 -0.15625,0.42188 -0.14062,0.14062 -0.40625,0.14062 z m 5.55634,3.42188 q -0.23438,0 -0.40625,-0.15625 -0.15625,-0.15625 -0.15625,-0.39063 0,-0.14062 0.0781,-0.3125 0.8125,-1.625 1.21875,-3.28125 0.42188,-1.65625 0.42188,-3.29687 0,-3.29688 -1.625,-6.5625 -0.0781,-0.15625 -0.0937,-0.32813 0,-0.23437 0.17187,-0.39062 0.17188,-0.17188 0.39063,-0.17188 0.375,0 0.5625,0.39063 0.85937,1.75 1.28125,3.51562 0.42187,1.76563 0.42187,3.53125 0,1.78125 -0.4375,3.54688 -0.42187,1.76562 -1.26562,3.53125 -0.125,0.20312 -0.25,0.28125 -0.125,0.0937 -0.3125,0.0937 z"
115 |        fill-rule="nonzero"
116 |        id="path13" />
117 |     <path
118 |        fill="#ffffff"
119 |        d="M 346.61942,196.9685 H 484.00525 V 315.04723 H 346.61942 Z"
120 |        fill-rule="evenodd"
121 |        id="path14" />
122 |     <path
123 |        stroke="#999999"
124 |        stroke-width="1"
125 |        stroke-linejoin="round"
126 |        stroke-linecap="butt"
127 |        d="M 346.61942,196.9685 H 484.00525 V 315.04723 H 346.61942 Z"
128 |        fill-rule="evenodd"
129 |        id="path15" />
130 |     <path
131 |        fill="#999999"
132 |        d="m 371.68576,221.3285 q -0.35937,0 -0.60937,-0.23438 -0.23438,-0.25 -0.23438,-0.59375 v -10.82812 q 0,-0.375 0.23438,-0.60938 0.25,-0.23437 0.60937,-0.23437 0.46875,0 0.73438,0.45312 l 5,10.03125 h -0.51563 l 4.89063,-10.03125 q 0.25,-0.45312 0.73437,-0.45312 0.34375,0 0.57813,0.23437 0.25,0.23438 0.25,0.60938 v 10.82812 q 0,0.34375 -0.25,0.59375 -0.25,0.23438 -0.57813,0.23438 -0.35937,0 -0.59375,-0.23438 -0.23437,-0.25 -0.23437,-0.59375 v -8.53125 l 0.3125,-0.0781 -4.1875,8.54687 q -0.28125,0.40625 -0.71875,0.40625 -0.53125,0 -0.76563,-0.48437 l -4.15625,-8.3125 0.32813,-0.0781 v 8.53125 q 0,0.34375 -0.25,0.59375 -0.23438,0.23438 -0.57813,0.23438 z m 20.47766,0.15625 q -1.29687,0 -2.4375,-0.48438 -1.125,-0.48437 -1.96875,-1.35937 -0.82812,-0.875 -1.29687,-2.03125 -0.46875,-1.17188 -0.46875,-2.53125 0,-1.34375 0.46875,-2.5 0.46875,-1.17188 1.29687,-2.03125 0.84375,-0.875 1.96875,-1.375 1.125,-0.5 2.4375,-0.5 1.23438,0 2.10938,0.32812 0.89062,0.3125 1.79687,1.04688 0.125,0.0937 0.1875,0.20312 0.0781,0.10938 0.0937,0.21875 0.0312,0.0937 0.0312,0.23438 0,0.3125 -0.21875,0.51562 -0.21875,0.1875 -0.51562,0.21875 -0.29688,0.0156 -0.59375,-0.20312 -0.59375,-0.51563 -1.23438,-0.78125 -0.625,-0.28125 -1.65625,-0.28125 -0.95312,0 -1.78125,0.39062 -0.82812,0.375 -1.46875,1.04688 -0.625,0.67187 -0.98437,1.5625 -0.34375,0.89062 -0.34375,1.90625 0,1.01562 0.34375,1.90625 0.35937,0.89062 0.98437,1.5625 0.64063,0.67187 1.46875,1.04687 0.82813,0.375 1.78125,0.375 0.8125,0 1.53125,-0.28125 0.73438,-0.28125 1.40625,-0.78125 0.29688,-0.20312 0.5625,-0.17187 0.28125,0.0156 0.46875,0.21875 0.20313,0.20312 0.20313,0.54687 0,0.17188 -0.0625,0.32813 -0.0625,0.14062 -0.1875,0.26562 -0.875,0.6875 -1.85938,1.04688 -0.98437,0.34375 -2.0625,0.34375 z m 7.66638,-0.15625 q -0.35937,0 -0.60937,-0.23438 -0.23438,-0.25 -0.23438,-0.59375 v -10.82812 q 0,-0.375 0.23438,-0.60938 0.25,-0.23437 0.60937,-0.23437 h 3.1875 q 1.20313,0 2.125,0.53125 0.9375,0.53125 1.45313,1.46875 0.53125,0.9375 0.53125,2.14062 0,1.17188 -0.53125,2.09375 -0.51563,0.90625 -1.45313,1.42188 -0.92187,0.5 -2.125,0.5 h -2.35937 v 3.51562 q 0,0.34375 -0.23438,0.59375 -0.23437,0.23438 -0.59375,0.23438 z m 0.82813,-5.875 h 2.35937 q 0.75,0 1.29688,-0.3125 0.5625,-0.32813 0.875,-0.875 0.32812,-0.5625 0.32812,-1.29688 0,-0.76562 -0.32812,-1.34375 -0.3125,-0.57812 -0.875,-0.90625 -0.54688,-0.34375 -1.29688,-0.34375 h -2.35937 z m 18.59353,6.03125 q -1.29687,0 -2.4375,-0.48438 -1.125,-0.48437 -1.96875,-1.35937 -0.82812,-0.875 -1.29687,-2.03125 -0.46875,-1.17188 -0.46875,-2.53125 0,-1.34375 0.46875,-2.5 0.46875,-1.17188 1.29687,-2.03125 0.84375,-0.875 1.96875,-1.375 1.125,-0.5 2.4375,-0.5 1.23438,0 2.10938,0.32812 0.89062,0.3125 1.79687,1.04688 0.125,0.0937 0.1875,0.20312 0.0781,0.10938 0.0937,0.21875 0.0312,0.0937 0.0312,0.23438 0,0.3125 -0.21875,0.51562 -0.21875,0.1875 -0.51562,0.21875 -0.29688,0.0156 -0.59375,-0.20312 -0.59375,-0.51563 -1.23438,-0.78125 -0.625,-0.28125 -1.65625,-0.28125 -0.95312,0 -1.78125,0.39062 -0.82812,0.375 -1.46875,1.04688 -0.625,0.67187 -0.98437,1.5625 -0.34375,0.89062 -0.34375,1.90625 0,1.01562 0.34375,1.90625 0.35937,0.89062 0.98437,1.5625 0.64063,0.67187 1.46875,1.04687 0.82813,0.375 1.78125,0.375 0.8125,0 1.53125,-0.28125 0.73438,-0.28125 1.40625,-0.78125 0.29688,-0.20312 0.5625,-0.17187 0.28125,0.0156 0.46875,0.21875 0.20313,0.20312 0.20313,0.54687 0,0.17188 -0.0625,0.32813 -0.0625,0.14062 -0.1875,0.26562 -0.875,0.6875 -1.85938,1.04688 -0.98437,0.34375 -2.0625,0.34375 z m 8.74451,-0.15625 q -0.70312,0 -1.25,-0.375 -0.53125,-0.39063 -0.84375,-1.04688 -0.29687,-0.67187 -0.29687,-1.53125 v -8.75 q 0,-0.34375 0.21875,-0.5625 0.21875,-0.23437 0.57812,-0.23437 0.34375,0 0.5625,0.23437 0.23438,0.21875 0.23438,0.5625 v 8.75 q 0,0.57813 0.21875,0.96875 0.23437,0.39063 0.57812,0.39063 h 0.40625 q 0.3125,0 0.51563,0.21875 0.20312,0.21875 0.20312,0.57812 0,0.34375 -0.3125,0.57813 -0.29687,0.21875 -0.78125,0.21875 z m 3.70627,0 q -0.35938,0 -0.59375,-0.23438 -0.23438,-0.23437 -0.23438,-0.57812 v -7.125 q 0,-0.35938 0.23438,-0.57813 0.23437,-0.23437 0.59375,-0.23437 0.35937,0 0.57812,0.23437 0.23438,0.21875 0.23438,0.57813 v 7.125 q 0,0.34375 -0.23438,0.57812 -0.21875,0.23438 -0.57812,0.23438 z m 0,-10.17188 q -0.4375,0 -0.75,-0.3125 -0.3125,-0.3125 -0.3125,-0.75 0,-0.42187 0.3125,-0.73437 0.3125,-0.3125 0.75,-0.3125 0.42187,0 0.73437,0.3125 0.3125,0.3125 0.3125,0.73437 0,0.4375 -0.3125,0.75 -0.3125,0.3125 -0.73437,0.3125 z m 7.957,10.23438 q -1.32813,0 -2.35938,-0.5625 -1.03125,-0.57813 -1.625,-1.57813 -0.57812,-1 -0.57812,-2.29687 0,-1.3125 0.54687,-2.3125 0.5625,-1 1.53125,-1.5625 0.98438,-0.5625 2.25,-0.5625 1.25,0 2.14063,0.54687 0.90625,0.54688 1.375,1.51563 0.46875,0.96875 0.46875,2.23437 0,0.3125 -0.21875,0.51563 -0.20313,0.1875 -0.51563,0.1875 h -6.45312 v -1.28125 h 6.40625 l -0.65625,0.45312 q -0.0156,-0.79687 -0.32813,-1.42187 -0.29687,-0.64063 -0.85937,-1 -0.5625,-0.375 -1.35938,-0.375 -0.90625,0 -1.5625,0.40625 -0.64062,0.39062 -0.98437,1.09375 -0.32813,0.6875 -0.32813,1.5625 0,0.89062 0.39063,1.57812 0.40625,0.6875 1.10937,1.09375 0.70313,0.39063 1.60938,0.39063 0.5,0 1.01562,-0.1875 0.53125,-0.1875 0.84375,-0.42188 0.23438,-0.17187 0.51563,-0.17187 0.28125,-0.0156 0.5,0.15625 0.26562,0.23437 0.28125,0.53125 0.0156,0.28125 -0.25,0.5 -0.54688,0.42187 -1.35938,0.70312 -0.8125,0.26563 -1.54687,0.26563 z m 13.21729,-0.0469 q -0.34375,0 -0.57813,-0.23437 -0.23437,-0.23438 -0.23437,-0.57813 v -3.9375 q 0,-0.90625 -0.34375,-1.48437 -0.32813,-0.57813 -0.90625,-0.85938 -0.5625,-0.28125 -1.29688,-0.28125 -0.67187,0 -1.21875,0.28125 -0.53125,0.26563 -0.85937,0.71875 -0.3125,0.45313 -0.3125,1.04688 h -1.01563 q 0,-1 0.48438,-1.79688 0.5,-0.79687 1.34375,-1.25 0.84375,-0.46875 1.90625,-0.46875 1.09375,0 1.96875,0.46875 0.875,0.46875 1.375,1.39063 0.5,0.90625 0.5,2.23437 v 3.9375 q 0,0.34375 -0.23438,0.57813 -0.21875,0.23437 -0.57812,0.23437 z m -6.57813,0 q -0.34375,0 -0.57812,-0.23437 -0.23438,-0.23438 -0.23438,-0.57813 v -7.1406 q 0,-0.35938 0.23438,-0.57813 0.23437,-0.23437 0.57812,-0.23437 0.375,0 0.59375,0.23437 0.23438,0.21875 0.23438,0.57813 v 7.14062 q 0,0.34375 -0.23438,0.57813 -0.21875,0.23437 -0.59375,0.23437 z m 13.28702,-0.0156 q -0.79688,0 -1.4375,-0.40625 -0.64063,-0.40625 -1.01563,-1.10938 -0.35937,-0.70312 -0.35937,-1.59375 v -7.625 q 0,-0.35937 0.21875,-0.57812 0.21875,-0.21875 0.57812,-0.21875 0.34375,0 0.5625,0.21875 0.23438,0.21875 0.23438,0.57812 v 7.625 q 0,0.64063 0.34375,1.07813 0.35937,0.4375 0.875,0.4375 h 0.54687 q 0.28125,0 0.48438,0.21875 0.20312,0.21875 0.20312,0.57812 0,0.34375 -0.26562,0.57813 -0.26563,0.21875 -0.6875,0.21875 z m -3.54688,-7.0625 q -0.34375,0 -0.5625,-0.1875 -0.20312,-0.1875 -0.20312,-0.48438 0,-0.3125 0.20312,-0.5 0.21875,-0.20312 0.5625,-0.20312 h 3.6875 q 0.34375,0 0.54688,0.20312 0.20312,0.1875 0.20312,0.5 0,0.29688 -0.20312,0.48438 -0.20313,0.1875 -0.54688,0.1875 z"
133 |        fill-rule="nonzero"
134 |        id="path16" />
135 |     <path
136 |        fill="#ffffff"
137 |        d="m 346.60104,233.56168 h 137.38583 v 74.77167 H 346.60104 Z"
138 |        fill-rule="evenodd"
139 |        id="path17" />
140 |     <path
141 |        stroke="#999999"
142 |        stroke-width="1"
143 |        stroke-linejoin="round"
144 |        stroke-linecap="butt"
145 |        d="m 346.60104,233.56168 h 137.38583 v 74.77167 H 346.60104 Z"
146 |        fill-rule="evenodd"
147 |        id="path18" />
148 |     <path
149 |        fill="#999999"
150 |        d="m 368.58566,256.6417 q -0.23437,0 -0.40625,-0.17187 -0.15625,-0.17188 -0.15625,-0.40625 v -10.29689 q 0,-0.25 0.15625,-0.40625 0.17188,-0.17188 0.40625,-0.17188 0.35938,0 0.51563,0.29688 l 4.9375,9.82812 h -0.5 l 4.85937,-9.82812 q 0.17188,-0.29688 0.51563,-0.29688 0.23437,0 0.39062,0.17188 0.15625,0.15625 0.15625,0.40625 v 10.29689 q 0,0.23437 -0.15625,0.40625 -0.15625,0.17187 -0.39062,0.17187 -0.25,0 -0.42188,-0.17187 -0.17187,-0.17188 -0.17187,-0.40625 v -8.81252 l 0.25,0.0156 -4.32813,8.82814 q -0.15625,0.28125 -0.48437,0.28125 -0.375,0 -0.53125,-0.34375 l -4.35938,-8.71877 0.29688,-0.0625 v 8.81252 q 0,0.23437 -0.17188,0.40625 -0.17187,0.17187 -0.40625,0.17187 z m 18.95596,0.14063 q -1.1875,0 -2.21875,-0.45313 -1.03125,-0.45314 -1.82812,-1.26564 -0.78125,-0.8125 -1.21875,-1.875 -0.4375,-1.0625 -0.4375,-2.28125 0,-1.20313 0.42187,-2.26563 0.4375,-1.0625 1.21875,-1.85937 0.79688,-0.8125 1.82813,-1.26563 1.03125,-0.46875 2.23437,-0.46875 1.0625,0 1.92188,0.3125 0.85937,0.29688 1.67187,0.98438 0.125,0.0937 0.14063,0.23437 0.0312,0.14063 -0.0312,0.26563 -0.0469,0.125 -0.17188,0.1875 -0.0312,0.10937 -0.15625,0.17187 -0.10937,0.0625 -0.26562,0.0469 -0.14063,-0.0156 -0.29688,-0.14063 -0.5625,-0.5 -1.25,-0.73437 -0.67187,-0.25 -1.5625,-0.25 -0.95312,0 -1.78125,0.39062 -0.82812,0.375 -1.46875,1.04688 -0.625,0.65625 -0.98437,1.51562 -0.35938,0.85938 -0.35938,1.82813 0,1 0.35938,1.875 0.35937,0.85937 0.98437,1.51562 0.64063,0.65625 1.46875,1.03125 0.82813,0.375 1.78125,0.375 0.8125,0 1.53125,-0.26562 0.71875,-0.26563 1.35938,-0.76563 0.17187,-0.14062 0.35937,-0.10937 0.20313,0.0312 0.34375,0.17187 0.15625,0.14063 0.15625,0.375 0,0.125 -0.0469,0.21875 -0.0312,0.0937 -0.10938,0.20313 -0.75,0.68751 -1.67187,0.96876 -0.92188,0.28125 -1.92188,0.28126 z m 6.67792,-0.14063 q -0.25,0 -0.40625,-0.15625 -0.15625,-0.17187 -0.15625,-0.42187 v -10.29689 q 0,-0.25 0.15625,-0.40625 0.15625,-0.17188 0.40625,-0.17188 h 2.9375 q 1.07813,0 1.90625,0.48438 0.84375,0.46875 1.3125,1.3125 0.46875,0.82812 0.46875,1.9375 0,1.0625 -0.46875,1.89062 -0.46875,0.82813 -1.3125,1.3125 -0.82812,0.46875 -1.90625,0.46875 h -2.35937 v 3.46877 q 0,0.25 -0.17188,0.42187 -0.15625,0.15625 -0.40625,0.15625 z m 0.57813,-5.14064 h 2.35937 q 0.75,0 1.32813,-0.32813 0.59375,-0.32812 0.92187,-0.90625 0.32813,-0.59375 0.32813,-1.34375 0,-0.78125 -0.32813,-1.35937 -0.32812,-0.59375 -0.92187,-0.92188 -0.57813,-0.34375 -1.32813,-0.34375 h -2.35937 z m 15.63897,5.28127 q -0.9375,0 -1.73437,-0.26563 -0.79688,-0.26562 -1.39063,-0.76564 -0.57812,-0.5 -0.89062,-1.15625 -0.125,-0.23438 -0.0156,-0.4375 0.10938,-0.20313 0.375,-0.26563 0.20313,-0.0625 0.40625,0.0469 0.20313,0.0937 0.29688,0.29687 0.21875,0.42188 0.64062,0.76563 0.4375,0.34375 1.01563,0.53125 0.59375,0.17187 1.29687,0.17187 0.78125,0 1.375,-0.25 0.60938,-0.26562 0.95313,-0.75 0.34375,-0.5 0.34375,-1.20312 0,-0.89063 -0.67188,-1.53125 -0.65625,-0.64063 -2.0625,-0.82813 -1.71875,-0.20312 -2.6875,-1.0625 -0.95312,-0.85937 -0.95312,-2.09375 0,-0.90625 0.46875,-1.5625 0.48437,-0.65625 1.3125,-1.01562 0.84375,-0.35938 1.92187,-0.35938 0.8125,0 1.46875,0.26563 0.65625,0.25 1.14063,0.67187 0.5,0.40625 0.79687,0.90625 0.15625,0.23438 0.0937,0.45313 -0.0469,0.21875 -0.25,0.34375 -0.21875,0.0937 -0.45312,0.0312 -0.21875,-0.0781 -0.32813,-0.28125 -0.23437,-0.34375 -0.5625,-0.64063 -0.32812,-0.29687 -0.79687,-0.46875 -0.46875,-0.1875 -1.125,-0.20312 -1.15625,0 -1.85938,0.5 -0.70312,0.48437 -0.70312,1.42187 0,0.5 0.26562,0.92188 0.26563,0.42187 0.85938,0.71875 0.60937,0.29687 1.64062,0.45312 1.82813,0.25 2.71875,1.10938 0.89063,0.85937 0.89063,2.23437 0,0.79688 -0.29688,1.42188 -0.28125,0.60937 -0.79687,1.03125 -0.51563,0.40627 -1.21875,0.62502 -0.6875,0.21875 -1.48438,0.21875 z m 9.67121,-0.0625 q -1.1875,0 -2.10938,-0.51563 -0.90625,-0.53127 -1.4375,-1.45314 -0.51562,-0.92188 -0.51562,-2.10938 0,-1.20312 0.48437,-2.10937 0.5,-0.92188 1.35938,-1.45313 0.875,-0.53125 2,-0.53125 1.10937,0 1.9375,0.51563 0.82812,0.5 1.28125,1.39062 0.45312,0.89063 0.45312,2.04688 0,0.23437 -0.14062,0.375 -0.14063,0.125 -0.375,0.125 h -6.23438 v -0.9375 h 6.34375 l -0.625,0.45312 q 0.0156,-0.84375 -0.3125,-1.51562 -0.32812,-0.67188 -0.92187,-1.04688 -0.57813,-0.39062 -1.40625,-0.39062 -0.82813,0 -1.46875,0.40625 -0.625,0.39062 -0.96875,1.09375 -0.34375,0.6875 -0.34375,1.57812 0,0.89063 0.375,1.57813 0.39062,0.6875 1.0625,1.09375 0.6875,0.39062 1.5625,0.39062 0.53125,0 1.0625,-0.17187 0.53125,-0.1875 0.85937,-0.46875 0.15625,-0.14063 0.35938,-0.14063 0.21875,-0.0156 0.35937,0.10938 0.1875,0.17187 0.1875,0.375 0.0156,0.20312 -0.15625,0.35937 -0.48437,0.40627 -1.23437,0.68752 -0.75,0.26562 -1.4375,0.26563 z m 8.17086,0 q -0.875,0 -1.73437,-0.29688 -0.84375,-0.29687 -1.35938,-0.87502 -0.17187,-0.1875 -0.14062,-0.40625 0.0312,-0.21875 0.21875,-0.375 0.20312,-0.14062 0.42187,-0.10937 0.23438,0.0156 0.375,0.1875 0.34375,0.40625 0.92188,0.625 0.59375,0.21875 1.29687,0.21875 1.07813,0 1.5625,-0.375 0.48438,-0.375 0.5,-0.90625 0,-0.51563 -0.5,-0.85938 -0.5,-0.34375 -1.64062,-0.54687 -1.48438,-0.23438 -2.17188,-0.8125 -0.6875,-0.59375 -0.6875,-1.39063 0,-0.75 0.39063,-1.25 0.40625,-0.5 1.0625,-0.75 0.65625,-0.25 1.45312,-0.25 0.98438,0 1.6875,0.34375 0.71875,0.32813 1.15625,0.90625 0.14063,0.1875 0.10938,0.39063 -0.0312,0.20312 -0.23438,0.34375 -0.17187,0.0937 -0.40625,0.0625 -0.21875,-0.0312 -0.375,-0.21875 -0.375,-0.42188 -0.85937,-0.60938 -0.48438,-0.20312 -1.10938,-0.20312 -0.8125,0 -1.29687,0.32812 -0.48438,0.32813 -0.48438,0.82813 0,0.34375 0.1875,0.59375 0.1875,0.25 0.625,0.4375 0.45313,0.1875 1.26563,0.3125 1.09375,0.1875 1.73437,0.53125 0.64063,0.34375 0.90625,0.8125 0.26563,0.45312 0.26563,0.98437 0,0.70313 -0.40625,1.21875 -0.39063,0.51565 -1.10938,0.81252 -0.70312,0.29688 -1.625,0.29688 z m 7.89975,0 q -0.875,0 -1.73437,-0.29688 -0.84375,-0.29687 -1.35938,-0.87502 -0.17187,-0.1875 -0.14062,-0.40625 0.0312,-0.21875 0.21875,-0.375 0.20312,-0.14062 0.42187,-0.10937 0.23438,0.0156 0.375,0.1875 0.34375,0.40625 0.92188,0.625 0.59375,0.21875 1.29687,0.21875 1.07813,0 1.5625,-0.375 0.48438,-0.375 0.5,-0.90625 0,-0.51563 -0.5,-0.85938 -0.5,-0.34375 -1.64062,-0.54687 -1.48438,-0.23438 -2.17188,-0.8125 -0.6875,-0.59375 -0.6875,-1.39063 0,-0.75 0.39063,-1.25 0.40625,-0.5 1.0625,-0.75 0.65625,-0.25 1.45312,-0.25 0.98438,0 1.6875,0.34375 0.71875,0.32813 1.15625,0.90625 0.14063,0.1875 0.10938,0.39063 -0.0312,0.20312 -0.23438,0.34375 -0.17187,0.0937 -0.40625,0.0625 -0.21875,-0.0312 -0.375,-0.21875 -0.375,-0.42188 -0.85937,-0.60938 -0.48438,-0.20312 -1.10938,-0.20312 -0.8125,0 -1.29687,0.32812 -0.48438,0.32813 -0.48438,0.82813 0,0.34375 0.1875,0.59375 0.1875,0.25 0.625,0.4375 0.45313,0.1875 1.26563,0.3125 1.09375,0.1875 1.73437,0.53125 0.64063,0.34375 0.90625,0.8125 0.26563,0.45312 0.26563,0.98437 0,0.70313 -0.40625,1.21875 -0.39063,0.51565 -1.10938,0.81252 -0.70312,0.29688 -1.625,0.29688 z m 5.89975,-0.0781 q -0.26562,0 -0.42187,-0.15625 -0.15625,-0.15625 -0.15625,-0.42187 v -6.87502 q 0,-0.25 0.15625,-0.40625 0.15625,-0.15625 0.42187,-0.15625 0.25,0 0.40625,0.15625 0.15625,0.15625 0.15625,0.40625 v 6.87502 q 0,0.26562 -0.15625,0.42187 -0.15625,0.15625 -0.40625,0.15625 z m -0.0156,-9.54689 q -0.32813,0 -0.5625,-0.23437 -0.23438,-0.23438 -0.23438,-0.5625 0,-0.375 0.23438,-0.57813 0.25,-0.21875 0.57812,-0.21875 0.29688,0 0.53125,0.21875 0.25,0.20313 0.25,0.57813 0,0.32812 -0.23437,0.5625 -0.23438,0.23437 -0.5625,0.23437 z m 7.09503,9.62502 q -1.17187,0 -2.09375,-0.53125 -0.92187,-0.53127 -1.45312,-1.45315 -0.53125,-0.92187 -0.53125,-2.09375 0,-1.1875 0.53125,-2.10937 0.53125,-0.92188 1.45312,-1.45313 0.92188,-0.53125 2.09375,-0.53125 1.17188,0 2.07813,0.53125 0.92187,0.53125 1.45312,1.45313 0.53125,0.92187 0.54688,2.10937 0,1.17188 -0.54688,2.09375 -0.53125,0.92188 -1.45312,1.45315 -0.90625,0.53125 -2.07813,0.53125 z m 0,-1.03127 q 0.84375,0 1.51563,-0.39063 0.6875,-0.40625 1.0625,-1.09375 0.375,-0.6875 0.375,-1.5625 0,-0.875 -0.375,-1.5625 -0.375,-0.70312 -1.0625,-1.09375 -0.67188,-0.40625 -1.51563,-0.40625 -0.84375,0 -1.53125,0.40625 -0.67187,0.39063 -1.0625,1.09375 -0.375,0.6875 -0.375,1.5625 0,0.875 0.375,1.5625 0.39063,0.6875 1.0625,1.09375 0.6875,0.39063 1.53125,0.39063 z m 13.14108,0.95314 q -0.25,0 -0.40625,-0.15625 -0.15625,-0.17188 -0.15625,-0.40625 v -3.81252 q 0,-0.90625 -0.34375,-1.48437 -0.34375,-0.59375 -0.9375,-0.875 -0.59375,-0.29688 -1.34375,-0.29688 -0.71875,0 -1.29687,0.28125 -0.57813,0.26563 -0.92188,0.75 -0.32812,0.48438 -0.32812,1.10938 h -0.8125 q 0.0312,-0.92188 0.5,-1.64063 0.46875,-0.73437 1.23437,-1.15625 0.78125,-0.42187 1.73438,-0.42187 1.04687,0 1.85937,0.4375 0.82813,0.4375 1.29688,1.28125 0.48437,0.82812 0.48437,2.01562 v 3.81252 q 0,0.23437 -0.17187,0.40625 -0.15625,0.15625 -0.39063,0.15625 z m -6.29687,0 q -0.26563,0 -0.42188,-0.15625 -0.15625,-0.15625 -0.15625,-0.40625 v -6.89064 q 0,-0.25 0.15625,-0.40625 0.15625,-0.15625 0.42188,-0.15625 0.25,0 0.40625,0.15625 0.15625,0.15625 0.15625,0.40625 v 6.89064 q 0,0.25 -0.15625,0.40625 -0.15625,0.15625 -0.40625,0.15625 z"
151 |        fill-rule="nonzero"
152 |        id="path19" />
153 |     <path
154 |        fill="#999999"
155 |        d="m 346.60104,269.38315 h 137.38583 v 45.66928 H 346.60104 Z"
156 |        fill-rule="evenodd"
157 |        id="path20" />
158 |     <path
159 |        stroke="#999999"
160 |        stroke-width="1"
161 |        stroke-linejoin="round"
162 |        stroke-linecap="butt"
163 |        d="m 346.60104,269.38315 h 137.38583 v 45.66928 H 346.60104 Z"
164 |        fill-rule="evenodd"
165 |        id="path21" />
166 |     <path
167 |        fill="#ffffff"
168 |        d="m 360.72348,288.2978 q -0.23438,0 -0.40625,-0.17188 -0.15625,-0.17187 -0.15625,-0.40625 V 277.4228 q 0,-0.25 0.15625,-0.40625 0.17187,-0.17188 0.40625,-0.17188 0.35937,0 0.51562,0.29688 l 4.9375,9.82812 h -0.5 l 4.85938,-9.82812 q 0.17187,-0.29688 0.51562,-0.29688 0.23438,0 0.39063,0.17188 0.15625,0.15625 0.15625,0.40625 v 10.29687 q 0,0.23438 -0.15625,0.40625 -0.15625,0.17188 -0.39063,0.17188 -0.25,0 -0.42187,-0.17188 -0.17188,-0.17187 -0.17188,-0.40625 v -8.8125 l 0.25,0.0156 -4.32812,8.82812 q -0.15625,0.28125 -0.48438,0.28125 -0.375,0 -0.53125,-0.34375 l -4.35937,-8.71875 0.29687,-0.0625 v 8.8125 q 0,0.23438 -0.17187,0.40625 -0.17188,0.17188 -0.40625,0.17188 z m 18.95596,0.14062 q -1.1875,0 -2.21875,-0.45312 -1.03125,-0.45313 -1.82812,-1.26563 -0.78125,-0.8125 -1.21875,-1.875 -0.4375,-1.0625 -0.4375,-2.28125 0,-1.20312 0.42187,-2.26562 0.4375,-1.0625 1.21875,-1.85938 0.79688,-0.8125 1.82813,-1.26562 1.03125,-0.46875 2.23437,-0.46875 1.0625,0 1.92188,0.3125 0.85937,0.29687 1.67187,0.98437 0.125,0.0937 0.14063,0.23438 0.0312,0.14062 -0.0312,0.26562 -0.0469,0.125 -0.17188,0.1875 -0.0312,0.10938 -0.15625,0.17188 -0.10937,0.0625 -0.26562,0.0469 -0.14063,-0.0156 -0.29688,-0.14062 -0.5625,-0.5 -1.25,-0.73438 -0.67187,-0.25 -1.5625,-0.25 -0.95312,0 -1.78125,0.39063 -0.82812,0.375 -1.46875,1.04687 -0.625,0.65625 -0.98437,1.51563 -0.35938,0.85937 -0.35938,1.82812 0,1 0.35938,1.875 0.35937,0.85938 0.98437,1.51563 0.64063,0.65625 1.46875,1.03125 0.82813,0.375 1.78125,0.375 0.8125,0 1.53125,-0.26563 0.71875,-0.26562 1.35938,-0.76562 0.17187,-0.14063 0.35937,-0.10938 0.20313,0.0312 0.34375,0.17188 0.15625,0.14062 0.15625,0.375 0,0.125 -0.0469,0.21875 -0.0312,0.0937 -0.10938,0.20312 -0.75,0.6875 -1.67187,0.96875 -0.92188,0.28125 -1.92188,0.28125 z m 6.67792,-0.14062 q -0.25,0 -0.40625,-0.15625 -0.15625,-0.17188 -0.15625,-0.42188 V 277.4228 q 0,-0.25 0.15625,-0.40625 0.15625,-0.17188 0.40625,-0.17188 h 2.9375 q 1.07813,0 1.90625,0.48438 0.84375,0.46875 1.3125,1.3125 0.46875,0.82812 0.46875,1.9375 0,1.0625 -0.46875,1.89062 -0.46875,0.82813 -1.3125,1.3125 -0.82812,0.46875 -1.90625,0.46875 h -2.35937 v 3.46875 q 0,0.25 -0.17188,0.42188 -0.15625,0.15625 -0.40625,0.15625 z m 0.57813,-5.14063 h 2.35937 q 0.75,0 1.32813,-0.32812 0.59375,-0.32813 0.92187,-0.90625 0.32813,-0.59375 0.32813,-1.34375 0,-0.78125 -0.32813,-1.35938 -0.32812,-0.59375 -0.92187,-0.92187 -0.57813,-0.34375 -1.32813,-0.34375 h -2.35937 z m 15.45147,5.14063 q -0.23437,0 -0.40625,-0.17188 -0.17187,-0.17187 -0.17187,-0.40625 v -10.875 h 1.14062 v 10.875 q 0,0.23438 -0.15625,0.40625 -0.15625,0.17188 -0.40625,0.17188 z m -4.04687,-10.40625 q -0.23438,0 -0.39063,-0.14063 -0.14062,-0.15625 -0.14062,-0.375 0,-0.23437 0.14062,-0.375 0.15625,-0.15625 0.39063,-0.15625 h 8.10937 q 0.23438,0 0.375,0.15625 0.14063,0.14063 0.14063,0.375 0,0.21875 -0.14063,0.375 -0.14062,0.14063 -0.375,0.14063 z m 8.57779,5.46875 q 0.0469,-0.90625 0.48437,-1.625 0.4375,-0.71875 1.125,-1.125 0.70313,-0.42188 1.54688,-0.42188 0.67187,0 1.03125,0.20313 0.375,0.1875 0.29687,0.54687 -0.0625,0.21875 -0.20312,0.29688 -0.14063,0.0781 -0.34375,0.0625 -0.1875,-0.0156 -0.4375,-0.0312 -0.82813,-0.0781 -1.46875,0.17187 -0.625,0.23438 -1,0.73438 -0.375,0.5 -0.375,1.1875 z m 0.0937,4.9375 q -0.26563,0 -0.42188,-0.14063 -0.14062,-0.15625 -0.14062,-0.42187 v -6.89063 q 0,-0.26562 0.14062,-0.40625 0.15625,-0.15625 0.42188,-0.15625 0.26562,0 0.40625,0.15625 0.15625,0.14063 0.15625,0.40625 v 6.89063 q 0,0.26562 -0.15625,0.42187 -0.14063,0.14063 -0.40625,0.14063 z m 9.09466,0.0781 q -1.125,0 -2.01562,-0.53125 -0.89063,-0.54687 -1.42188,-1.46875 -0.51562,-0.92187 -0.51562,-2.07812 0,-1.17188 0.53125,-2.09375 0.54687,-0.92188 1.46875,-1.45313 0.92187,-0.54687 2.07812,-0.54687 1.15625,0 2.0625,0.54687 0.92188,0.53125 1.45313,1.45313 0.54687,0.92187 0.5625,2.09375 l -0.45313,0.34375 q 0,1.0625 -0.5,1.90625 -0.48437,0.84375 -1.32812,1.34375 -0.84375,0.48437 -1.92188,0.48437 z m 0.125,-1.03125 q 0.84375,0 1.51563,-0.39062 0.67187,-0.40625 1.04687,-1.09375 0.39063,-0.70313 0.39063,-1.5625 0,-0.875 -0.39063,-1.5625 -0.375,-0.70313 -1.04687,-1.09375 -0.67188,-0.40625 -1.51563,-0.40625 -0.82812,0 -1.51562,0.40625 -0.67188,0.39062 -1.0625,1.09375 -0.39063,0.6875 -0.39063,1.5625 0,0.85937 0.39063,1.5625 0.39062,0.6875 1.0625,1.09375 0.6875,0.39062 1.51562,0.39062 z m 3.5,0.95313 q -0.25,0 -0.40625,-0.15625 -0.15625,-0.15625 -0.15625,-0.40625 v -2.5 l 0.26563,-1.15625 0.875,0.21875 v 3.4375 q 0,0.25 -0.17188,0.40625 -0.15625,0.15625 -0.40625,0.15625 z m 9.64109,0 q -0.25,0 -0.40625,-0.15625 -0.15625,-0.17188 -0.15625,-0.40625 v -3.8125 q 0,-0.90625 -0.34375,-1.48438 -0.34375,-0.59375 -0.9375,-0.875 -0.59375,-0.29687 -1.34375,-0.29687 -0.71875,0 -1.29688,0.28125 -0.57812,0.26562 -0.92187,0.75 -0.32813,0.48437 -0.32813,1.10937 h -0.8125 q 0.0312,-0.92187 0.5,-1.64062 0.46875,-0.73438 1.23438,-1.15625 0.78125,-0.42188 1.73437,-0.42188 1.04688,0 1.85938,0.4375 0.82812,0.4375 1.29687,1.28125 0.48438,0.82813 0.48438,2.01563 v 3.8125 q 0,0.23437 -0.17188,0.40625 -0.15625,0.15625 -0.39062,0.15625 z m -6.29688,0 q -0.26562,0 -0.42187,-0.15625 -0.15625,-0.15625 -0.15625,-0.40625 v -6.89063 q 0,-0.25 0.15625,-0.40625 0.15625,-0.15625 0.42187,-0.15625 0.25,0 0.40625,0.15625 0.15625,0.15625 0.15625,0.40625 v 6.89063 q 0,0.25 -0.15625,0.40625 -0.15625,0.15625 -0.40625,0.15625 z m 12.15668,0.0781 q -0.875,0 -1.73438,-0.29687 -0.84375,-0.29688 -1.35937,-0.875 -0.17188,-0.1875 -0.14063,-0.40625 0.0312,-0.21875 0.21875,-0.375 0.20313,-0.14063 0.42188,-0.10938 0.23437,0.0156 0.375,0.1875 0.34375,0.40625 0.92187,0.625 0.59375,0.21875 1.29688,0.21875 1.07812,0 1.5625,-0.375 0.48437,-0.375 0.5,-0.90625 0,-0.51562 -0.5,-0.85937 -0.5,-0.34375 -1.64063,-0.54688 -1.48437,-0.23437 -2.17187,-0.8125 -0.6875,-0.59375 -0.6875,-1.39062 0,-0.75 0.39062,-1.25 0.40625,-0.5 1.0625,-0.75 0.65625,-0.25 1.45313,-0.25 0.98437,0 1.6875,0.34375 0.71875,0.32812 1.15625,0.90625 0.14062,0.1875 0.10937,0.39062 -0.0312,0.20313 -0.23437,0.34375 -0.17188,0.0937 -0.40625,0.0625 -0.21875,-0.0312 -0.375,-0.21875 -0.375,-0.42187 -0.85938,-0.60937 -0.48437,-0.20313 -1.10937,-0.20313 -0.8125,0 -1.29688,0.32813 -0.48437,0.32812 -0.48437,0.82812 0,0.34375 0.1875,0.59375 0.1875,0.25 0.625,0.4375 0.45312,0.1875 1.26562,0.3125 1.09375,0.1875 1.73438,0.53125 0.64062,0.34375 0.90625,0.8125 0.26562,0.45313 0.26562,0.98438 0,0.70312 -0.40625,1.21875 -0.39062,0.51562 -1.10937,0.8125 -0.70313,0.29687 -1.625,0.29687 z m 5.66537,3.34375 q -0.26562,0 -0.42187,-0.15625 -0.15625,-0.14062 -0.15625,-0.40625 v -6.92187 q 0.0156,-1.14063 0.54687,-2.04688 0.54688,-0.92187 1.45313,-1.45312 0.92187,-0.53125 2.0625,-0.53125 1.17187,0 2.09375,0.54687 0.92187,0.53125 1.45312,1.45313 0.54688,0.92187 0.54688,2.09375 0,1.15625 -0.53125,2.07812 -0.51563,0.92188 -1.40625,1.46875 -0.89063,0.53125 -2.01563,0.53125 -0.98437,0 -1.78125,-0.42187 -0.79687,-0.42188 -1.28125,-1.10938 v 4.3125 q 0,0.26563 -0.15625,0.40625 -0.15625,0.15625 -0.40625,0.15625 z m 3.48438,-4.375 q 0.85937,0 1.53125,-0.39062 0.67187,-0.40625 1.0625,-1.09375 0.39062,-0.70313 0.39062,-1.5625 0,-0.875 -0.39062,-1.5625 -0.39063,-0.70313 -1.0625,-1.09375 -0.67188,-0.40625 -1.53125,-0.40625 -0.82813,0 -1.51563,0.40625 -0.67187,0.39062 -1.04687,1.09375 -0.375,0.6875 -0.375,1.5625 0,0.85937 0.375,1.5625 0.375,0.6875 1.04687,1.09375 0.6875,0.39062 1.51563,0.39062 z m 9.95578,1.03125 q -1.17188,0 -2.09375,-0.53125 -0.92188,-0.53125 -1.45313,-1.45312 -0.53125,-0.92188 -0.53125,-2.09375 0,-1.1875 0.53125,-2.10938 0.53125,-0.92187 1.45313,-1.45312 0.92187,-0.53125 2.09375,-0.53125 1.17187,0 2.07812,0.53125 0.92188,0.53125 1.45313,1.45312 0.53125,0.92188 0.54687,2.10938 0,1.17187 -0.54687,2.09375 -0.53125,0.92187 -1.45313,1.45312 -0.90625,0.53125 -2.07812,0.53125 z m 0,-1.03125 q 0.84375,0 1.51562,-0.39062 0.6875,-0.40625 1.0625,-1.09375 0.375,-0.6875 0.375,-1.5625 0,-0.875 -0.375,-1.5625 -0.375,-0.70313 -1.0625,-1.09375 -0.67187,-0.40625 -1.51562,-0.40625 -0.84375,0 -1.53125,0.40625 -0.67188,0.39062 -1.0625,1.09375 -0.375,0.6875 -0.375,1.5625 0,0.875 0.375,1.5625 0.39062,0.6875 1.0625,1.09375 0.6875,0.39062 1.53125,0.39062 z m 6.7348,-3.98437 q 0.0469,-0.90625 0.48437,-1.625 0.4375,-0.71875 1.125,-1.125 0.70313,-0.42188 1.54688,-0.42188 0.67187,0 1.03125,0.20313 0.375,0.1875 0.29687,0.54687 -0.0625,0.21875 -0.20312,0.29688 -0.14063,0.0781 -0.34375,0.0625 -0.1875,-0.0156 -0.4375,-0.0312 -0.82813,-0.0781 -1.46875,0.17187 -0.625,0.23438 -1,0.73438 -0.375,0.5 -0.375,1.1875 z m 0.0937,4.9375 q -0.26563,0 -0.42188,-0.14063 -0.14062,-0.15625 -0.14062,-0.42187 v -6.89063 q 0,-0.26562 0.14062,-0.40625 0.15625,-0.15625 0.42188,-0.15625 0.26562,0 0.40625,0.15625 0.15625,0.14063 0.15625,0.40625 v 6.89063 q 0,0.26562 -0.15625,0.42187 -0.14063,0.14063 -0.40625,0.14063 z m 9.29071,0 q -0.78125,0 -1.39063,-0.35938 -0.59375,-0.375 -0.95312,-1.01562 -0.34375,-0.64063 -0.34375,-1.45313 v -7.17187 q 0,-0.25 0.14062,-0.40625 0.15625,-0.15625 0.40625,-0.15625 0.25,0 0.40625,0.15625 0.17188,0.15625 0.17188,0.40625 v 7.17187 q 0,0.75 0.4375,1.23438 0.4375,0.46875 1.125,0.46875 h 0.39062 q 0.23438,0 0.375,0.15625 0.15625,0.15625 0.15625,0.40625 0,0.25 -0.17187,0.40625 -0.17188,0.15625 -0.4375,0.15625 z m -3.64063,-6.73438 q -0.21875,0 -0.375,-0.14062 -0.14062,-0.14063 -0.14062,-0.34375 0,-0.23438 0.14062,-0.35938 0.15625,-0.14062 0.375,-0.14062 h 3.73438 q 0.21875,0 0.35937,0.14062 0.15625,0.125 0.15625,0.35938 0,0.20312 -0.15625,0.34375 -0.14062,0.14062 -0.35937,0.14062 z"
169 |        fill-rule="nonzero"
170 |        id="path22" />
171 |     <path
172 |        fill="#ffffff"
173 |        d="m 392.35425,309.71967 q -0.17188,0 -0.3125,-0.0937 -0.125,-0.0781 -0.23438,-0.28125 -0.85937,-1.76563 -1.28125,-3.53125 -0.42187,-1.76563 -0.42187,-3.54688 0,-1.76562 0.42187,-3.53125 0.42188,-1.76562 1.28125,-3.51562 0.1875,-0.39063 0.54688,-0.39063 0.23437,0 0.39062,0.17188 0.17188,0.15625 0.17188,0.39062 0,0.17188 -0.0937,0.32813 -1.60938,3.26562 -1.60938,6.5625 0,1.64062 0.40625,3.29687 0.42188,1.65625 1.21875,3.28125 0.0937,0.17188 0.0937,0.3125 0,0.23438 -0.17187,0.39063 -0.15625,0.15625 -0.40625,0.15625 z m 7.33014,-3.28125 q -1.1875,0 -2.21875,-0.45313 -1.03125,-0.45312 -1.82813,-1.26562 -0.78125,-0.8125 -1.21875,-1.875 -0.4375,-1.0625 -0.4375,-2.28125 0,-1.20313 0.42188,-2.26563 0.4375,-1.0625 1.21875,-1.85937 0.79687,-0.8125 1.82812,-1.26563 1.03125,-0.46875 2.23438,-0.46875 1.0625,0 1.92187,0.3125 0.85938,0.29688 1.67188,0.98438 0.125,0.0937 0.14062,0.23437 0.0312,0.14063 -0.0312,0.26563 -0.0469,0.125 -0.17187,0.1875 -0.0312,0.10937 -0.15625,0.17187 -0.10938,0.0625 -0.26563,0.0469 -0.14062,-0.0156 -0.29687,-0.14063 -0.5625,-0.5 -1.25,-0.73437 -0.67188,-0.25 -1.5625,-0.25 -0.95313,0 -1.78125,0.39062 -0.82813,0.375 -1.46875,1.04688 -0.625,0.65625 -0.98438,1.51562 -0.35937,0.85938 -0.35937,1.82813 0,1 0.35937,1.875 0.35938,0.85937 0.98438,1.51562 0.64062,0.65625 1.46875,1.03125 0.82812,0.375 1.78125,0.375 0.8125,0 1.53125,-0.26562 0.71875,-0.26563 1.35937,-0.76563 0.17188,-0.14062 0.35938,-0.10937 0.20312,0.0312 0.34375,0.17187 0.15625,0.14063 0.15625,0.375 0,0.125 -0.0469,0.21875 -0.0312,0.0937 -0.10937,0.20313 -0.75,0.6875 -1.67188,0.96875 -0.92187,0.28125 -1.92187,0.28125 z m 7.69354,-0.14063 q -0.57812,0 -1.04687,-0.3125 -0.46875,-0.32812 -0.71875,-0.89062 -0.25,-0.57813 -0.25,-1.32813 v -8.35937 q 0,-0.25 0.14062,-0.40625 0.15625,-0.15625 0.40625,-0.15625 0.25,0 0.40625,0.15625 0.15625,0.15625 0.15625,0.40625 v 8.35937 q 0,0.625 0.25,1.03125 0.26563,0.39063 0.65625,0.39063 h 0.375 q 0.21875,0 0.34375,0.15625 0.14063,0.14062 0.14063,0.39062 0,0.25 -0.1875,0.40625 -0.1875,0.15625 -0.48438,0.15625 z m 3.21118,0 q -0.26562,0 -0.42187,-0.15625 -0.15625,-0.15625 -0.15625,-0.42187 v -6.875 q 0,-0.25 0.15625,-0.40625 0.15625,-0.15625 0.42187,-0.15625 0.25,0 0.40625,0.15625 0.15625,0.15625 0.15625,0.40625 v 6.875 q 0,0.26562 -0.15625,0.42187 -0.15625,0.15625 -0.40625,0.15625 z m -0.0156,-9.54687 q -0.32813,0 -0.5625,-0.23438 -0.23438,-0.23437 -0.23438,-0.5625 0,-0.375 0.23438,-0.57812 0.25,-0.21875 0.57812,-0.21875 0.29688,0 0.53125,0.21875 0.25,0.20312 0.25,0.57812 0,0.32813 -0.23437,0.5625 -0.23438,0.23438 -0.5625,0.23438 z m 7.07944,9.625 q -1.1875,0 -2.10938,-0.51563 -0.90625,-0.53125 -1.4375,-1.45312 -0.51562,-0.92188 -0.51562,-2.10938 0,-1.20312 0.48437,-2.10937 0.5,-0.92188 1.35938,-1.45313 0.875,-0.53125 2,-0.53125 1.10937,0 1.9375,0.51563 0.82812,0.5 1.28125,1.39062 0.45312,0.89063 0.45312,2.04688 0,0.23437 -0.14062,0.375 -0.14063,0.125 -0.375,0.125 h -6.23438 v -0.9375 h 6.34375 l -0.625,0.45312 q 0.0156,-0.84375 -0.3125,-1.51562 -0.32812,-0.67188 -0.92187,-1.04688 -0.57813,-0.39062 -1.40625,-0.39062 -0.82813,0 -1.46875,0.40625 -0.625,0.39062 -0.96875,1.09375 -0.34375,0.6875 -0.34375,1.57812 0,0.89063 0.375,1.57813 0.39062,0.6875 1.0625,1.09375 0.6875,0.39062 1.5625,0.39062 0.53125,0 1.0625,-0.17187 0.53125,-0.1875 0.85937,-0.46875 0.15625,-0.14063 0.35938,-0.14063 0.21875,-0.0156 0.35937,0.10938 0.1875,0.17187 0.1875,0.375 0.0156,0.20312 -0.15625,0.35937 -0.48437,0.40625 -1.23437,0.6875 -0.75,0.26563 -1.4375,0.26563 z m 12.23333,-0.0781 q -0.25,0 -0.40625,-0.15625 -0.15625,-0.17187 -0.15625,-0.40625 v -3.8125 q 0,-0.90625 -0.34375,-1.48437 -0.34375,-0.59375 -0.9375,-0.875 -0.59375,-0.29688 -1.34375,-0.29688 -0.71875,0 -1.29687,0.28125 -0.57813,0.26563 -0.92188,0.75 -0.32812,0.48438 -0.32812,1.10938 h -0.8125 q 0.0312,-0.92188 0.5,-1.64063 0.46875,-0.73437 1.23437,-1.15625 0.78125,-0.42187 1.73438,-0.42187 1.04687,0 1.85937,0.4375 0.82813,0.4375 1.29688,1.28125 0.48437,0.82812 0.48437,2.01562 v 3.8125 q 0,0.23438 -0.17187,0.40625 -0.15625,0.15625 -0.39063,0.15625 z m -6.29687,0 q -0.26563,0 -0.42188,-0.15625 -0.15625,-0.15625 -0.15625,-0.40625 v -6.89062 q 0,-0.25 0.15625,-0.40625 0.15625,-0.15625 0.42188,-0.15625 0.25,0 0.40625,0.15625 0.15625,0.15625 0.15625,0.40625 v 6.89062 q 0,0.25 -0.15625,0.40625 -0.15625,0.15625 -0.40625,0.15625 z m 12.48483,0 q -0.78125,0 -1.39062,-0.35937 -0.59375,-0.375 -0.95313,-1.01563 -0.34375,-0.64062 -0.34375,-1.45312 v -7.17188 q 0,-0.25 0.14063,-0.40625 0.15625,-0.15625 0.40625,-0.15625 0.25,0 0.40625,0.15625 0.17187,0.15625 0.17187,0.40625 v 7.17188 q 0,0.75 0.4375,1.23437 0.4375,0.46875 1.125,0.46875 h 0.39063 q 0.23437,0 0.375,0.15625 0.15625,0.15625 0.15625,0.40625 0,0.25 -0.17188,0.40625 -0.17187,0.15625 -0.4375,0.15625 z m -3.64062,-6.73437 q -0.21875,0 -0.375,-0.14063 -0.14063,-0.14062 -0.14063,-0.34375 0,-0.23437 0.14063,-0.35937 0.15625,-0.14063 0.375,-0.14063 h 3.73437 q 0.21875,0 0.35938,0.14063 0.15625,0.125 0.15625,0.35937 0,0.20313 -0.15625,0.34375 -0.14063,0.14063 -0.35938,0.14063 z m 5.79806,10.15625 q -0.23437,0 -0.40625,-0.15625 -0.15625,-0.15625 -0.15625,-0.39063 0,-0.14062 0.0781,-0.3125 0.8125,-1.625 1.21875,-3.28125 0.42187,-1.65625 0.42187,-3.29687 0,-3.29688 -1.625,-6.5625 -0.0781,-0.15625 -0.0937,-0.32813 0,-0.23437 0.17188,-0.39062 0.17187,-0.17188 0.39062,-0.17188 0.375,0 0.5625,0.39063 0.85938,1.75 1.28125,3.51562 0.42188,1.76563 0.42188,3.53125 0,1.78125 -0.4375,3.54688 -0.42188,1.76562 -1.26563,3.53125 -0.125,0.20312 -0.25,0.28125 -0.125,0.0937 -0.3125,0.0937 z"
174 |        fill-rule="nonzero"
175 |        id="path23" />
176 |     <path
177 |        fill="#999999"
178 |        d="m 370.27295,324.2128 h 264.66144 v 39.59055 H 370.27295 Z"
179 |        fill-rule="evenodd"
180 |        id="path24" />
181 |     <path
182 |        fill="#ffffff"
183 |        d="m 448.76105,350.02432 q -1.01563,0 -1.89063,-0.29688 -0.875,-0.29687 -1.51562,-0.82812 -0.64063,-0.54688 -0.96875,-1.26563 -0.14063,-0.26562 -0.0156,-0.46875 0.125,-0.21875 0.40625,-0.3125 0.23438,-0.0625 0.4375,0.0625 0.21875,0.10938 0.32813,0.32813 0.25,0.46875 0.70312,0.84375 0.46875,0.35937 1.10938,0.5625 0.64062,0.1875 1.40625,0.1875 0.84375,0 1.5,-0.26563 0.65625,-0.28125 1.03125,-0.8125 0.39062,-0.54687 0.39062,-1.3125 0,-0.98437 -0.73437,-1.6875 -0.71875,-0.70312 -2.25,-0.89062 -1.875,-0.21875 -2.9375,-1.15625 -1.04688,-0.9375 -1.04688,-2.29688 0,-0.98437 0.51563,-1.70312 0.53125,-0.71875 1.4375,-1.10938 0.90625,-0.39062 2.09375,-0.39062 0.875,0 1.59375,0.28125 0.73437,0.28125 1.26562,0.73437 0.53125,0.45313 0.875,1 0.15625,0.25 0.0937,0.5 -0.0469,0.23438 -0.28125,0.35938 -0.23437,0.125 -0.48437,0.0469 -0.25,-0.0937 -0.375,-0.3125 -0.23438,-0.375 -0.59375,-0.70312 -0.35938,-0.32813 -0.875,-0.51563 -0.51563,-0.1875 -1.23438,-0.20312 -1.26562,0 -2.03125,0.53125 -0.76562,0.53125 -0.76562,1.5625 0,0.54687 0.28125,1 0.29687,0.45312 0.95312,0.78125 0.67188,0.32812 1.78125,0.48437 2,0.29688 2.96875,1.23438 0.96875,0.9375 0.96875,2.4375 0,0.85937 -0.3125,1.53125 -0.3125,0.67187 -0.875,1.14062 -0.5625,0.45313 -1.32812,0.6875 -0.76563,0.23438 -1.625,0.23438 z m 10.01392,-0.15625 q -0.84375,0 -1.51563,-0.39063 -0.65625,-0.40625 -1.04687,-1.09375 -0.375,-0.70312 -0.375,-1.60937 v -7.8125 q 0,-0.28125 0.15625,-0.45313 0.17187,-0.17187 0.45312,-0.17187 0.26563,0 0.4375,0.17187 0.1875,0.17188 0.1875,0.45313 v 7.8125 q 0,0.82812 0.46875,1.34375 0.48438,0.51562 1.23438,0.51562 h 0.4375 q 0.25,0 0.40625,0.1875 0.17187,0.17188 0.17187,0.4375 0,0.26563 -0.20312,0.4375 -0.1875,0.17188 -0.46875,0.17188 z m -3.98438,-7.35938 q -0.23437,0 -0.40625,-0.14062 -0.15625,-0.15625 -0.15625,-0.39063 0,-0.23437 0.15625,-0.39062 0.17188,-0.15625 0.40625,-0.15625 h 4.07813 q 0.25,0 0.40625,0.15625 0.15625,0.15625 0.15625,0.39062 0,0.23438 -0.15625,0.39063 -0.15625,0.14062 -0.40625,0.14062 z m 10.97888,7.4375 q -1.26562,0 -2.28125,-0.57812 -1,-0.59375 -1.59375,-1.59375 -0.57812,-1.01563 -0.57812,-2.29688 0,-1.25 0.5625,-2.25 0.57812,-1.01562 1.54687,-1.59375 0.98438,-0.59375 2.21875,-0.59375 1.07813,0 1.9375,0.45313 0.85938,0.45312 1.39063,1.20312 v -4.70312 q 0,-0.28125 0.17187,-0.45313 0.17188,-0.17187 0.45313,-0.17187 0.26562,0 0.4375,0.17187 0.1875,0.17188 0.1875,0.45313 v 7.5625 q -0.0312,1.23437 -0.625,2.23437 -0.57813,1 -1.57813,1.57813 -1,0.57812 -2.25,0.57812 z m 0,-1.125 q 0.9375,0 1.65625,-0.4375 0.73438,-0.4375 1.15625,-1.1875 0.42188,-0.75 0.42188,-1.71875 0,-0.9375 -0.42188,-1.6875 -0.42187,-0.76562 -1.15625,-1.20312 -0.71875,-0.4375 -1.65625,-0.4375 -0.90625,0 -1.64062,0.4375 -0.73438,0.4375 -1.17188,1.20312 -0.4375,0.75 -0.4375,1.6875 0,0.96875 0.4375,1.71875 0.4375,0.75 1.17188,1.1875 0.73437,0.4375 1.64062,0.4375 z m 8.20264,1.04688 q -0.28125,0 -0.45313,-0.17188 -0.15625,-0.17187 -0.15625,-0.45312 v -7.5 q 0,-0.29688 0.15625,-0.45313 0.17188,-0.17187 0.45313,-0.17187 0.28125,0 0.4375,0.17187 0.17187,0.15625 0.17187,0.45313 v 7.5 q 0,0.28125 -0.17187,0.45312 -0.15625,0.17188 -0.4375,0.17188 z m 0,-10.42188 q -0.35938,0 -0.625,-0.25 -0.25,-0.25 -0.25,-0.625 0,-0.40625 0.26562,-0.625 0.26563,-0.23437 0.625,-0.23437 0.32813,0 0.59375,0.23437 0.26563,0.21875 0.26563,0.625 0,0.375 -0.26563,0.625 -0.25,0.25 -0.60937,0.25 z m 7.7334,10.5 q -1.28125,0 -2.29688,-0.57812 -1,-0.57813 -1.57812,-1.57813 -0.57813,-1.01562 -0.57813,-2.29687 0,-1.28125 0.57813,-2.29688 0.57812,-1.01562 1.57812,-1.57812 1.01563,-0.57813 2.29688,-0.57813 1.28125,0 2.28125,0.57813 1,0.5625 1.57812,1.57812 0.57813,1.01563 0.59375,2.29688 0,1.28125 -0.59375,2.29687 -0.57812,1 -1.57812,1.57813 -1,0.57812 -2.28125,0.57812 z m 0,-1.125 q 0.9375,0 1.67187,-0.42187 0.73438,-0.4375 1.14063,-1.1875 0.42187,-0.75 0.42187,-1.71875 0,-0.95313 -0.42187,-1.70313 -0.40625,-0.76562 -1.14063,-1.20312 -0.73437,-0.4375 -1.67187,-0.4375 -0.92188,0 -1.65625,0.4375 -0.73438,0.4375 -1.17188,1.20312 -0.42187,0.75 -0.42187,1.70313 0,0.96875 0.42187,1.71875 0.4375,0.75 1.17188,1.1875 0.73437,0.42187 1.65625,0.42187 z m 13.22314,4.79688 q -0.26562,0 -0.45312,-0.1875 -0.17188,-0.17188 -0.17188,-0.4375 v -15.01563 q 0,-0.25 0.17188,-0.4375 0.1875,-0.1875 0.45312,-0.1875 0.26563,0 0.4375,0.1875 0.1875,0.1875 0.1875,0.4375 v 15.01563 q 0,0.26562 -0.1875,0.4375 -0.17187,0.1875 -0.4375,0.1875 z m 13.2565,-3.59375 q -1.01562,0 -1.89062,-0.29688 -0.875,-0.29687 -1.51563,-0.82812 -0.64062,-0.54688 -0.96875,-1.26563 -0.14062,-0.26562 -0.0156,-0.46875 0.125,-0.21875 0.40625,-0.3125 0.23437,-0.0625 0.4375,0.0625 0.21875,0.10938 0.32812,0.32813 0.25,0.46875 0.70313,0.84375 0.46875,0.35937 1.10937,0.5625 0.64063,0.1875 1.40625,0.1875 0.84375,0 1.5,-0.26563 0.65625,-0.28125 1.03125,-0.8125 0.39063,-0.54687 0.39063,-1.3125 0,-0.98437 -0.73438,-1.6875 -0.71875,-0.70312 -2.25,-0.89062 -1.875,-0.21875 -2.9375,-1.15625 -1.04687,-0.9375 -1.04687,-2.29688 0,-0.98437 0.51562,-1.70312 0.53125,-0.71875 1.4375,-1.10938 0.90625,-0.39062 2.09375,-0.39062 0.875,0 1.59375,0.28125 0.73438,0.28125 1.26563,0.73437 0.53125,0.45313 0.875,1 0.15628,0.25 0.0938,0.5 -0.0469,0.23438 -0.28128,0.35938 -0.23438,0.125 -0.48438,0.0469 -0.25,-0.0937 -0.375,-0.3125 -0.23437,-0.375 -0.59375,-0.70312 -0.35937,-0.32813 -0.875,-0.51563 -0.51562,-0.1875 -1.23437,-0.20312 -1.26563,0 -2.03125,0.53125 -0.76563,0.53125 -0.76563,1.5625 0,0.54687 0.28125,1 0.29688,0.45312 0.95313,0.78125 0.67187,0.32812 1.78125,0.48437 2,0.29688 2.96875,1.23438 0.96878,0.9375 0.96878,2.4375 0,0.85937 -0.3125,1.53125 -0.31253,0.67187 -0.87503,1.14062 -0.5625,0.45313 -1.32813,0.6875 -0.76562,0.23438 -1.625,0.23438 z m 10.59208,0 q -1.01563,0 -1.89063,-0.29688 -0.875,-0.29687 -1.51562,-0.82812 -0.64063,-0.54688 -0.96875,-1.26563 -0.14063,-0.26562 -0.0156,-0.46875 0.125,-0.21875 0.40625,-0.3125 0.23438,-0.0625 0.4375,0.0625 0.21875,0.10938 0.32813,0.32813 0.25,0.46875 0.70312,0.84375 0.46875,0.35937 1.10938,0.5625 0.64062,0.1875 1.40625,0.1875 0.84375,0 1.5,-0.26563 0.65625,-0.28125 1.03125,-0.8125 0.39062,-0.54687 0.39062,-1.3125 0,-0.98437 -0.73437,-1.6875 -0.71875,-0.70312 -2.25,-0.89062 -1.875,-0.21875 -2.9375,-1.15625 -1.04688,-0.9375 -1.04688,-2.29688 0,-0.98437 0.51563,-1.70312 0.53125,-0.71875 1.4375,-1.10938 0.90625,-0.39062 2.09375,-0.39062 0.875,0 1.59375,0.28125 0.73437,0.28125 1.26562,0.73437 0.53125,0.45313 0.875,1 0.15625,0.25 0.0937,0.5 -0.0469,0.23438 -0.28125,0.35938 -0.23437,0.125 -0.48437,0.0469 -0.25,-0.0937 -0.375,-0.3125 -0.23438,-0.375 -0.59375,-0.70312 -0.35938,-0.32813 -0.875,-0.51563 -0.51563,-0.1875 -1.23438,-0.20312 -1.26562,0 -2.03125,0.53125 -0.76562,0.53125 -0.76562,1.5625 0,0.54687 0.28125,1 0.29687,0.45312 0.95312,0.78125 0.67188,0.32812 1.78125,0.48437 2,0.29688 2.96875,1.23438 0.96875,0.9375 0.96875,2.4375 0,0.85937 -0.3125,1.53125 -0.3125,0.67187 -0.875,1.14062 -0.5625,0.45313 -1.32812,0.6875 -0.76563,0.23438 -1.625,0.23438 z m 7.37323,-0.15625 q -0.26563,0 -0.45313,-0.17188 -0.17187,-0.1875 -0.17187,-0.45312 v -11.25 q 0,-0.26563 0.17187,-0.4375 0.1875,-0.1875 0.45313,-0.1875 h 7.51562 q 0.25,0 0.4375,0.17187 0.1875,0.17188 0.1875,0.4375 0,0.25 -0.1875,0.42188 -0.1875,0.17187 -0.4375,0.17187 h -6.89062 v 4.42188 h 5.01562 q 0.26563,0 0.4375,0.17187 0.1875,0.17188 0.1875,0.4375 0,0.25 -0.1875,0.4375 -0.17187,0.17188 -0.4375,0.17188 h -5.01562 v 4.45312 h 6.89062 q 0.25,0 0.4375,0.1875 0.1875,0.17188 0.1875,0.40625 0,0.26563 -0.1875,0.4375 -0.1875,0.17188 -0.4375,0.17188 z m 16.66632,3.75 q -0.26563,0 -0.45313,-0.1875 -0.17187,-0.17188 -0.17187,-0.4375 v -15.01563 q 0,-0.25 0.17187,-0.4375 0.1875,-0.1875 0.45313,-0.1875 0.26562,0 0.4375,0.1875 0.1875,0.1875 0.1875,0.4375 v 15.01563 q 0,0.26562 -0.1875,0.4375 -0.17188,0.1875 -0.4375,0.1875 z m 9.36584,-3.75 q -0.375,0 -0.65625,-0.26563 -0.26562,-0.28125 -0.26562,-0.65625 0,-0.40625 0.26562,-0.67187 0.28125,-0.28125 0.65625,-0.28125 0.40625,0 0.67188,0.28125 0.28125,0.28125 0.28125,0.67187 0,0.375 -0.28125,0.65625 -0.26563,0.26563 -0.67188,0.26563 z m 3.73438,0 q -0.39063,0 -0.65625,-0.26563 -0.26563,-0.28125 -0.26563,-0.65625 0,-0.40625 0.26563,-0.67187 0.26562,-0.28125 0.65625,-0.28125 0.375,0 0.65625,0.28125 0.28125,0.28125 0.28125,0.67187 0,0.375 -0.26563,0.65625 -0.26562,0.26563 -0.67187,0.26563 z m 3.73437,0 q -0.40625,0 -0.67187,-0.26563 -0.26563,-0.28125 -0.26563,-0.65625 0,-0.39062 0.26563,-0.67187 0.26562,-0.28125 0.67187,-0.28125 0.375,0 0.64063,0.28125 0.28125,0.26562 0.28125,0.67187 0,0.375 -0.28125,0.65625 -0.26563,0.26563 -0.64063,0.26563 z"
184 |        fill-rule="nonzero"
185 |        id="path25" />
186 |     <path
187 |        fill="#999999"
188 |        d="m 382.9029,363.81628 h -18.60034 v 0 c -4.81516,0 -9.43311,-1.91281 -12.83792,-5.31766 -3.40485,-3.40484 -5.31766,-8.02276 -5.31766,-12.83792 v -21.52948 h 36.75592 z"
189 |        fill-rule="evenodd"
190 |        id="path26" />
191 |     <path
192 |        fill="#999999"
193 |        d="m 667.9974,324.28458 -0.016,20.17407 v 0 c -0.004,5.13288 -2.04706,10.05551 -5.67945,13.685 -3.63238,3.62949 -8.55664,5.66849 -13.68951,5.66849 h -19.82758 l 0.0315,-39.52756 z"
194 |        fill-rule="evenodd"
195 |        id="path27" />
196 |   </g>
197 | </svg>
198 | 


--------------------------------------------------------------------------------
/docs/images/mcp-inspector.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/mcp-inspector.png


--------------------------------------------------------------------------------
/docs/images/mcp-simple-diagram.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/mcp-simple-diagram.png


--------------------------------------------------------------------------------
/docs/images/og-image.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/og-image.png


--------------------------------------------------------------------------------
/docs/images/quickstart-approve.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/quickstart-approve.png


--------------------------------------------------------------------------------
/docs/images/quickstart-developer.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/quickstart-developer.png


--------------------------------------------------------------------------------
/docs/images/quickstart-dotnet-client.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/quickstart-dotnet-client.png


--------------------------------------------------------------------------------
/docs/images/quickstart-filesystem.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/quickstart-filesystem.png


--------------------------------------------------------------------------------
/docs/images/quickstart-menu.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/quickstart-menu.png


--------------------------------------------------------------------------------
/docs/images/quickstart-remote/1-add-connector.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/quickstart-remote/1-add-connector.png


--------------------------------------------------------------------------------
/docs/images/quickstart-remote/2-connect.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/quickstart-remote/2-connect.png


--------------------------------------------------------------------------------
/docs/images/quickstart-remote/3-auth.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/quickstart-remote/3-auth.png


--------------------------------------------------------------------------------
/docs/images/quickstart-remote/4-select-resources-menu.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/quickstart-remote/4-select-resources-menu.png


--------------------------------------------------------------------------------
/docs/images/quickstart-remote/5-select-prompts-resources.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/quickstart-remote/5-select-prompts-resources.png


--------------------------------------------------------------------------------
/docs/images/quickstart-remote/6-configure-tools.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/quickstart-remote/6-configure-tools.png


--------------------------------------------------------------------------------
/docs/images/quickstart-screenshot.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/quickstart-screenshot.png


--------------------------------------------------------------------------------
/docs/images/quickstart-slider.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/quickstart-slider.png


--------------------------------------------------------------------------------
/docs/images/quickstart-tools.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/quickstart-tools.png


--------------------------------------------------------------------------------
/docs/images/visual-indicator-mcp-tools.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/visual-indicator-mcp-tools.png


--------------------------------------------------------------------------------
/docs/images/weather-alerts.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/images/weather-alerts.png


--------------------------------------------------------------------------------
/docs/introduction.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Introduction
  3 | description: "Get started with the Model Context Protocol (MCP)"
  4 | ---
  5 | 
  6 | MCP is an open protocol that standardizes how applications provide context to LLMs. Think of MCP like a USB-C port for AI applications. Just as USB-C provides a standardized way to connect your devices to various peripherals and accessories, MCP provides a standardized way to connect AI models to different data sources and tools.
  7 | 
  8 | ## Why MCP?
  9 | 
 10 | MCP helps you build agents and complex workflows on top of LLMs. LLMs frequently need to integrate with data and tools, and MCP provides:
 11 | 
 12 | - A growing list of pre-built integrations that your LLM can directly plug into
 13 | - The flexibility to switch between LLM providers and vendors
 14 | - Best practices for securing your data within your infrastructure
 15 | 
 16 | ### General architecture
 17 | 
 18 | At its core, MCP follows a client-server architecture where a host application can connect to multiple servers:
 19 | 
 20 | ```mermaid
 21 | flowchart LR
 22 |     subgraph "Your Computer"
 23 |         Host["Host with MCP Client<br/>(Claude, IDEs, Tools)"]
 24 |         S1["MCP Server A"]
 25 |         S2["MCP Server B"]
 26 |         D1[("Local<br/>Data Source A")]
 27 |         Host <-->|"MCP Protocol"| S1
 28 |         Host <-->|"MCP Protocol"| S2
 29 |         S1 <--> D1
 30 |     end
 31 |     subgraph "Internet"
 32 |         S3["MCP Server C"]
 33 |         D2[("Remote<br/>Service B")]
 34 |         D3[("Remote<br/>Service C")]
 35 |         S2 <-->|"Web APIs"| D2
 36 |         S3 <-->|"Web APIs"| D3
 37 |     end
 38 |     Host <-->|"MCP Protocol"| S3
 39 | ```
 40 | 
 41 | - **MCP Hosts**: Programs like Claude Desktop, IDEs, or AI tools that want to access data through MCP
 42 | - **MCP Clients**: Protocol clients that maintain 1:1 connections with servers
 43 | - **MCP Servers**: Lightweight programs that each expose specific capabilities through the standardized Model Context Protocol
 44 | - **Local Data Sources**: Your computer's files, databases, and services that MCP servers can securely access
 45 | - **Remote Services**: External systems available over the internet (e.g., through APIs) that MCP servers can connect to
 46 | 
 47 | ## Get started
 48 | 
 49 | Choose the path that best fits your needs:
 50 | 
 51 | ### Quick Starts
 52 | 
 53 | <CardGroup cols={2}>
 54 |   <Card title="For Server Developers" icon="bolt" href="/quickstart/server">
 55 |     Get started building your own server to use in Claude for Desktop and other
 56 |     clients
 57 |   </Card>
 58 |   <Card title="For Client Developers" icon="bolt" href="/quickstart/client">
 59 |     Get started building your own client that can integrate with all MCP servers
 60 |   </Card>
 61 |   <Card title="For Claude Desktop Users" icon="bolt" href="/quickstart/user">
 62 |     Get started using pre-built servers in Claude for Desktop
 63 |   </Card>
 64 | </CardGroup>
 65 | 
 66 | ### Examples
 67 | 
 68 | <CardGroup cols={2}>
 69 |   <Card title="Example Servers" icon="grid" href="/examples">
 70 |     Check out our gallery of official MCP servers and implementations
 71 |   </Card>
 72 |   <Card title="Example Clients" icon="cubes" href="/clients">
 73 |     View the list of clients that support MCP integrations
 74 |   </Card>
 75 | </CardGroup>
 76 | 
 77 | ## Tutorials
 78 | 
 79 | <CardGroup cols={2}>
 80 |   <Card
 81 |     title="Building MCP with LLMs"
 82 |     icon="comments"
 83 |     href="/tutorials/building-mcp-with-llms"
 84 |   >
 85 |     Learn how to use LLMs like Claude to speed up your MCP development
 86 |   </Card>
 87 |   <Card title="Debugging Guide" icon="bug" href="/legacy/tools/debugging">
 88 |     Learn how to effectively debug MCP servers and integrations
 89 |   </Card>
 90 |   <Card
 91 |     title="MCP Inspector"
 92 |     icon="magnifying-glass"
 93 |     href="/legacy/tools/inspector"
 94 |   >
 95 |     Test and inspect your MCP servers with our interactive debugging tool
 96 |   </Card>
 97 |   <Card
 98 |     title="MCP Workshop (Video, 2hr)"
 99 |     icon="person-chalkboard"
100 |     href="https://www.youtube.com/watch?v=kQmXtrmQ5Zg"
101 |   >
102 |     <iframe src="https://www.youtube.com/embed/kQmXtrmQ5Zg"> </iframe>
103 |   </Card>
104 | </CardGroup>
105 | 
106 | ## Explore MCP
107 | 
108 | Dive deeper into MCP's core concepts and capabilities:
109 | 
110 | <CardGroup cols={2}>
111 |   <Card
112 |     title="Core architecture"
113 |     icon="sitemap"
114 |     href="/legacy/concepts/architecture"
115 |   >
116 |     Understand how MCP connects clients, servers, and LLMs
117 |   </Card>
118 |   <Card title="Resources" icon="database" href="/legacy/concepts/resources">
119 |     Expose data and content from your servers to LLMs
120 |   </Card>
121 |   <Card title="Prompts" icon="message" href="/legacy/concepts/prompts">
122 |     Create reusable prompt templates and workflows
123 |   </Card>
124 |   <Card title="Tools" icon="wrench" href="/legacy/concepts/tools">
125 |     Enable LLMs to perform actions through your server
126 |   </Card>
127 |   <Card title="Sampling" icon="robot" href="/legacy/concepts/sampling">
128 |     Let your servers request completions from LLMs
129 |   </Card>
130 |   <Card
131 |     title="Transports"
132 |     icon="network-wired"
133 |     href="/legacy/concepts/transports"
134 |   >
135 |     Learn about MCP's communication mechanism
136 |   </Card>
137 | </CardGroup>
138 | 
139 | ## Contributing
140 | 
141 | Want to contribute? Check out our [Contributing Guide](/development/contributing) to learn how you can help improve MCP.
142 | 
143 | ## Support and Feedback
144 | 
145 | Here's how to get help or provide feedback:
146 | 
147 | - For bug reports and feature requests related to the MCP specification, SDKs, or documentation (open source), please [create a GitHub issue](https://github.com/modelcontextprotocol)
148 | - For discussions or Q&A about the MCP specification, use the [specification discussions](https://github.com/modelcontextprotocol/specification/discussions)
149 | - For discussions or Q&A about other MCP open source components, use the [organization discussions](https://github.com/orgs/modelcontextprotocol/discussions)
150 | - For bug reports, feature requests, and questions related to Claude.app and claude.ai's MCP integration, please see Anthropic's guide on [How to Get Support](https://support.anthropic.com/en/articles/9015913-how-to-get-support)
151 | 


--------------------------------------------------------------------------------
/docs/legacy/concepts/architecture.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: "Core architecture"
  3 | description: "Understand how MCP connects clients, servers, and LLMs"
  4 | ---
  5 | 
  6 | The Model Context Protocol (MCP) is built on a flexible, extensible architecture that enables seamless communication between LLM applications and integrations. This document covers the core architectural components and concepts.
  7 | 
  8 | ## Overview
  9 | 
 10 | MCP follows a client-server architecture where:
 11 | 
 12 | - **Hosts** are LLM applications (like Claude Desktop or IDEs) that initiate connections
 13 | - **Clients** maintain 1:1 connections with servers, inside the host application
 14 | - **Servers** provide context, tools, and prompts to clients
 15 | 
 16 | ```mermaid
 17 | flowchart LR
 18 |     subgraph "Host"
 19 |         client1[MCP Client]
 20 |         client2[MCP Client]
 21 |     end
 22 |     subgraph "Server Process"
 23 |         server1[MCP Server]
 24 |     end
 25 |     subgraph "Server Process"
 26 |         server2[MCP Server]
 27 |     end
 28 | 
 29 |     client1 <-->|Transport Layer| server1
 30 |     client2 <-->|Transport Layer| server2
 31 | ```
 32 | 
 33 | ## Core components
 34 | 
 35 | ### Protocol layer
 36 | 
 37 | The protocol layer handles message framing, request/response linking, and high-level communication patterns.
 38 | 
 39 | <CodeGroup>
 40 | 
 41 | ```typescript TypeScript
 42 | class Protocol<Request, Notification, Result> {
 43 |   // Handle incoming requests
 44 |   setRequestHandler<T>(
 45 |     schema: T,
 46 |     handler: (request: T, extra: RequestHandlerExtra) => Promise<Result>,
 47 |   ): void;
 48 | 
 49 |   // Handle incoming notifications
 50 |   setNotificationHandler<T>(
 51 |     schema: T,
 52 |     handler: (notification: T) => Promise<void>,
 53 |   ): void;
 54 | 
 55 |   // Send requests and await responses
 56 |   request<T>(request: Request, schema: T, options?: RequestOptions): Promise<T>;
 57 | 
 58 |   // Send one-way notifications
 59 |   notification(notification: Notification): Promise<void>;
 60 | }
 61 | ```
 62 | 
 63 | ```python Python
 64 | class Session(BaseSession[RequestT, NotificationT, ResultT]):
 65 |     async def send_request(
 66 |         self,
 67 |         request: RequestT,
 68 |         result_type: type[Result]
 69 |     ) -> Result:
 70 |         """Send request and wait for response. Raises McpError if response contains error."""
 71 |         # Request handling implementation
 72 | 
 73 |     async def send_notification(
 74 |         self,
 75 |         notification: NotificationT
 76 |     ) -> None:
 77 |         """Send one-way notification that doesn't expect response."""
 78 |         # Notification handling implementation
 79 | 
 80 |     async def _received_request(
 81 |         self,
 82 |         responder: RequestResponder[ReceiveRequestT, ResultT]
 83 |     ) -> None:
 84 |         """Handle incoming request from other side."""
 85 |         # Request handling implementation
 86 | 
 87 |     async def _received_notification(
 88 |         self,
 89 |         notification: ReceiveNotificationT
 90 |     ) -> None:
 91 |         """Handle incoming notification from other side."""
 92 |         # Notification handling implementation
 93 | ```
 94 | 
 95 | </CodeGroup>
 96 | 
 97 | Key classes include:
 98 | 
 99 | - `Protocol`
100 | - `Client`
101 | - `Server`
102 | 
103 | ### Transport layer
104 | 
105 | The transport layer handles the actual communication between clients and servers. MCP supports multiple transport mechanisms:
106 | 
107 | 1. **Stdio transport**
108 |    - Uses standard input/output for communication
109 |    - Ideal for local processes
110 | 
111 | 2. **Streamable HTTP transport**
112 |    - Uses HTTP with optional Server-Sent Events for streaming
113 |    - HTTP POST for client-to-server messages
114 | 
115 | All transports use [JSON-RPC](https://www.jsonrpc.org/) 2.0 to exchange messages. See the [specification](/specification/) for detailed information about the Model Context Protocol message format.
116 | 
117 | ### Message types
118 | 
119 | MCP has these main types of messages:
120 | 
121 | 1. **Requests** expect a response from the other side:
122 | 
123 |    ```typescript
124 |    interface Request {
125 |      method: string;
126 |      params?: { ... };
127 |    }
128 |    ```
129 | 
130 | 2. **Results** are successful responses to requests:
131 | 
132 |    ```typescript
133 |    interface Result {
134 |      [key: string]: unknown;
135 |    }
136 |    ```
137 | 
138 | 3. **Errors** indicate that a request failed:
139 | 
140 |    ```typescript
141 |    interface Error {
142 |      code: number;
143 |      message: string;
144 |      data?: unknown;
145 |    }
146 |    ```
147 | 
148 | 4. **Notifications** are one-way messages that don't expect a response:
149 |    ```typescript
150 |    interface Notification {
151 |      method: string;
152 |      params?: { ... };
153 |    }
154 |    ```
155 | 
156 | ## Connection lifecycle
157 | 
158 | ### 1. Initialization
159 | 
160 | ```mermaid
161 | sequenceDiagram
162 |     participant Client
163 |     participant Server
164 | 
165 |     Client->>Server: initialize request
166 |     Server->>Client: initialize response
167 |     Client->>Server: initialized notification
168 | 
169 |     Note over Client,Server: Connection ready for use
170 | ```
171 | 
172 | 1. Client sends `initialize` request with protocol version and capabilities
173 | 2. Server responds with its protocol version and capabilities
174 | 3. Client sends `initialized` notification as acknowledgment
175 | 4. Normal message exchange begins
176 | 
177 | ### 2. Message exchange
178 | 
179 | After initialization, the following patterns are supported:
180 | 
181 | - **Request-Response**: Client or server sends requests, the other responds
182 | - **Notifications**: Either party sends one-way messages
183 | 
184 | ### 3. Termination
185 | 
186 | Either party can terminate the connection:
187 | 
188 | - Clean shutdown via `close()`
189 | - Transport disconnection
190 | - Error conditions
191 | 
192 | ## Error handling
193 | 
194 | MCP defines these standard error codes:
195 | 
196 | ```typescript
197 | enum ErrorCode {
198 |   // Standard JSON-RPC error codes
199 |   ParseError = -32700,
200 |   InvalidRequest = -32600,
201 |   MethodNotFound = -32601,
202 |   InvalidParams = -32602,
203 |   InternalError = -32603,
204 | }
205 | ```
206 | 
207 | SDKs and applications can define their own error codes above -32000.
208 | 
209 | Errors are propagated through:
210 | 
211 | - Error responses to requests
212 | - Error events on transports
213 | - Protocol-level error handlers
214 | 
215 | ## Implementation example
216 | 
217 | Here's a basic example of implementing an MCP server:
218 | 
219 | <CodeGroup>
220 | 
221 | ```typescript TypeScript
222 | import { Server } from "@modelcontextprotocol/sdk/server/index.js";
223 | import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
224 | 
225 | const server = new Server(
226 |   {
227 |     name: "example-server",
228 |     version: "1.0.0",
229 |   },
230 |   {
231 |     capabilities: {
232 |       resources: {},
233 |     },
234 |   },
235 | );
236 | 
237 | // Handle requests
238 | server.setRequestHandler(ListResourcesRequestSchema, async () => {
239 |   return {
240 |     resources: [
241 |       {
242 |         uri: "example://resource",
243 |         name: "Example Resource",
244 |       },
245 |     ],
246 |   };
247 | });
248 | 
249 | // Connect transport
250 | const transport = new StdioServerTransport();
251 | await server.connect(transport);
252 | ```
253 | 
254 | ```python Python
255 | import asyncio
256 | import mcp.types as types
257 | from mcp.server import Server
258 | from mcp.server.stdio import stdio_server
259 | 
260 | app = Server("example-server")
261 | 
262 | @app.list_resources()
263 | async def list_resources() -> list[types.Resource]:
264 |     return [
265 |         types.Resource(
266 |             uri="example://resource",
267 |             name="Example Resource"
268 |         )
269 |     ]
270 | 
271 | async def main():
272 |     async with stdio_server() as streams:
273 |         await app.run(
274 |             streams[0],
275 |             streams[1],
276 |             app.create_initialization_options()
277 |         )
278 | 
279 | if __name__ == "__main__":
280 |     asyncio.run(main())
281 | ```
282 | 
283 | </CodeGroup>
284 | 
285 | ## Best practices
286 | 
287 | ### Transport selection
288 | 
289 | 1. **Local communication**
290 |    - Use stdio transport for local processes
291 |    - Efficient for same-machine communication
292 |    - Simple process management
293 | 
294 | 2. **Remote communication**
295 |    - Use Streamable HTTP for scenarios requiring HTTP compatibility
296 |    - Consider security implications including authentication and authorization
297 | 
298 | ### Message handling
299 | 
300 | 1. **Request processing**
301 |    - Validate inputs thoroughly
302 |    - Use type-safe schemas
303 |    - Handle errors gracefully
304 |    - Implement timeouts
305 | 
306 | 2. **Progress reporting**
307 |    - Use progress tokens for long operations
308 |    - Report progress incrementally
309 |    - Include total progress when known
310 | 
311 | 3. **Error management**
312 |    - Use appropriate error codes
313 |    - Include helpful error messages
314 |    - Clean up resources on errors
315 | 
316 | ## Security considerations
317 | 
318 | 1. **Transport security**
319 |    - Use TLS for remote connections
320 |    - Validate connection origins
321 |    - Implement authentication when needed
322 | 
323 | 2. **Message validation**
324 |    - Validate all incoming messages
325 |    - Sanitize inputs
326 |    - Check message size limits
327 |    - Verify JSON-RPC format
328 | 
329 | 3. **Resource protection**
330 |    - Implement access controls
331 |    - Validate resource paths
332 |    - Monitor resource usage
333 |    - Rate limit requests
334 | 
335 | 4. **Error handling**
336 |    - Don't leak sensitive information
337 |    - Log security-relevant errors
338 |    - Implement proper cleanup
339 |    - Handle DoS scenarios
340 | 
341 | ## Debugging and monitoring
342 | 
343 | 1. **Logging**
344 |    - Log protocol events
345 |    - Track message flow
346 |    - Monitor performance
347 |    - Record errors
348 | 
349 | 2. **Diagnostics**
350 |    - Implement health checks
351 |    - Monitor connection state
352 |    - Track resource usage
353 |    - Profile performance
354 | 
355 | 3. **Testing**
356 |    - Test different transports
357 |    - Verify error handling
358 |    - Check edge cases
359 |    - Load test servers
360 | 


--------------------------------------------------------------------------------
/docs/legacy/concepts/elicitation.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: "Elicitation"
  3 | description: "Interactive information gathering in MCP"
  4 | ---
  5 | 
  6 | Elicitation is a powerful MCP feature that allows servers to request additional information from users during interactions. This enables dynamic workflows where servers can gather necessary data on-demand while maintaining user control and privacy.
  7 | 
  8 | <Info>
  9 |   Elicitation is newly introduced in the MCP specification [revision
 10 |   2025-06-18](/specification/2025-06-18/client/elicitation).
 11 | </Info>
 12 | 
 13 | ## What is Elicitation?
 14 | 
 15 | Elicitation provides a standardized way for MCP servers to request structured information from users through the client. Instead of requiring all information upfront, servers can ask for specific data exactly when needed, creating more natural and flexible interactions.
 16 | 
 17 | For example, a server might:
 18 | 
 19 | - Request a username when connecting to a service
 20 | - Ask for configuration preferences during setup
 21 | - Gather project details when creating new resources
 22 | 
 23 | ## How Elicitation Works
 24 | 
 25 | The elicitation flow is straightforward:
 26 | 
 27 | 1. Server sends an elicitation request with a message and expected data structure
 28 | 2. Client presents the request to the user with appropriate UI
 29 | 3. User accepts, declines, or cancels the request
 30 | 4. Client validates and returns the response to the server
 31 | 5. Server continues processing with the provided information
 32 | 
 33 | ## Request Structure
 34 | 
 35 | Elicitation requests include two key components:
 36 | 
 37 | ### Message
 38 | 
 39 | A clear, human-readable explanation of what information is needed and why.
 40 | 
 41 | ### Schema
 42 | 
 43 | A JSON Schema that defines the expected structure of the response. The schema is intentionally limited to flat objects with primitive types to simplify client implementation.
 44 | 
 45 | Example request:
 46 | 
 47 | ```json
 48 | {
 49 |   "message": "Please provide your GitHub username",
 50 |   "requestedSchema": {
 51 |     "type": "object",
 52 |     "properties": {
 53 |       "username": {
 54 |         "type": "string",
 55 |         "title": "GitHub Username",
 56 |         "description": "Your GitHub username (e.g., octocat)"
 57 |       }
 58 |     },
 59 |     "required": ["username"]
 60 |   }
 61 | }
 62 | ```
 63 | 
 64 | ## Supported Data Types
 65 | 
 66 | Elicitation supports these primitive types:
 67 | 
 68 | ### Text Input
 69 | 
 70 | ```json
 71 | {
 72 |   "type": "string",
 73 |   "title": "Project Name",
 74 |   "description": "Name for your new project",
 75 |   "minLength": 3,
 76 |   "maxLength": 50
 77 | }
 78 | ```
 79 | 
 80 | ### Numbers
 81 | 
 82 | ```json
 83 | {
 84 |   "type": "number",
 85 |   "title": "Port Number",
 86 |   "description": "Port to run the server on",
 87 |   "minimum": 1024,
 88 |   "maximum": 65535
 89 | }
 90 | ```
 91 | 
 92 | ### Boolean Choices
 93 | 
 94 | ```json
 95 | {
 96 |   "type": "boolean",
 97 |   "title": "Enable Analytics",
 98 |   "description": "Send anonymous usage statistics",
 99 |   "default": false
100 | }
101 | ```
102 | 
103 | ### Selection Lists
104 | 
105 | ```json
106 | {
107 |   "type": "string",
108 |   "title": "Environment",
109 |   "enum": ["development", "staging", "production"],
110 |   "enumNames": ["Development", "Staging", "Production"]
111 | }
112 | ```
113 | 
114 | ## User Response Actions
115 | 
116 | Users can respond to elicitation requests in three ways:
117 | 
118 | 1. **Accept**: User provides the requested information
119 | 2. **Decline**: User explicitly refuses to provide information
120 | 3. **Cancel**: User dismisses without making a choice (e.g., closes dialog)
121 | 
122 | Servers should handle each response appropriately:
123 | 
124 | - Accept → Process the provided data
125 | - Decline → Offer alternatives or adjust workflow
126 | - Cancel → Consider retrying later or using defaults
127 | 
128 | ## Best Practices
129 | 
130 | When implementing elicitation:
131 | 
132 | ### For Servers
133 | 
134 | 1. **Be Clear**: Write descriptive messages explaining why information is needed
135 | 2. **Be Minimal**: Only request essential information
136 | 3. **Be Flexible**: Have fallbacks for declined or cancelled requests
137 | 4. **Be Timely**: Request information when actually needed, not preemptively
138 | 5. **Be Respectful**: Never request sensitive information like passwords or tokens
139 | 
140 | ### For Clients
141 | 
142 | 1. **Be Transparent**: Clearly show which server is requesting information
143 | 2. **Be Protective**: Allow users to review and modify responses
144 | 3. **Be Validating**: Check responses against the provided schema
145 | 4. **Be Empowering**: Make decline and cancel options prominent
146 | 5. **Be Limiting**: Implement rate limiting to prevent spam
147 | 
148 | ## Common Use Cases
149 | 
150 | Elicitation excels in scenarios like:
151 | 
152 | - **Initial Setup**: Gathering configuration during first-time setup
153 | - **Dynamic Workflows**: Requesting context-specific information
154 | - **User Preferences**: Collecting optional settings and preferences
155 | - **Project Details**: Gathering metadata about resources being created
156 | - **Service Integration**: Requesting usernames or IDs for external services
157 | 
158 | ## Example Workflow
159 | 
160 | Here's a typical elicitation interaction:
161 | 
162 | ```mermaid
163 | sequenceDiagram
164 |     participant User
165 |     participant Client
166 |     participant Server
167 | 
168 |     Note over Server,Client: Server initiates elicitation
169 |     Server->>Client: elicitation/create
170 | 
171 |     Note over Client,User: Human interaction
172 |     Client->>User: Present elicitation UI
173 |     User-->>Client: Provide requested information
174 | 
175 |     Note over Server,Client: Complete request
176 |     Client-->>Server: Return user response
177 | 
178 |     Note over Server: Continue processing with new information
179 | ```
180 | 
181 | ## Security Considerations
182 | 
183 | <Warning>
184 |   Servers must never use elicitation to request passwords, API keys, tokens, or
185 |   other sensitive credentials. Use proper authentication flows instead.
186 | </Warning>
187 | 
188 | Key security guidelines:
189 | 
190 | 1. Servers should only request non-sensitive information
191 | 2. Clients should clearly indicate which server is requesting data
192 | 3. Users should always have the option to decline
193 | 4. Responses should be validated against the schema
194 | 5. Rate limiting should prevent request flooding
195 | 
196 | ## Implementation Example
197 | 
198 | Here's how a server might use elicitation to gather project information:
199 | 
200 | ```typescript
201 | // Server requests project details
202 | const response = await client.request("elicitation/create", {
203 |   message: "Let's set up your new project",
204 |   requestedSchema: {
205 |     type: "object",
206 |     properties: {
207 |       name: {
208 |         type: "string",
209 |         title: "Project Name",
210 |         description: "A descriptive name for your project",
211 |       },
212 |       framework: {
213 |         type: "string",
214 |         title: "Framework",
215 |         enum: ["react", "vue", "angular", "none"],
216 |         enumNames: ["React", "Vue", "Angular", "None"],
217 |       },
218 |       useTypeScript: {
219 |         type: "boolean",
220 |         title: "Use TypeScript",
221 |         default: true,
222 |       },
223 |     },
224 |     required: ["name", "framework"],
225 |   },
226 | });
227 | 
228 | // Handle the response
229 | if (response.action === "accept") {
230 |   // Create project with provided details
231 |   await createProject(response.content);
232 | } else if (response.action === "decline") {
233 |   // Use defaults or offer alternatives
234 |   await createDefaultProject();
235 | } else {
236 |   // User cancelled - perhaps retry later
237 |   console.log("Project creation cancelled");
238 | }
239 | ```
240 | 
241 | This approach creates a smooth, interactive experience while respecting user control and privacy.
242 | 


--------------------------------------------------------------------------------
/docs/legacy/concepts/prompts.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: "Prompts"
  3 | description: "Create reusable prompt templates and workflows"
  4 | ---
  5 | 
  6 | Prompts enable servers to define reusable prompt templates and workflows that clients can easily surface to users and LLMs. They provide a powerful way to standardize and share common LLM interactions.
  7 | 
  8 | <Note>
  9 | 
 10 | Prompts are designed to be **user-controlled**, meaning they are exposed from servers to clients with the intention of the user being able to explicitly select them for use.
 11 | 
 12 | </Note>
 13 | 
 14 | ## Overview
 15 | 
 16 | Prompts in MCP are predefined templates that can:
 17 | 
 18 | - Accept dynamic arguments
 19 | - Include context from resources
 20 | - Chain multiple interactions
 21 | - Guide specific workflows
 22 | - Surface as UI elements (like slash commands)
 23 | 
 24 | ## Prompt structure
 25 | 
 26 | Each prompt is defined with:
 27 | 
 28 | ```typescript
 29 | {
 30 |   name: string;              // Unique identifier for the prompt
 31 |   description?: string;      // Human-readable description
 32 |   arguments?: [              // Optional list of arguments
 33 |     {
 34 |       name: string;          // Argument identifier
 35 |       description?: string;  // Argument description
 36 |       required?: boolean;    // Whether argument is required
 37 |     }
 38 |   ]
 39 | }
 40 | ```
 41 | 
 42 | ## Discovering prompts
 43 | 
 44 | Clients can discover available prompts by sending a `prompts/list` request:
 45 | 
 46 | ```typescript
 47 | // Request
 48 | {
 49 |   method: "prompts/list";
 50 | }
 51 | 
 52 | // Response
 53 | {
 54 |   prompts: [
 55 |     {
 56 |       name: "analyze-code",
 57 |       description: "Analyze code for potential improvements",
 58 |       arguments: [
 59 |         {
 60 |           name: "language",
 61 |           description: "Programming language",
 62 |           required: true,
 63 |         },
 64 |       ],
 65 |     },
 66 |   ];
 67 | }
 68 | ```
 69 | 
 70 | ## Using prompts
 71 | 
 72 | To use a prompt, clients make a `prompts/get` request:
 73 | 
 74 | ````typescript
 75 | // Request
 76 | {
 77 |   method: "prompts/get",
 78 |   params: {
 79 |     name: "analyze-code",
 80 |     arguments: {
 81 |       language: "python"
 82 |     }
 83 |   }
 84 | }
 85 | 
 86 | // Response
 87 | {
 88 |   description: "Analyze Python code for potential improvements",
 89 |   messages: [
 90 |     {
 91 |       role: "user",
 92 |       content: {
 93 |         type: "text",
 94 |         text: "Please analyze the following Python code for potential improvements:\n\n```python\ndef calculate_sum(numbers):\n    total = 0\n    for num in numbers:\n        total = total + num\n    return total\n\nresult = calculate_sum([1, 2, 3, 4, 5])\nprint(result)\n```"
 95 |       }
 96 |     }
 97 |   ]
 98 | }
 99 | ````
100 | 
101 | ## Dynamic prompts
102 | 
103 | Prompts can be dynamic and include:
104 | 
105 | ### Embedded resource context
106 | 
107 | ```json
108 | {
109 |   "name": "analyze-project",
110 |   "description": "Analyze project logs and code",
111 |   "arguments": [
112 |     {
113 |       "name": "timeframe",
114 |       "description": "Time period to analyze logs",
115 |       "required": true
116 |     },
117 |     {
118 |       "name": "fileUri",
119 |       "description": "URI of code file to review",
120 |       "required": true
121 |     }
122 |   ]
123 | }
124 | ```
125 | 
126 | When handling the `prompts/get` request:
127 | 
128 | ```json
129 | {
130 |   "messages": [
131 |     {
132 |       "role": "user",
133 |       "content": {
134 |         "type": "text",
135 |         "text": "Analyze these system logs and the code file for any issues:"
136 |       }
137 |     },
138 |     {
139 |       "role": "user",
140 |       "content": {
141 |         "type": "resource",
142 |         "resource": {
143 |           "uri": "logs://recent?timeframe=1h",
144 |           "text": "[2024-03-14 15:32:11] ERROR: Connection timeout in network.py:127\n[2024-03-14 15:32:15] WARN: Retrying connection (attempt 2/3)\n[2024-03-14 15:32:20] ERROR: Max retries exceeded",
145 |           "mimeType": "text/plain"
146 |         }
147 |       }
148 |     },
149 |     {
150 |       "role": "user",
151 |       "content": {
152 |         "type": "resource",
153 |         "resource": {
154 |           "uri": "file:///path/to/code.py",
155 |           "text": "def connect_to_service(timeout=30):\n    retries = 3\n    for attempt in range(retries):\n        try:\n            return establish_connection(timeout)\n        except TimeoutError:\n            if attempt == retries - 1:\n                raise\n            time.sleep(5)\n\ndef establish_connection(timeout):\n    # Connection implementation\n    pass",
156 |           "mimeType": "text/x-python"
157 |         }
158 |       }
159 |     }
160 |   ]
161 | }
162 | ```
163 | 
164 | ### Multi-step workflows
165 | 
166 | ```typescript
167 | const debugWorkflow = {
168 |   name: "debug-error",
169 |   async getMessages(error: string) {
170 |     return [
171 |       {
172 |         role: "user",
173 |         content: {
174 |           type: "text",
175 |           text: `Here's an error I'm seeing: ${error}`,
176 |         },
177 |       },
178 |       {
179 |         role: "assistant",
180 |         content: {
181 |           type: "text",
182 |           text: "I'll help analyze this error. What have you tried so far?",
183 |         },
184 |       },
185 |       {
186 |         role: "user",
187 |         content: {
188 |           type: "text",
189 |           text: "I've tried restarting the service, but the error persists.",
190 |         },
191 |       },
192 |     ];
193 |   },
194 | };
195 | ```
196 | 
197 | ## Example implementation
198 | 
199 | Here's a complete example of implementing prompts in an MCP server:
200 | 
201 | <CodeGroup>
202 | 
203 | ```typescript TypeScript
204 | import { Server } from "@modelcontextprotocol/sdk/server";
205 | import {
206 |   ListPromptsRequestSchema,
207 |   GetPromptRequestSchema,
208 | } from "@modelcontextprotocol/sdk/types";
209 | 
210 | const PROMPTS = {
211 |   "git-commit": {
212 |     name: "git-commit",
213 |     description: "Generate a Git commit message",
214 |     arguments: [
215 |       {
216 |         name: "changes",
217 |         description: "Git diff or description of changes",
218 |         required: true,
219 |       },
220 |     ],
221 |   },
222 |   "explain-code": {
223 |     name: "explain-code",
224 |     description: "Explain how code works",
225 |     arguments: [
226 |       {
227 |         name: "code",
228 |         description: "Code to explain",
229 |         required: true,
230 |       },
231 |       {
232 |         name: "language",
233 |         description: "Programming language",
234 |         required: false,
235 |       },
236 |     ],
237 |   },
238 | };
239 | 
240 | const server = new Server(
241 |   {
242 |     name: "example-prompts-server",
243 |     version: "1.0.0",
244 |   },
245 |   {
246 |     capabilities: {
247 |       prompts: {},
248 |     },
249 |   },
250 | );
251 | 
252 | // List available prompts
253 | server.setRequestHandler(ListPromptsRequestSchema, async () => {
254 |   return {
255 |     prompts: Object.values(PROMPTS),
256 |   };
257 | });
258 | 
259 | // Get specific prompt
260 | server.setRequestHandler(GetPromptRequestSchema, async (request) => {
261 |   const prompt = PROMPTS[request.params.name];
262 |   if (!prompt) {
263 |     throw new Error(`Prompt not found: ${request.params.name}`);
264 |   }
265 | 
266 |   if (request.params.name === "git-commit") {
267 |     return {
268 |       messages: [
269 |         {
270 |           role: "user",
271 |           content: {
272 |             type: "text",
273 |             text: `Generate a concise but descriptive commit message for these changes:\n\n${request.params.arguments?.changes}`,
274 |           },
275 |         },
276 |       ],
277 |     };
278 |   }
279 | 
280 |   if (request.params.name === "explain-code") {
281 |     const language = request.params.arguments?.language || "Unknown";
282 |     return {
283 |       messages: [
284 |         {
285 |           role: "user",
286 |           content: {
287 |             type: "text",
288 |             text: `Explain how this ${language} code works:\n\n${request.params.arguments?.code}`,
289 |           },
290 |         },
291 |       ],
292 |     };
293 |   }
294 | 
295 |   throw new Error("Prompt implementation not found");
296 | });
297 | ```
298 | 
299 | ```python Python
300 | from mcp.server import Server
301 | import mcp.types as types
302 | 
303 | # Define available prompts
304 | PROMPTS = {
305 |     "git-commit": types.Prompt(
306 |         name="git-commit",
307 |         description="Generate a Git commit message",
308 |         arguments=[
309 |             types.PromptArgument(
310 |                 name="changes",
311 |                 description="Git diff or description of changes",
312 |                 required=True
313 |             )
314 |         ],
315 |     ),
316 |     "explain-code": types.Prompt(
317 |         name="explain-code",
318 |         description="Explain how code works",
319 |         arguments=[
320 |             types.PromptArgument(
321 |                 name="code",
322 |                 description="Code to explain",
323 |                 required=True
324 |             ),
325 |             types.PromptArgument(
326 |                 name="language",
327 |                 description="Programming language",
328 |                 required=False
329 |             )
330 |         ],
331 |     )
332 | }
333 | 
334 | # Initialize server
335 | app = Server("example-prompts-server")
336 | 
337 | @app.list_prompts()
338 | async def list_prompts() -> list[types.Prompt]:
339 |     return list(PROMPTS.values())
340 | 
341 | @app.get_prompt()
342 | async def get_prompt(
343 |     name: str, arguments: dict[str, str] | None = None
344 | ) -> types.GetPromptResult:
345 |     if name not in PROMPTS:
346 |         raise ValueError(f"Prompt not found: {name}")
347 | 
348 |     if name == "git-commit":
349 |         changes = arguments.get("changes") if arguments else ""
350 |         return types.GetPromptResult(
351 |             messages=[
352 |                 types.PromptMessage(
353 |                     role="user",
354 |                     content=types.TextContent(
355 |                         type="text",
356 |                         text=f"Generate a concise but descriptive commit message "
357 |                         f"for these changes:\n\n{changes}"
358 |                     )
359 |                 )
360 |             ]
361 |         )
362 | 
363 |     if name == "explain-code":
364 |         code = arguments.get("code") if arguments else ""
365 |         language = arguments.get("language", "Unknown") if arguments else "Unknown"
366 |         return types.GetPromptResult(
367 |             messages=[
368 |                 types.PromptMessage(
369 |                     role="user",
370 |                     content=types.TextContent(
371 |                         type="text",
372 |                         text=f"Explain how this {language} code works:\n\n{code}"
373 |                     )
374 |                 )
375 |             ]
376 |         )
377 | 
378 |     raise ValueError("Prompt implementation not found")
379 | ```
380 | 
381 | </CodeGroup>
382 | 
383 | ## Best practices
384 | 
385 | When implementing prompts:
386 | 
387 | 1. Use clear, descriptive prompt names
388 | 2. Provide detailed descriptions for prompts and arguments
389 | 3. Validate all required arguments
390 | 4. Handle missing arguments gracefully
391 | 5. Consider versioning for prompt templates
392 | 6. Cache dynamic content when appropriate
393 | 7. Implement error handling
394 | 8. Document expected argument formats
395 | 9. Consider prompt composability
396 | 10. Test prompts with various inputs
397 | 
398 | ## UI integration
399 | 
400 | Prompts can be surfaced in client UIs as:
401 | 
402 | - Slash commands
403 | - Quick actions
404 | - Context menu items
405 | - Command palette entries
406 | - Guided workflows
407 | - Interactive forms
408 | 
409 | ## Updates and changes
410 | 
411 | Servers can notify clients about prompt changes:
412 | 
413 | 1. Server capability: `prompts.listChanged`
414 | 2. Notification: `notifications/prompts/list_changed`
415 | 3. Client re-fetches prompt list
416 | 
417 | ## Security considerations
418 | 
419 | When implementing prompts:
420 | 
421 | - Validate all arguments
422 | - Sanitize user input
423 | - Consider rate limiting
424 | - Implement access controls
425 | - Audit prompt usage
426 | - Handle sensitive data appropriately
427 | - Validate generated content
428 | - Implement timeouts
429 | - Consider prompt injection risks
430 | - Document security requirements
431 | 


--------------------------------------------------------------------------------
/docs/legacy/concepts/resources.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: "Resources"
  3 | description: "Expose data and content from your servers to LLMs"
  4 | ---
  5 | 
  6 | Resources are a core primitive in the Model Context Protocol (MCP) that allow servers to expose data and content that can be read by clients and used as context for LLM interactions.
  7 | 
  8 | <Note>
  9 | 
 10 | Resources are designed to be **application-controlled**, meaning that the client application can decide how and when they should be used.
 11 | Different MCP clients may handle resources differently. For example:
 12 | 
 13 | - Claude Desktop currently requires users to explicitly select resources before they can be used
 14 | - Other clients might automatically select resources based on heuristics
 15 | - Some implementations may even allow the AI model itself to determine which resources to use
 16 | 
 17 | Server authors should be prepared to handle any of these interaction patterns when implementing resource support. In order to expose data to models automatically, server authors should use a **model-controlled** primitive such as [Tools](./tools).
 18 | 
 19 | </Note>
 20 | 
 21 | ## Overview
 22 | 
 23 | Resources represent any kind of data that an MCP server wants to make available to clients. This can include:
 24 | 
 25 | - File contents
 26 | - Database records
 27 | - API responses
 28 | - Live system data
 29 | - Screenshots and images
 30 | - Log files
 31 | - And more
 32 | 
 33 | Each resource is identified by a unique URI and can contain either text or binary data.
 34 | 
 35 | ## Resource URIs
 36 | 
 37 | Resources are identified using URIs that follow this format:
 38 | 
 39 | ```
 40 | [protocol]://[host]/[path]
 41 | ```
 42 | 
 43 | For example:
 44 | 
 45 | - `file:///home/user/documents/report.pdf`
 46 | - `postgres://database/customers/schema`
 47 | - `screen://localhost/display1`
 48 | 
 49 | The protocol and path structure is defined by the MCP server implementation. Servers can define their own custom URI schemes.
 50 | 
 51 | ## Resource types
 52 | 
 53 | Resources can contain two types of content:
 54 | 
 55 | ### Text resources
 56 | 
 57 | Text resources contain UTF-8 encoded text data. These are suitable for:
 58 | 
 59 | - Source code
 60 | - Configuration files
 61 | - Log files
 62 | - JSON/XML data
 63 | - Plain text
 64 | 
 65 | ### Binary resources
 66 | 
 67 | Binary resources contain raw binary data encoded in base64. These are suitable for:
 68 | 
 69 | - Images
 70 | - PDFs
 71 | - Audio files
 72 | - Video files
 73 | - Other non-text formats
 74 | 
 75 | ## Resource discovery
 76 | 
 77 | Clients can discover available resources through two main methods:
 78 | 
 79 | ### Direct resources
 80 | 
 81 | Servers expose a list of resources via the `resources/list` request. Each resource includes:
 82 | 
 83 | ```typescript
 84 | {
 85 |   uri: string;           // Unique identifier for the resource
 86 |   name: string;          // Human-readable name
 87 |   description?: string;  // Optional description
 88 |   mimeType?: string;     // Optional MIME type
 89 |   size?: number;         // Optional size in bytes
 90 | }
 91 | ```
 92 | 
 93 | ### Resource templates
 94 | 
 95 | For dynamic resources, servers can expose [URI templates](https://datatracker.ietf.org/doc/html/rfc6570) that clients can use to construct valid resource URIs:
 96 | 
 97 | ```typescript
 98 | {
 99 |   uriTemplate: string;   // URI template following RFC 6570
100 |   name: string;          // Human-readable name for this type
101 |   description?: string;  // Optional description
102 |   mimeType?: string;     // Optional MIME type for all matching resources
103 | }
104 | ```
105 | 
106 | ## Reading resources
107 | 
108 | To read a resource, clients make a `resources/read` request with the resource URI.
109 | 
110 | The server responds with a list of resource contents:
111 | 
112 | ```typescript
113 | {
114 |   contents: [
115 |     {
116 |       uri: string;        // The URI of the resource
117 |       mimeType?: string;  // Optional MIME type
118 | 
119 |       // One of:
120 |       text?: string;      // For text resources
121 |       blob?: string;      // For binary resources (base64 encoded)
122 |     }
123 |   ]
124 | }
125 | ```
126 | 
127 | <Tip>
128 | 
129 | Servers may return multiple resources in response to one `resources/read` request. This could be used, for example, to return a list of files inside a directory when the directory is read.
130 | 
131 | </Tip>
132 | 
133 | ## Resource updates
134 | 
135 | MCP supports real-time updates for resources through two mechanisms:
136 | 
137 | ### List changes
138 | 
139 | Servers can notify clients when their list of available resources changes via the `notifications/resources/list_changed` notification.
140 | 
141 | ### Content changes
142 | 
143 | Clients can subscribe to updates for specific resources:
144 | 
145 | 1. Client sends `resources/subscribe` with resource URI
146 | 2. Server sends `notifications/resources/updated` when the resource changes
147 | 3. Client can fetch latest content with `resources/read`
148 | 4. Client can unsubscribe with `resources/unsubscribe`
149 | 
150 | ## Example implementation
151 | 
152 | Here's a simple example of implementing resource support in an MCP server:
153 | 
154 | <CodeGroup>
155 | 
156 | ```typescript TypeScript
157 | const server = new Server(
158 |   {
159 |     name: "example-server",
160 |     version: "1.0.0",
161 |   },
162 |   {
163 |     capabilities: {
164 |       resources: {},
165 |     },
166 |   },
167 | );
168 | 
169 | // List available resources
170 | server.setRequestHandler(ListResourcesRequestSchema, async () => {
171 |   return {
172 |     resources: [
173 |       {
174 |         uri: "file:///logs/app.log",
175 |         name: "Application Logs",
176 |         mimeType: "text/plain",
177 |       },
178 |     ],
179 |   };
180 | });
181 | 
182 | // Read resource contents
183 | server.setRequestHandler(ReadResourceRequestSchema, async (request) => {
184 |   const uri = request.params.uri;
185 | 
186 |   if (uri === "file:///logs/app.log") {
187 |     const logContents = await readLogFile();
188 |     return {
189 |       contents: [
190 |         {
191 |           uri,
192 |           mimeType: "text/plain",
193 |           text: logContents,
194 |         },
195 |       ],
196 |     };
197 |   }
198 | 
199 |   throw new Error("Resource not found");
200 | });
201 | ```
202 | 
203 | ```python Python
204 | app = Server("example-server")
205 | 
206 | @app.list_resources()
207 | async def list_resources() -> list[types.Resource]:
208 |     return [
209 |         types.Resource(
210 |             uri="file:///logs/app.log",
211 |             name="Application Logs",
212 |             mimeType="text/plain"
213 |         )
214 |     ]
215 | 
216 | @app.read_resource()
217 | async def read_resource(uri: AnyUrl) -> str:
218 |     if str(uri) == "file:///logs/app.log":
219 |         log_contents = await read_log_file()
220 |         return log_contents
221 | 
222 |     raise ValueError("Resource not found")
223 | 
224 | # Start server
225 | async with stdio_server() as streams:
226 |     await app.run(
227 |         streams[0],
228 |         streams[1],
229 |         app.create_initialization_options()
230 |     )
231 | ```
232 | 
233 | </CodeGroup>
234 | 
235 | ## Best practices
236 | 
237 | When implementing resource support:
238 | 
239 | 1. Use clear, descriptive resource names and URIs
240 | 2. Include helpful descriptions to guide LLM understanding
241 | 3. Set appropriate MIME types when known
242 | 4. Implement resource templates for dynamic content
243 | 5. Use subscriptions for frequently changing resources
244 | 6. Handle errors gracefully with clear error messages
245 | 7. Consider pagination for large resource lists
246 | 8. Cache resource contents when appropriate
247 | 9. Validate URIs before processing
248 | 10. Document your custom URI schemes
249 | 
250 | ## Security considerations
251 | 
252 | When exposing resources:
253 | 
254 | - Validate all resource URIs
255 | - Implement appropriate access controls
256 | - Sanitize file paths to prevent directory traversal
257 | - Be cautious with binary data handling
258 | - Consider rate limiting for resource reads
259 | - Audit resource access
260 | - Encrypt sensitive data in transit
261 | - Validate MIME types
262 | - Implement timeouts for long-running reads
263 | - Handle resource cleanup appropriately
264 | 


--------------------------------------------------------------------------------
/docs/legacy/concepts/roots.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: "Roots"
 3 | description: "Understanding roots in MCP"
 4 | ---
 5 | 
 6 | Roots are a concept in MCP that define the boundaries where servers can operate. They provide a way for clients to inform servers about relevant resources and their locations.
 7 | 
 8 | ## What are Roots?
 9 | 
10 | A root is a URI that a client suggests a server should focus on. When a client connects to a server, it declares which roots the server should work with. While primarily used for filesystem paths, roots can be any valid URI including HTTP URLs.
11 | 
12 | For example, roots could be:
13 | 
14 | ```
15 | file:///home/user/projects/myapp
16 | https://api.example.com/v1
17 | ```
18 | 
19 | ## Why Use Roots?
20 | 
21 | Roots serve several important purposes:
22 | 
23 | 1. **Guidance**: They inform servers about relevant resources and locations
24 | 2. **Clarity**: Roots make it clear which resources are part of your workspace
25 | 3. **Organization**: Multiple roots let you work with different resources simultaneously
26 | 
27 | ## How Roots Work
28 | 
29 | When a client supports roots, it:
30 | 
31 | 1. Declares the `roots` capability during connection
32 | 2. Provides a list of suggested roots to the server
33 | 3. Notifies the server when roots change (if supported)
34 | 
35 | While roots are informational and not strictly enforcing, servers should:
36 | 
37 | 1. Respect the provided roots
38 | 2. Use root URIs to locate and access resources
39 | 3. Prioritize operations within root boundaries
40 | 
41 | ## Common Use Cases
42 | 
43 | Roots are commonly used to define:
44 | 
45 | - Project directories
46 | - Repository locations
47 | - API endpoints
48 | - Configuration locations
49 | - Resource boundaries
50 | 
51 | ## Best Practices
52 | 
53 | When working with roots:
54 | 
55 | 1. Only suggest necessary resources
56 | 2. Use clear, descriptive names for roots
57 | 3. Monitor root accessibility
58 | 4. Handle root changes gracefully
59 | 
60 | ## Example
61 | 
62 | Here's how a typical MCP client might expose roots:
63 | 
64 | ```json
65 | {
66 |   "roots": [
67 |     {
68 |       "uri": "file:///home/user/projects/frontend",
69 |       "name": "Frontend Repository"
70 |     },
71 |     {
72 |       "uri": "https://api.example.com/v1",
73 |       "name": "API Endpoint"
74 |     }
75 |   ]
76 | }
77 | ```
78 | 
79 | This configuration suggests the server focus on both a local repository and an API endpoint while keeping them logically separated.
80 | 


--------------------------------------------------------------------------------
/docs/legacy/concepts/sampling.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: "Sampling"
  3 | description: "Let your servers request completions from LLMs"
  4 | ---
  5 | 
  6 | Sampling is a powerful MCP feature that allows servers to request LLM completions through the client, enabling sophisticated agentic behaviors while maintaining security and privacy.
  7 | 
  8 | <Info>
  9 | 
 10 | This feature of MCP is not yet supported in the Claude Desktop client.
 11 | 
 12 | </Info>
 13 | 
 14 | ## How sampling works
 15 | 
 16 | The sampling flow follows these steps:
 17 | 
 18 | 1. Server sends a `sampling/createMessage` request to the client
 19 | 2. Client reviews the request and can modify it
 20 | 3. Client samples from an LLM
 21 | 4. Client reviews the completion
 22 | 5. Client returns the result to the server
 23 | 
 24 | This human-in-the-loop design ensures users maintain control over what the LLM sees and generates.
 25 | 
 26 | ## Message format
 27 | 
 28 | Sampling requests use a standardized message format:
 29 | 
 30 | ```typescript
 31 | {
 32 |   messages: [
 33 |     {
 34 |       role: "user" | "assistant",
 35 |       content: {
 36 |         type: "text" | "image",
 37 | 
 38 |         // For text:
 39 |         text?: string,
 40 | 
 41 |         // For images:
 42 |         data?: string,             // base64 encoded
 43 |         mimeType?: string
 44 |       }
 45 |     }
 46 |   ],
 47 |   modelPreferences?: {
 48 |     hints?: [{
 49 |       name?: string                // Suggested model name/family
 50 |     }],
 51 |     costPriority?: number,         // 0-1, importance of minimizing cost
 52 |     speedPriority?: number,        // 0-1, importance of low latency
 53 |     intelligencePriority?: number  // 0-1, importance of capabilities
 54 |   },
 55 |   systemPrompt?: string,
 56 |   includeContext?: "none" | "thisServer" | "allServers",
 57 |   temperature?: number,
 58 |   maxTokens: number,
 59 |   stopSequences?: string[],
 60 |   metadata?: Record<string, unknown>
 61 | }
 62 | ```
 63 | 
 64 | ## Request parameters
 65 | 
 66 | ### Messages
 67 | 
 68 | The `messages` array contains the conversation history to send to the LLM. Each message has:
 69 | 
 70 | - `role`: Either "user" or "assistant"
 71 | - `content`: The message content, which can be:
 72 |   - Text content with a `text` field
 73 |   - Image content with `data` (base64) and `mimeType` fields
 74 | 
 75 | ### Model preferences
 76 | 
 77 | The `modelPreferences` object allows servers to specify their model selection preferences:
 78 | 
 79 | - `hints`: Array of model name suggestions that clients can use to select an appropriate model:
 80 |   - `name`: String that can match full or partial model names (e.g. "claude-3", "sonnet")
 81 |   - Clients may map hints to equivalent models from different providers
 82 |   - Multiple hints are evaluated in preference order
 83 | 
 84 | - Priority values (0-1 normalized):
 85 |   - `costPriority`: Importance of minimizing costs
 86 |   - `speedPriority`: Importance of low latency response
 87 |   - `intelligencePriority`: Importance of advanced model capabilities
 88 | 
 89 | Clients make the final model selection based on these preferences and their available models.
 90 | 
 91 | ### System prompt
 92 | 
 93 | An optional `systemPrompt` field allows servers to request a specific system prompt. The client may modify or ignore this.
 94 | 
 95 | ### Context inclusion
 96 | 
 97 | The `includeContext` parameter specifies what MCP context to include:
 98 | 
 99 | - `"none"`: No additional context
100 | - `"thisServer"`: Include context from the requesting server
101 | - `"allServers"`: Include context from all connected MCP servers
102 | 
103 | The client controls what context is actually included.
104 | 
105 | ### Sampling parameters
106 | 
107 | Fine-tune the LLM sampling with:
108 | 
109 | - `temperature`: Controls randomness (0.0 to 1.0)
110 | - `maxTokens`: Maximum tokens to generate
111 | - `stopSequences`: Array of sequences that stop generation
112 | - `metadata`: Additional provider-specific parameters
113 | 
114 | ## Response format
115 | 
116 | The client returns a completion result:
117 | 
118 | ```typescript
119 | {
120 |   model: string,  // Name of the model used
121 |   stopReason?: "endTurn" | "stopSequence" | "maxTokens" | string,
122 |   role: "user" | "assistant",
123 |   content: {
124 |     type: "text" | "image",
125 |     text?: string,
126 |     data?: string,
127 |     mimeType?: string
128 |   }
129 | }
130 | ```
131 | 
132 | ## Example request
133 | 
134 | Here's an example of requesting sampling from a client:
135 | 
136 | ```json
137 | {
138 |   "method": "sampling/createMessage",
139 |   "params": {
140 |     "messages": [
141 |       {
142 |         "role": "user",
143 |         "content": {
144 |           "type": "text",
145 |           "text": "What files are in the current directory?"
146 |         }
147 |       }
148 |     ],
149 |     "systemPrompt": "You are a helpful file system assistant.",
150 |     "includeContext": "thisServer",
151 |     "maxTokens": 100
152 |   }
153 | }
154 | ```
155 | 
156 | ## Best practices
157 | 
158 | When implementing sampling:
159 | 
160 | 1. Always provide clear, well-structured prompts
161 | 2. Handle both text and image content appropriately
162 | 3. Set reasonable token limits
163 | 4. Include relevant context through `includeContext`
164 | 5. Validate responses before using them
165 | 6. Handle errors gracefully
166 | 7. Consider rate limiting sampling requests
167 | 8. Document expected sampling behavior
168 | 9. Test with various model parameters
169 | 10. Monitor sampling costs
170 | 
171 | ## Human in the loop controls
172 | 
173 | Sampling is designed with human oversight in mind:
174 | 
175 | ### For prompts
176 | 
177 | - Clients should show users the proposed prompt
178 | - Users should be able to modify or reject prompts
179 | - System prompts can be filtered or modified
180 | - Context inclusion is controlled by the client
181 | 
182 | ### For completions
183 | 
184 | - Clients should show users the completion
185 | - Users should be able to modify or reject completions
186 | - Clients can filter or modify completions
187 | - Users control which model is used
188 | 
189 | ## Security considerations
190 | 
191 | When implementing sampling:
192 | 
193 | - Validate all message content
194 | - Sanitize sensitive information
195 | - Implement appropriate rate limits
196 | - Monitor sampling usage
197 | - Encrypt data in transit
198 | - Handle user data privacy
199 | - Audit sampling requests
200 | - Control cost exposure
201 | - Implement timeouts
202 | - Handle model errors gracefully
203 | 
204 | ## Common patterns
205 | 
206 | ### Agentic workflows
207 | 
208 | Sampling enables agentic patterns like:
209 | 
210 | - Reading and analyzing resources
211 | - Making decisions based on context
212 | - Generating structured data
213 | - Handling multi-step tasks
214 | - Providing interactive assistance
215 | 
216 | ### Context management
217 | 
218 | Best practices for context:
219 | 
220 | - Request minimal necessary context
221 | - Structure context clearly
222 | - Handle context size limits
223 | - Update context as needed
224 | - Clean up stale context
225 | 
226 | ### Error handling
227 | 
228 | Robust error handling should:
229 | 
230 | - Catch sampling failures
231 | - Handle timeout errors
232 | - Manage rate limits
233 | - Validate responses
234 | - Provide fallback behaviors
235 | - Log errors appropriately
236 | 
237 | ## Limitations
238 | 
239 | Be aware of these limitations:
240 | 
241 | - Sampling depends on client capabilities
242 | - Users control sampling behavior
243 | - Context size has limits
244 | - Rate limits may apply
245 | - Costs should be considered
246 | - Model availability varies
247 | - Response times vary
248 | - Not all content types supported
249 | 


--------------------------------------------------------------------------------
/docs/legacy/concepts/tools.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: "Tools"
  3 | description: "Enable LLMs to perform actions through your server"
  4 | ---
  5 | 
  6 | Tools are a powerful primitive in the Model Context Protocol (MCP) that enable servers to expose executable functionality to clients. Through tools, LLMs can interact with external systems, perform computations, and take actions in the real world.
  7 | 
  8 | <Note>
  9 | 
 10 | Tools are designed to be **model-controlled**, meaning that tools are exposed from servers to clients with the intention of the AI model being able to automatically invoke them (with a human in the loop to grant approval).
 11 | 
 12 | </Note>
 13 | 
 14 | ## Overview
 15 | 
 16 | Tools in MCP allow servers to expose executable functions that can be invoked by clients and used by LLMs to perform actions. Key aspects of tools include:
 17 | 
 18 | - **Discovery**: Clients can obtain a list of available tools by sending a `tools/list` request
 19 | - **Invocation**: Tools are called using the `tools/call` request, where servers perform the requested operation and return results
 20 | - **Flexibility**: Tools can range from simple calculations to complex API interactions
 21 | 
 22 | Like [resources](/legacy/concepts/resources), tools are identified by unique names and can include descriptions to guide their usage. However, unlike resources, tools represent dynamic operations that can modify state or interact with external systems.
 23 | 
 24 | ## Tool definition structure
 25 | 
 26 | Each tool is defined with the following structure:
 27 | 
 28 | ```typescript
 29 | {
 30 |   name: string;          // Unique identifier for the tool
 31 |   description?: string;  // Human-readable description
 32 |   inputSchema: {         // JSON Schema for the tool's parameters
 33 |     type: "object",
 34 |     properties: { ... }  // Tool-specific parameters
 35 |   },
 36 |   annotations?: {        // Optional hints about tool behavior
 37 |     title?: string;      // Human-readable title for the tool
 38 |     readOnlyHint?: boolean;    // If true, the tool does not modify its environment
 39 |     destructiveHint?: boolean; // If true, the tool may perform destructive updates
 40 |     idempotentHint?: boolean;  // If true, repeated calls with same args have no additional effect
 41 |     openWorldHint?: boolean;   // If true, tool interacts with external entities
 42 |   }
 43 | }
 44 | ```
 45 | 
 46 | ## Implementing tools
 47 | 
 48 | Here's an example of implementing a basic tool in an MCP server:
 49 | 
 50 | <CodeGroup>
 51 | 
 52 | ```typescript TypeScript
 53 | const server = new Server(
 54 |   {
 55 |     name: "example-server",
 56 |     version: "1.0.0",
 57 |   },
 58 |   {
 59 |     capabilities: {
 60 |       tools: {},
 61 |     },
 62 |   },
 63 | );
 64 | 
 65 | // Define available tools
 66 | server.setRequestHandler(ListToolsRequestSchema, async () => {
 67 |   return {
 68 |     tools: [
 69 |       {
 70 |         name: "calculate_sum",
 71 |         description: "Add two numbers together",
 72 |         inputSchema: {
 73 |           type: "object",
 74 |           properties: {
 75 |             a: { type: "number" },
 76 |             b: { type: "number" },
 77 |           },
 78 |           required: ["a", "b"],
 79 |         },
 80 |       },
 81 |     ],
 82 |   };
 83 | });
 84 | 
 85 | // Handle tool execution
 86 | server.setRequestHandler(CallToolRequestSchema, async (request) => {
 87 |   if (request.params.name === "calculate_sum") {
 88 |     const { a, b } = request.params.arguments;
 89 |     return {
 90 |       content: [
 91 |         {
 92 |           type: "text",
 93 |           text: String(a + b),
 94 |         },
 95 |       ],
 96 |     };
 97 |   }
 98 |   throw new Error("Tool not found");
 99 | });
100 | ```
101 | 
102 | ```python Python
103 | app = Server("example-server")
104 | 
105 | @app.list_tools()
106 | async def list_tools() -> list[types.Tool]:
107 |     return [
108 |         types.Tool(
109 |             name="calculate_sum",
110 |             description="Add two numbers together",
111 |             inputSchema={
112 |                 "type": "object",
113 |                 "properties": {
114 |                     "a": {"type": "number"},
115 |                     "b": {"type": "number"}
116 |                 },
117 |                 "required": ["a", "b"]
118 |             }
119 |         )
120 |     ]
121 | 
122 | @app.call_tool()
123 | async def call_tool(
124 |     name: str,
125 |     arguments: dict
126 | ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
127 |     if name == "calculate_sum":
128 |         a = arguments["a"]
129 |         b = arguments["b"]
130 |         result = a + b
131 |         return [types.TextContent(type="text", text=str(result))]
132 |     raise ValueError(f"Tool not found: {name}")
133 | ```
134 | 
135 | </CodeGroup>
136 | 
137 | ## Example tool patterns
138 | 
139 | Here are some examples of types of tools that a server could provide:
140 | 
141 | ### System operations
142 | 
143 | Tools that interact with the local system:
144 | 
145 | ```typescript
146 | {
147 |   name: "execute_command",
148 |   description: "Run a shell command",
149 |   inputSchema: {
150 |     type: "object",
151 |     properties: {
152 |       command: { type: "string" },
153 |       args: { type: "array", items: { type: "string" } }
154 |     }
155 |   }
156 | }
157 | ```
158 | 
159 | ### API integrations
160 | 
161 | Tools that wrap external APIs:
162 | 
163 | ```typescript
164 | {
165 |   name: "github_create_issue",
166 |   description: "Create a GitHub issue",
167 |   inputSchema: {
168 |     type: "object",
169 |     properties: {
170 |       title: { type: "string" },
171 |       body: { type: "string" },
172 |       labels: { type: "array", items: { type: "string" } }
173 |     }
174 |   }
175 | }
176 | ```
177 | 
178 | ### Data processing
179 | 
180 | Tools that transform or analyze data:
181 | 
182 | ```typescript
183 | {
184 |   name: "analyze_csv",
185 |   description: "Analyze a CSV file",
186 |   inputSchema: {
187 |     type: "object",
188 |     properties: {
189 |       filepath: { type: "string" },
190 |       operations: {
191 |         type: "array",
192 |         items: {
193 |           enum: ["sum", "average", "count"]
194 |         }
195 |       }
196 |     }
197 |   }
198 | }
199 | ```
200 | 
201 | ## Best practices
202 | 
203 | When implementing tools:
204 | 
205 | 1. Provide clear, descriptive names and descriptions
206 | 2. Use detailed JSON Schema definitions for parameters
207 | 3. Include examples in tool descriptions to demonstrate how the model should use them
208 | 4. Implement proper error handling and validation
209 | 5. Use progress reporting for long operations
210 | 6. Keep tool operations focused and atomic
211 | 7. Document expected return value structures
212 | 8. Implement proper timeouts
213 | 9. Consider rate limiting for resource-intensive operations
214 | 10. Log tool usage for debugging and monitoring
215 | 
216 | ### Tool name conflicts
217 | 
218 | MCP client applications and MCP server proxies may encounter tool name conflicts when building their own tool lists. For example, two connected MCP servers `web1` and `web2` may both expose a tool named `search_web`.
219 | 
220 | Applications may disambiguiate tools with one of the following strategies (among others; not an exhaustive list):
221 | 
222 | - Concatenating a unique, user-defined server name with the tool name, e.g. `web1___search_web` and `web2___search_web`. This strategy may be preferable when unique server names are already provided by the user in a configuration file.
223 | - Generating a random prefix for the tool name, e.g. `jrwxs___search_web` and `6cq52___search_web`. This strategy may be preferable in server proxies where user-defined unique names are not available.
224 | - Using the server URI as a prefix for the tool name, e.g. `web1.example.com:search_web` and `web2.example.com:search_web`. This strategy may be suitable when working with remote MCP servers.
225 | 
226 | Note that the server-provided name from the initialization flow is not guaranteed to be unique and is not generally suitable for disambiguation purposes.
227 | 
228 | ## Security considerations
229 | 
230 | When exposing tools:
231 | 
232 | ### Input validation
233 | 
234 | - Validate all parameters against the schema
235 | - Sanitize file paths and system commands
236 | - Validate URLs and external identifiers
237 | - Check parameter sizes and ranges
238 | - Prevent command injection
239 | 
240 | ### Access control
241 | 
242 | - Implement authentication where needed
243 | - Use appropriate authorization checks
244 | - Audit tool usage
245 | - Rate limit requests
246 | - Monitor for abuse
247 | 
248 | ### Error handling
249 | 
250 | - Don't expose internal errors to clients
251 | - Log security-relevant errors
252 | - Handle timeouts appropriately
253 | - Clean up resources after errors
254 | - Validate return values
255 | 
256 | ## Tool discovery and updates
257 | 
258 | MCP supports dynamic tool discovery:
259 | 
260 | 1. Clients can list available tools at any time
261 | 2. Servers can notify clients when tools change using `notifications/tools/list_changed`
262 | 3. Tools can be added or removed during runtime
263 | 4. Tool definitions can be updated (though this should be done carefully)
264 | 
265 | ## Error handling
266 | 
267 | Tool errors should be reported within the result object, not as MCP protocol-level errors. This allows the LLM to see and potentially handle the error. When a tool encounters an error:
268 | 
269 | 1. Set `isError` to `true` in the result
270 | 2. Include error details in the `content` array
271 | 
272 | Here's an example of proper error handling for tools:
273 | 
274 | <CodeGroup>
275 | 
276 | ```typescript TypeScript
277 | try {
278 |   // Tool operation
279 |   const result = performOperation();
280 |   return {
281 |     content: [
282 |       {
283 |         type: "text",
284 |         text: `Operation successful: ${result}`,
285 |       },
286 |     ],
287 |   };
288 | } catch (error) {
289 |   return {
290 |     isError: true,
291 |     content: [
292 |       {
293 |         type: "text",
294 |         text: `Error: ${error.message}`,
295 |       },
296 |     ],
297 |   };
298 | }
299 | ```
300 | 
301 | ```python Python
302 | try:
303 |     # Tool operation
304 |     result = perform_operation()
305 |     return types.CallToolResult(
306 |         content=[
307 |             types.TextContent(
308 |                 type="text",
309 |                 text=f"Operation successful: {result}"
310 |             )
311 |         ]
312 |     )
313 | except Exception as error:
314 |     return types.CallToolResult(
315 |         isError=True,
316 |         content=[
317 |             types.TextContent(
318 |                 type="text",
319 |                 text=f"Error: {str(error)}"
320 |             )
321 |         ]
322 |     )
323 | ```
324 | 
325 | </CodeGroup>
326 | 
327 | This approach allows the LLM to see that an error occurred and potentially take corrective action or request human intervention.
328 | 
329 | ## Tool annotations
330 | 
331 | Tool annotations provide additional metadata about a tool's behavior, helping clients understand how to present and manage tools. These annotations are hints that describe the nature and impact of a tool, but should not be relied upon for security decisions.
332 | 
333 | ### Purpose of tool annotations
334 | 
335 | Tool annotations serve several key purposes:
336 | 
337 | 1. Provide UX-specific information without affecting model context
338 | 2. Help clients categorize and present tools appropriately
339 | 3. Convey information about a tool's potential side effects
340 | 4. Assist in developing intuitive interfaces for tool approval
341 | 
342 | ### Available tool annotations
343 | 
344 | The MCP specification defines the following annotations for tools:
345 | 
346 | | Annotation        | Type    | Default | Description                                                                                                                          |
347 | | ----------------- | ------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------ |
348 | | `title`           | string  | -       | A human-readable title for the tool, useful for UI display                                                                           |
349 | | `readOnlyHint`    | boolean | false   | If true, indicates the tool does not modify its environment                                                                          |
350 | | `destructiveHint` | boolean | true    | If true, the tool may perform destructive updates (only meaningful when `readOnlyHint` is false)                                     |
351 | | `idempotentHint`  | boolean | false   | If true, calling the tool repeatedly with the same arguments has no additional effect (only meaningful when `readOnlyHint` is false) |
352 | | `openWorldHint`   | boolean | true    | If true, the tool may interact with an "open world" of external entities                                                             |
353 | 
354 | ### Example usage
355 | 
356 | Here's how to define tools with annotations for different scenarios:
357 | 
358 | ```typescript
359 | // A read-only search tool
360 | {
361 |   name: "web_search",
362 |   description: "Search the web for information",
363 |   inputSchema: {
364 |     type: "object",
365 |     properties: {
366 |       query: { type: "string" }
367 |     },
368 |     required: ["query"]
369 |   },
370 |   annotations: {
371 |     title: "Web Search",
372 |     readOnlyHint: true,
373 |     openWorldHint: true
374 |   }
375 | }
376 | 
377 | // A destructive file deletion tool
378 | {
379 |   name: "delete_file",
380 |   description: "Delete a file from the filesystem",
381 |   inputSchema: {
382 |     type: "object",
383 |     properties: {
384 |       path: { type: "string" }
385 |     },
386 |     required: ["path"]
387 |   },
388 |   annotations: {
389 |     title: "Delete File",
390 |     readOnlyHint: false,
391 |     destructiveHint: true,
392 |     idempotentHint: true,
393 |     openWorldHint: false
394 |   }
395 | }
396 | 
397 | // A non-destructive database record creation tool
398 | {
399 |   name: "create_record",
400 |   description: "Create a new record in the database",
401 |   inputSchema: {
402 |     type: "object",
403 |     properties: {
404 |       table: { type: "string" },
405 |       data: { type: "object" }
406 |     },
407 |     required: ["table", "data"]
408 |   },
409 |   annotations: {
410 |     title: "Create Database Record",
411 |     readOnlyHint: false,
412 |     destructiveHint: false,
413 |     idempotentHint: false,
414 |     openWorldHint: false
415 |   }
416 | }
417 | ```
418 | 
419 | ### Integrating annotations in server implementation
420 | 
421 | <CodeGroup>
422 | 
423 | ```typescript TypeScript
424 | server.setRequestHandler(ListToolsRequestSchema, async () => {
425 |   return {
426 |     tools: [
427 |       {
428 |         name: "calculate_sum",
429 |         description: "Add two numbers together",
430 |         inputSchema: {
431 |           type: "object",
432 |           properties: {
433 |             a: { type: "number" },
434 |             b: { type: "number" },
435 |           },
436 |           required: ["a", "b"],
437 |         },
438 |         annotations: {
439 |           title: "Calculate Sum",
440 |           readOnlyHint: true,
441 |           openWorldHint: false,
442 |         },
443 |       },
444 |     ],
445 |   };
446 | });
447 | ```
448 | 
449 | ```python Python
450 | from mcp.server.fastmcp import FastMCP
451 | 
452 | mcp = FastMCP("example-server")
453 | 
454 | @mcp.tool(
455 |     annotations={
456 |         "title": "Calculate Sum",
457 |         "readOnlyHint": True,
458 |         "openWorldHint": False
459 |     }
460 | )
461 | async def calculate_sum(a: float, b: float) -> str:
462 |     """Add two numbers together.
463 | 
464 |     Args:
465 |         a: First number to add
466 |         b: Second number to add
467 |     """
468 |     result = a + b
469 |     return str(result)
470 | ```
471 | 
472 | </CodeGroup>
473 | 
474 | ### Best practices for tool annotations
475 | 
476 | 1. **Be accurate about side effects**: Clearly indicate whether a tool modifies its environment and whether those modifications are destructive.
477 | 
478 | 2. **Use descriptive titles**: Provide human-friendly titles that clearly describe the tool's purpose.
479 | 
480 | 3. **Indicate idempotency properly**: Mark tools as idempotent only if repeated calls with the same arguments truly have no additional effect.
481 | 
482 | 4. **Set appropriate open/closed world hints**: Indicate whether a tool interacts with a closed system (like a database) or an open system (like the web).
483 | 
484 | 5. **Remember annotations are hints**: All properties in ToolAnnotations are hints and not guaranteed to provide a faithful description of tool behavior. Clients should never make security-critical decisions based solely on annotations.
485 | 
486 | ## Testing tools
487 | 
488 | A comprehensive testing strategy for MCP tools should cover:
489 | 
490 | - **Functional testing**: Verify tools execute correctly with valid inputs and handle invalid inputs appropriately
491 | - **Integration testing**: Test tool interaction with external systems using both real and mocked dependencies
492 | - **Security testing**: Validate authentication, authorization, input sanitization, and rate limiting
493 | - **Performance testing**: Check behavior under load, timeout handling, and resource cleanup
494 | - **Error handling**: Ensure tools properly report errors through the MCP protocol and clean up resources
495 | 


--------------------------------------------------------------------------------
/docs/legacy/concepts/transports.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: "Transports"
  3 | description: "Learn about MCP's communication mechanisms"
  4 | ---
  5 | 
  6 | Transports in the Model Context Protocol (MCP) provide the foundation for communication between clients and servers. A transport handles the underlying mechanics of how messages are sent and received.
  7 | 
  8 | ## Message Format
  9 | 
 10 | MCP uses [JSON-RPC](https://www.jsonrpc.org/) 2.0 as its wire format. The transport layer is responsible for converting MCP protocol messages into JSON-RPC format for transmission and converting received JSON-RPC messages back into MCP protocol messages.
 11 | 
 12 | There are three types of JSON-RPC messages used:
 13 | 
 14 | ### Requests
 15 | 
 16 | ```typescript
 17 | {
 18 |   jsonrpc: "2.0",
 19 |   id: number | string,
 20 |   method: string,
 21 |   params?: object
 22 | }
 23 | ```
 24 | 
 25 | ### Responses
 26 | 
 27 | ```typescript
 28 | {
 29 |   jsonrpc: "2.0",
 30 |   id: number | string,
 31 |   result?: object,
 32 |   error?: {
 33 |     code: number,
 34 |     message: string,
 35 |     data?: unknown
 36 |   }
 37 | }
 38 | ```
 39 | 
 40 | ### Notifications
 41 | 
 42 | ```typescript
 43 | {
 44 |   jsonrpc: "2.0",
 45 |   method: string,
 46 |   params?: object
 47 | }
 48 | ```
 49 | 
 50 | ## Built-in Transport Types
 51 | 
 52 | MCP currently defines two standard transport mechanisms:
 53 | 
 54 | ### Standard Input/Output (stdio)
 55 | 
 56 | The stdio transport enables communication through standard input and output streams. This is particularly useful for local integrations and command-line tools.
 57 | 
 58 | Use stdio when:
 59 | 
 60 | - Building command-line tools
 61 | - Implementing local integrations
 62 | - Needing simple process communication
 63 | - Working with shell scripts
 64 | 
 65 | #### Server
 66 | 
 67 | <CodeGroup>
 68 | 
 69 | ```typescript TypeScript
 70 | const server = new Server(
 71 |   {
 72 |     name: "example-server",
 73 |     version: "1.0.0",
 74 |   },
 75 |   {
 76 |     capabilities: {},
 77 |   },
 78 | );
 79 | 
 80 | const transport = new StdioServerTransport();
 81 | await server.connect(transport);
 82 | ```
 83 | 
 84 | ```python Python
 85 | app = Server("example-server")
 86 | 
 87 | async with stdio_server() as streams:
 88 |     await app.run(
 89 |         streams[0],
 90 |         streams[1],
 91 |         app.create_initialization_options()
 92 |     )
 93 | ```
 94 | 
 95 | </CodeGroup>
 96 | 
 97 | #### Client
 98 | 
 99 | <CodeGroup>
100 | 
101 | ```typescript TypeScript
102 | const client = new Client(
103 |   {
104 |     name: "example-client",
105 |     version: "1.0.0",
106 |   },
107 |   {
108 |     capabilities: {},
109 |   },
110 | );
111 | 
112 | const transport = new StdioClientTransport({
113 |   command: "./server",
114 |   args: ["--option", "value"],
115 | });
116 | await client.connect(transport);
117 | ```
118 | 
119 | ```python Python
120 | params = StdioServerParameters(
121 |     command="./server",
122 |     args=["--option", "value"]
123 | )
124 | 
125 | async with stdio_client(params) as streams:
126 |     async with ClientSession(streams[0], streams[1]) as session:
127 |         await session.initialize()
128 | ```
129 | 
130 | </CodeGroup>
131 | 
132 | ### Streamable HTTP
133 | 
134 | The Streamable HTTP transport uses HTTP POST requests for client-to-server communication and optional Server-Sent Events (SSE) streams for server-to-client communication.
135 | 
136 | Use Streamable HTTP when:
137 | 
138 | - Building web-based integrations
139 | - Needing client-server communication over HTTP
140 | - Requiring stateful sessions
141 | - Supporting multiple concurrent clients
142 | - Implementing resumable connections
143 | 
144 | #### How it Works
145 | 
146 | 1. **Client-to-Server Communication**: Every JSON-RPC message from client to server is sent as a new HTTP POST request to the MCP endpoint
147 | 2. **Server Responses**: The server can respond either with:
148 |    - A single JSON response (`Content-Type: application/json`)
149 |    - An SSE stream (`Content-Type: text/event-stream`) for multiple messages
150 | 3. **Server-to-Client Communication**: Servers can send requests/notifications to clients via:
151 |    - SSE streams initiated by client requests
152 |    - SSE streams from HTTP GET requests to the MCP endpoint
153 | 
154 | #### Server
155 | 
156 | <CodeGroup>
157 | 
158 | ```typescript TypeScript
159 | import express from "express";
160 | 
161 | const app = express();
162 | 
163 | const server = new Server(
164 |   {
165 |     name: "example-server",
166 |     version: "1.0.0",
167 |   },
168 |   {
169 |     capabilities: {},
170 |   },
171 | );
172 | 
173 | // MCP endpoint handles both POST and GET
174 | app.post("/mcp", async (req, res) => {
175 |   // Handle JSON-RPC request
176 |   const response = await server.handleRequest(req.body);
177 | 
178 |   // Return single response or SSE stream
179 |   if (needsStreaming) {
180 |     res.setHeader("Content-Type", "text/event-stream");
181 |     // Send SSE events...
182 |   } else {
183 |     res.json(response);
184 |   }
185 | });
186 | 
187 | app.get("/mcp", (req, res) => {
188 |   // Optional: Support server-initiated SSE streams
189 |   res.setHeader("Content-Type", "text/event-stream");
190 |   // Send server notifications/requests...
191 | });
192 | 
193 | app.listen(3000);
194 | ```
195 | 
196 | ```python Python
197 | from mcp.server.http import HttpServerTransport
198 | from starlette.applications import Starlette
199 | from starlette.routing import Route
200 | 
201 | app = Server("example-server")
202 | 
203 | async def handle_mcp(scope, receive, send):
204 |     if scope["method"] == "POST":
205 |         # Handle JSON-RPC request
206 |         response = await app.handle_request(request_body)
207 | 
208 |         if needs_streaming:
209 |             # Return SSE stream
210 |             await send_sse_response(send, response)
211 |         else:
212 |             # Return JSON response
213 |             await send_json_response(send, response)
214 | 
215 |     elif scope["method"] == "GET":
216 |         # Optional: Support server-initiated SSE streams
217 |         await send_sse_stream(send)
218 | 
219 | starlette_app = Starlette(
220 |     routes=[
221 |         Route("/mcp", endpoint=handle_mcp, methods=["POST", "GET"]),
222 |     ]
223 | )
224 | ```
225 | 
226 | </CodeGroup>
227 | 
228 | #### Client
229 | 
230 | <CodeGroup>
231 | 
232 | ```typescript TypeScript
233 | const client = new Client(
234 |   {
235 |     name: "example-client",
236 |     version: "1.0.0",
237 |   },
238 |   {
239 |     capabilities: {},
240 |   },
241 | );
242 | 
243 | const transport = new HttpClientTransport(new URL("http://localhost:3000/mcp"));
244 | await client.connect(transport);
245 | ```
246 | 
247 | ```python Python
248 | async with http_client("http://localhost:8000/mcp") as transport:
249 |     async with ClientSession(transport[0], transport[1]) as session:
250 |         await session.initialize()
251 | ```
252 | 
253 | </CodeGroup>
254 | 
255 | #### Session Management
256 | 
257 | Streamable HTTP supports stateful sessions to maintain context across multiple requests:
258 | 
259 | 1. **Session Initialization**: Servers may assign a session ID during initialization by including it in an `Mcp-Session-Id` header
260 | 2. **Session Persistence**: Clients must include the session ID in all subsequent requests using the `Mcp-Session-Id` header
261 | 3. **Session Termination**: Sessions can be explicitly terminated by sending an HTTP DELETE request with the session ID
262 | 
263 | Example session flow:
264 | 
265 | ```typescript
266 | // Server assigns session ID during initialization
267 | app.post("/mcp", (req, res) => {
268 |   if (req.body.method === "initialize") {
269 |     const sessionId = generateSecureId();
270 |     res.setHeader("Mcp-Session-Id", sessionId);
271 |     // Store session state...
272 |   }
273 |   // Handle request...
274 | });
275 | 
276 | // Client includes session ID in subsequent requests
277 | fetch("/mcp", {
278 |   method: "POST",
279 |   headers: {
280 |     "Content-Type": "application/json",
281 |     "Mcp-Session-Id": sessionId,
282 |   },
283 |   body: JSON.stringify(request),
284 | });
285 | ```
286 | 
287 | #### Resumability and Redelivery
288 | 
289 | To support resuming broken connections, Streamable HTTP provides:
290 | 
291 | 1. **Event IDs**: Servers can attach unique IDs to SSE events for tracking
292 | 2. **Resume from Last Event**: Clients can resume by sending the `Last-Event-ID` header
293 | 3. **Message Replay**: Servers can replay missed messages from the disconnection point
294 | 
295 | This ensures reliable message delivery even with unstable network connections.
296 | 
297 | #### Security Considerations
298 | 
299 | When implementing Streamable HTTP transport, follow these security best practices:
300 | 
301 | 1. **Validate Origin Headers**: Always validate the `Origin` header on all incoming connections to prevent DNS rebinding attacks
302 | 2. **Bind to Localhost**: When running locally, bind only to localhost (127.0.0.1) rather than all network interfaces (0.0.0.0)
303 | 3. **Implement Authentication**: Use proper authentication for all connections
304 | 4. **Use HTTPS**: Always use TLS/HTTPS for production deployments
305 | 5. **Validate Session IDs**: Ensure session IDs are cryptographically secure and properly validated
306 | 
307 | Without these protections, attackers could use DNS rebinding to interact with local MCP servers from remote websites.
308 | 
309 | ### Server-Sent Events (SSE) - Deprecated
310 | 
311 | <Note>
312 |   SSE as a standalone transport is deprecated as of protocol version 2024-11-05.
313 |   It has been replaced by Streamable HTTP, which incorporates SSE as an optional
314 |   streaming mechanism. For backwards compatibility information, see the
315 |   [backwards compatibility](#backwards-compatibility) section below.
316 | </Note>
317 | 
318 | The legacy SSE transport enabled server-to-client streaming with HTTP POST requests for client-to-server communication.
319 | 
320 | Previously used when:
321 | 
322 | - Only server-to-client streaming is needed
323 | - Working with restricted networks
324 | - Implementing simple updates
325 | 
326 | #### Legacy Security Considerations
327 | 
328 | The deprecated SSE transport had similar security considerations to Streamable HTTP, particularly regarding DNS rebinding attacks. These same protections should be applied when using SSE streams within the Streamable HTTP transport.
329 | 
330 | #### Server
331 | 
332 | <CodeGroup>
333 | 
334 | ```typescript TypeScript
335 | import express from "express";
336 | 
337 | const app = express();
338 | 
339 | const server = new Server(
340 |   {
341 |     name: "example-server",
342 |     version: "1.0.0",
343 |   },
344 |   {
345 |     capabilities: {},
346 |   },
347 | );
348 | 
349 | let transport: SSEServerTransport | null = null;
350 | 
351 | app.get("/sse", (req, res) => {
352 |   transport = new SSEServerTransport("/messages", res);
353 |   server.connect(transport);
354 | });
355 | 
356 | app.post("/messages", (req, res) => {
357 |   if (transport) {
358 |     transport.handlePostMessage(req, res);
359 |   }
360 | });
361 | 
362 | app.listen(3000);
363 | ```
364 | 
365 | ```python Python
366 | from mcp.server.sse import SseServerTransport
367 | from starlette.applications import Starlette
368 | from starlette.routing import Route
369 | 
370 | app = Server("example-server")
371 | sse = SseServerTransport("/messages")
372 | 
373 | async def handle_sse(scope, receive, send):
374 |     async with sse.connect_sse(scope, receive, send) as streams:
375 |         await app.run(streams[0], streams[1], app.create_initialization_options())
376 | 
377 | async def handle_messages(scope, receive, send):
378 |     await sse.handle_post_message(scope, receive, send)
379 | 
380 | starlette_app = Starlette(
381 |     routes=[
382 |         Route("/sse", endpoint=handle_sse),
383 |         Route("/messages", endpoint=handle_messages, methods=["POST"]),
384 |     ]
385 | )
386 | ```
387 | 
388 | </CodeGroup>
389 | 
390 | #### Client
391 | 
392 | <CodeGroup>
393 | 
394 | ```typescript TypeScript
395 | const client = new Client(
396 |   {
397 |     name: "example-client",
398 |     version: "1.0.0",
399 |   },
400 |   {
401 |     capabilities: {},
402 |   },
403 | );
404 | 
405 | const transport = new SSEClientTransport(new URL("http://localhost:3000/sse"));
406 | await client.connect(transport);
407 | ```
408 | 
409 | ```python Python
410 | async with sse_client("http://localhost:8000/sse") as streams:
411 |     async with ClientSession(streams[0], streams[1]) as session:
412 |         await session.initialize()
413 | ```
414 | 
415 | </CodeGroup>
416 | 
417 | ## Custom Transports
418 | 
419 | MCP makes it easy to implement custom transports for specific needs. Any transport implementation just needs to conform to the Transport interface:
420 | 
421 | You can implement custom transports for:
422 | 
423 | - Custom network protocols
424 | - Specialized communication channels
425 | - Integration with existing systems
426 | - Performance optimization
427 | 
428 | <CodeGroup>
429 | 
430 | ```typescript TypeScript
431 | interface Transport {
432 |   // Start processing messages
433 |   start(): Promise<void>;
434 | 
435 |   // Send a JSON-RPC message
436 |   send(message: JSONRPCMessage): Promise<void>;
437 | 
438 |   // Close the connection
439 |   close(): Promise<void>;
440 | 
441 |   // Callbacks
442 |   onclose?: () => void;
443 |   onerror?: (error: Error) => void;
444 |   onmessage?: (message: JSONRPCMessage) => void;
445 | }
446 | ```
447 | 
448 | ```python Python
449 | # Note that while MCP Servers are often implemented with asyncio, we recommend
450 | # implementing low-level interfaces like transports with `anyio` for wider compatibility.
451 | 
452 | @contextmanager
453 | async def create_transport(
454 |     read_stream: MemoryObjectReceiveStream[JSONRPCMessage | Exception],
455 |     write_stream: MemoryObjectSendStream[JSONRPCMessage]
456 | ):
457 |     """
458 |     Transport interface for MCP.
459 | 
460 |     Args:
461 |         read_stream: Stream to read incoming messages from
462 |         write_stream: Stream to write outgoing messages to
463 |     """
464 |     async with anyio.create_task_group() as tg:
465 |         try:
466 |             # Start processing messages
467 |             tg.start_soon(lambda: process_messages(read_stream))
468 | 
469 |             # Send messages
470 |             async with write_stream:
471 |                 yield write_stream
472 | 
473 |         except Exception as exc:
474 |             # Handle errors
475 |             raise exc
476 |         finally:
477 |             # Clean up
478 |             tg.cancel_scope.cancel()
479 |             await write_stream.aclose()
480 |             await read_stream.aclose()
481 | ```
482 | 
483 | </CodeGroup>
484 | 
485 | ## Error Handling
486 | 
487 | Transport implementations should handle various error scenarios:
488 | 
489 | 1. Connection errors
490 | 2. Message parsing errors
491 | 3. Protocol errors
492 | 4. Network timeouts
493 | 5. Resource cleanup
494 | 
495 | Example error handling:
496 | 
497 | <CodeGroup>
498 | 
499 | ```typescript TypeScript
500 | class ExampleTransport implements Transport {
501 |   async start() {
502 |     try {
503 |       // Connection logic
504 |     } catch (error) {
505 |       this.onerror?.(new Error(`Failed to connect: ${error}`));
506 |       throw error;
507 |     }
508 |   }
509 | 
510 |   async send(message: JSONRPCMessage) {
511 |     try {
512 |       // Sending logic
513 |     } catch (error) {
514 |       this.onerror?.(new Error(`Failed to send message: ${error}`));
515 |       throw error;
516 |     }
517 |   }
518 | }
519 | ```
520 | 
521 | ```python Python
522 | # Note that while MCP Servers are often implemented with asyncio, we recommend
523 | # implementing low-level interfaces like transports with `anyio` for wider compatibility.
524 | 
525 | @contextmanager
526 | async def example_transport(scope: Scope, receive: Receive, send: Send):
527 |     try:
528 |         # Create streams for bidirectional communication
529 |         read_stream_writer, read_stream = anyio.create_memory_object_stream(0)
530 |         write_stream, write_stream_reader = anyio.create_memory_object_stream(0)
531 | 
532 |         async def message_handler():
533 |             try:
534 |                 async with read_stream_writer:
535 |                     # Message handling logic
536 |                     pass
537 |             except Exception as exc:
538 |                 logger.error(f"Failed to handle message: {exc}")
539 |                 raise exc
540 | 
541 |         async with anyio.create_task_group() as tg:
542 |             tg.start_soon(message_handler)
543 |             try:
544 |                 # Yield streams for communication
545 |                 yield read_stream, write_stream
546 |             except Exception as exc:
547 |                 logger.error(f"Transport error: {exc}")
548 |                 raise exc
549 |             finally:
550 |                 tg.cancel_scope.cancel()
551 |                 await write_stream.aclose()
552 |                 await read_stream.aclose()
553 |     except Exception as exc:
554 |         logger.error(f"Failed to initialize transport: {exc}")
555 |         raise exc
556 | ```
557 | 
558 | </CodeGroup>
559 | 
560 | ## Best Practices
561 | 
562 | When implementing or using MCP transport:
563 | 
564 | 1. Handle connection lifecycle properly
565 | 2. Implement proper error handling
566 | 3. Clean up resources on connection close
567 | 4. Use appropriate timeouts
568 | 5. Validate messages before sending
569 | 6. Log transport events for debugging
570 | 7. Implement reconnection logic when appropriate
571 | 8. Handle backpressure in message queues
572 | 9. Monitor connection health
573 | 10. Implement proper security measures
574 | 
575 | ## Security Considerations
576 | 
577 | When implementing transport:
578 | 
579 | ### Authentication and Authorization
580 | 
581 | - Implement proper authentication mechanisms
582 | - Validate client credentials
583 | - Use secure token handling
584 | - Implement authorization checks
585 | 
586 | ### Data Security
587 | 
588 | - Use TLS for network transport
589 | - Encrypt sensitive data
590 | - Validate message integrity
591 | - Implement message size limits
592 | - Sanitize input data
593 | 
594 | ### Network Security
595 | 
596 | - Implement rate limiting
597 | - Use appropriate timeouts
598 | - Handle denial of service scenarios
599 | - Monitor for unusual patterns
600 | - Implement proper firewall rules
601 | - For HTTP-based transports (including Streamable HTTP), validate Origin headers to prevent DNS rebinding attacks
602 | - For local servers, bind only to localhost (127.0.0.1) instead of all interfaces (0.0.0.0)
603 | 
604 | ## Debugging Transport
605 | 
606 | Tips for debugging transport issues:
607 | 
608 | 1. Enable debug logging
609 | 2. Monitor message flow
610 | 3. Check connection states
611 | 4. Validate message formats
612 | 5. Test error scenarios
613 | 6. Use network analysis tools
614 | 7. Implement health checks
615 | 8. Monitor resource usage
616 | 9. Test edge cases
617 | 10. Use proper error tracking
618 | 
619 | ## Backwards Compatibility
620 | 
621 | To maintain compatibility between different protocol versions:
622 | 
623 | ### For Servers Supporting Older Clients
624 | 
625 | Servers wanting to support clients using the deprecated HTTP+SSE transport should:
626 | 
627 | 1. Host both the old SSE and POST endpoints alongside the new MCP endpoint
628 | 2. Handle initialization requests on both endpoints
629 | 3. Maintain separate handling logic for each transport type
630 | 
631 | ### For Clients Supporting Older Servers
632 | 
633 | Clients wanting to support servers using the deprecated transport should:
634 | 
635 | 1. Accept server URLs that may use either transport
636 | 2. Attempt to POST an `InitializeRequest` with proper `Accept` headers:
637 |    - If successful, use Streamable HTTP transport
638 |    - If it fails with 4xx status, fall back to legacy SSE transport
639 | 3. Issue a GET request expecting an SSE stream with `endpoint` event for legacy servers
640 | 
641 | Example compatibility detection:
642 | 
643 | ```typescript
644 | async function detectTransport(serverUrl: string): Promise<TransportType> {
645 |   try {
646 |     // Try Streamable HTTP first
647 |     const response = await fetch(serverUrl, {
648 |       method: "POST",
649 |       headers: {
650 |         "Content-Type": "application/json",
651 |         Accept: "application/json, text/event-stream",
652 |       },
653 |       body: JSON.stringify({
654 |         jsonrpc: "2.0",
655 |         method: "initialize",
656 |         params: {
657 |           /* ... */
658 |         },
659 |       }),
660 |     });
661 | 
662 |     if (response.ok) {
663 |       return "streamable-http";
664 |     }
665 |   } catch (error) {
666 |     // Fall back to legacy SSE
667 |     const sseResponse = await fetch(serverUrl, {
668 |       method: "GET",
669 |       headers: { Accept: "text/event-stream" },
670 |     });
671 | 
672 |     if (sseResponse.ok) {
673 |       return "legacy-sse";
674 |     }
675 |   }
676 | 
677 |   throw new Error("Unsupported transport");
678 | }
679 | ```
680 | 


--------------------------------------------------------------------------------
/docs/legacy/tools/debugging.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Debugging
  3 | description: A comprehensive guide to debugging Model Context Protocol (MCP) integrations
  4 | ---
  5 | 
  6 | Effective debugging is essential when developing MCP servers or integrating them with applications. This guide covers the debugging tools and approaches available in the MCP ecosystem.
  7 | 
  8 | <Info>
  9 | 
 10 | This guide is for macOS. Guides for other platforms are coming soon.
 11 | 
 12 | </Info>
 13 | 
 14 | ## Debugging tools overview
 15 | 
 16 | MCP provides several tools for debugging at different levels:
 17 | 
 18 | 1. **MCP Inspector**
 19 |    - Interactive debugging interface
 20 |    - Direct server testing
 21 |    - See the [Inspector guide](/legacy/tools/inspector) for details
 22 | 
 23 | 2. **Claude Desktop Developer Tools**
 24 |    - Integration testing
 25 |    - Log collection
 26 |    - Chrome DevTools integration
 27 | 
 28 | 3. **Server Logging**
 29 |    - Custom logging implementations
 30 |    - Error tracking
 31 |    - Performance monitoring
 32 | 
 33 | ## Debugging in Claude Desktop
 34 | 
 35 | ### Checking server status
 36 | 
 37 | The Claude.app interface provides basic server status information:
 38 | 
 39 | 1. Click the <img src="/images/claude-desktop-mcp-plug-icon.svg" style={{display: 'inline', margin: 0, height: '1.3em'}} /> icon to view:
 40 |    - Connected servers
 41 |    - Available prompts and resources
 42 | 
 43 | 2. Click the "Search and tools" <img src="/images/claude-desktop-mcp-slider.svg" style={{display: 'inline', margin: 0, height: '1.3em'}} /> icon to view:
 44 |    - Tools made available to the model
 45 | 
 46 | ### Viewing logs
 47 | 
 48 | Review detailed MCP logs from Claude Desktop:
 49 | 
 50 | ```bash
 51 | # Follow logs in real-time
 52 | tail -n 20 -F ~/Library/Logs/Claude/mcp*.log
 53 | ```
 54 | 
 55 | The logs capture:
 56 | 
 57 | - Server connection events
 58 | - Configuration issues
 59 | - Runtime errors
 60 | - Message exchanges
 61 | 
 62 | ### Using Chrome DevTools
 63 | 
 64 | Access Chrome's developer tools inside Claude Desktop to investigate client-side errors:
 65 | 
 66 | 1. Create a `developer_settings.json` file with `allowDevTools` set to true:
 67 | 
 68 | ```bash
 69 | echo '{"allowDevTools": true}' > ~/Library/Application\ Support/Claude/developer_settings.json
 70 | ```
 71 | 
 72 | 2. Open DevTools: `Command-Option-Shift-i`
 73 | 
 74 | Note: You'll see two DevTools windows:
 75 | 
 76 | - Main content window
 77 | - App title bar window
 78 | 
 79 | Use the Console panel to inspect client-side errors.
 80 | 
 81 | Use the Network panel to inspect:
 82 | 
 83 | - Message payloads
 84 | - Connection timing
 85 | 
 86 | ## Common issues
 87 | 
 88 | ### Working directory
 89 | 
 90 | When using MCP servers with Claude Desktop:
 91 | 
 92 | - The working directory for servers launched via `claude_desktop_config.json` may be undefined (like `/` on macOS) since Claude Desktop could be started from anywhere
 93 | - Always use absolute paths in your configuration and `.env` files to ensure reliable operation
 94 | - For testing servers directly via command line, the working directory will be where you run the command
 95 | 
 96 | For example in `claude_desktop_config.json`, use:
 97 | 
 98 | ```json
 99 | {
100 |   "command": "npx",
101 |   "args": [
102 |     "-y",
103 |     "@modelcontextprotocol/server-filesystem",
104 |     "/Users/username/data"
105 |   ]
106 | }
107 | ```
108 | 
109 | Instead of relative paths like `./data`
110 | 
111 | ### Environment variables
112 | 
113 | MCP servers inherit only a subset of environment variables automatically, like `USER`, `HOME`, and `PATH`.
114 | 
115 | To override the default variables or provide your own, you can specify an `env` key in `claude_desktop_config.json`:
116 | 
117 | ```json
118 | {
119 |   "myserver": {
120 |     "command": "mcp-server-myapp",
121 |     "env": {
122 |       "MYAPP_API_KEY": "some_key"
123 |     }
124 |   }
125 | }
126 | ```
127 | 
128 | ### Server initialization
129 | 
130 | Common initialization problems:
131 | 
132 | 1. **Path Issues**
133 |    - Incorrect server executable path
134 |    - Missing required files
135 |    - Permission problems
136 |    - Try using an absolute path for `command`
137 | 
138 | 2. **Configuration Errors**
139 |    - Invalid JSON syntax
140 |    - Missing required fields
141 |    - Type mismatches
142 | 
143 | 3. **Environment Problems**
144 |    - Missing environment variables
145 |    - Incorrect variable values
146 |    - Permission restrictions
147 | 
148 | ### Connection problems
149 | 
150 | When servers fail to connect:
151 | 
152 | 1. Check Claude Desktop logs
153 | 2. Verify server process is running
154 | 3. Test standalone with [Inspector](/legacy/tools/inspector)
155 | 4. Verify protocol compatibility
156 | 
157 | ## Implementing logging
158 | 
159 | ### Server-side logging
160 | 
161 | When building a server that uses the local stdio [transport](/legacy/concepts/transports), all messages logged to stderr (standard error) will be captured by the host application (e.g., Claude Desktop) automatically.
162 | 
163 | <Warning>
164 | 
165 | Local MCP servers should not log messages to stdout (standard out), as this will interfere with protocol operation.
166 | 
167 | </Warning>
168 | 
169 | For all [transports](/legacy/concepts/transports), you can also provide logging to the client by sending a log message notification:
170 | 
171 | <CodeGroup>
172 | 
173 | ```python Python
174 | server.request_context.session.send_log_message(
175 |   level="info",
176 |   data="Server started successfully",
177 | )
178 | ```
179 | 
180 | ```typescript TypeScript
181 | server.sendLoggingMessage({
182 |   level: "info",
183 |   data: "Server started successfully",
184 | });
185 | ```
186 | 
187 | </CodeGroup>
188 | 
189 | Important events to log:
190 | 
191 | - Initialization steps
192 | - Resource access
193 | - Tool execution
194 | - Error conditions
195 | - Performance metrics
196 | 
197 | ### Client-side logging
198 | 
199 | In client applications:
200 | 
201 | 1. Enable debug logging
202 | 2. Monitor network traffic
203 | 3. Track message exchanges
204 | 4. Record error states
205 | 
206 | ## Debugging workflow
207 | 
208 | ### Development cycle
209 | 
210 | 1. Initial Development
211 |    - Use [Inspector](/legacy/tools/inspector) for basic testing
212 |    - Implement core functionality
213 |    - Add logging points
214 | 
215 | 2. Integration Testing
216 |    - Test in Claude Desktop
217 |    - Monitor logs
218 |    - Check error handling
219 | 
220 | ### Testing changes
221 | 
222 | To test changes efficiently:
223 | 
224 | - **Configuration changes**: Restart Claude Desktop
225 | - **Server code changes**: Use Command-R to reload
226 | - **Quick iteration**: Use [Inspector](/legacy/tools/inspector) during development
227 | 
228 | ## Best practices
229 | 
230 | ### Logging strategy
231 | 
232 | 1. **Structured Logging**
233 |    - Use consistent formats
234 |    - Include context
235 |    - Add timestamps
236 |    - Track request IDs
237 | 
238 | 2. **Error Handling**
239 |    - Log stack traces
240 |    - Include error context
241 |    - Track error patterns
242 |    - Monitor recovery
243 | 
244 | 3. **Performance Tracking**
245 |    - Log operation timing
246 |    - Monitor resource usage
247 |    - Track message sizes
248 |    - Measure latency
249 | 
250 | ### Security considerations
251 | 
252 | When debugging:
253 | 
254 | 1. **Sensitive Data**
255 |    - Sanitize logs
256 |    - Protect credentials
257 |    - Mask personal information
258 | 
259 | 2. **Access Control**
260 |    - Verify permissions
261 |    - Check authentication
262 |    - Monitor access patterns
263 | 
264 | ## Getting help
265 | 
266 | When encountering issues:
267 | 
268 | 1. **First Steps**
269 |    - Check server logs
270 |    - Test with [Inspector](/legacy/tools/inspector)
271 |    - Review configuration
272 |    - Verify environment
273 | 
274 | 2. **Support Channels**
275 |    - GitHub issues
276 |    - GitHub discussions
277 | 
278 | 3. **Providing Information**
279 |    - Log excerpts
280 |    - Configuration files
281 |    - Steps to reproduce
282 |    - Environment details
283 | 
284 | ## Next steps
285 | 
286 | <CardGroup cols={2}>
287 |   <Card
288 |     title="MCP Inspector"
289 |     icon="magnifying-glass"
290 |     href="/legacy/tools/inspector"
291 |   >
292 |     Learn to use the MCP Inspector
293 |   </Card>
294 | </CardGroup>
295 | 


--------------------------------------------------------------------------------
/docs/legacy/tools/inspector.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Inspector
  3 | description: In-depth guide to using the MCP Inspector for testing and debugging Model Context Protocol servers
  4 | ---
  5 | 
  6 | The [MCP Inspector](https://github.com/modelcontextprotocol/inspector) is an interactive developer tool for testing and debugging MCP servers. While the [Debugging Guide](/legacy/tools/debugging) covers the Inspector as part of the overall debugging toolkit, this document provides a detailed exploration of the Inspector's features and capabilities.
  7 | 
  8 | ## Getting started
  9 | 
 10 | ### Installation and basic usage
 11 | 
 12 | The Inspector runs directly through `npx` without requiring installation:
 13 | 
 14 | ```bash
 15 | npx @modelcontextprotocol/inspector <command>
 16 | ```
 17 | 
 18 | ```bash
 19 | npx @modelcontextprotocol/inspector <command> <arg1> <arg2>
 20 | ```
 21 | 
 22 | #### Inspecting servers from NPM or PyPi
 23 | 
 24 | A common way to start server packages from [NPM](https://npmjs.com) or [PyPi](https://pypi.org).
 25 | 
 26 | <Tabs>
 27 | 
 28 |   <Tab title="NPM package">
 29 | 
 30 | ```bash
 31 | npx -y @modelcontextprotocol/inspector npx <package-name> <args>
 32 | # For example
 33 | npx -y @modelcontextprotocol/inspector npx @modelcontextprotocol/server-filesystem /Users/username/Desktop
 34 | ```
 35 | 
 36 |   </Tab>
 37 | 
 38 |   <Tab title="PyPi package">
 39 | 
 40 | ```bash
 41 | npx @modelcontextprotocol/inspector uvx <package-name> <args>
 42 | # For example
 43 | npx @modelcontextprotocol/inspector uvx mcp-server-git --repository ~/code/mcp/servers.git
 44 | ```
 45 | 
 46 |   </Tab>
 47 | </Tabs>
 48 | 
 49 | #### Inspecting locally developed servers
 50 | 
 51 | To inspect servers locally developed or downloaded as a repository, the most common
 52 | way is:
 53 | 
 54 | <Tabs>
 55 |   <Tab title="TypeScript">
 56 | 
 57 | ```bash
 58 | npx @modelcontextprotocol/inspector node path/to/server/index.js args...
 59 | ```
 60 | 
 61 |   </Tab>
 62 |   <Tab title="Python">
 63 | 
 64 | ```bash
 65 | npx @modelcontextprotocol/inspector \
 66 |   uv \
 67 |   --directory path/to/server \
 68 |   run \
 69 |   package-name \
 70 |   args...
 71 | ```
 72 | 
 73 |   </Tab>
 74 | </Tabs>
 75 | 
 76 | Please carefully read any attached README for the most accurate instructions.
 77 | 
 78 | ## Feature overview
 79 | 
 80 | <Frame caption="The MCP Inspector interface">
 81 |   <img src="/images/mcp-inspector.png" />
 82 | </Frame>
 83 | 
 84 | The Inspector provides several features for interacting with your MCP server:
 85 | 
 86 | ### Server connection pane
 87 | 
 88 | - Allows selecting the [transport](/legacy/concepts/transports) for connecting to the server
 89 | - For local servers, supports customizing the command-line arguments and environment
 90 | 
 91 | ### Resources tab
 92 | 
 93 | - Lists all available resources
 94 | - Shows resource metadata (MIME types, descriptions)
 95 | - Allows resource content inspection
 96 | - Supports subscription testing
 97 | 
 98 | ### Prompts tab
 99 | 
100 | - Displays available prompt templates
101 | - Shows prompt arguments and descriptions
102 | - Enables prompt testing with custom arguments
103 | - Previews generated messages
104 | 
105 | ### Tools tab
106 | 
107 | - Lists available tools
108 | - Shows tool schemas and descriptions
109 | - Enables tool testing with custom inputs
110 | - Displays tool execution results
111 | 
112 | ### Notifications pane
113 | 
114 | - Presents all logs recorded from the server
115 | - Shows notifications received from the server
116 | 
117 | ## Best practices
118 | 
119 | ### Development workflow
120 | 
121 | 1. Start Development
122 |    - Launch Inspector with your server
123 |    - Verify basic connectivity
124 |    - Check capability negotiation
125 | 
126 | 2. Iterative testing
127 |    - Make server changes
128 |    - Rebuild the server
129 |    - Reconnect the Inspector
130 |    - Test affected features
131 |    - Monitor messages
132 | 
133 | 3. Test edge cases
134 |    - Invalid inputs
135 |    - Missing prompt arguments
136 |    - Concurrent operations
137 |    - Verify error handling and error responses
138 | 
139 | ## Next steps
140 | 
141 | <CardGroup cols={2}>
142 |     <Card
143 |         title="Inspector Repository"
144 |         icon="github"
145 |         href="https://github.com/modelcontextprotocol/inspector"
146 |     >
147 |         Check out the MCP Inspector source code
148 |     </Card>
149 | 
150 |     <Card
151 |         title="Debugging Guide"
152 |         icon="bug"
153 |         href="/legacy/tools/debugging"
154 |     >
155 |         Learn about broader debugging strategies
156 |     </Card>
157 | 
158 | </CardGroup>
159 | 


--------------------------------------------------------------------------------
/docs/logo/dark.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/logo/dark.png


--------------------------------------------------------------------------------
/docs/logo/dark.svg:
--------------------------------------------------------------------------------
1 | <svg width="1338" height="195" viewBox="0 0 1338 195" fill="none" xmlns="http://www.w3.org/2000/svg">
2 | <path d="M25 97.8528L92.8822 29.9706C102.255 20.598 117.451 20.598 126.823 29.9706V29.9706C136.196 39.3431 136.196 54.5391 126.823 63.9117L75.5581 115.177" stroke="white" stroke-width="12" stroke-linecap="round"/>
3 | <path d="M76.2652 114.47L126.823 63.9117C136.196 54.5391 151.392 54.5391 160.765 63.9117L161.118 64.2652C170.491 73.6378 170.491 88.8338 161.118 98.2063L99.7248 159.6C96.6006 162.724 96.6006 167.789 99.7248 170.913L112.331 183.52" stroke="white" stroke-width="12" stroke-linecap="round"/>
4 | <path d="M109.853 46.9411L59.6482 97.1457C50.2756 106.518 50.2756 121.714 59.6482 131.087V131.087C69.0208 140.459 84.2167 140.459 93.5893 131.087L143.794 80.8822" stroke="white" stroke-width="12" stroke-linecap="round"/>
5 | <path d="M223.886 63.1818H239.364L260.091 113.773H260.909L281.636 63.1818H297.114V133H284.977V85.0341H284.33L265.034 132.795H255.966L236.67 84.9318H236.023V133H223.886V63.1818ZM333.182 134.023C328.068 134.023 323.636 132.898 319.886 130.648C316.136 128.398 313.227 125.25 311.159 121.205C309.114 117.159 308.091 112.432 308.091 107.023C308.091 101.614 309.114 96.875 311.159 92.8068C313.227 88.7386 316.136 85.5795 319.886 83.3295C323.636 81.0795 328.068 79.9545 333.182 79.9545C338.295 79.9545 342.727 81.0795 346.477 83.3295C350.227 85.5795 353.125 88.7386 355.17 92.8068C357.239 96.875 358.273 101.614 358.273 107.023C358.273 112.432 357.239 117.159 355.17 121.205C353.125 125.25 350.227 128.398 346.477 130.648C342.727 132.898 338.295 134.023 333.182 134.023ZM333.25 124.136C336.023 124.136 338.341 123.375 340.205 121.852C342.068 120.307 343.455 118.239 344.364 115.648C345.295 113.057 345.761 110.17 345.761 106.989C345.761 103.784 345.295 100.886 344.364 98.2955C343.455 95.6818 342.068 93.6023 340.205 92.0568C338.341 90.5114 336.023 89.7386 333.25 89.7386C330.409 89.7386 328.045 90.5114 326.159 92.0568C324.295 93.6023 322.898 95.6818 321.966 98.2955C321.057 100.886 320.602 103.784 320.602 106.989C320.602 110.17 321.057 113.057 321.966 115.648C322.898 118.239 324.295 120.307 326.159 121.852C328.045 123.375 330.409 124.136 333.25 124.136ZM388.179 133.92C384.065 133.92 380.384 132.864 377.134 130.75C373.884 128.636 371.315 125.568 369.429 121.545C367.543 117.523 366.599 112.636 366.599 106.886C366.599 101.068 367.554 96.1591 369.463 92.1591C371.395 88.1364 373.997 85.1023 377.27 83.0568C380.543 80.9886 384.19 79.9545 388.213 79.9545C391.281 79.9545 393.804 80.4773 395.781 81.5227C397.759 82.5455 399.327 83.7841 400.486 85.2386C401.645 86.6705 402.543 88.0227 403.179 89.2955H403.69V63.1818H416.065V133H403.929V124.75H403.179C402.543 126.023 401.622 127.375 400.418 128.807C399.213 130.216 397.622 131.42 395.645 132.42C393.668 133.42 391.179 133.92 388.179 133.92ZM391.622 123.795C394.236 123.795 396.463 123.091 398.304 121.682C400.145 120.25 401.543 118.261 402.497 115.716C403.452 113.17 403.929 110.205 403.929 106.818C403.929 103.432 403.452 100.489 402.497 97.9886C401.565 95.4886 400.179 93.5455 398.338 92.1591C396.52 90.7727 394.281 90.0795 391.622 90.0795C388.872 90.0795 386.577 90.7955 384.736 92.2273C382.895 93.6591 381.509 95.6364 380.577 98.1591C379.645 100.682 379.179 103.568 379.179 106.818C379.179 110.091 379.645 113.011 380.577 115.58C381.531 118.125 382.929 120.136 384.77 121.614C386.634 123.068 388.918 123.795 391.622 123.795ZM452.398 134.023C447.148 134.023 442.614 132.932 438.795 130.75C435 128.545 432.08 125.432 430.034 121.409C427.989 117.364 426.966 112.602 426.966 107.125C426.966 101.739 427.989 97.0114 430.034 92.9432C432.102 88.8523 434.989 85.6705 438.693 83.3977C442.398 81.1023 446.75 79.9545 451.75 79.9545C454.977 79.9545 458.023 80.4773 460.886 81.5227C463.773 82.5455 466.318 84.1364 468.523 86.2955C470.75 88.4545 472.5 91.2045 473.773 94.5455C475.045 97.8636 475.682 101.818 475.682 106.409V110.193H432.761V101.875H463.852C463.83 99.5114 463.318 97.4091 462.318 95.5682C461.318 93.7045 459.92 92.2386 458.125 91.1705C456.352 90.1023 454.284 89.5682 451.92 89.5682C449.398 89.5682 447.182 90.1818 445.273 91.4091C443.364 92.6136 441.875 94.2045 440.807 96.1818C439.761 98.1364 439.227 100.284 439.205 102.625V109.886C439.205 112.932 439.761 115.545 440.875 117.727C441.989 119.886 443.545 121.545 445.545 122.705C447.545 123.841 449.886 124.409 452.568 124.409C454.364 124.409 455.989 124.159 457.443 123.659C458.898 123.136 460.159 122.375 461.227 121.375C462.295 120.375 463.102 119.136 463.648 117.659L475.17 118.955C474.443 122 473.057 124.659 471.011 126.932C468.989 129.182 466.398 130.932 463.239 132.182C460.08 133.409 456.466 134.023 452.398 134.023ZM498.463 63.1818V133H486.122V63.1818H498.463ZM595.273 86.7386H582.523C582.159 84.6477 581.489 82.7955 580.511 81.1818C579.534 79.5455 578.318 78.1591 576.864 77.0227C575.409 75.8864 573.75 75.0341 571.886 74.4659C570.045 73.875 568.057 73.5795 565.92 73.5795C562.125 73.5795 558.761 74.5341 555.83 76.4432C552.898 78.3295 550.602 81.1023 548.943 84.7614C547.284 88.3977 546.455 92.8409 546.455 98.0909C546.455 103.432 547.284 107.932 548.943 111.591C550.625 115.227 552.92 117.977 555.83 119.841C558.761 121.682 562.114 122.602 565.886 122.602C567.977 122.602 569.932 122.33 571.75 121.784C573.591 121.216 575.239 120.386 576.693 119.295C578.17 118.205 579.409 116.864 580.409 115.273C581.432 113.682 582.136 111.864 582.523 109.818L595.273 109.886C594.795 113.205 593.761 116.318 592.17 119.227C590.602 122.136 588.545 124.705 586 126.932C583.455 129.136 580.477 130.864 577.068 132.114C573.659 133.341 569.875 133.955 565.716 133.955C559.58 133.955 554.102 132.534 549.284 129.693C544.466 126.852 540.67 122.75 537.898 117.386C535.125 112.023 533.739 105.591 533.739 98.0909C533.739 90.5682 535.136 84.1364 537.932 78.7955C540.727 73.4318 544.534 69.3295 549.352 66.4886C554.17 63.6477 559.625 62.2273 565.716 62.2273C569.602 62.2273 573.216 62.7727 576.557 63.8636C579.898 64.9545 582.875 66.5568 585.489 68.6705C588.102 70.7614 590.25 73.3295 591.932 76.375C593.636 79.3977 594.75 82.8523 595.273 86.7386ZM629.151 134.023C624.037 134.023 619.605 132.898 615.855 130.648C612.105 128.398 609.196 125.25 607.128 121.205C605.082 117.159 604.06 112.432 604.06 107.023C604.06 101.614 605.082 96.875 607.128 92.8068C609.196 88.7386 612.105 85.5795 615.855 83.3295C619.605 81.0795 624.037 79.9545 629.151 79.9545C634.264 79.9545 638.696 81.0795 642.446 83.3295C646.196 85.5795 649.094 88.7386 651.139 92.8068C653.207 96.875 654.241 101.614 654.241 107.023C654.241 112.432 653.207 117.159 651.139 121.205C649.094 125.25 646.196 128.398 642.446 130.648C638.696 132.898 634.264 134.023 629.151 134.023ZM629.219 124.136C631.991 124.136 634.31 123.375 636.173 121.852C638.037 120.307 639.423 118.239 640.332 115.648C641.264 113.057 641.73 110.17 641.73 106.989C641.73 103.784 641.264 100.886 640.332 98.2955C639.423 95.6818 638.037 93.6023 636.173 92.0568C634.31 90.5114 631.991 89.7386 629.219 89.7386C626.378 89.7386 624.014 90.5114 622.128 92.0568C620.264 93.6023 618.866 95.6818 617.935 98.2955C617.026 100.886 616.571 103.784 616.571 106.989C616.571 110.17 617.026 113.057 617.935 115.648C618.866 118.239 620.264 120.307 622.128 121.852C624.014 123.375 626.378 124.136 629.219 124.136ZM677.057 102.318V133H664.716V80.6364H676.511V89.5341H677.125C678.33 86.6023 680.25 84.2727 682.886 82.5455C685.545 80.8182 688.83 79.9545 692.739 79.9545C696.352 79.9545 699.5 80.7273 702.182 82.2727C704.886 83.8182 706.977 86.0568 708.455 88.9886C709.955 91.9205 710.693 95.4773 710.67 99.6591V133H698.33V101.568C698.33 98.0682 697.42 95.3295 695.602 93.3523C693.807 91.375 691.318 90.3864 688.136 90.3864C685.977 90.3864 684.057 90.8636 682.375 91.8182C680.716 92.75 679.409 94.1023 678.455 95.875C677.523 97.6477 677.057 99.7955 677.057 102.318ZM749.364 80.6364V90.1818H719.261V80.6364H749.364ZM726.693 68.0909H739.034V117.25C739.034 118.909 739.284 120.182 739.784 121.068C740.307 121.932 740.989 122.523 741.83 122.841C742.67 123.159 743.602 123.318 744.625 123.318C745.398 123.318 746.102 123.261 746.739 123.148C747.398 123.034 747.898 122.932 748.239 122.841L750.318 132.489C749.659 132.716 748.716 132.966 747.489 133.239C746.284 133.511 744.807 133.67 743.057 133.716C739.966 133.807 737.182 133.341 734.705 132.318C732.227 131.273 730.261 129.659 728.807 127.477C727.375 125.295 726.67 122.568 726.693 119.295V68.0909ZM782.304 134.023C777.054 134.023 772.52 132.932 768.702 130.75C764.906 128.545 761.986 125.432 759.94 121.409C757.895 117.364 756.872 112.602 756.872 107.125C756.872 101.739 757.895 97.0114 759.94 92.9432C762.009 88.8523 764.895 85.6705 768.599 83.3977C772.304 81.1023 776.656 79.9545 781.656 79.9545C784.884 79.9545 787.929 80.4773 790.793 81.5227C793.679 82.5455 796.224 84.1364 798.429 86.2955C800.656 88.4545 802.406 91.2045 803.679 94.5455C804.952 97.8636 805.588 101.818 805.588 106.409V110.193H762.668V101.875H793.759C793.736 99.5114 793.224 97.4091 792.224 95.5682C791.224 93.7045 789.827 92.2386 788.031 91.1705C786.259 90.1023 784.19 89.5682 781.827 89.5682C779.304 89.5682 777.088 90.1818 775.179 91.4091C773.27 92.6136 771.781 94.2045 770.713 96.1818C769.668 98.1364 769.134 100.284 769.111 102.625V109.886C769.111 112.932 769.668 115.545 770.781 117.727C771.895 119.886 773.452 121.545 775.452 122.705C777.452 123.841 779.793 124.409 782.474 124.409C784.27 124.409 785.895 124.159 787.349 123.659C788.804 123.136 790.065 122.375 791.134 121.375C792.202 120.375 793.009 119.136 793.554 117.659L805.077 118.955C804.349 122 802.963 124.659 800.918 126.932C798.895 129.182 796.304 130.932 793.145 132.182C789.986 133.409 786.372 134.023 782.304 134.023ZM824.994 80.6364L835.562 99.9659L846.301 80.6364H859.358L843.574 106.818L859.631 133H846.642L835.562 114.148L824.585 133H811.494L827.449 106.818L811.903 80.6364H824.994ZM895.051 80.6364V90.1818H864.949V80.6364H895.051ZM872.381 68.0909H884.722V117.25C884.722 118.909 884.972 120.182 885.472 121.068C885.994 121.932 886.676 122.523 887.517 122.841C888.358 123.159 889.29 123.318 890.312 123.318C891.085 123.318 891.79 123.261 892.426 123.148C893.085 123.034 893.585 122.932 893.926 122.841L896.006 132.489C895.347 132.716 894.403 132.966 893.176 133.239C891.972 133.511 890.494 133.67 888.744 133.716C885.653 133.807 882.869 133.341 880.392 132.318C877.915 131.273 875.949 129.659 874.494 127.477C873.063 125.295 872.358 122.568 872.381 119.295V68.0909ZM929.73 133V63.1818H955.912C961.276 63.1818 965.776 64.1818 969.412 66.1818C973.071 68.1818 975.832 70.9318 977.696 74.4318C979.582 77.9091 980.526 81.8636 980.526 86.2955C980.526 90.7727 979.582 94.75 977.696 98.2273C975.81 101.705 973.026 104.443 969.344 106.443C965.662 108.42 961.128 109.409 955.741 109.409H938.389V99.0114H954.037C957.173 99.0114 959.741 98.4659 961.741 97.375C963.741 96.2841 965.219 94.7841 966.173 92.875C967.151 90.9659 967.639 88.7727 967.639 86.2955C967.639 83.8182 967.151 81.6364 966.173 79.75C965.219 77.8636 963.73 76.3977 961.707 75.3523C959.707 74.2841 957.128 73.75 953.969 73.75H942.378V133H929.73ZM990.966 133V80.6364H1002.93V89.3636H1003.48C1004.43 86.3409 1006.07 84.0114 1008.39 82.375C1010.73 80.7159 1013.4 79.8864 1016.4 79.8864C1017.08 79.8864 1017.84 79.9205 1018.68 79.9886C1019.55 80.0341 1020.26 80.1136 1020.83 80.2273V91.5795C1020.31 91.3977 1019.48 91.2386 1018.34 91.1023C1017.23 90.9432 1016.15 90.8636 1015.1 90.8636C1012.85 90.8636 1010.83 91.3523 1009.03 92.3295C1007.26 93.2841 1005.86 94.6136 1004.84 96.3182C1003.82 98.0227 1003.31 99.9886 1003.31 102.216V133H990.966ZM1049.71 134.023C1044.6 134.023 1040.17 132.898 1036.42 130.648C1032.67 128.398 1029.76 125.25 1027.69 121.205C1025.64 117.159 1024.62 112.432 1024.62 107.023C1024.62 101.614 1025.64 96.875 1027.69 92.8068C1029.76 88.7386 1032.67 85.5795 1036.42 83.3295C1040.17 81.0795 1044.6 79.9545 1049.71 79.9545C1054.83 79.9545 1059.26 81.0795 1063.01 83.3295C1066.76 85.5795 1069.66 88.7386 1071.7 92.8068C1073.77 96.875 1074.8 101.614 1074.8 107.023C1074.8 112.432 1073.77 117.159 1071.7 121.205C1069.66 125.25 1066.76 128.398 1063.01 130.648C1059.26 132.898 1054.83 134.023 1049.71 134.023ZM1049.78 124.136C1052.55 124.136 1054.87 123.375 1056.74 121.852C1058.6 120.307 1059.99 118.239 1060.89 115.648C1061.83 113.057 1062.29 110.17 1062.29 106.989C1062.29 103.784 1061.83 100.886 1060.89 98.2955C1059.99 95.6818 1058.6 93.6023 1056.74 92.0568C1054.87 90.5114 1052.55 89.7386 1049.78 89.7386C1046.94 89.7386 1044.58 90.5114 1042.69 92.0568C1040.83 93.6023 1039.43 95.6818 1038.5 98.2955C1037.59 100.886 1037.13 103.784 1037.13 106.989C1037.13 110.17 1037.59 113.057 1038.5 115.648C1039.43 118.239 1040.83 120.307 1042.69 121.852C1044.58 123.375 1046.94 124.136 1049.78 124.136ZM1111.43 80.6364V90.1818H1081.32V80.6364H1111.43ZM1088.76 68.0909H1101.1V117.25C1101.1 118.909 1101.35 120.182 1101.85 121.068C1102.37 121.932 1103.05 122.523 1103.89 122.841C1104.73 123.159 1105.66 123.318 1106.69 123.318C1107.46 123.318 1108.16 123.261 1108.8 123.148C1109.46 123.034 1109.96 122.932 1110.3 122.841L1112.38 132.489C1111.72 132.716 1110.78 132.966 1109.55 133.239C1108.35 133.511 1106.87 133.67 1105.12 133.716C1102.03 133.807 1099.24 133.341 1096.77 132.318C1094.29 131.273 1092.32 129.659 1090.87 127.477C1089.44 125.295 1088.73 122.568 1088.76 119.295V68.0909ZM1144.03 134.023C1138.91 134.023 1134.48 132.898 1130.73 130.648C1126.98 128.398 1124.07 125.25 1122 121.205C1119.96 117.159 1118.93 112.432 1118.93 107.023C1118.93 101.614 1119.96 96.875 1122 92.8068C1124.07 88.7386 1126.98 85.5795 1130.73 83.3295C1134.48 81.0795 1138.91 79.9545 1144.03 79.9545C1149.14 79.9545 1153.57 81.0795 1157.32 83.3295C1161.07 85.5795 1163.97 88.7386 1166.01 92.8068C1168.08 96.875 1169.12 101.614 1169.12 107.023C1169.12 112.432 1168.08 117.159 1166.01 121.205C1163.97 125.25 1161.07 128.398 1157.32 130.648C1153.57 132.898 1149.14 134.023 1144.03 134.023ZM1144.09 124.136C1146.87 124.136 1149.18 123.375 1151.05 121.852C1152.91 120.307 1154.3 118.239 1155.21 115.648C1156.14 113.057 1156.61 110.17 1156.61 106.989C1156.61 103.784 1156.14 100.886 1155.21 98.2955C1154.3 95.6818 1152.91 93.6023 1151.05 92.0568C1149.18 90.5114 1146.87 89.7386 1144.09 89.7386C1141.25 89.7386 1138.89 90.5114 1137 92.0568C1135.14 93.6023 1133.74 95.6818 1132.81 98.2955C1131.9 100.886 1131.45 103.784 1131.45 106.989C1131.45 110.17 1131.9 113.057 1132.81 115.648C1133.74 118.239 1135.14 120.307 1137 121.852C1138.89 123.375 1141.25 124.136 1144.09 124.136ZM1202.43 134.023C1197.2 134.023 1192.72 132.875 1188.97 130.58C1185.24 128.284 1182.36 125.114 1180.34 121.068C1178.34 117 1177.34 112.318 1177.34 107.023C1177.34 101.705 1178.36 97.0114 1180.41 92.9432C1182.45 88.8523 1185.34 85.6705 1189.07 83.3977C1192.82 81.1023 1197.25 79.9545 1202.36 79.9545C1206.61 79.9545 1210.38 80.7386 1213.65 82.3068C1216.94 83.8523 1219.57 86.0455 1221.52 88.8864C1223.48 91.7045 1224.59 95 1224.86 98.7727H1213.07C1212.59 96.25 1211.45 94.1477 1209.66 92.4659C1207.89 90.7614 1205.51 89.9091 1202.53 89.9091C1200.01 89.9091 1197.8 90.5909 1195.89 91.9545C1193.98 93.2955 1192.49 95.2273 1191.42 97.75C1190.38 100.273 1189.85 103.295 1189.85 106.818C1189.85 110.386 1190.38 113.455 1191.42 116.023C1192.47 118.568 1193.93 120.534 1195.82 121.92C1197.73 123.284 1199.97 123.966 1202.53 123.966C1204.35 123.966 1205.98 123.625 1207.41 122.943C1208.86 122.239 1210.08 121.227 1211.06 119.909C1212.03 118.591 1212.7 116.989 1213.07 115.102H1224.86C1224.57 118.807 1223.48 122.091 1221.59 124.955C1219.7 127.795 1217.14 130.023 1213.89 131.636C1210.64 133.227 1206.82 134.023 1202.43 134.023ZM1257.84 134.023C1252.72 134.023 1248.29 132.898 1244.54 130.648C1240.79 128.398 1237.88 125.25 1235.82 121.205C1233.77 117.159 1232.75 112.432 1232.75 107.023C1232.75 101.614 1233.77 96.875 1235.82 92.8068C1237.88 88.7386 1240.79 85.5795 1244.54 83.3295C1248.29 81.0795 1252.72 79.9545 1257.84 79.9545C1262.95 79.9545 1267.38 81.0795 1271.13 83.3295C1274.88 85.5795 1277.78 88.7386 1279.83 92.8068C1281.89 96.875 1282.93 101.614 1282.93 107.023C1282.93 112.432 1281.89 117.159 1279.83 121.205C1277.78 125.25 1274.88 128.398 1271.13 130.648C1267.38 132.898 1262.95 134.023 1257.84 134.023ZM1257.91 124.136C1260.68 124.136 1263 123.375 1264.86 121.852C1266.72 120.307 1268.11 118.239 1269.02 115.648C1269.95 113.057 1270.42 110.17 1270.42 106.989C1270.42 103.784 1269.95 100.886 1269.02 98.2955C1268.11 95.6818 1266.72 93.6023 1264.86 92.0568C1263 90.5114 1260.68 89.7386 1257.91 89.7386C1255.07 89.7386 1252.7 90.5114 1250.82 92.0568C1248.95 93.6023 1247.55 95.6818 1246.62 98.2955C1245.71 100.886 1245.26 103.784 1245.26 106.989C1245.26 110.17 1245.71 113.057 1246.62 115.648C1247.55 118.239 1248.95 120.307 1250.82 121.852C1252.7 123.375 1255.07 124.136 1257.91 124.136ZM1305.74 63.1818V133H1293.4V63.1818H1305.74Z" fill="white"/>
6 | </svg>
7 | 


--------------------------------------------------------------------------------
/docs/logo/light.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/logo/light.png


--------------------------------------------------------------------------------
/docs/logo/light.svg:
--------------------------------------------------------------------------------
1 | <svg width="1338" height="195" viewBox="0 0 1338 195" fill="none" xmlns="http://www.w3.org/2000/svg">
2 | <path d="M25 97.8528L92.8823 29.9706C102.255 20.598 117.451 20.598 126.823 29.9706V29.9706C136.196 39.3431 136.196 54.5391 126.823 63.9117L75.5581 115.177" stroke="black" stroke-width="12" stroke-linecap="round"/>
3 | <path d="M76.2653 114.47L126.823 63.9117C136.196 54.5391 151.392 54.5391 160.765 63.9117L161.118 64.2652C170.491 73.6378 170.491 88.8338 161.118 98.2063L99.7248 159.6C96.6006 162.724 96.6006 167.789 99.7248 170.913L112.331 183.52" stroke="black" stroke-width="12" stroke-linecap="round"/>
4 | <path d="M109.853 46.9411L59.6482 97.1457C50.2757 106.518 50.2757 121.714 59.6482 131.087V131.087C69.0208 140.459 84.2168 140.459 93.5894 131.087L143.794 80.8822" stroke="black" stroke-width="12" stroke-linecap="round"/>
5 | <path d="M223.886 63.1818H239.364L260.091 113.773H260.909L281.636 63.1818H297.114V133H284.977V85.0341H284.33L265.034 132.795H255.966L236.67 84.9318H236.023V133H223.886V63.1818ZM333.182 134.023C328.068 134.023 323.636 132.898 319.886 130.648C316.136 128.398 313.227 125.25 311.159 121.205C309.114 117.159 308.091 112.432 308.091 107.023C308.091 101.614 309.114 96.875 311.159 92.8068C313.227 88.7386 316.136 85.5795 319.886 83.3295C323.636 81.0795 328.068 79.9545 333.182 79.9545C338.295 79.9545 342.727 81.0795 346.477 83.3295C350.227 85.5795 353.125 88.7386 355.17 92.8068C357.239 96.875 358.273 101.614 358.273 107.023C358.273 112.432 357.239 117.159 355.17 121.205C353.125 125.25 350.227 128.398 346.477 130.648C342.727 132.898 338.295 134.023 333.182 134.023ZM333.25 124.136C336.023 124.136 338.341 123.375 340.205 121.852C342.068 120.307 343.455 118.239 344.364 115.648C345.295 113.057 345.761 110.17 345.761 106.989C345.761 103.784 345.295 100.886 344.364 98.2955C343.455 95.6818 342.068 93.6023 340.205 92.0568C338.341 90.5114 336.023 89.7386 333.25 89.7386C330.409 89.7386 328.045 90.5114 326.159 92.0568C324.295 93.6023 322.898 95.6818 321.966 98.2955C321.057 100.886 320.602 103.784 320.602 106.989C320.602 110.17 321.057 113.057 321.966 115.648C322.898 118.239 324.295 120.307 326.159 121.852C328.045 123.375 330.409 124.136 333.25 124.136ZM388.179 133.92C384.065 133.92 380.384 132.864 377.134 130.75C373.884 128.636 371.315 125.568 369.429 121.545C367.543 117.523 366.599 112.636 366.599 106.886C366.599 101.068 367.554 96.1591 369.463 92.1591C371.395 88.1364 373.997 85.1023 377.27 83.0568C380.543 80.9886 384.19 79.9545 388.213 79.9545C391.281 79.9545 393.804 80.4773 395.781 81.5227C397.759 82.5455 399.327 83.7841 400.486 85.2386C401.645 86.6705 402.543 88.0227 403.179 89.2955H403.69V63.1818H416.065V133H403.929V124.75H403.179C402.543 126.023 401.622 127.375 400.418 128.807C399.213 130.216 397.622 131.42 395.645 132.42C393.668 133.42 391.179 133.92 388.179 133.92ZM391.622 123.795C394.236 123.795 396.463 123.091 398.304 121.682C400.145 120.25 401.543 118.261 402.497 115.716C403.452 113.17 403.929 110.205 403.929 106.818C403.929 103.432 403.452 100.489 402.497 97.9886C401.565 95.4886 400.179 93.5455 398.338 92.1591C396.52 90.7727 394.281 90.0795 391.622 90.0795C388.872 90.0795 386.577 90.7955 384.736 92.2273C382.895 93.6591 381.509 95.6364 380.577 98.1591C379.645 100.682 379.179 103.568 379.179 106.818C379.179 110.091 379.645 113.011 380.577 115.58C381.531 118.125 382.929 120.136 384.77 121.614C386.634 123.068 388.918 123.795 391.622 123.795ZM452.398 134.023C447.148 134.023 442.614 132.932 438.795 130.75C435 128.545 432.08 125.432 430.034 121.409C427.989 117.364 426.966 112.602 426.966 107.125C426.966 101.739 427.989 97.0114 430.034 92.9432C432.102 88.8523 434.989 85.6705 438.693 83.3977C442.398 81.1023 446.75 79.9545 451.75 79.9545C454.977 79.9545 458.023 80.4773 460.886 81.5227C463.773 82.5455 466.318 84.1364 468.523 86.2955C470.75 88.4545 472.5 91.2045 473.773 94.5455C475.045 97.8636 475.682 101.818 475.682 106.409V110.193H432.761V101.875H463.852C463.83 99.5114 463.318 97.4091 462.318 95.5682C461.318 93.7045 459.92 92.2386 458.125 91.1705C456.352 90.1023 454.284 89.5682 451.92 89.5682C449.398 89.5682 447.182 90.1818 445.273 91.4091C443.364 92.6136 441.875 94.2045 440.807 96.1818C439.761 98.1364 439.227 100.284 439.205 102.625V109.886C439.205 112.932 439.761 115.545 440.875 117.727C441.989 119.886 443.545 121.545 445.545 122.705C447.545 123.841 449.886 124.409 452.568 124.409C454.364 124.409 455.989 124.159 457.443 123.659C458.898 123.136 460.159 122.375 461.227 121.375C462.295 120.375 463.102 119.136 463.648 117.659L475.17 118.955C474.443 122 473.057 124.659 471.011 126.932C468.989 129.182 466.398 130.932 463.239 132.182C460.08 133.409 456.466 134.023 452.398 134.023ZM498.463 63.1818V133H486.122V63.1818H498.463ZM595.273 86.7386H582.523C582.159 84.6477 581.489 82.7955 580.511 81.1818C579.534 79.5455 578.318 78.1591 576.864 77.0227C575.409 75.8864 573.75 75.0341 571.886 74.4659C570.045 73.875 568.057 73.5795 565.92 73.5795C562.125 73.5795 558.761 74.5341 555.83 76.4432C552.898 78.3295 550.602 81.1023 548.943 84.7614C547.284 88.3977 546.455 92.8409 546.455 98.0909C546.455 103.432 547.284 107.932 548.943 111.591C550.625 115.227 552.92 117.977 555.83 119.841C558.761 121.682 562.114 122.602 565.886 122.602C567.977 122.602 569.932 122.33 571.75 121.784C573.591 121.216 575.239 120.386 576.693 119.295C578.17 118.205 579.409 116.864 580.409 115.273C581.432 113.682 582.136 111.864 582.523 109.818L595.273 109.886C594.795 113.205 593.761 116.318 592.17 119.227C590.602 122.136 588.545 124.705 586 126.932C583.455 129.136 580.477 130.864 577.068 132.114C573.659 133.341 569.875 133.955 565.716 133.955C559.58 133.955 554.102 132.534 549.284 129.693C544.466 126.852 540.67 122.75 537.898 117.386C535.125 112.023 533.739 105.591 533.739 98.0909C533.739 90.5682 535.136 84.1364 537.932 78.7955C540.727 73.4318 544.534 69.3295 549.352 66.4886C554.17 63.6477 559.625 62.2273 565.716 62.2273C569.602 62.2273 573.216 62.7727 576.557 63.8636C579.898 64.9545 582.875 66.5568 585.489 68.6705C588.102 70.7614 590.25 73.3295 591.932 76.375C593.636 79.3977 594.75 82.8523 595.273 86.7386ZM629.151 134.023C624.037 134.023 619.605 132.898 615.855 130.648C612.105 128.398 609.196 125.25 607.128 121.205C605.082 117.159 604.06 112.432 604.06 107.023C604.06 101.614 605.082 96.875 607.128 92.8068C609.196 88.7386 612.105 85.5795 615.855 83.3295C619.605 81.0795 624.037 79.9545 629.151 79.9545C634.264 79.9545 638.696 81.0795 642.446 83.3295C646.196 85.5795 649.094 88.7386 651.139 92.8068C653.207 96.875 654.241 101.614 654.241 107.023C654.241 112.432 653.207 117.159 651.139 121.205C649.094 125.25 646.196 128.398 642.446 130.648C638.696 132.898 634.264 134.023 629.151 134.023ZM629.219 124.136C631.991 124.136 634.31 123.375 636.173 121.852C638.037 120.307 639.423 118.239 640.332 115.648C641.264 113.057 641.73 110.17 641.73 106.989C641.73 103.784 641.264 100.886 640.332 98.2955C639.423 95.6818 638.037 93.6023 636.173 92.0568C634.31 90.5114 631.991 89.7386 629.219 89.7386C626.378 89.7386 624.014 90.5114 622.128 92.0568C620.264 93.6023 618.866 95.6818 617.935 98.2955C617.026 100.886 616.571 103.784 616.571 106.989C616.571 110.17 617.026 113.057 617.935 115.648C618.866 118.239 620.264 120.307 622.128 121.852C624.014 123.375 626.378 124.136 629.219 124.136ZM677.057 102.318V133H664.716V80.6364H676.511V89.5341H677.125C678.33 86.6023 680.25 84.2727 682.886 82.5455C685.545 80.8182 688.83 79.9545 692.739 79.9545C696.352 79.9545 699.5 80.7273 702.182 82.2727C704.886 83.8182 706.977 86.0568 708.455 88.9886C709.955 91.9205 710.693 95.4773 710.67 99.6591V133H698.33V101.568C698.33 98.0682 697.42 95.3295 695.602 93.3523C693.807 91.375 691.318 90.3864 688.136 90.3864C685.977 90.3864 684.057 90.8636 682.375 91.8182C680.716 92.75 679.409 94.1023 678.455 95.875C677.523 97.6477 677.057 99.7955 677.057 102.318ZM749.364 80.6364V90.1818H719.261V80.6364H749.364ZM726.693 68.0909H739.034V117.25C739.034 118.909 739.284 120.182 739.784 121.068C740.307 121.932 740.989 122.523 741.83 122.841C742.67 123.159 743.602 123.318 744.625 123.318C745.398 123.318 746.102 123.261 746.739 123.148C747.398 123.034 747.898 122.932 748.239 122.841L750.318 132.489C749.659 132.716 748.716 132.966 747.489 133.239C746.284 133.511 744.807 133.67 743.057 133.716C739.966 133.807 737.182 133.341 734.705 132.318C732.227 131.273 730.261 129.659 728.807 127.477C727.375 125.295 726.67 122.568 726.693 119.295V68.0909ZM782.304 134.023C777.054 134.023 772.52 132.932 768.702 130.75C764.906 128.545 761.986 125.432 759.94 121.409C757.895 117.364 756.872 112.602 756.872 107.125C756.872 101.739 757.895 97.0114 759.94 92.9432C762.009 88.8523 764.895 85.6705 768.599 83.3977C772.304 81.1023 776.656 79.9545 781.656 79.9545C784.884 79.9545 787.929 80.4773 790.793 81.5227C793.679 82.5455 796.224 84.1364 798.429 86.2955C800.656 88.4545 802.406 91.2045 803.679 94.5455C804.952 97.8636 805.588 101.818 805.588 106.409V110.193H762.668V101.875H793.759C793.736 99.5114 793.224 97.4091 792.224 95.5682C791.224 93.7045 789.827 92.2386 788.031 91.1705C786.259 90.1023 784.19 89.5682 781.827 89.5682C779.304 89.5682 777.088 90.1818 775.179 91.4091C773.27 92.6136 771.781 94.2045 770.713 96.1818C769.668 98.1364 769.134 100.284 769.111 102.625V109.886C769.111 112.932 769.668 115.545 770.781 117.727C771.895 119.886 773.452 121.545 775.452 122.705C777.452 123.841 779.793 124.409 782.474 124.409C784.27 124.409 785.895 124.159 787.349 123.659C788.804 123.136 790.065 122.375 791.134 121.375C792.202 120.375 793.009 119.136 793.554 117.659L805.077 118.955C804.349 122 802.963 124.659 800.918 126.932C798.895 129.182 796.304 130.932 793.145 132.182C789.986 133.409 786.372 134.023 782.304 134.023ZM824.994 80.6364L835.562 99.9659L846.301 80.6364H859.358L843.574 106.818L859.631 133H846.642L835.562 114.148L824.585 133H811.494L827.449 106.818L811.903 80.6364H824.994ZM895.051 80.6364V90.1818H864.949V80.6364H895.051ZM872.381 68.0909H884.722V117.25C884.722 118.909 884.972 120.182 885.472 121.068C885.994 121.932 886.676 122.523 887.517 122.841C888.358 123.159 889.29 123.318 890.312 123.318C891.085 123.318 891.79 123.261 892.426 123.148C893.085 123.034 893.585 122.932 893.926 122.841L896.006 132.489C895.347 132.716 894.403 132.966 893.176 133.239C891.972 133.511 890.494 133.67 888.744 133.716C885.653 133.807 882.869 133.341 880.392 132.318C877.915 131.273 875.949 129.659 874.494 127.477C873.063 125.295 872.358 122.568 872.381 119.295V68.0909ZM929.73 133V63.1818H955.912C961.276 63.1818 965.776 64.1818 969.412 66.1818C973.071 68.1818 975.832 70.9318 977.696 74.4318C979.582 77.9091 980.526 81.8636 980.526 86.2955C980.526 90.7727 979.582 94.75 977.696 98.2273C975.81 101.705 973.026 104.443 969.344 106.443C965.662 108.42 961.128 109.409 955.741 109.409H938.389V99.0114H954.037C957.173 99.0114 959.741 98.4659 961.741 97.375C963.741 96.2841 965.219 94.7841 966.173 92.875C967.151 90.9659 967.639 88.7727 967.639 86.2955C967.639 83.8182 967.151 81.6364 966.173 79.75C965.219 77.8636 963.73 76.3977 961.707 75.3523C959.707 74.2841 957.128 73.75 953.969 73.75H942.378V133H929.73ZM990.966 133V80.6364H1002.93V89.3636H1003.48C1004.43 86.3409 1006.07 84.0114 1008.39 82.375C1010.73 80.7159 1013.4 79.8864 1016.4 79.8864C1017.08 79.8864 1017.84 79.9205 1018.68 79.9886C1019.55 80.0341 1020.26 80.1136 1020.83 80.2273V91.5795C1020.31 91.3977 1019.48 91.2386 1018.34 91.1023C1017.23 90.9432 1016.15 90.8636 1015.1 90.8636C1012.85 90.8636 1010.83 91.3523 1009.03 92.3295C1007.26 93.2841 1005.86 94.6136 1004.84 96.3182C1003.82 98.0227 1003.31 99.9886 1003.31 102.216V133H990.966ZM1049.71 134.023C1044.6 134.023 1040.17 132.898 1036.42 130.648C1032.67 128.398 1029.76 125.25 1027.69 121.205C1025.64 117.159 1024.62 112.432 1024.62 107.023C1024.62 101.614 1025.64 96.875 1027.69 92.8068C1029.76 88.7386 1032.67 85.5795 1036.42 83.3295C1040.17 81.0795 1044.6 79.9545 1049.71 79.9545C1054.83 79.9545 1059.26 81.0795 1063.01 83.3295C1066.76 85.5795 1069.66 88.7386 1071.7 92.8068C1073.77 96.875 1074.8 101.614 1074.8 107.023C1074.8 112.432 1073.77 117.159 1071.7 121.205C1069.66 125.25 1066.76 128.398 1063.01 130.648C1059.26 132.898 1054.83 134.023 1049.71 134.023ZM1049.78 124.136C1052.55 124.136 1054.87 123.375 1056.74 121.852C1058.6 120.307 1059.99 118.239 1060.89 115.648C1061.83 113.057 1062.29 110.17 1062.29 106.989C1062.29 103.784 1061.83 100.886 1060.89 98.2955C1059.99 95.6818 1058.6 93.6023 1056.74 92.0568C1054.87 90.5114 1052.55 89.7386 1049.78 89.7386C1046.94 89.7386 1044.58 90.5114 1042.69 92.0568C1040.83 93.6023 1039.43 95.6818 1038.5 98.2955C1037.59 100.886 1037.13 103.784 1037.13 106.989C1037.13 110.17 1037.59 113.057 1038.5 115.648C1039.43 118.239 1040.83 120.307 1042.69 121.852C1044.58 123.375 1046.94 124.136 1049.78 124.136ZM1111.43 80.6364V90.1818H1081.32V80.6364H1111.43ZM1088.76 68.0909H1101.1V117.25C1101.1 118.909 1101.35 120.182 1101.85 121.068C1102.37 121.932 1103.05 122.523 1103.89 122.841C1104.73 123.159 1105.66 123.318 1106.69 123.318C1107.46 123.318 1108.16 123.261 1108.8 123.148C1109.46 123.034 1109.96 122.932 1110.3 122.841L1112.38 132.489C1111.72 132.716 1110.78 132.966 1109.55 133.239C1108.35 133.511 1106.87 133.67 1105.12 133.716C1102.03 133.807 1099.24 133.341 1096.77 132.318C1094.29 131.273 1092.32 129.659 1090.87 127.477C1089.44 125.295 1088.73 122.568 1088.76 119.295V68.0909ZM1144.03 134.023C1138.91 134.023 1134.48 132.898 1130.73 130.648C1126.98 128.398 1124.07 125.25 1122 121.205C1119.96 117.159 1118.93 112.432 1118.93 107.023C1118.93 101.614 1119.96 96.875 1122 92.8068C1124.07 88.7386 1126.98 85.5795 1130.73 83.3295C1134.48 81.0795 1138.91 79.9545 1144.03 79.9545C1149.14 79.9545 1153.57 81.0795 1157.32 83.3295C1161.07 85.5795 1163.97 88.7386 1166.01 92.8068C1168.08 96.875 1169.12 101.614 1169.12 107.023C1169.12 112.432 1168.08 117.159 1166.01 121.205C1163.97 125.25 1161.07 128.398 1157.32 130.648C1153.57 132.898 1149.14 134.023 1144.03 134.023ZM1144.09 124.136C1146.87 124.136 1149.18 123.375 1151.05 121.852C1152.91 120.307 1154.3 118.239 1155.21 115.648C1156.14 113.057 1156.61 110.17 1156.61 106.989C1156.61 103.784 1156.14 100.886 1155.21 98.2955C1154.3 95.6818 1152.91 93.6023 1151.05 92.0568C1149.18 90.5114 1146.87 89.7386 1144.09 89.7386C1141.25 89.7386 1138.89 90.5114 1137 92.0568C1135.14 93.6023 1133.74 95.6818 1132.81 98.2955C1131.9 100.886 1131.45 103.784 1131.45 106.989C1131.45 110.17 1131.9 113.057 1132.81 115.648C1133.74 118.239 1135.14 120.307 1137 121.852C1138.89 123.375 1141.25 124.136 1144.09 124.136ZM1202.43 134.023C1197.2 134.023 1192.72 132.875 1188.97 130.58C1185.24 128.284 1182.36 125.114 1180.34 121.068C1178.34 117 1177.34 112.318 1177.34 107.023C1177.34 101.705 1178.36 97.0114 1180.41 92.9432C1182.45 88.8523 1185.34 85.6705 1189.07 83.3977C1192.82 81.1023 1197.25 79.9545 1202.36 79.9545C1206.61 79.9545 1210.38 80.7386 1213.65 82.3068C1216.94 83.8523 1219.57 86.0455 1221.52 88.8864C1223.48 91.7045 1224.59 95 1224.86 98.7727H1213.07C1212.59 96.25 1211.45 94.1477 1209.66 92.4659C1207.89 90.7614 1205.51 89.9091 1202.53 89.9091C1200.01 89.9091 1197.8 90.5909 1195.89 91.9545C1193.98 93.2955 1192.49 95.2273 1191.42 97.75C1190.38 100.273 1189.85 103.295 1189.85 106.818C1189.85 110.386 1190.38 113.455 1191.42 116.023C1192.47 118.568 1193.93 120.534 1195.82 121.92C1197.73 123.284 1199.97 123.966 1202.53 123.966C1204.35 123.966 1205.98 123.625 1207.41 122.943C1208.86 122.239 1210.08 121.227 1211.06 119.909C1212.03 118.591 1212.7 116.989 1213.07 115.102H1224.86C1224.57 118.807 1223.48 122.091 1221.59 124.955C1219.7 127.795 1217.14 130.023 1213.89 131.636C1210.64 133.227 1206.82 134.023 1202.43 134.023ZM1257.84 134.023C1252.72 134.023 1248.29 132.898 1244.54 130.648C1240.79 128.398 1237.88 125.25 1235.82 121.205C1233.77 117.159 1232.75 112.432 1232.75 107.023C1232.75 101.614 1233.77 96.875 1235.82 92.8068C1237.88 88.7386 1240.79 85.5795 1244.54 83.3295C1248.29 81.0795 1252.72 79.9545 1257.84 79.9545C1262.95 79.9545 1267.38 81.0795 1271.13 83.3295C1274.88 85.5795 1277.78 88.7386 1279.83 92.8068C1281.89 96.875 1282.93 101.614 1282.93 107.023C1282.93 112.432 1281.89 117.159 1279.83 121.205C1277.78 125.25 1274.88 128.398 1271.13 130.648C1267.38 132.898 1262.95 134.023 1257.84 134.023ZM1257.91 124.136C1260.68 124.136 1263 123.375 1264.86 121.852C1266.72 120.307 1268.11 118.239 1269.02 115.648C1269.95 113.057 1270.42 110.17 1270.42 106.989C1270.42 103.784 1269.95 100.886 1269.02 98.2955C1268.11 95.6818 1266.72 93.6023 1264.86 92.0568C1263 90.5114 1260.68 89.7386 1257.91 89.7386C1255.07 89.7386 1252.7 90.5114 1250.82 92.0568C1248.95 93.6023 1247.55 95.6818 1246.62 98.2955C1245.71 100.886 1245.26 103.784 1245.26 106.989C1245.26 110.17 1245.71 113.057 1246.62 115.648C1247.55 118.239 1248.95 120.307 1250.82 121.852C1252.7 123.375 1255.07 124.136 1257.91 124.136ZM1305.74 63.1818V133H1293.4V63.1818H1305.74Z" fill="black"/>
6 | </svg>
7 | 


--------------------------------------------------------------------------------
/docs/mcp.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/mcp.png


--------------------------------------------------------------------------------
/docs/quickstart/client.mdx:
--------------------------------------------------------------------------------
   1 | ---
   2 | title: "Build an MCP Client"
   3 | description: "Get started building your own client that can integrate with all MCP servers."
   4 | ---
   5 | 
   6 | In this tutorial, you'll learn how to build an LLM-powered chatbot client that connects to MCP servers. It helps to have gone through the [Server quickstart](/quickstart/server) that guides you through the basics of building your first server.
   7 | 
   8 | <Tabs>
   9 | <Tab title="Python">
  10 | 
  11 | [You can find the complete code for this tutorial here.](https://github.com/modelcontextprotocol/quickstart-resources/tree/main/mcp-client-python)
  12 | 
  13 | ## System Requirements
  14 | 
  15 | Before starting, ensure your system meets these requirements:
  16 | 
  17 | - Mac or Windows computer
  18 | - Latest Python version installed
  19 | - Latest version of `uv` installed
  20 | 
  21 | ## Setting Up Your Environment
  22 | 
  23 | First, create a new Python project with `uv`:
  24 | 
  25 | ```bash
  26 | # Create project directory
  27 | uv init mcp-client
  28 | cd mcp-client
  29 | 
  30 | # Create virtual environment
  31 | uv venv
  32 | 
  33 | # Activate virtual environment
  34 | # On Windows:
  35 | .venv\Scripts\activate
  36 | # On Unix or macOS:
  37 | source .venv/bin/activate
  38 | 
  39 | # Install required packages
  40 | uv add mcp anthropic python-dotenv
  41 | 
  42 | # Remove boilerplate files
  43 | # On Windows:
  44 | del main.py
  45 | # On Unix or macOS:
  46 | rm main.py
  47 | 
  48 | # Create our main file
  49 | touch client.py
  50 | ```
  51 | 
  52 | ## Setting Up Your API Key
  53 | 
  54 | You'll need an Anthropic API key from the [Anthropic Console](https://console.anthropic.com/settings/keys).
  55 | 
  56 | Create a `.env` file to store it:
  57 | 
  58 | ```bash
  59 | # Create .env file
  60 | touch .env
  61 | ```
  62 | 
  63 | Add your key to the `.env` file:
  64 | 
  65 | ```bash
  66 | ANTHROPIC_API_KEY=<your key here>
  67 | ```
  68 | 
  69 | Add `.env` to your `.gitignore`:
  70 | 
  71 | ```bash
  72 | echo ".env" >> .gitignore
  73 | ```
  74 | 
  75 | <Warning>
  76 | 
  77 | Make sure you keep your `ANTHROPIC_API_KEY` secure!
  78 | 
  79 | </Warning>
  80 | 
  81 | ## Creating the Client
  82 | 
  83 | ### Basic Client Structure
  84 | 
  85 | First, let's set up our imports and create the basic client class:
  86 | 
  87 | ```python
  88 | import asyncio
  89 | from typing import Optional
  90 | from contextlib import AsyncExitStack
  91 | 
  92 | from mcp import ClientSession, StdioServerParameters
  93 | from mcp.client.stdio import stdio_client
  94 | 
  95 | from anthropic import Anthropic
  96 | from dotenv import load_dotenv
  97 | 
  98 | load_dotenv()  # load environment variables from .env
  99 | 
 100 | class MCPClient:
 101 |     def __init__(self):
 102 |         # Initialize session and client objects
 103 |         self.session: Optional[ClientSession] = None
 104 |         self.exit_stack = AsyncExitStack()
 105 |         self.anthropic = Anthropic()
 106 |     # methods will go here
 107 | ```
 108 | 
 109 | ### Server Connection Management
 110 | 
 111 | Next, we'll implement the method to connect to an MCP server:
 112 | 
 113 | ```python
 114 | async def connect_to_server(self, server_script_path: str):
 115 |     """Connect to an MCP server
 116 | 
 117 |     Args:
 118 |         server_script_path: Path to the server script (.py or .js)
 119 |     """
 120 |     is_python = server_script_path.endswith('.py')
 121 |     is_js = server_script_path.endswith('.js')
 122 |     if not (is_python or is_js):
 123 |         raise ValueError("Server script must be a .py or .js file")
 124 | 
 125 |     command = "python" if is_python else "node"
 126 |     server_params = StdioServerParameters(
 127 |         command=command,
 128 |         args=[server_script_path],
 129 |         env=None
 130 |     )
 131 | 
 132 |     stdio_transport = await self.exit_stack.enter_async_context(stdio_client(server_params))
 133 |     self.stdio, self.write = stdio_transport
 134 |     self.session = await self.exit_stack.enter_async_context(ClientSession(self.stdio, self.write))
 135 | 
 136 |     await self.session.initialize()
 137 | 
 138 |     # List available tools
 139 |     response = await self.session.list_tools()
 140 |     tools = response.tools
 141 |     print("\nConnected to server with tools:", [tool.name for tool in tools])
 142 | ```
 143 | 
 144 | ### Query Processing Logic
 145 | 
 146 | Now let's add the core functionality for processing queries and handling tool calls:
 147 | 
 148 | ```python
 149 | async def process_query(self, query: str) -> str:
 150 |     """Process a query using Claude and available tools"""
 151 |     messages = [
 152 |         {
 153 |             "role": "user",
 154 |             "content": query
 155 |         }
 156 |     ]
 157 | 
 158 |     response = await self.session.list_tools()
 159 |     available_tools = [{
 160 |         "name": tool.name,
 161 |         "description": tool.description,
 162 |         "input_schema": tool.inputSchema
 163 |     } for tool in response.tools]
 164 | 
 165 |     # Initial Claude API call
 166 |     response = self.anthropic.messages.create(
 167 |         model="claude-3-5-sonnet-20241022",
 168 |         max_tokens=1000,
 169 |         messages=messages,
 170 |         tools=available_tools
 171 |     )
 172 | 
 173 |     # Process response and handle tool calls
 174 |     final_text = []
 175 | 
 176 |     assistant_message_content = []
 177 |     for content in response.content:
 178 |         if content.type == 'text':
 179 |             final_text.append(content.text)
 180 |             assistant_message_content.append(content)
 181 |         elif content.type == 'tool_use':
 182 |             tool_name = content.name
 183 |             tool_args = content.input
 184 | 
 185 |             # Execute tool call
 186 |             result = await self.session.call_tool(tool_name, tool_args)
 187 |             final_text.append(f"[Calling tool {tool_name} with args {tool_args}]")
 188 | 
 189 |             assistant_message_content.append(content)
 190 |             messages.append({
 191 |                 "role": "assistant",
 192 |                 "content": assistant_message_content
 193 |             })
 194 |             messages.append({
 195 |                 "role": "user",
 196 |                 "content": [
 197 |                     {
 198 |                         "type": "tool_result",
 199 |                         "tool_use_id": content.id,
 200 |                         "content": result.content
 201 |                     }
 202 |                 ]
 203 |             })
 204 | 
 205 |             # Get next response from Claude
 206 |             response = self.anthropic.messages.create(
 207 |                 model="claude-3-5-sonnet-20241022",
 208 |                 max_tokens=1000,
 209 |                 messages=messages,
 210 |                 tools=available_tools
 211 |             )
 212 | 
 213 |             final_text.append(response.content[0].text)
 214 | 
 215 |     return "\n".join(final_text)
 216 | ```
 217 | 
 218 | ### Interactive Chat Interface
 219 | 
 220 | Now we'll add the chat loop and cleanup functionality:
 221 | 
 222 | ```python
 223 | async def chat_loop(self):
 224 |     """Run an interactive chat loop"""
 225 |     print("\nMCP Client Started!")
 226 |     print("Type your queries or 'quit' to exit.")
 227 | 
 228 |     while True:
 229 |         try:
 230 |             query = input("\nQuery: ").strip()
 231 | 
 232 |             if query.lower() == 'quit':
 233 |                 break
 234 | 
 235 |             response = await self.process_query(query)
 236 |             print("\n" + response)
 237 | 
 238 |         except Exception as e:
 239 |             print(f"\nError: {str(e)}")
 240 | 
 241 | async def cleanup(self):
 242 |     """Clean up resources"""
 243 |     await self.exit_stack.aclose()
 244 | ```
 245 | 
 246 | ### Main Entry Point
 247 | 
 248 | Finally, we'll add the main execution logic:
 249 | 
 250 | ```python
 251 | async def main():
 252 |     if len(sys.argv) < 2:
 253 |         print("Usage: python client.py <path_to_server_script>")
 254 |         sys.exit(1)
 255 | 
 256 |     client = MCPClient()
 257 |     try:
 258 |         await client.connect_to_server(sys.argv[1])
 259 |         await client.chat_loop()
 260 |     finally:
 261 |         await client.cleanup()
 262 | 
 263 | if __name__ == "__main__":
 264 |     import sys
 265 |     asyncio.run(main())
 266 | ```
 267 | 
 268 | You can find the complete `client.py` file [here.](https://gist.github.com/zckly/f3f28ea731e096e53b39b47bf0a2d4b1)
 269 | 
 270 | ## Key Components Explained
 271 | 
 272 | ### 1. Client Initialization
 273 | 
 274 | - The `MCPClient` class initializes with session management and API clients
 275 | - Uses `AsyncExitStack` for proper resource management
 276 | - Configures the Anthropic client for Claude interactions
 277 | 
 278 | ### 2. Server Connection
 279 | 
 280 | - Supports both Python and Node.js servers
 281 | - Validates server script type
 282 | - Sets up proper communication channels
 283 | - Initializes the session and lists available tools
 284 | 
 285 | ### 3. Query Processing
 286 | 
 287 | - Maintains conversation context
 288 | - Handles Claude's responses and tool calls
 289 | - Manages the message flow between Claude and tools
 290 | - Combines results into a coherent response
 291 | 
 292 | ### 4. Interactive Interface
 293 | 
 294 | - Provides a simple command-line interface
 295 | - Handles user input and displays responses
 296 | - Includes basic error handling
 297 | - Allows graceful exit
 298 | 
 299 | ### 5. Resource Management
 300 | 
 301 | - Proper cleanup of resources
 302 | - Error handling for connection issues
 303 | - Graceful shutdown procedures
 304 | 
 305 | ## Common Customization Points
 306 | 
 307 | 1. **Tool Handling**
 308 |    - Modify `process_query()` to handle specific tool types
 309 |    - Add custom error handling for tool calls
 310 |    - Implement tool-specific response formatting
 311 | 
 312 | 2. **Response Processing**
 313 |    - Customize how tool results are formatted
 314 |    - Add response filtering or transformation
 315 |    - Implement custom logging
 316 | 
 317 | 3. **User Interface**
 318 |    - Add a GUI or web interface
 319 |    - Implement rich console output
 320 |    - Add command history or auto-completion
 321 | 
 322 | ## Running the Client
 323 | 
 324 | To run your client with any MCP server:
 325 | 
 326 | ```bash
 327 | uv run client.py path/to/server.py # python server
 328 | uv run client.py path/to/build/index.js # node server
 329 | ```
 330 | 
 331 | <Note>
 332 | 
 333 | If you're continuing the weather tutorial from the server quickstart, your command might look something like this: `python client.py .../quickstart-resources/weather-server-python/weather.py`
 334 | 
 335 | </Note>
 336 | 
 337 | The client will:
 338 | 
 339 | 1. Connect to the specified server
 340 | 2. List available tools
 341 | 3. Start an interactive chat session where you can:
 342 |    - Enter queries
 343 |    - See tool executions
 344 |    - Get responses from Claude
 345 | 
 346 | Here's an example of what it should look like if connected to the weather server from the server quickstart:
 347 | 
 348 | <Frame>
 349 |   <img src="/images/client-claude-cli-python.png" />
 350 | </Frame>
 351 | 
 352 | ## How It Works
 353 | 
 354 | When you submit a query:
 355 | 
 356 | 1. The client gets the list of available tools from the server
 357 | 2. Your query is sent to Claude along with tool descriptions
 358 | 3. Claude decides which tools (if any) to use
 359 | 4. The client executes any requested tool calls through the server
 360 | 5. Results are sent back to Claude
 361 | 6. Claude provides a natural language response
 362 | 7. The response is displayed to you
 363 | 
 364 | ## Best practices
 365 | 
 366 | 1. **Error Handling**
 367 |    - Always wrap tool calls in try-catch blocks
 368 |    - Provide meaningful error messages
 369 |    - Gracefully handle connection issues
 370 | 
 371 | 2. **Resource Management**
 372 |    - Use `AsyncExitStack` for proper cleanup
 373 |    - Close connections when done
 374 |    - Handle server disconnections
 375 | 
 376 | 3. **Security**
 377 |    - Store API keys securely in `.env`
 378 |    - Validate server responses
 379 |    - Be cautious with tool permissions
 380 | 
 381 | ## Troubleshooting
 382 | 
 383 | ### Server Path Issues
 384 | 
 385 | - Double-check the path to your server script is correct
 386 | - Use the absolute path if the relative path isn't working
 387 | - For Windows users, make sure to use forward slashes (/) or escaped backslashes (\\) in the path
 388 | - Verify the server file has the correct extension (.py for Python or .js for Node.js)
 389 | 
 390 | Example of correct path usage:
 391 | 
 392 | ```bash
 393 | # Relative path
 394 | uv run client.py ./server/weather.py
 395 | 
 396 | # Absolute path
 397 | uv run client.py /Users/username/projects/mcp-server/weather.py
 398 | 
 399 | # Windows path (either format works)
 400 | uv run client.py C:/projects/mcp-server/weather.py
 401 | uv run client.py C:\\projects\\mcp-server\\weather.py
 402 | ```
 403 | 
 404 | ### Response Timing
 405 | 
 406 | - The first response might take up to 30 seconds to return
 407 | - This is normal and happens while:
 408 |   - The server initializes
 409 |   - Claude processes the query
 410 |   - Tools are being executed
 411 | - Subsequent responses are typically faster
 412 | - Don't interrupt the process during this initial waiting period
 413 | 
 414 | ### Common Error Messages
 415 | 
 416 | If you see:
 417 | 
 418 | - `FileNotFoundError`: Check your server path
 419 | - `Connection refused`: Ensure the server is running and the path is correct
 420 | - `Tool execution failed`: Verify the tool's required environment variables are set
 421 | - `Timeout error`: Consider increasing the timeout in your client configuration
 422 | 
 423 | </Tab>
 424 | 
 425 | <Tab title="Node">
 426 | 
 427 | [You can find the complete code for this tutorial here.](https://github.com/modelcontextprotocol/quickstart-resources/tree/main/mcp-client-typescript)
 428 | 
 429 | ## System Requirements
 430 | 
 431 | Before starting, ensure your system meets these requirements:
 432 | 
 433 | - Mac or Windows computer
 434 | - Node.js 17 or higher installed
 435 | - Latest version of `npm` installed
 436 | - Anthropic API key (Claude)
 437 | 
 438 | ## Setting Up Your Environment
 439 | 
 440 | First, let's create and set up our project:
 441 | 
 442 | <CodeGroup>
 443 | 
 444 | ```bash macOS/Linux
 445 | # Create project directory
 446 | mkdir mcp-client-typescript
 447 | cd mcp-client-typescript
 448 | 
 449 | # Initialize npm project
 450 | npm init -y
 451 | 
 452 | # Install dependencies
 453 | npm install @anthropic-ai/sdk @modelcontextprotocol/sdk dotenv
 454 | 
 455 | # Install dev dependencies
 456 | npm install -D @types/node typescript
 457 | 
 458 | # Create source file
 459 | touch index.ts
 460 | ```
 461 | 
 462 | ```powershell Windows
 463 | # Create project directory
 464 | md mcp-client-typescript
 465 | cd mcp-client-typescript
 466 | 
 467 | # Initialize npm project
 468 | npm init -y
 469 | 
 470 | # Install dependencies
 471 | npm install @anthropic-ai/sdk @modelcontextprotocol/sdk dotenv
 472 | 
 473 | # Install dev dependencies
 474 | npm install -D @types/node typescript
 475 | 
 476 | # Create source file
 477 | new-item index.ts
 478 | ```
 479 | 
 480 | </CodeGroup>
 481 | 
 482 | Update your `package.json` to set `type: "module"` and a build script:
 483 | 
 484 | ```json package.json
 485 | {
 486 |   "type": "module",
 487 |   "scripts": {
 488 |     "build": "tsc && chmod 755 build/index.js"
 489 |   }
 490 | }
 491 | ```
 492 | 
 493 | Create a `tsconfig.json` in the root of your project:
 494 | 
 495 | ```json tsconfig.json
 496 | {
 497 |   "compilerOptions": {
 498 |     "target": "ES2022",
 499 |     "module": "Node16",
 500 |     "moduleResolution": "Node16",
 501 |     "outDir": "./build",
 502 |     "rootDir": "./",
 503 |     "strict": true,
 504 |     "esModuleInterop": true,
 505 |     "skipLibCheck": true,
 506 |     "forceConsistentCasingInFileNames": true
 507 |   },
 508 |   "include": ["index.ts"],
 509 |   "exclude": ["node_modules"]
 510 | }
 511 | ```
 512 | 
 513 | ## Setting Up Your API Key
 514 | 
 515 | You'll need an Anthropic API key from the [Anthropic Console](https://console.anthropic.com/settings/keys).
 516 | 
 517 | Create a `.env` file to store it:
 518 | 
 519 | ```bash
 520 | echo "ANTHROPIC_API_KEY=<your key here>" > .env
 521 | ```
 522 | 
 523 | Add `.env` to your `.gitignore`:
 524 | 
 525 | ```bash
 526 | echo ".env" >> .gitignore
 527 | ```
 528 | 
 529 | <Warning>
 530 | 
 531 | Make sure you keep your `ANTHROPIC_API_KEY` secure!
 532 | 
 533 | </Warning>
 534 | 
 535 | ## Creating the Client
 536 | 
 537 | ### Basic Client Structure
 538 | 
 539 | First, let's set up our imports and create the basic client class in `index.ts`:
 540 | 
 541 | ```typescript
 542 | import { Anthropic } from "@anthropic-ai/sdk";
 543 | import {
 544 |   MessageParam,
 545 |   Tool,
 546 | } from "@anthropic-ai/sdk/resources/messages/messages.mjs";
 547 | import { Client } from "@modelcontextprotocol/sdk/client/index.js";
 548 | import { StdioClientTransport } from "@modelcontextprotocol/sdk/client/stdio.js";
 549 | import readline from "readline/promises";
 550 | import dotenv from "dotenv";
 551 | 
 552 | dotenv.config();
 553 | 
 554 | const ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;
 555 | if (!ANTHROPIC_API_KEY) {
 556 |   throw new Error("ANTHROPIC_API_KEY is not set");
 557 | }
 558 | 
 559 | class MCPClient {
 560 |   private mcp: Client;
 561 |   private anthropic: Anthropic;
 562 |   private transport: StdioClientTransport | null = null;
 563 |   private tools: Tool[] = [];
 564 | 
 565 |   constructor() {
 566 |     this.anthropic = new Anthropic({
 567 |       apiKey: ANTHROPIC_API_KEY,
 568 |     });
 569 |     this.mcp = new Client({ name: "mcp-client-cli", version: "1.0.0" });
 570 |   }
 571 |   // methods will go here
 572 | }
 573 | ```
 574 | 
 575 | ### Server Connection Management
 576 | 
 577 | Next, we'll implement the method to connect to an MCP server:
 578 | 
 579 | ```typescript
 580 | async connectToServer(serverScriptPath: string) {
 581 |   try {
 582 |     const isJs = serverScriptPath.endsWith(".js");
 583 |     const isPy = serverScriptPath.endsWith(".py");
 584 |     if (!isJs && !isPy) {
 585 |       throw new Error("Server script must be a .js or .py file");
 586 |     }
 587 |     const command = isPy
 588 |       ? process.platform === "win32"
 589 |         ? "python"
 590 |         : "python3"
 591 |       : process.execPath;
 592 | 
 593 |     this.transport = new StdioClientTransport({
 594 |       command,
 595 |       args: [serverScriptPath],
 596 |     });
 597 |     await this.mcp.connect(this.transport);
 598 | 
 599 |     const toolsResult = await this.mcp.listTools();
 600 |     this.tools = toolsResult.tools.map((tool) => {
 601 |       return {
 602 |         name: tool.name,
 603 |         description: tool.description,
 604 |         input_schema: tool.inputSchema,
 605 |       };
 606 |     });
 607 |     console.log(
 608 |       "Connected to server with tools:",
 609 |       this.tools.map(({ name }) => name)
 610 |     );
 611 |   } catch (e) {
 612 |     console.log("Failed to connect to MCP server: ", e);
 613 |     throw e;
 614 |   }
 615 | }
 616 | ```
 617 | 
 618 | ### Query Processing Logic
 619 | 
 620 | Now let's add the core functionality for processing queries and handling tool calls:
 621 | 
 622 | ```typescript
 623 | async processQuery(query: string) {
 624 |   const messages: MessageParam[] = [
 625 |     {
 626 |       role: "user",
 627 |       content: query,
 628 |     },
 629 |   ];
 630 | 
 631 |   const response = await this.anthropic.messages.create({
 632 |     model: "claude-3-5-sonnet-20241022",
 633 |     max_tokens: 1000,
 634 |     messages,
 635 |     tools: this.tools,
 636 |   });
 637 | 
 638 |   const finalText = [];
 639 | 
 640 |   for (const content of response.content) {
 641 |     if (content.type === "text") {
 642 |       finalText.push(content.text);
 643 |     } else if (content.type === "tool_use") {
 644 |       const toolName = content.name;
 645 |       const toolArgs = content.input as { [x: string]: unknown } | undefined;
 646 | 
 647 |       const result = await this.mcp.callTool({
 648 |         name: toolName,
 649 |         arguments: toolArgs,
 650 |       });
 651 |       finalText.push(
 652 |         `[Calling tool ${toolName} with args ${JSON.stringify(toolArgs)}]`
 653 |       );
 654 | 
 655 |       messages.push({
 656 |         role: "user",
 657 |         content: result.content as string,
 658 |       });
 659 | 
 660 |       const response = await this.anthropic.messages.create({
 661 |         model: "claude-3-5-sonnet-20241022",
 662 |         max_tokens: 1000,
 663 |         messages,
 664 |       });
 665 | 
 666 |       finalText.push(
 667 |         response.content[0].type === "text" ? response.content[0].text : ""
 668 |       );
 669 |     }
 670 |   }
 671 | 
 672 |   return finalText.join("\n");
 673 | }
 674 | ```
 675 | 
 676 | ### Interactive Chat Interface
 677 | 
 678 | Now we'll add the chat loop and cleanup functionality:
 679 | 
 680 | ```typescript
 681 | async chatLoop() {
 682 |   const rl = readline.createInterface({
 683 |     input: process.stdin,
 684 |     output: process.stdout,
 685 |   });
 686 | 
 687 |   try {
 688 |     console.log("\nMCP Client Started!");
 689 |     console.log("Type your queries or 'quit' to exit.");
 690 | 
 691 |     while (true) {
 692 |       const message = await rl.question("\nQuery: ");
 693 |       if (message.toLowerCase() === "quit") {
 694 |         break;
 695 |       }
 696 |       const response = await this.processQuery(message);
 697 |       console.log("\n" + response);
 698 |     }
 699 |   } finally {
 700 |     rl.close();
 701 |   }
 702 | }
 703 | 
 704 | async cleanup() {
 705 |   await this.mcp.close();
 706 | }
 707 | ```
 708 | 
 709 | ### Main Entry Point
 710 | 
 711 | Finally, we'll add the main execution logic:
 712 | 
 713 | ```typescript
 714 | async function main() {
 715 |   if (process.argv.length < 3) {
 716 |     console.log("Usage: node index.ts <path_to_server_script>");
 717 |     return;
 718 |   }
 719 |   const mcpClient = new MCPClient();
 720 |   try {
 721 |     await mcpClient.connectToServer(process.argv[2]);
 722 |     await mcpClient.chatLoop();
 723 |   } finally {
 724 |     await mcpClient.cleanup();
 725 |     process.exit(0);
 726 |   }
 727 | }
 728 | 
 729 | main();
 730 | ```
 731 | 
 732 | ## Running the Client
 733 | 
 734 | To run your client with any MCP server:
 735 | 
 736 | ```bash
 737 | # Build TypeScript
 738 | npm run build
 739 | 
 740 | # Run the client
 741 | node build/index.js path/to/server.py # python server
 742 | node build/index.js path/to/build/index.js # node server
 743 | ```
 744 | 
 745 | <Note>
 746 | 
 747 | If you're continuing the weather tutorial from the server quickstart, your command might look something like this: `node build/index.js .../quickstart-resources/weather-server-typescript/build/index.js`
 748 | 
 749 | </Note>
 750 | 
 751 | **The client will:**
 752 | 
 753 | 1. Connect to the specified server
 754 | 2. List available tools
 755 | 3. Start an interactive chat session where you can:
 756 |    - Enter queries
 757 |    - See tool executions
 758 |    - Get responses from Claude
 759 | 
 760 | ## How It Works
 761 | 
 762 | When you submit a query:
 763 | 
 764 | 1. The client gets the list of available tools from the server
 765 | 2. Your query is sent to Claude along with tool descriptions
 766 | 3. Claude decides which tools (if any) to use
 767 | 4. The client executes any requested tool calls through the server
 768 | 5. Results are sent back to Claude
 769 | 6. Claude provides a natural language response
 770 | 7. The response is displayed to you
 771 | 
 772 | ## Best practices
 773 | 
 774 | 1. **Error Handling**
 775 |    - Use TypeScript's type system for better error detection
 776 |    - Wrap tool calls in try-catch blocks
 777 |    - Provide meaningful error messages
 778 |    - Gracefully handle connection issues
 779 | 
 780 | 2. **Security**
 781 |    - Store API keys securely in `.env`
 782 |    - Validate server responses
 783 |    - Be cautious with tool permissions
 784 | 
 785 | ## Troubleshooting
 786 | 
 787 | ### Server Path Issues
 788 | 
 789 | - Double-check the path to your server script is correct
 790 | - Use the absolute path if the relative path isn't working
 791 | - For Windows users, make sure to use forward slashes (/) or escaped backslashes (\\) in the path
 792 | - Verify the server file has the correct extension (.js for Node.js or .py for Python)
 793 | 
 794 | Example of correct path usage:
 795 | 
 796 | ```bash
 797 | # Relative path
 798 | node build/index.js ./server/build/index.js
 799 | 
 800 | # Absolute path
 801 | node build/index.js /Users/username/projects/mcp-server/build/index.js
 802 | 
 803 | # Windows path (either format works)
 804 | node build/index.js C:/projects/mcp-server/build/index.js
 805 | node build/index.js C:\\projects\\mcp-server\\build\\index.js
 806 | ```
 807 | 
 808 | ### Response Timing
 809 | 
 810 | - The first response might take up to 30 seconds to return
 811 | - This is normal and happens while:
 812 |   - The server initializes
 813 |   - Claude processes the query
 814 |   - Tools are being executed
 815 | - Subsequent responses are typically faster
 816 | - Don't interrupt the process during this initial waiting period
 817 | 
 818 | ### Common Error Messages
 819 | 
 820 | If you see:
 821 | 
 822 | - `Error: Cannot find module`: Check your build folder and ensure TypeScript compilation succeeded
 823 | - `Connection refused`: Ensure the server is running and the path is correct
 824 | - `Tool execution failed`: Verify the tool's required environment variables are set
 825 | - `ANTHROPIC_API_KEY is not set`: Check your .env file and environment variables
 826 | - `TypeError`: Ensure you're using the correct types for tool arguments
 827 | 
 828 | </Tab>
 829 | 
 830 | <Tab title="Java">
 831 | 
 832 | <Note>
 833 | 
 834 | This is a quickstart demo based on Spring AI MCP auto-configuration and boot starters.
 835 | To learn how to create sync and async MCP Clients manually, consult the [Java SDK Client](/sdk/java/mcp-client) documentation
 836 | 
 837 | </Note>
 838 | 
 839 | This example demonstrates how to build an interactive chatbot that combines Spring AI's Model Context Protocol (MCP) with the [Brave Search MCP Server](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/brave-search). The application creates a conversational interface powered by Anthropic's Claude AI model that can perform internet searches through Brave Search, enabling natural language interactions with real-time web data.
 840 | [You can find the complete code for this tutorial here.](https://github.com/spring-projects/spring-ai-examples/tree/main/model-context-protocol/web-search/brave-chatbot)
 841 | 
 842 | ## System Requirements
 843 | 
 844 | Before starting, ensure your system meets these requirements:
 845 | 
 846 | - Java 17 or higher
 847 | - Maven 3.6+
 848 | - npx package manager
 849 | - Anthropic API key (Claude)
 850 | - Brave Search API key
 851 | 
 852 | ## Setting Up Your Environment
 853 | 
 854 | 1. Install npx (Node Package eXecute):
 855 |    First, make sure to install [npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)
 856 |    and then run:
 857 | 
 858 |    ```bash
 859 |    npm install -g npx
 860 |    ```
 861 | 
 862 | 2. Clone the repository:
 863 | 
 864 |    ```bash
 865 |    git clone https://github.com/spring-projects/spring-ai-examples.git
 866 |    cd model-context-protocol/brave-chatbot
 867 |    ```
 868 | 
 869 | 3. Set up your API keys:
 870 | 
 871 |    ```bash
 872 |    export ANTHROPIC_API_KEY='your-anthropic-api-key-here'
 873 |    export BRAVE_API_KEY='your-brave-api-key-here'
 874 |    ```
 875 | 
 876 | 4. Build the application:
 877 | 
 878 |    ```bash
 879 |    ./mvnw clean install
 880 |    ```
 881 | 
 882 | 5. Run the application using Maven:
 883 |    ```bash
 884 |    ./mvnw spring-boot:run
 885 |    ```
 886 | 
 887 | <Warning>
 888 | 
 889 | Make sure you keep your `ANTHROPIC_API_KEY` and `BRAVE_API_KEY` keys secure!
 890 | 
 891 | </Warning>
 892 | 
 893 | ## How it Works
 894 | 
 895 | The application integrates Spring AI with the Brave Search MCP server through several components:
 896 | 
 897 | ### MCP Client Configuration
 898 | 
 899 | 1. Required dependencies in pom.xml:
 900 | 
 901 | ```xml
 902 | <dependency>
 903 |     <groupId>org.springframework.ai</groupId>
 904 |     <artifactId>spring-ai-starter-mcp-client</artifactId>
 905 | </dependency>
 906 | <dependency>
 907 |     <groupId>org.springframework.ai</groupId>
 908 |     <artifactId>spring-ai-starter-model-anthropic</artifactId>
 909 | </dependency>
 910 | ```
 911 | 
 912 | 2. Application properties (application.yml):
 913 | 
 914 | ```yml
 915 | spring:
 916 |   ai:
 917 |     mcp:
 918 |       client:
 919 |         enabled: true
 920 |         name: brave-search-client
 921 |         version: 1.0.0
 922 |         type: SYNC
 923 |         request-timeout: 20s
 924 |         stdio:
 925 |           root-change-notification: true
 926 |           servers-configuration: classpath:/mcp-servers-config.json
 927 |         toolcallback:
 928 |           enabled: true
 929 |     anthropic:
 930 |       api-key: ${ANTHROPIC_API_KEY}
 931 | ```
 932 | 
 933 | This activates the `spring-ai-starter-mcp-client` to create one or more `McpClient`s based on the provided server configuration.
 934 | The `spring.ai.mcp.client.toolcallback.enabled=true` property enables the tool callback mechanism, that automatically registers all MCP tool as spring ai tools.
 935 | It is disabled by default.
 936 | 
 937 | 3. MCP Server Configuration (`mcp-servers-config.json`):
 938 | 
 939 | ```json
 940 | {
 941 |   "mcpServers": {
 942 |     "brave-search": {
 943 |       "command": "npx",
 944 |       "args": ["-y", "@modelcontextprotocol/server-brave-search"],
 945 |       "env": {
 946 |         "BRAVE_API_KEY": "<PUT YOUR BRAVE API KEY>"
 947 |       }
 948 |     }
 949 |   }
 950 | }
 951 | ```
 952 | 
 953 | ### Chat Implementation
 954 | 
 955 | The chatbot is implemented using Spring AI's ChatClient with MCP tool integration:
 956 | 
 957 | ```java
 958 | var chatClient = chatClientBuilder
 959 |     .defaultSystem("You are useful assistant, expert in AI and Java.")
 960 |     .defaultToolCallbacks((Object[]) mcpToolAdapter.toolCallbacks())
 961 |     .defaultAdvisors(new MessageChatMemoryAdvisor(new InMemoryChatMemory()))
 962 |     .build();
 963 | ```
 964 | 
 965 | <Warning>
 966 | 
 967 | Breaking change: From SpringAI 1.0.0-M8 onwards, use `.defaultToolCallbacks(...)` instead of `.defaultTool(...)` to register MCP tools.
 968 | 
 969 | </Warning>
 970 | 
 971 | Key features:
 972 | 
 973 | - Uses Claude AI model for natural language understanding
 974 | - Integrates Brave Search through MCP for real-time web search capabilities
 975 | - Maintains conversation memory using InMemoryChatMemory
 976 | - Runs as an interactive command-line application
 977 | 
 978 | ### Build and run
 979 | 
 980 | ```bash
 981 | ./mvnw clean install
 982 | java -jar ./target/ai-mcp-brave-chatbot-0.0.1-SNAPSHOT.jar
 983 | ```
 984 | 
 985 | or
 986 | 
 987 | ```bash
 988 | ./mvnw spring-boot:run
 989 | ```
 990 | 
 991 | The application will start an interactive chat session where you can ask questions. The chatbot will use Brave Search when it needs to find information from the internet to answer your queries.
 992 | 
 993 | The chatbot can:
 994 | 
 995 | - Answer questions using its built-in knowledge
 996 | - Perform web searches when needed using Brave Search
 997 | - Remember context from previous messages in the conversation
 998 | - Combine information from multiple sources to provide comprehensive answers
 999 | 
1000 | ### Advanced Configuration
1001 | 
1002 | The MCP client supports additional configuration options:
1003 | 
1004 | - Client customization through `McpSyncClientCustomizer` or `McpAsyncClientCustomizer`
1005 | - Multiple clients with multiple transport types: `STDIO` and `SSE` (Server-Sent Events)
1006 | - Integration with Spring AI's tool execution framework
1007 | - Automatic client initialization and lifecycle management
1008 | 
1009 | For WebFlux-based applications, you can use the WebFlux starter instead:
1010 | 
1011 | ```xml
1012 | <dependency>
1013 |     <groupId>org.springframework.ai</groupId>
1014 |     <artifactId>spring-ai-mcp-client-webflux-spring-boot-starter</artifactId>
1015 | </dependency>
1016 | ```
1017 | 
1018 | This provides similar functionality but uses a WebFlux-based SSE transport implementation, recommended for production deployments.
1019 | 
1020 | </Tab>
1021 | 
1022 | <Tab title="Kotlin">
1023 | 
1024 | [You can find the complete code for this tutorial here.](https://github.com/modelcontextprotocol/kotlin-sdk/tree/main/samples/kotlin-mcp-client)
1025 | 
1026 | ## System Requirements
1027 | 
1028 | Before starting, ensure your system meets these requirements:
1029 | 
1030 | - Java 17 or higher
1031 | - Anthropic API key (Claude)
1032 | 
1033 | ## Setting up your environment
1034 | 
1035 | First, let's install `java` and `gradle` if you haven't already.
1036 | You can download `java` from [official Oracle JDK website](https://www.oracle.com/java/technologies/downloads/).
1037 | Verify your `java` installation:
1038 | 
1039 | ```bash
1040 | java --version
1041 | ```
1042 | 
1043 | Now, let's create and set up your project:
1044 | 
1045 | <CodeGroup>
1046 | 
1047 | ```bash macOS/Linux
1048 | # Create a new directory for our project
1049 | mkdir kotlin-mcp-client
1050 | cd kotlin-mcp-client
1051 | 
1052 | # Initialize a new kotlin project
1053 | gradle init
1054 | ```
1055 | 
1056 | ```powershell Windows
1057 | # Create a new directory for our project
1058 | md kotlin-mcp-client
1059 | cd kotlin-mcp-client
1060 | # Initialize a new kotlin project
1061 | gradle init
1062 | ```
1063 | 
1064 | </CodeGroup>
1065 | 
1066 | After running `gradle init`, you will be presented with options for creating your project.
1067 | Select **Application** as the project type, **Kotlin** as the programming language, and **Java 17** as the Java version.
1068 | 
1069 | Alternatively, you can create a Kotlin application using the [IntelliJ IDEA project wizard](https://kotlinlang.org/docs/jvm-get-started.html).
1070 | 
1071 | After creating the project, add the following dependencies:
1072 | 
1073 | <CodeGroup>
1074 | 
1075 | ```kotlin build.gradle.kts
1076 | val mcpVersion = "0.4.0"
1077 | val slf4jVersion = "2.0.9"
1078 | val anthropicVersion = "0.8.0"
1079 | 
1080 | dependencies {
1081 |     implementation("io.modelcontextprotocol:kotlin-sdk:$mcpVersion")
1082 |     implementation("org.slf4j:slf4j-nop:$slf4jVersion")
1083 |     implementation("com.anthropic:anthropic-java:$anthropicVersion")
1084 | }
1085 | ```
1086 | 
1087 | ```groovy build.gradle
1088 | def mcpVersion = '0.3.0'
1089 | def slf4jVersion = '2.0.9'
1090 | def anthropicVersion = '0.8.0'
1091 | dependencies {
1092 |     implementation "io.modelcontextprotocol:kotlin-sdk:$mcpVersion"
1093 |     implementation "org.slf4j:slf4j-nop:$slf4jVersion"
1094 |     implementation "com.anthropic:anthropic-java:$anthropicVersion"
1095 | }
1096 | ```
1097 | 
1098 | </CodeGroup>
1099 | 
1100 | Also, add the following plugins to your build script:
1101 | 
1102 | <CodeGroup>
1103 | 
1104 | ```kotlin build.gradle.kts
1105 | plugins {
1106 |     id("com.github.johnrengelman.shadow") version "8.1.1"
1107 | }
1108 | ```
1109 | 
1110 | ```groovy build.gradle
1111 | plugins {
1112 |     id 'com.github.johnrengelman.shadow' version '8.1.1'
1113 | }
1114 | ```
1115 | 
1116 | </CodeGroup>
1117 | 
1118 | ## Setting up your API key
1119 | 
1120 | You'll need an Anthropic API key from the [Anthropic Console](https://console.anthropic.com/settings/keys).
1121 | 
1122 | Set up your API key:
1123 | 
1124 | ```bash
1125 | export ANTHROPIC_API_KEY='your-anthropic-api-key-here'
1126 | ```
1127 | 
1128 | <Warning>
1129 | 
1130 | Make sure your keep your `ANTHROPIC_API_KEY` secure!
1131 | 
1132 | </Warning>
1133 | 
1134 | ## Creating the Client
1135 | 
1136 | ### Basic Client Structure
1137 | 
1138 | First, let's create the basic client class:
1139 | 
1140 | ```kotlin
1141 | class MCPClient : AutoCloseable {
1142 |     private val anthropic = AnthropicOkHttpClient.fromEnv()
1143 |     private val mcp: Client = Client(clientInfo = Implementation(name = "mcp-client-cli", version = "1.0.0"))
1144 |     private lateinit var tools: List<ToolUnion>
1145 | 
1146 |     // methods will go here
1147 | 
1148 |     override fun close() {
1149 |         runBlocking {
1150 |             mcp.close()
1151 |             anthropic.close()
1152 |         }
1153 |     }
1154 | ```
1155 | 
1156 | ### Server connection management
1157 | 
1158 | Next, we'll implement the method to connect to an MCP server:
1159 | 
1160 | ```kotlin
1161 | suspend fun connectToServer(serverScriptPath: String) {
1162 |     try {
1163 |         val command = buildList {
1164 |             when (serverScriptPath.substringAfterLast(".")) {
1165 |                 "js" -> add("node")
1166 |                 "py" -> add(if (System.getProperty("os.name").lowercase().contains("win")) "python" else "python3")
1167 |                 "jar" -> addAll(listOf("java", "-jar"))
1168 |                 else -> throw IllegalArgumentException("Server script must be a .js, .py or .jar file")
1169 |             }
1170 |             add(serverScriptPath)
1171 |         }
1172 | 
1173 |         val process = ProcessBuilder(command).start()
1174 |         val transport = StdioClientTransport(
1175 |             input = process.inputStream.asSource().buffered(),
1176 |             output = process.outputStream.asSink().buffered()
1177 |         )
1178 | 
1179 |         mcp.connect(transport)
1180 | 
1181 |         val toolsResult = mcp.listTools()
1182 |         tools = toolsResult?.tools?.map { tool ->
1183 |             ToolUnion.ofTool(
1184 |                 Tool.builder()
1185 |                     .name(tool.name)
1186 |                     .description(tool.description ?: "")
1187 |                     .inputSchema(
1188 |                         Tool.InputSchema.builder()
1189 |                             .type(JsonValue.from(tool.inputSchema.type))
1190 |                             .properties(tool.inputSchema.properties.toJsonValue())
1191 |                             .putAdditionalProperty("required", JsonValue.from(tool.inputSchema.required))
1192 |                             .build()
1193 |                     )
1194 |                     .build()
1195 |             )
1196 |         } ?: emptyList()
1197 |         println("Connected to server with tools: ${tools.joinToString(", ") { it.tool().get().name() }}")
1198 |     } catch (e: Exception) {
1199 |         println("Failed to connect to MCP server: $e")
1200 |         throw e
1201 |     }
1202 | }
1203 | ```
1204 | 
1205 | Also create a helper function to convert from `JsonObject` to `JsonValue` for Anthropic:
1206 | 
1207 | ```kotlin
1208 | private fun JsonObject.toJsonValue(): JsonValue {
1209 |     val mapper = ObjectMapper()
1210 |     val node = mapper.readTree(this.toString())
1211 |     return JsonValue.fromJsonNode(node)
1212 | }
1213 | ```
1214 | 
1215 | ### Query processing logic
1216 | 
1217 | Now let's add the core functionality for processing queries and handling tool calls:
1218 | 
1219 | ```kotlin
1220 | private val messageParamsBuilder: MessageCreateParams.Builder = MessageCreateParams.builder()
1221 |     .model(Model.CLAUDE_3_5_SONNET_20241022)
1222 |     .maxTokens(1024)
1223 | 
1224 | suspend fun processQuery(query: String): String {
1225 |     val messages = mutableListOf(
1226 |         MessageParam.builder()
1227 |             .role(MessageParam.Role.USER)
1228 |             .content(query)
1229 |             .build()
1230 |     )
1231 | 
1232 |     val response = anthropic.messages().create(
1233 |         messageParamsBuilder
1234 |             .messages(messages)
1235 |             .tools(tools)
1236 |             .build()
1237 |     )
1238 | 
1239 |     val finalText = mutableListOf<String>()
1240 |     response.content().forEach { content ->
1241 |         when {
1242 |             content.isText() -> finalText.add(content.text().getOrNull()?.text() ?: "")
1243 | 
1244 |             content.isToolUse() -> {
1245 |                 val toolName = content.toolUse().get().name()
1246 |                 val toolArgs =
1247 |                     content.toolUse().get()._input().convert(object : TypeReference<Map<String, JsonValue>>() {})
1248 | 
1249 |                 val result = mcp.callTool(
1250 |                     name = toolName,
1251 |                     arguments = toolArgs ?: emptyMap()
1252 |                 )
1253 |                 finalText.add("[Calling tool $toolName with args $toolArgs]")
1254 | 
1255 |                 messages.add(
1256 |                     MessageParam.builder()
1257 |                         .role(MessageParam.Role.USER)
1258 |                         .content(
1259 |                             """
1260 |                                 "type": "tool_result",
1261 |                                 "tool_name": $toolName,
1262 |                                 "result": ${result?.content?.joinToString("\n") { (it as TextContent).text ?: "" }}
1263 |                             """.trimIndent()
1264 |                         )
1265 |                         .build()
1266 |                 )
1267 | 
1268 |                 val aiResponse = anthropic.messages().create(
1269 |                     messageParamsBuilder
1270 |                         .messages(messages)
1271 |                         .build()
1272 |                 )
1273 | 
1274 |                 finalText.add(aiResponse.content().first().text().getOrNull()?.text() ?: "")
1275 |             }
1276 |         }
1277 |     }
1278 | 
1279 |     return finalText.joinToString("\n", prefix = "", postfix = "")
1280 | }
1281 | ```
1282 | 
1283 | ### Interactive chat
1284 | 
1285 | We'll add the chat loop:
1286 | 
1287 | ```kotlin
1288 | suspend fun chatLoop() {
1289 |     println("\nMCP Client Started!")
1290 |     println("Type your queries or 'quit' to exit.")
1291 | 
1292 |     while (true) {
1293 |         print("\nQuery: ")
1294 |         val message = readLine() ?: break
1295 |         if (message.lowercase() == "quit") break
1296 |         val response = processQuery(message)
1297 |         println("\n$response")
1298 |     }
1299 | }
1300 | ```
1301 | 
1302 | ### Main entry point
1303 | 
1304 | Finally, we'll add the main execution function:
1305 | 
1306 | ```kotlin
1307 | fun main(args: Array<String>) = runBlocking {
1308 |     if (args.isEmpty()) throw IllegalArgumentException("Usage: java -jar <your_path>/build/libs/kotlin-mcp-client-0.1.0-all.jar <path_to_server_script>")
1309 |     val serverPath = args.first()
1310 |     val client = MCPClient()
1311 |     client.use {
1312 |         client.connectToServer(serverPath)
1313 |         client.chatLoop()
1314 |     }
1315 | }
1316 | ```
1317 | 
1318 | ## Running the client
1319 | 
1320 | To run your client with any MCP server:
1321 | 
1322 | ```bash
1323 | ./gradlew build
1324 | 
1325 | # Run the client
1326 | java -jar build/libs/<your-jar-name>.jar path/to/server.jar # jvm server
1327 | java -jar build/libs/<your-jar-name>.jar path/to/server.py # python server
1328 | java -jar build/libs/<your-jar-name>.jar path/to/build/index.js # node server
1329 | ```
1330 | 
1331 | <Note>
1332 | 
1333 | If you're continuing the weather tutorial from the server quickstart, your command might look something like this: `java -jar build/libs/kotlin-mcp-client-0.1.0-all.jar .../samples/weather-stdio-server/build/libs/weather-stdio-server-0.1.0-all.jar`
1334 | 
1335 | </Note>
1336 | 
1337 | **The client will:**
1338 | 
1339 | 1. Connect to the specified server
1340 | 2. List available tools
1341 | 3. Start an interactive chat session where you can:
1342 |    - Enter queries
1343 |    - See tool executions
1344 |    - Get responses from Claude
1345 | 
1346 | ## How it works
1347 | 
1348 | Here's a high-level workflow schema:
1349 | 
1350 | ```mermaid
1351 | ---
1352 | config:
1353 |     theme: neutral
1354 | ---
1355 | sequenceDiagram
1356 |     actor User
1357 |     participant Client
1358 |     participant Claude
1359 |     participant MCP_Server as MCP Server
1360 |     participant Tools
1361 | 
1362 |     User->>Client: Send query
1363 |     Client<<->>MCP_Server: Get available tools
1364 |     Client->>Claude: Send query with tool descriptions
1365 |     Claude-->>Client: Decide tool execution
1366 |     Client->>MCP_Server: Request tool execution
1367 |     MCP_Server->>Tools: Execute chosen tools
1368 |     Tools-->>MCP_Server: Return results
1369 |     MCP_Server-->>Client: Send results
1370 |     Client->>Claude: Send tool results
1371 |     Claude-->>Client: Provide final response
1372 |     Client-->>User: Display response
1373 | ```
1374 | 
1375 | When you submit a query:
1376 | 
1377 | 1. The client gets the list of available tools from the server
1378 | 2. Your query is sent to Claude along with tool descriptions
1379 | 3. Claude decides which tools (if any) to use
1380 | 4. The client executes any requested tool calls through the server
1381 | 5. Results are sent back to Claude
1382 | 6. Claude provides a natural language response
1383 | 7. The response is displayed to you
1384 | 
1385 | ## Best practices
1386 | 
1387 | 1. **Error Handling**
1388 |    - Leverage Kotlin's type system to model errors explicitly
1389 |    - Wrap external tool and API calls in `try-catch` blocks when exceptions are possible
1390 |    - Provide clear and meaningful error messages
1391 |    - Handle network timeouts and connection issues gracefully
1392 | 
1393 | 2. **Security**
1394 |    - Store API keys and secrets securely in `local.properties`, environment variables, or secret managers
1395 |    - Validate all external responses to avoid unexpected or unsafe data usage
1396 |    - Be cautious with permissions and trust boundaries when using tools
1397 | 
1398 | ## Troubleshooting
1399 | 
1400 | ### Server Path Issues
1401 | 
1402 | - Double-check the path to your server script is correct
1403 | - Use the absolute path if the relative path isn't working
1404 | - For Windows users, make sure to use forward slashes (/) or escaped backslashes (\\) in the path
1405 | - Make sure that the required runtime is installed (java for Java, npm for Node.js, or uv for Python)
1406 | - Verify the server file has the correct extension (.jar for Java, .js for Node.js or .py for Python)
1407 | 
1408 | Example of correct path usage:
1409 | 
1410 | ```bash
1411 | # Relative path
1412 | java -jar build/libs/client.jar ./server/build/libs/server.jar
1413 | 
1414 | # Absolute path
1415 | java -jar build/libs/client.jar /Users/username/projects/mcp-server/build/libs/server.jar
1416 | 
1417 | # Windows path (either format works)
1418 | java -jar build/libs/client.jar C:/projects/mcp-server/build/libs/server.jar
1419 | java -jar build/libs/client.jar C:\\projects\\mcp-server\\build\\libs\\server.jar
1420 | ```
1421 | 
1422 | ### Response Timing
1423 | 
1424 | - The first response might take up to 30 seconds to return
1425 | - This is normal and happens while:
1426 |   - The server initializes
1427 |   - Claude processes the query
1428 |   - Tools are being executed
1429 | - Subsequent responses are typically faster
1430 | - Don't interrupt the process during this initial waiting period
1431 | 
1432 | ### Common Error Messages
1433 | 
1434 | If you see:
1435 | 
1436 | - `Connection refused`: Ensure the server is running and the path is correct
1437 | - `Tool execution failed`: Verify the tool's required environment variables are set
1438 | - `ANTHROPIC_API_KEY is not set`: Check your environment variables
1439 | 
1440 | </Tab>
1441 | 
1442 | <Tab title="C#">
1443 | 
1444 | [You can find the complete code for this tutorial here.](https://github.com/modelcontextprotocol/csharp-sdk/tree/main/samples/QuickstartClient)
1445 | 
1446 | ## System Requirements
1447 | 
1448 | Before starting, ensure your system meets these requirements:
1449 | 
1450 | - .NET 8.0 or higher
1451 | - Anthropic API key (Claude)
1452 | - Windows, Linux, or macOS
1453 | 
1454 | ## Setting up your environment
1455 | 
1456 | First, create a new .NET project:
1457 | 
1458 | ```bash
1459 | dotnet new console -n QuickstartClient
1460 | cd QuickstartClient
1461 | ```
1462 | 
1463 | Then, add the required dependencies to your project:
1464 | 
1465 | ```bash
1466 | dotnet add package ModelContextProtocol --prerelease
1467 | dotnet add package Anthropic.SDK
1468 | dotnet add package Microsoft.Extensions.Hosting
1469 | dotnet add package Microsoft.Extensions.AI
1470 | ```
1471 | 
1472 | ## Setting up your API key
1473 | 
1474 | You'll need an Anthropic API key from the [Anthropic Console](https://console.anthropic.com/settings/keys).
1475 | 
1476 | ```bash
1477 | dotnet user-secrets init
1478 | dotnet user-secrets set "ANTHROPIC_API_KEY" "<your key here>"
1479 | ```
1480 | 
1481 | ## Creating the Client
1482 | 
1483 | ### Basic Client Structure
1484 | 
1485 | First, let's setup the basic client class in the file `Program.cs`:
1486 | 
1487 | ```csharp
1488 | using Anthropic.SDK;
1489 | using Microsoft.Extensions.AI;
1490 | using Microsoft.Extensions.Configuration;
1491 | using Microsoft.Extensions.Hosting;
1492 | using ModelContextProtocol.Client;
1493 | using ModelContextProtocol.Protocol.Transport;
1494 | 
1495 | var builder = Host.CreateApplicationBuilder(args);
1496 | 
1497 | builder.Configuration
1498 |     .AddEnvironmentVariables()
1499 |     .AddUserSecrets<Program>();
1500 | ```
1501 | 
1502 | This creates the beginnings of a .NET console application that can read the API key from user secrets.
1503 | 
1504 | Next, we'll setup the MCP Client:
1505 | 
1506 | ```csharp
1507 | var (command, arguments) = GetCommandAndArguments(args);
1508 | 
1509 | var clientTransport = new StdioClientTransport(new()
1510 | {
1511 |     Name = "Demo Server",
1512 |     Command = command,
1513 |     Arguments = arguments,
1514 | });
1515 | 
1516 | await using var mcpClient = await McpClientFactory.CreateAsync(clientTransport);
1517 | 
1518 | var tools = await mcpClient.ListToolsAsync();
1519 | foreach (var tool in tools)
1520 | {
1521 |     Console.WriteLine(
quot;Connected to server with tools: {tool.Name}");
1522 | }
1523 | ```
1524 | 
1525 | Add this function at the end of the `Program.cs` file:
1526 | 
1527 | ```csharp
1528 | static (string command, string[] arguments) GetCommandAndArguments(string[] args)
1529 | {
1530 |     return args switch
1531 |     {
1532 |         [var script] when script.EndsWith(".py") => ("python", args),
1533 |         [var script] when script.EndsWith(".js") => ("node", args),
1534 |         [var script] when Directory.Exists(script) || (File.Exists(script) && script.EndsWith(".csproj")) => ("dotnet", ["run", "--project", script, "--no-build"]),
1535 |         _ => throw new NotSupportedException("An unsupported server script was provided. Supported scripts are .py, .js, or .csproj")
1536 |     };
1537 | }
1538 | ```
1539 | 
1540 | This creates an MCP client that will connect to a server that is provided as a command line argument. It then lists the available tools from the connected server.
1541 | 
1542 | ### Query processing logic
1543 | 
1544 | Now let's add the core functionality for processing queries and handling tool calls:
1545 | 
1546 | ```csharp
1547 | using var anthropicClient = new AnthropicClient(new APIAuthentication(builder.Configuration["ANTHROPIC_API_KEY"]))
1548 |     .Messages
1549 |     .AsBuilder()
1550 |     .UseFunctionInvocation()
1551 |     .Build();
1552 | 
1553 | var options = new ChatOptions
1554 | {
1555 |     MaxOutputTokens = 1000,
1556 |     ModelId = "claude-3-5-sonnet-20241022",
1557 |     Tools = [.. tools]
1558 | };
1559 | 
1560 | Console.ForegroundColor = ConsoleColor.Green;
1561 | Console.WriteLine("MCP Client Started!");
1562 | Console.ResetColor();
1563 | 
1564 | PromptForInput();
1565 | while(Console.ReadLine() is string query && !"exit".Equals(query, StringComparison.OrdinalIgnoreCase))
1566 | {
1567 |     if (string.IsNullOrWhiteSpace(query))
1568 |     {
1569 |         PromptForInput();
1570 |         continue;
1571 |     }
1572 | 
1573 |     await foreach (var message in anthropicClient.GetStreamingResponseAsync(query, options))
1574 |     {
1575 |         Console.Write(message);
1576 |     }
1577 |     Console.WriteLine();
1578 | 
1579 |     PromptForInput();
1580 | }
1581 | 
1582 | static void PromptForInput()
1583 | {
1584 |     Console.WriteLine("Enter a command (or 'exit' to quit):");
1585 |     Console.ForegroundColor = ConsoleColor.Cyan;
1586 |     Console.Write("> ");
1587 |     Console.ResetColor();
1588 | }
1589 | ```
1590 | 
1591 | ## Key Components Explained
1592 | 
1593 | ### 1. Client Initialization
1594 | 
1595 | - The client is initialized using `McpClientFactory.CreateAsync()`, which sets up the transport type and command to run the server.
1596 | 
1597 | ### 2. Server Connection
1598 | 
1599 | - Supports Python, Node.js, and .NET servers.
1600 | - The server is started using the command specified in the arguments.
1601 | - Configures to use stdio for communication with the server.
1602 | - Initializes the session and available tools.
1603 | 
1604 | ### 3. Query Processing
1605 | 
1606 | - Leverages [Microsoft.Extensions.AI](https://learn.microsoft.com/dotnet/ai/ai-extensions) for the chat client.
1607 | - Configures the `IChatClient` to use automatic tool (function) invocation.
1608 | - The client reads user input and sends it to the server.
1609 | - The server processes the query and returns a response.
1610 | - The response is displayed to the user.
1611 | 
1612 | ## Running the Client
1613 | 
1614 | To run your client with any MCP server:
1615 | 
1616 | ```bash
1617 | dotnet run -- path/to/server.csproj # dotnet server
1618 | dotnet run -- path/to/server.py # python server
1619 | dotnet run -- path/to/server.js # node server
1620 | ```
1621 | 
1622 | <Note>
1623 | 
1624 | If you're continuing the weather tutorial from the server quickstart, your command might look something like this: `dotnet run -- path/to/QuickstartWeatherServer`.
1625 | 
1626 | </Note>
1627 | 
1628 | The client will:
1629 | 
1630 | 1. Connect to the specified server
1631 | 2. List available tools
1632 | 3. Start an interactive chat session where you can:
1633 |    - Enter queries
1634 |    - See tool executions
1635 |    - Get responses from Claude
1636 | 4. Exit the session when done
1637 | 
1638 | Here's an example of what it should look like it connected to a weather server quickstart:
1639 | 
1640 | <Frame>
1641 |   <img src="/images/quickstart-dotnet-client.png" />
1642 | </Frame>
1643 | 
1644 | </Tab>
1645 | 
1646 | </Tabs>
1647 | 
1648 | ## Next steps
1649 | 
1650 | <CardGroup cols={2}>
1651 |   <Card title="Example servers" icon="grid" href="/examples">
1652 |     Check out our gallery of official MCP servers and implementations
1653 |   </Card>
1654 |   <Card title="Clients" icon="cubes" href="/clients">
1655 |     View the list of clients that support MCP integrations
1656 |   </Card>
1657 |   <Card
1658 |     title="Building MCP with LLMs"
1659 |     icon="comments"
1660 |     href="/tutorials/building-mcp-with-llms"
1661 |   >
1662 |     Learn how to use LLMs like Claude to speed up your MCP development
1663 |   </Card>
1664 |   <Card
1665 |     title="Core architecture"
1666 |     icon="sitemap"
1667 |     href="/legacy/concepts/architecture"
1668 |   >
1669 |     Understand how MCP connects clients, servers, and LLMs
1670 |   </Card>
1671 | </CardGroup>
1672 | 


--------------------------------------------------------------------------------
/docs/quickstart/server.mdx:
--------------------------------------------------------------------------------
   1 | ---
   2 | title: "Build an MCP Server"
   3 | description: "Get started building your own server to use in Claude for Desktop and other clients."
   4 | ---
   5 | 
   6 | In this tutorial, we'll build a simple MCP weather server and connect it to a host, Claude for Desktop. We'll start with a basic setup, and then progress to more complex use cases.
   7 | 
   8 | ### What we'll be building
   9 | 
  10 | Many LLMs do not currently have the ability to fetch the forecast and severe weather alerts. Let's use MCP to solve that!
  11 | 
  12 | We'll build a server that exposes two tools: `get_alerts` and `get_forecast`. Then we'll connect the server to an MCP host (in this case, Claude for Desktop):
  13 | 
  14 | <Frame>
  15 |   <img src="/images/weather-alerts.png" />
  16 | </Frame>
  17 | <Frame>
  18 |   <img src="/images/current-weather.png" />
  19 | </Frame>
  20 | 
  21 | <Note>
  22 | 
  23 | Servers can connect to any client. We've chosen Claude for Desktop here for simplicity, but we also have guides on [building your own client](/quickstart/client) as well as a [list of other clients here](/clients).
  24 | 
  25 | </Note>
  26 | 
  27 | ### Core MCP Concepts
  28 | 
  29 | MCP servers can provide three main types of capabilities:
  30 | 
  31 | 1. **Resources**: File-like data that can be read by clients (like API responses or file contents)
  32 | 2. **Tools**: Functions that can be called by the LLM (with user approval)
  33 | 3. **Prompts**: Pre-written templates that help users accomplish specific tasks
  34 | 
  35 | This tutorial will primarily focus on tools.
  36 | 
  37 | <Tabs>
  38 | <Tab title='Python'>
  39 | 
  40 | Let's get started with building our weather server! [You can find the complete code for what we'll be building here.](https://github.com/modelcontextprotocol/quickstart-resources/tree/main/weather-server-python)
  41 | 
  42 | ### Prerequisite knowledge
  43 | 
  44 | This quickstart assumes you have familiarity with:
  45 | 
  46 | - Python
  47 | - LLMs like Claude
  48 | 
  49 | ### Logging in MCP Servers
  50 | 
  51 | When implementing MCP servers, be careful about how you handle logging:
  52 | 
  53 | **For STDIO-based servers:** Never write to standard output (stdout). This includes:
  54 | 
  55 | - `print()` statements in Python
  56 | - `console.log()` in JavaScript
  57 | - `fmt.Println()` in Go
  58 | - Similar stdout functions in other languages
  59 | 
  60 | Writing to stdout will corrupt the JSON-RPC messages and break your server.
  61 | 
  62 | **For HTTP-based servers:** Standard output logging is fine since it doesn't interfere with HTTP responses.
  63 | 
  64 | ### Best Practices
  65 | 
  66 | 1. Use a logging library that writes to stderr or files.
  67 | 
  68 | ### Quick Examples
  69 | 
  70 | ```python
  71 | # ❌ Bad (STDIO)
  72 | print("Processing request")
  73 | 
  74 | # ✅ Good (STDIO)
  75 | import logging
  76 | logging.info("Processing request")
  77 | ```
  78 | 
  79 | ### System requirements
  80 | 
  81 | - Python 3.10 or higher installed.
  82 | - You must use the Python MCP SDK 1.2.0 or higher.
  83 | 
  84 | ### Set up your environment
  85 | 
  86 | First, let's install `uv` and set up our Python project and environment:
  87 | 
  88 | <CodeGroup>
  89 | 
  90 | ```bash macOS/Linux
  91 | curl -LsSf https://astral.sh/uv/install.sh | sh
  92 | ```
  93 | 
  94 | ```powershell Windows
  95 | powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
  96 | ```
  97 | 
  98 | </CodeGroup>
  99 | 
 100 | Make sure to restart your terminal afterwards to ensure that the `uv` command gets picked up.
 101 | 
 102 | Now, let's create and set up our project:
 103 | 
 104 | <CodeGroup>
 105 | 
 106 | ```bash macOS/Linux
 107 | # Create a new directory for our project
 108 | uv init weather
 109 | cd weather
 110 | 
 111 | # Create virtual environment and activate it
 112 | uv venv
 113 | source .venv/bin/activate
 114 | 
 115 | # Install dependencies
 116 | uv add "mcp[cli]" httpx
 117 | 
 118 | # Create our server file
 119 | touch weather.py
 120 | ```
 121 | 
 122 | ```powershell Windows
 123 | # Create a new directory for our project
 124 | uv init weather
 125 | cd weather
 126 | 
 127 | # Create virtual environment and activate it
 128 | uv venv
 129 | .venv\Scripts\activate
 130 | 
 131 | # Install dependencies
 132 | uv add mcp[cli] httpx
 133 | 
 134 | # Create our server file
 135 | new-item weather.py
 136 | ```
 137 | 
 138 | </CodeGroup>
 139 | 
 140 | Now let's dive into building your server.
 141 | 
 142 | ## Building your server
 143 | 
 144 | ### Importing packages and setting up the instance
 145 | 
 146 | Add these to the top of your `weather.py`:
 147 | 
 148 | ```python
 149 | from typing import Any
 150 | import httpx
 151 | from mcp.server.fastmcp import FastMCP
 152 | 
 153 | # Initialize FastMCP server
 154 | mcp = FastMCP("weather")
 155 | 
 156 | # Constants
 157 | NWS_API_BASE = "https://api.weather.gov"
 158 | USER_AGENT = "weather-app/1.0"
 159 | ```
 160 | 
 161 | The FastMCP class uses Python type hints and docstrings to automatically generate tool definitions, making it easy to create and maintain MCP tools.
 162 | 
 163 | ### Helper functions
 164 | 
 165 | Next, let's add our helper functions for querying and formatting the data from the National Weather Service API:
 166 | 
 167 | ```python
 168 | async def make_nws_request(url: str) -> dict[str, Any] | None:
 169 |     """Make a request to the NWS API with proper error handling."""
 170 |     headers = {
 171 |         "User-Agent": USER_AGENT,
 172 |         "Accept": "application/geo+json"
 173 |     }
 174 |     async with httpx.AsyncClient() as client:
 175 |         try:
 176 |             response = await client.get(url, headers=headers, timeout=30.0)
 177 |             response.raise_for_status()
 178 |             return response.json()
 179 |         except Exception:
 180 |             return None
 181 | 
 182 | def format_alert(feature: dict) -> str:
 183 |     """Format an alert feature into a readable string."""
 184 |     props = feature["properties"]
 185 |     return f"""
 186 | Event: {props.get('event', 'Unknown')}
 187 | Area: {props.get('areaDesc', 'Unknown')}
 188 | Severity: {props.get('severity', 'Unknown')}
 189 | Description: {props.get('description', 'No description available')}
 190 | Instructions: {props.get('instruction', 'No specific instructions provided')}
 191 | """
 192 | ```
 193 | 
 194 | ### Implementing tool execution
 195 | 
 196 | The tool execution handler is responsible for actually executing the logic of each tool. Let's add it:
 197 | 
 198 | ```python
 199 | @mcp.tool()
 200 | async def get_alerts(state: str) -> str:
 201 |     """Get weather alerts for a US state.
 202 | 
 203 |     Args:
 204 |         state: Two-letter US state code (e.g. CA, NY)
 205 |     """
 206 |     url = f"{NWS_API_BASE}/alerts/active/area/{state}"
 207 |     data = await make_nws_request(url)
 208 | 
 209 |     if not data or "features" not in data:
 210 |         return "Unable to fetch alerts or no alerts found."
 211 | 
 212 |     if not data["features"]:
 213 |         return "No active alerts for this state."
 214 | 
 215 |     alerts = [format_alert(feature) for feature in data["features"]]
 216 |     return "\n---\n".join(alerts)
 217 | 
 218 | @mcp.tool()
 219 | async def get_forecast(latitude: float, longitude: float) -> str:
 220 |     """Get weather forecast for a location.
 221 | 
 222 |     Args:
 223 |         latitude: Latitude of the location
 224 |         longitude: Longitude of the location
 225 |     """
 226 |     # First get the forecast grid endpoint
 227 |     points_url = f"{NWS_API_BASE}/points/{latitude},{longitude}"
 228 |     points_data = await make_nws_request(points_url)
 229 | 
 230 |     if not points_data:
 231 |         return "Unable to fetch forecast data for this location."
 232 | 
 233 |     # Get the forecast URL from the points response
 234 |     forecast_url = points_data["properties"]["forecast"]
 235 |     forecast_data = await make_nws_request(forecast_url)
 236 | 
 237 |     if not forecast_data:
 238 |         return "Unable to fetch detailed forecast."
 239 | 
 240 |     # Format the periods into a readable forecast
 241 |     periods = forecast_data["properties"]["periods"]
 242 |     forecasts = []
 243 |     for period in periods[:5]:  # Only show next 5 periods
 244 |         forecast = f"""
 245 | {period['name']}:
 246 | Temperature: {period['temperature']}°{period['temperatureUnit']}
 247 | Wind: {period['windSpeed']} {period['windDirection']}
 248 | Forecast: {period['detailedForecast']}
 249 | """
 250 |         forecasts.append(forecast)
 251 | 
 252 |     return "\n---\n".join(forecasts)
 253 | ```
 254 | 
 255 | ### Running the server
 256 | 
 257 | Finally, let's initialize and run the server:
 258 | 
 259 | ```python
 260 | if __name__ == "__main__":
 261 |     # Initialize and run the server
 262 |     mcp.run(transport='stdio')
 263 | ```
 264 | 
 265 | Your server is complete! Run `uv run weather.py` to start the MCP server, which will listen for messages from MCP hosts.
 266 | 
 267 | Let's now test your server from an existing MCP host, Claude for Desktop.
 268 | 
 269 | ## Testing your server with Claude for Desktop
 270 | 
 271 | <Note>
 272 | 
 273 | Claude for Desktop is not yet available on Linux. Linux users can proceed to the [Building a client](/quickstart/client) tutorial to build an MCP client that connects to the server we just built.
 274 | 
 275 | </Note>
 276 | 
 277 | First, make sure you have Claude for Desktop installed. [You can install the latest version
 278 | here.](https://claude.ai/download) If you already have Claude for Desktop, **make sure it's updated to the latest version.**
 279 | 
 280 | We'll need to configure Claude for Desktop for whichever MCP servers you want to use. To do this, open your Claude for Desktop App configuration at `~/Library/Application Support/Claude/claude_desktop_config.json` in a text editor. Make sure to create the file if it doesn't exist.
 281 | 
 282 | For example, if you have [VS Code](https://code.visualstudio.com/) installed:
 283 | 
 284 | <CodeGroup>
 285 | 
 286 | ```bash macOS/Linux
 287 | code ~/Library/Application\ Support/Claude/claude_desktop_config.json
 288 | ```
 289 | 
 290 | ```powershell Windows
 291 | code $env:AppData\Claude\claude_desktop_config.json
 292 | ```
 293 | 
 294 | </CodeGroup>
 295 | 
 296 | You'll then add your servers in the `mcpServers` key. The MCP UI elements will only show up in Claude for Desktop if at least one server is properly configured.
 297 | 
 298 | In this case, we'll add our single weather server like so:
 299 | 
 300 | <CodeGroup>
 301 | 
 302 | ```json macOS/Linux
 303 | {
 304 |   "mcpServers": {
 305 |     "weather": {
 306 |       "command": "uv",
 307 |       "args": [
 308 |         "--directory",
 309 |         "/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather",
 310 |         "run",
 311 |         "weather.py"
 312 |       ]
 313 |     }
 314 |   }
 315 | }
 316 | ```
 317 | 
 318 | ```json Windows
 319 | {
 320 |   "mcpServers": {
 321 |     "weather": {
 322 |       "command": "uv",
 323 |       "args": [
 324 |         "--directory",
 325 |         "C:\\ABSOLUTE\\PATH\\TO\\PARENT\\FOLDER\\weather",
 326 |         "run",
 327 |         "weather.py"
 328 |       ]
 329 |     }
 330 |   }
 331 | }
 332 | ```
 333 | 
 334 | </CodeGroup>
 335 | 
 336 | <Warning>
 337 | 
 338 | You may need to put the full path to the `uv` executable in the `command` field. You can get this by running `which uv` on macOS/Linux or `where uv` on Windows.
 339 | 
 340 | </Warning>
 341 | 
 342 | <Note>
 343 | 
 344 | Make sure you pass in the absolute path to your server. You can get this by running `pwd` on macOS/Linux or `cd` on Windows Command Prompt. On Windows, remember to use double backslashes (`\\`) or forward slashes (`/`) in the JSON path.
 345 | 
 346 | </Note>
 347 | 
 348 | This tells Claude for Desktop:
 349 | 
 350 | 1. There's an MCP server named "weather"
 351 | 2. To launch it by running `uv --directory /ABSOLUTE/PATH/TO/PARENT/FOLDER/weather run weather.py`
 352 | 
 353 | Save the file, and restart **Claude for Desktop**.
 354 | 
 355 | </Tab>
 356 | 
 357 | <Tab title='Node'>
 358 | 
 359 | Let's get started with building our weather server! [You can find the complete code for what we'll be building here.](https://github.com/modelcontextprotocol/quickstart-resources/tree/main/weather-server-typescript)
 360 | 
 361 | ### Prerequisite knowledge
 362 | 
 363 | This quickstart assumes you have familiarity with:
 364 | 
 365 | - TypeScript
 366 | - LLMs like Claude
 367 | 
 368 | ### Logging in MCP Servers
 369 | 
 370 | When implementing MCP servers, be careful about how you handle logging:
 371 | 
 372 | **For STDIO-based servers:** Never write to standard output (stdout). This includes:
 373 | 
 374 | - `print()` statements in Python
 375 | - `console.log()` in JavaScript
 376 | - `fmt.Println()` in Go
 377 | - Similar stdout functions in other languages
 378 | 
 379 | Writing to stdout will corrupt the JSON-RPC messages and break your server.
 380 | 
 381 | **For HTTP-based servers:** Standard output logging is fine since it doesn't interfere with HTTP responses.
 382 | 
 383 | ### Best Practices
 384 | 
 385 | 1. Use a logging library that writes to stderr or files, such as `logging` in Python.
 386 | 2. For JavaScript, be especially careful - `console.log()` writes to stdout by default
 387 | 
 388 | ### Quick Examples
 389 | 
 390 | ```javascript
 391 | // ❌ Bad (STDIO)
 392 | console.log("Server started");
 393 | 
 394 | // ✅ Good (STDIO)
 395 | console.error("Server started"); // stderr is safe
 396 | ```
 397 | 
 398 | ### System requirements
 399 | 
 400 | For TypeScript, make sure you have the latest version of Node installed.
 401 | 
 402 | ### Set up your environment
 403 | 
 404 | First, let's install Node.js and npm if you haven't already. You can download them from [nodejs.org](https://nodejs.org/).
 405 | Verify your Node.js installation:
 406 | 
 407 | ```bash
 408 | node --version
 409 | npm --version
 410 | ```
 411 | 
 412 | For this tutorial, you'll need Node.js version 16 or higher.
 413 | 
 414 | Now, let's create and set up our project:
 415 | 
 416 | <CodeGroup>
 417 | 
 418 | ```bash macOS/Linux
 419 | # Create a new directory for our project
 420 | mkdir weather
 421 | cd weather
 422 | 
 423 | # Initialize a new npm project
 424 | npm init -y
 425 | 
 426 | # Install dependencies
 427 | npm install @modelcontextprotocol/sdk zod
 428 | npm install -D @types/node typescript
 429 | 
 430 | # Create our files
 431 | mkdir src
 432 | touch src/index.ts
 433 | ```
 434 | 
 435 | ```powershell Windows
 436 | # Create a new directory for our project
 437 | md weather
 438 | cd weather
 439 | 
 440 | # Initialize a new npm project
 441 | npm init -y
 442 | 
 443 | # Install dependencies
 444 | npm install @modelcontextprotocol/sdk zod
 445 | npm install -D @types/node typescript
 446 | 
 447 | # Create our files
 448 | md src
 449 | new-item src\index.ts
 450 | ```
 451 | 
 452 | </CodeGroup>
 453 | 
 454 | Update your package.json to add type: "module" and a build script:
 455 | 
 456 | ```json package.json
 457 | {
 458 |   "type": "module",
 459 |   "bin": {
 460 |     "weather": "./build/index.js"
 461 |   },
 462 |   "scripts": {
 463 |     "build": "tsc && chmod 755 build/index.js"
 464 |   },
 465 |   "files": ["build"]
 466 | }
 467 | ```
 468 | 
 469 | Create a `tsconfig.json` in the root of your project:
 470 | 
 471 | ```json tsconfig.json
 472 | {
 473 |   "compilerOptions": {
 474 |     "target": "ES2022",
 475 |     "module": "Node16",
 476 |     "moduleResolution": "Node16",
 477 |     "outDir": "./build",
 478 |     "rootDir": "./src",
 479 |     "strict": true,
 480 |     "esModuleInterop": true,
 481 |     "skipLibCheck": true,
 482 |     "forceConsistentCasingInFileNames": true
 483 |   },
 484 |   "include": ["src/**/*"],
 485 |   "exclude": ["node_modules"]
 486 | }
 487 | ```
 488 | 
 489 | Now let's dive into building your server.
 490 | 
 491 | ## Building your server
 492 | 
 493 | ### Importing packages and setting up the instance
 494 | 
 495 | Add these to the top of your `src/index.ts`:
 496 | 
 497 | ```typescript
 498 | import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
 499 | import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
 500 | import { z } from "zod";
 501 | 
 502 | const NWS_API_BASE = "https://api.weather.gov";
 503 | const USER_AGENT = "weather-app/1.0";
 504 | 
 505 | // Create server instance
 506 | const server = new McpServer({
 507 |   name: "weather",
 508 |   version: "1.0.0",
 509 |   capabilities: {
 510 |     resources: {},
 511 |     tools: {},
 512 |   },
 513 | });
 514 | ```
 515 | 
 516 | ### Helper functions
 517 | 
 518 | Next, let's add our helper functions for querying and formatting the data from the National Weather Service API:
 519 | 
 520 | ```typescript
 521 | // Helper function for making NWS API requests
 522 | async function makeNWSRequest<T>(url: string): Promise<T | null> {
 523 |   const headers = {
 524 |     "User-Agent": USER_AGENT,
 525 |     Accept: "application/geo+json",
 526 |   };
 527 | 
 528 |   try {
 529 |     const response = await fetch(url, { headers });
 530 |     if (!response.ok) {
 531 |       throw new Error(`HTTP error! status: ${response.status}`);
 532 |     }
 533 |     return (await response.json()) as T;
 534 |   } catch (error) {
 535 |     console.error("Error making NWS request:", error);
 536 |     return null;
 537 |   }
 538 | }
 539 | 
 540 | interface AlertFeature {
 541 |   properties: {
 542 |     event?: string;
 543 |     areaDesc?: string;
 544 |     severity?: string;
 545 |     status?: string;
 546 |     headline?: string;
 547 |   };
 548 | }
 549 | 
 550 | // Format alert data
 551 | function formatAlert(feature: AlertFeature): string {
 552 |   const props = feature.properties;
 553 |   return [
 554 |     `Event: ${props.event || "Unknown"}`,
 555 |     `Area: ${props.areaDesc || "Unknown"}`,
 556 |     `Severity: ${props.severity || "Unknown"}`,
 557 |     `Status: ${props.status || "Unknown"}`,
 558 |     `Headline: ${props.headline || "No headline"}`,
 559 |     "---",
 560 |   ].join("\n");
 561 | }
 562 | 
 563 | interface ForecastPeriod {
 564 |   name?: string;
 565 |   temperature?: number;
 566 |   temperatureUnit?: string;
 567 |   windSpeed?: string;
 568 |   windDirection?: string;
 569 |   shortForecast?: string;
 570 | }
 571 | 
 572 | interface AlertsResponse {
 573 |   features: AlertFeature[];
 574 | }
 575 | 
 576 | interface PointsResponse {
 577 |   properties: {
 578 |     forecast?: string;
 579 |   };
 580 | }
 581 | 
 582 | interface ForecastResponse {
 583 |   properties: {
 584 |     periods: ForecastPeriod[];
 585 |   };
 586 | }
 587 | ```
 588 | 
 589 | ### Implementing tool execution
 590 | 
 591 | The tool execution handler is responsible for actually executing the logic of each tool. Let's add it:
 592 | 
 593 | ```typescript
 594 | // Register weather tools
 595 | server.tool(
 596 |   "get_alerts",
 597 |   "Get weather alerts for a state",
 598 |   {
 599 |     state: z.string().length(2).describe("Two-letter state code (e.g. CA, NY)"),
 600 |   },
 601 |   async ({ state }) => {
 602 |     const stateCode = state.toUpperCase();
 603 |     const alertsUrl = `${NWS_API_BASE}/alerts?area=${stateCode}`;
 604 |     const alertsData = await makeNWSRequest<AlertsResponse>(alertsUrl);
 605 | 
 606 |     if (!alertsData) {
 607 |       return {
 608 |         content: [
 609 |           {
 610 |             type: "text",
 611 |             text: "Failed to retrieve alerts data",
 612 |           },
 613 |         ],
 614 |       };
 615 |     }
 616 | 
 617 |     const features = alertsData.features || [];
 618 |     if (features.length === 0) {
 619 |       return {
 620 |         content: [
 621 |           {
 622 |             type: "text",
 623 |             text: `No active alerts for ${stateCode}`,
 624 |           },
 625 |         ],
 626 |       };
 627 |     }
 628 | 
 629 |     const formattedAlerts = features.map(formatAlert);
 630 |     const alertsText = `Active alerts for ${stateCode}:\n\n${formattedAlerts.join("\n")}`;
 631 | 
 632 |     return {
 633 |       content: [
 634 |         {
 635 |           type: "text",
 636 |           text: alertsText,
 637 |         },
 638 |       ],
 639 |     };
 640 |   },
 641 | );
 642 | 
 643 | server.tool(
 644 |   "get_forecast",
 645 |   "Get weather forecast for a location",
 646 |   {
 647 |     latitude: z.number().min(-90).max(90).describe("Latitude of the location"),
 648 |     longitude: z
 649 |       .number()
 650 |       .min(-180)
 651 |       .max(180)
 652 |       .describe("Longitude of the location"),
 653 |   },
 654 |   async ({ latitude, longitude }) => {
 655 |     // Get grid point data
 656 |     const pointsUrl = `${NWS_API_BASE}/points/${latitude.toFixed(4)},${longitude.toFixed(4)}`;
 657 |     const pointsData = await makeNWSRequest<PointsResponse>(pointsUrl);
 658 | 
 659 |     if (!pointsData) {
 660 |       return {
 661 |         content: [
 662 |           {
 663 |             type: "text",
 664 |             text: `Failed to retrieve grid point data for coordinates: ${latitude}, ${longitude}. This location may not be supported by the NWS API (only US locations are supported).`,
 665 |           },
 666 |         ],
 667 |       };
 668 |     }
 669 | 
 670 |     const forecastUrl = pointsData.properties?.forecast;
 671 |     if (!forecastUrl) {
 672 |       return {
 673 |         content: [
 674 |           {
 675 |             type: "text",
 676 |             text: "Failed to get forecast URL from grid point data",
 677 |           },
 678 |         ],
 679 |       };
 680 |     }
 681 | 
 682 |     // Get forecast data
 683 |     const forecastData = await makeNWSRequest<ForecastResponse>(forecastUrl);
 684 |     if (!forecastData) {
 685 |       return {
 686 |         content: [
 687 |           {
 688 |             type: "text",
 689 |             text: "Failed to retrieve forecast data",
 690 |           },
 691 |         ],
 692 |       };
 693 |     }
 694 | 
 695 |     const periods = forecastData.properties?.periods || [];
 696 |     if (periods.length === 0) {
 697 |       return {
 698 |         content: [
 699 |           {
 700 |             type: "text",
 701 |             text: "No forecast periods available",
 702 |           },
 703 |         ],
 704 |       };
 705 |     }
 706 | 
 707 |     // Format forecast periods
 708 |     const formattedForecast = periods.map((period: ForecastPeriod) =>
 709 |       [
 710 |         `${period.name || "Unknown"}:`,
 711 |         `Temperature: ${period.temperature || "Unknown"}°${period.temperatureUnit || "F"}`,
 712 |         `Wind: ${period.windSpeed || "Unknown"} ${period.windDirection || ""}`,
 713 |         `${period.shortForecast || "No forecast available"}`,
 714 |         "---",
 715 |       ].join("\n"),
 716 |     );
 717 | 
 718 |     const forecastText = `Forecast for ${latitude}, ${longitude}:\n\n${formattedForecast.join("\n")}`;
 719 | 
 720 |     return {
 721 |       content: [
 722 |         {
 723 |           type: "text",
 724 |           text: forecastText,
 725 |         },
 726 |       ],
 727 |     };
 728 |   },
 729 | );
 730 | ```
 731 | 
 732 | ### Running the server
 733 | 
 734 | Finally, implement the main function to run the server:
 735 | 
 736 | ```typescript
 737 | async function main() {
 738 |   const transport = new StdioServerTransport();
 739 |   await server.connect(transport);
 740 |   console.error("Weather MCP Server running on stdio");
 741 | }
 742 | 
 743 | main().catch((error) => {
 744 |   console.error("Fatal error in main():", error);
 745 |   process.exit(1);
 746 | });
 747 | ```
 748 | 
 749 | Make sure to run `npm run build` to build your server! This is a very important step in getting your server to connect.
 750 | 
 751 | Let's now test your server from an existing MCP host, Claude for Desktop.
 752 | 
 753 | ## Testing your server with Claude for Desktop
 754 | 
 755 | <Note>
 756 | 
 757 | Claude for Desktop is not yet available on Linux. Linux users can proceed to the [Building a client](/quickstart/client) tutorial to build an MCP client that connects to the server we just built.
 758 | 
 759 | </Note>
 760 | 
 761 | First, make sure you have Claude for Desktop installed. [You can install the latest version
 762 | here.](https://claude.ai/download) If you already have Claude for Desktop, **make sure it's updated to the latest version.**
 763 | 
 764 | We'll need to configure Claude for Desktop for whichever MCP servers you want to use. To do this, open your Claude for Desktop App configuration at `~/Library/Application Support/Claude/claude_desktop_config.json` in a text editor. Make sure to create the file if it doesn't exist.
 765 | 
 766 | For example, if you have [VS Code](https://code.visualstudio.com/) installed:
 767 | 
 768 | <CodeGroup>
 769 | 
 770 | ```bash macOS/Linux
 771 | code ~/Library/Application\ Support/Claude/claude_desktop_config.json
 772 | ```
 773 | 
 774 | ```powershell Windows
 775 | code $env:AppData\Claude\claude_desktop_config.json
 776 | ```
 777 | 
 778 | </CodeGroup>
 779 | 
 780 | You'll then add your servers in the `mcpServers` key. The MCP UI elements will only show up in Claude for Desktop if at least one server is properly configured.
 781 | 
 782 | In this case, we'll add our single weather server like so:
 783 | 
 784 | <CodeGroup>
 785 | 
 786 | ```json macOS/Linux
 787 | {
 788 |   "mcpServers": {
 789 |     "weather": {
 790 |       "command": "node",
 791 |       "args": ["/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather/build/index.js"]
 792 |     }
 793 |   }
 794 | }
 795 | ```
 796 | 
 797 | ```json Windows
 798 | {
 799 |   "mcpServers": {
 800 |     "weather": {
 801 |       "command": "node",
 802 |       "args": ["C:\\PATH\\TO\\PARENT\\FOLDER\\weather\\build\\index.js"]
 803 |     }
 804 |   }
 805 | }
 806 | ```
 807 | 
 808 | </CodeGroup>
 809 | 
 810 | This tells Claude for Desktop:
 811 | 
 812 | 1. There's an MCP server named "weather"
 813 | 2. Launch it by running `node /ABSOLUTE/PATH/TO/PARENT/FOLDER/weather/build/index.js`
 814 | 
 815 | Save the file, and restart **Claude for Desktop**.
 816 | 
 817 | </Tab>
 818 | <Tab title='Java'>
 819 | 
 820 | <Note>
 821 | 
 822 | This is a quickstart demo based on Spring AI MCP auto-configuration and boot starters.
 823 | To learn how to create sync and async MCP Servers, manually, consult the [Java SDK Server](/sdk/java/mcp-server) documentation.
 824 | 
 825 | </Note>
 826 | 
 827 | Let's get started with building our weather server!
 828 | [You can find the complete code for what we'll be building here.](https://github.com/spring-projects/spring-ai-examples/tree/main/model-context-protocol/weather/starter-stdio-server)
 829 | 
 830 | For more information, see the [MCP Server Boot Starter](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-server-boot-starter-docs.html) reference documentation.
 831 | For manual MCP Server implementation, refer to the [MCP Server Java SDK documentation](/sdk/java/mcp-server).
 832 | 
 833 | ### Logging in MCP Servers
 834 | 
 835 | When implementing MCP servers, be careful about how you handle logging:
 836 | 
 837 | **For STDIO-based servers:** Never write to standard output (stdout). This includes:
 838 | 
 839 | - `print()` statements in Python
 840 | - `console.log()` in JavaScript
 841 | - `fmt.Println()` in Go
 842 | - Similar stdout functions in other languages
 843 | 
 844 | Writing to stdout will corrupt the JSON-RPC messages and break your server.
 845 | 
 846 | **For HTTP-based servers:** Standard output logging is fine since it doesn't interfere with HTTP responses.
 847 | 
 848 | ### Best Practices
 849 | 
 850 | 1. Use a logging library that writes to stderr or files.
 851 | 2. Ensure any configured logging library will not write to STDOUT
 852 | 
 853 | ### System requirements
 854 | 
 855 | - Java 17 or higher installed.
 856 | - [Spring Boot 3.3.x](https://docs.spring.io/spring-boot/installing.html) or higher
 857 | 
 858 | ### Set up your environment
 859 | 
 860 | Use the [Spring Initializer](https://start.spring.io/) to bootstrap the project.
 861 | 
 862 | You will need to add the following dependencies:
 863 | 
 864 | <CodeGroup>
 865 | 
 866 | ```xml Maven
 867 | <dependencies>
 868 |       <dependency>
 869 |           <groupId>org.springframework.ai</groupId>
 870 |           <artifactId>spring-ai-starter-mcp-server</artifactId>
 871 |       </dependency>
 872 | 
 873 |       <dependency>
 874 |           <groupId>org.springframework</groupId>
 875 |           <artifactId>spring-web</artifactId>
 876 |       </dependency>
 877 | </dependencies>
 878 | ```
 879 | 
 880 | ```groovy Gradle
 881 | dependencies {
 882 |   implementation platform("org.springframework.ai:spring-ai-starter-mcp-server")
 883 |   implementation platform("org.springframework:spring-web")
 884 | }
 885 | ```
 886 | 
 887 | </CodeGroup>
 888 | 
 889 | Then configure your application by setting the application properties:
 890 | 
 891 | <CodeGroup>
 892 | 
 893 | ```bash application.properties
 894 | spring.main.bannerMode=off
 895 | logging.pattern.console=
 896 | ```
 897 | 
 898 | ```yaml application.yml
 899 | logging:
 900 |   pattern:
 901 |     console:
 902 | spring:
 903 |   main:
 904 |     banner-mode: off
 905 | ```
 906 | 
 907 | </CodeGroup>
 908 | 
 909 | The [Server Configuration Properties](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-server-boot-starter-docs.html#_configuration_properties) documents all available properties.
 910 | 
 911 | Now let's dive into building your server.
 912 | 
 913 | ## Building your server
 914 | 
 915 | ### Weather Service
 916 | 
 917 | Let's implement a [WeatherService.java](https://github.com/spring-projects/spring-ai-examples/blob/main/model-context-protocol/weather/starter-stdio-server/src/main/java/org/springframework/ai/mcp/sample/server/WeatherService.java) that uses a REST client to query the data from the National Weather Service API:
 918 | 
 919 | ```java
 920 | @Service
 921 | public class WeatherService {
 922 | 
 923 | 	private final RestClient restClient;
 924 | 
 925 | 	public WeatherService() {
 926 | 		this.restClient = RestClient.builder()
 927 | 			.baseUrl("https://api.weather.gov")
 928 | 			.defaultHeader("Accept", "application/geo+json")
 929 | 			.defaultHeader("User-Agent", "WeatherApiClient/1.0 (your@email.com)")
 930 | 			.build();
 931 | 	}
 932 | 
 933 |   @Tool(description = "Get weather forecast for a specific latitude/longitude")
 934 |   public String getWeatherForecastByLocation(
 935 |       double latitude,   // Latitude coordinate
 936 |       double longitude   // Longitude coordinate
 937 |   ) {
 938 |       // Returns detailed forecast including:
 939 |       // - Temperature and unit
 940 |       // - Wind speed and direction
 941 |       // - Detailed forecast description
 942 |   }
 943 | 
 944 |   @Tool(description = "Get weather alerts for a US state")
 945 |   public String getAlerts(
 946 |       @ToolParam(description = "Two-letter US state code (e.g. CA, NY)") String state
 947 |   ) {
 948 |       // Returns active alerts including:
 949 |       // - Event type
 950 |       // - Affected area
 951 |       // - Severity
 952 |       // - Description
 953 |       // - Safety instructions
 954 |   }
 955 | 
 956 |   // ......
 957 | }
 958 | ```
 959 | 
 960 | The `@Service` annotation with auto-register the service in your application context.
 961 | The Spring AI `@Tool` annotation, making it easy to create and maintain MCP tools.
 962 | 
 963 | The auto-configuration will automatically register these tools with the MCP server.
 964 | 
 965 | ### Create your Boot Application
 966 | 
 967 | ```java
 968 | @SpringBootApplication
 969 | public class McpServerApplication {
 970 | 
 971 | 	public static void main(String[] args) {
 972 | 		SpringApplication.run(McpServerApplication.class, args);
 973 | 	}
 974 | 
 975 | 	@Bean
 976 | 	public ToolCallbackProvider weatherTools(WeatherService weatherService) {
 977 | 		return  MethodToolCallbackProvider.builder().toolObjects(weatherService).build();
 978 | 	}
 979 | }
 980 | ```
 981 | 
 982 | Uses the the `MethodToolCallbackProvider` utils to convert the `@Tools` into actionable callbacks used by the MCP server.
 983 | 
 984 | ### Running the server
 985 | 
 986 | Finally, let's build the server:
 987 | 
 988 | ```bash
 989 | ./mvnw clean install
 990 | ```
 991 | 
 992 | This will generate a `mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar` file within the `target` folder.
 993 | 
 994 | Let's now test your server from an existing MCP host, Claude for Desktop.
 995 | 
 996 | ## Testing your server with Claude for Desktop
 997 | 
 998 | <Note>
 999 | 
1000 | Claude for Desktop is not yet available on Linux.
1001 | 
1002 | </Note>
1003 | 
1004 | First, make sure you have Claude for Desktop installed.
1005 | [You can install the latest version here.](https://claude.ai/download) If you already have Claude for Desktop, **make sure it's updated to the latest version.**
1006 | 
1007 | We'll need to configure Claude for Desktop for whichever MCP servers you want to use.
1008 | To do this, open your Claude for Desktop App configuration at `~/Library/Application Support/Claude/claude_desktop_config.json` in a text editor.
1009 | Make sure to create the file if it doesn't exist.
1010 | 
1011 | For example, if you have [VS Code](https://code.visualstudio.com/) installed:
1012 | 
1013 | <CodeGroup>
1014 | 
1015 | ```bash macOS/Linux
1016 | code ~/Library/Application\ Support/Claude/claude_desktop_config.json
1017 | ```
1018 | 
1019 | ```powershell Windows
1020 | code $env:AppData\Claude\claude_desktop_config.json
1021 | ```
1022 | 
1023 | </CodeGroup>
1024 | 
1025 | You'll then add your servers in the `mcpServers` key.
1026 | The MCP UI elements will only show up in Claude for Desktop if at least one server is properly configured.
1027 | 
1028 | In this case, we'll add our single weather server like so:
1029 | 
1030 | <CodeGroup>
1031 | 
1032 | ```json macOS/Linux
1033 | {
1034 |   "mcpServers": {
1035 |     "spring-ai-mcp-weather": {
1036 |       "command": "java",
1037 |       "args": [
1038 |         "-Dspring.ai.mcp.server.stdio=true",
1039 |         "-jar",
1040 |         "/ABSOLUTE/PATH/TO/PARENT/FOLDER/mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar"
1041 |       ]
1042 |     }
1043 |   }
1044 | }
1045 | ```
1046 | 
1047 | ```json Windows
1048 | {
1049 |   "mcpServers": {
1050 |     "spring-ai-mcp-weather": {
1051 |       "command": "java",
1052 |       "args": [
1053 |         "-Dspring.ai.mcp.server.transport=STDIO",
1054 |         "-jar",
1055 |         "C:\\ABSOLUTE\\PATH\\TO\\PARENT\\FOLDER\\weather\\mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar"
1056 |       ]
1057 |     }
1058 |   }
1059 | }
1060 | ```
1061 | 
1062 | </CodeGroup>
1063 | 
1064 | <Note>
1065 | 
1066 | Make sure you pass in the absolute path to your server.
1067 | 
1068 | </Note>
1069 | 
1070 | This tells Claude for Desktop:
1071 | 
1072 | 1. There's an MCP server named "my-weather-server"
1073 | 2. To launch it by running `java -jar /ABSOLUTE/PATH/TO/PARENT/FOLDER/mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar`
1074 | 
1075 | Save the file, and restart **Claude for Desktop**.
1076 | 
1077 | ## Testing your server with Java client
1078 | 
1079 | ### Create an MCP Client manually
1080 | 
1081 | Use the `McpClient` to connect to the server:
1082 | 
1083 | ```java
1084 | var stdioParams = ServerParameters.builder("java")
1085 |   .args("-jar", "/ABSOLUTE/PATH/TO/PARENT/FOLDER/mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar")
1086 |   .build();
1087 | 
1088 | var stdioTransport = new StdioClientTransport(stdioParams);
1089 | 
1090 | var mcpClient = McpClient.sync(stdioTransport).build();
1091 | 
1092 | mcpClient.initialize();
1093 | 
1094 | ListToolsResult toolsList = mcpClient.listTools();
1095 | 
1096 | CallToolResult weather = mcpClient.callTool(
1097 |   new CallToolRequest("getWeatherForecastByLocation",
1098 |       Map.of("latitude", "47.6062", "longitude", "-122.3321")));
1099 | 
1100 | CallToolResult alert = mcpClient.callTool(
1101 |   new CallToolRequest("getAlerts", Map.of("state", "NY")));
1102 | 
1103 | mcpClient.closeGracefully();
1104 | ```
1105 | 
1106 | ### Use MCP Client Boot Starter
1107 | 
1108 | Create a new boot starter application using the `spring-ai-starter-mcp-client` dependency:
1109 | 
1110 | ```xml
1111 | <dependency>
1112 |     <groupId>org.springframework.ai</groupId>
1113 |     <artifactId>spring-ai-starter-mcp-client</artifactId>
1114 | </dependency>
1115 | ```
1116 | 
1117 | and set the `spring.ai.mcp.client.stdio.servers-configuration` property to point to your `claude_desktop_config.json`.
1118 | You can reuse the existing Anthropic Desktop configuration:
1119 | 
1120 | ```properties
1121 | spring.ai.mcp.client.stdio.servers-configuration=file:PATH/TO/claude_desktop_config.json
1122 | ```
1123 | 
1124 | When you start your client application, the auto-configuration will create, automatically MCP clients from the claude_desktop_config.json.
1125 | 
1126 | For more information, see the [MCP Client Boot Starters](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-server-boot-client-docs.html) reference documentation.
1127 | 
1128 | ## More Java MCP Server examples
1129 | 
1130 | The [starter-webflux-server](https://github.com/spring-projects/spring-ai-examples/tree/main/model-context-protocol/weather/starter-webflux-server) demonstrates how to create an MCP server using SSE transport.
1131 | It showcases how to define and register MCP Tools, Resources, and Prompts, using the Spring Boot's auto-configuration capabilities.
1132 | 
1133 | </Tab>
1134 | 
1135 | <Tab title='Kotlin'>
1136 | 
1137 | Let's get started with building our weather server! [You can find the complete code for what we'll be building here.](https://github.com/modelcontextprotocol/kotlin-sdk/tree/main/samples/weather-stdio-server)
1138 | 
1139 | ### Prerequisite knowledge
1140 | 
1141 | This quickstart assumes you have familiarity with:
1142 | 
1143 | - Kotlin
1144 | - LLMs like Claude
1145 | 
1146 | ### System requirements
1147 | 
1148 | - Java 17 or higher installed.
1149 | 
1150 | ### Set up your environment
1151 | 
1152 | First, let's install `java` and `gradle` if you haven't already.
1153 | You can download `java` from [official Oracle JDK website](https://www.oracle.com/java/technologies/downloads/).
1154 | Verify your `java` installation:
1155 | 
1156 | ```bash
1157 | java --version
1158 | ```
1159 | 
1160 | Now, let's create and set up your project:
1161 | 
1162 | <CodeGroup>
1163 | 
1164 | ```bash macOS/Linux
1165 | # Create a new directory for our project
1166 | mkdir weather
1167 | cd weather
1168 | 
1169 | # Initialize a new kotlin project
1170 | gradle init
1171 | ```
1172 | 
1173 | ```powershell Windows
1174 | # Create a new directory for our project
1175 | md weather
1176 | cd weather
1177 | 
1178 | # Initialize a new kotlin project
1179 | gradle init
1180 | ```
1181 | 
1182 | </CodeGroup>
1183 | 
1184 | After running `gradle init`, you will be presented with options for creating your project.
1185 | Select **Application** as the project type, **Kotlin** as the programming language, and **Java 17** as the Java version.
1186 | 
1187 | Alternatively, you can create a Kotlin application using the [IntelliJ IDEA project wizard](https://kotlinlang.org/docs/jvm-get-started.html).
1188 | 
1189 | After creating the project, add the following dependencies:
1190 | 
1191 | <CodeGroup>
1192 | 
1193 | ```kotlin build.gradle.kts
1194 | val mcpVersion = "0.4.0"
1195 | val slf4jVersion = "2.0.9"
1196 | val ktorVersion = "3.1.1"
1197 | 
1198 | dependencies {
1199 |     implementation("io.modelcontextprotocol:kotlin-sdk:$mcpVersion")
1200 |     implementation("org.slf4j:slf4j-nop:$slf4jVersion")
1201 |     implementation("io.ktor:ktor-client-content-negotiation:$ktorVersion")
1202 |     implementation("io.ktor:ktor-serialization-kotlinx-json:$ktorVersion")
1203 | }
1204 | ```
1205 | 
1206 | ```groovy build.gradle
1207 | def mcpVersion = '0.3.0'
1208 | def slf4jVersion = '2.0.9'
1209 | def ktorVersion = '3.1.1'
1210 | 
1211 | dependencies {
1212 |     implementation "io.modelcontextprotocol:kotlin-sdk:$mcpVersion"
1213 |     implementation "org.slf4j:slf4j-nop:$slf4jVersion"
1214 |     implementation "io.ktor:ktor-client-content-negotiation:$ktorVersion"
1215 |     implementation "io.ktor:ktor-serialization-kotlinx-json:$ktorVersion"
1216 | }
1217 | ```
1218 | 
1219 | </CodeGroup>
1220 | 
1221 | Also, add the following plugins to your build script:
1222 | 
1223 | <CodeGroup>
1224 | 
1225 | ```kotlin build.gradle.kts
1226 | plugins {
1227 |     kotlin("plugin.serialization") version "your_version_of_kotlin"
1228 |     id("com.github.johnrengelman.shadow") version "8.1.1"
1229 | }
1230 | ```
1231 | 
1232 | ```groovy build.gradle
1233 | plugins {
1234 |     id 'org.jetbrains.kotlin.plugin.serialization' version 'your_version_of_kotlin'
1235 |     id 'com.github.johnrengelman.shadow' version '8.1.1'
1236 | }
1237 | ```
1238 | 
1239 | </CodeGroup>
1240 | 
1241 | Now let’s dive into building your server.
1242 | 
1243 | ## Building your server
1244 | 
1245 | ### Setting up the instance
1246 | 
1247 | Add a server initialization function:
1248 | 
1249 | ```kotlin
1250 | // Main function to run the MCP server
1251 | fun `run mcp server`() {
1252 |     // Create the MCP Server instance with a basic implementation
1253 |     val server = Server(
1254 |         Implementation(
1255 |             name = "weather", // Tool name is "weather"
1256 |             version = "1.0.0" // Version of the implementation
1257 |         ),
1258 |         ServerOptions(
1259 |             capabilities = ServerCapabilities(tools = ServerCapabilities.Tools(listChanged = true))
1260 |         )
1261 |     )
1262 | 
1263 |     // Create a transport using standard IO for server communication
1264 |     val transport = StdioServerTransport(
1265 |         System.`in`.asInput(),
1266 |         System.out.asSink().buffered()
1267 |     )
1268 | 
1269 |     runBlocking {
1270 |         server.connect(transport)
1271 |         val done = Job()
1272 |         server.onClose {
1273 |             done.complete()
1274 |         }
1275 |         done.join()
1276 |     }
1277 | }
1278 | ```
1279 | 
1280 | ### Weather API helper functions
1281 | 
1282 | Next, let's add functions and data classes for querying and converting responses from the National Weather Service API:
1283 | 
1284 | ```kotlin
1285 | // Extension function to fetch forecast information for given latitude and longitude
1286 | suspend fun HttpClient.getForecast(latitude: Double, longitude: Double): List<String> {
1287 |     val points = this.get("/points/$latitude,$longitude").body<Points>()
1288 |     val forecast = this.get(points.properties.forecast).body<Forecast>()
1289 |     return forecast.properties.periods.map { period ->
1290 |         """
1291 |             ${period.name}:
1292 |             Temperature: ${period.temperature} ${period.temperatureUnit}
1293 |             Wind: ${period.windSpeed} ${period.windDirection}
1294 |             Forecast: ${period.detailedForecast}
1295 |         """.trimIndent()
1296 |     }
1297 | }
1298 | 
1299 | // Extension function to fetch weather alerts for a given state
1300 | suspend fun HttpClient.getAlerts(state: String): List<String> {
1301 |     val alerts = this.get("/alerts/active/area/$state").body<Alert>()
1302 |     return alerts.features.map { feature ->
1303 |         """
1304 |             Event: ${feature.properties.event}
1305 |             Area: ${feature.properties.areaDesc}
1306 |             Severity: ${feature.properties.severity}
1307 |             Description: ${feature.properties.description}
1308 |             Instruction: ${feature.properties.instruction}
1309 |         """.trimIndent()
1310 |     }
1311 | }
1312 | 
1313 | @Serializable
1314 | data class Points(
1315 |     val properties: Properties
1316 | ) {
1317 |     @Serializable
1318 |     data class Properties(val forecast: String)
1319 | }
1320 | 
1321 | @Serializable
1322 | data class Forecast(
1323 |     val properties: Properties
1324 | ) {
1325 |     @Serializable
1326 |     data class Properties(val periods: List<Period>)
1327 | 
1328 |     @Serializable
1329 |     data class Period(
1330 |         val number: Int, val name: String, val startTime: String, val endTime: String,
1331 |         val isDaytime: Boolean, val temperature: Int, val temperatureUnit: String,
1332 |         val temperatureTrend: String, val probabilityOfPrecipitation: JsonObject,
1333 |         val windSpeed: String, val windDirection: String,
1334 |         val shortForecast: String, val detailedForecast: String,
1335 |     )
1336 | }
1337 | 
1338 | @Serializable
1339 | data class Alert(
1340 |     val features: List<Feature>
1341 | ) {
1342 |     @Serializable
1343 |     data class Feature(
1344 |         val properties: Properties
1345 |     )
1346 | 
1347 |     @Serializable
1348 |     data class Properties(
1349 |         val event: String, val areaDesc: String, val severity: String,
1350 |         val description: String, val instruction: String?,
1351 |     )
1352 | }
1353 | ```
1354 | 
1355 | ### Implementing tool execution
1356 | 
1357 | The tool execution handler is responsible for actually executing the logic of each tool. Let's add it:
1358 | 
1359 | ```kotlin
1360 | // Create an HTTP client with a default request configuration and JSON content negotiation
1361 | val httpClient = HttpClient {
1362 |     defaultRequest {
1363 |         url("https://api.weather.gov")
1364 |         headers {
1365 |             append("Accept", "application/geo+json")
1366 |             append("User-Agent", "WeatherApiClient/1.0")
1367 |         }
1368 |         contentType(ContentType.Application.Json)
1369 |     }
1370 |     // Install content negotiation plugin for JSON serialization/deserialization
1371 |     install(ContentNegotiation) { json(Json { ignoreUnknownKeys = true }) }
1372 | }
1373 | 
1374 | // Register a tool to fetch weather alerts by state
1375 | server.addTool(
1376 |     name = "get_alerts",
1377 |     description = """
1378 |         Get weather alerts for a US state. Input is Two-letter US state code (e.g. CA, NY)
1379 |     """.trimIndent(),
1380 |     inputSchema = Tool.Input(
1381 |         properties = buildJsonObject {
1382 |             putJsonObject("state") {
1383 |                 put("type", "string")
1384 |                 put("description", "Two-letter US state code (e.g. CA, NY)")
1385 |             }
1386 |         },
1387 |         required = listOf("state")
1388 |     )
1389 | ) { request ->
1390 |     val state = request.arguments["state"]?.jsonPrimitive?.content
1391 |     if (state == null) {
1392 |         return@addTool CallToolResult(
1393 |             content = listOf(TextContent("The 'state' parameter is required."))
1394 |         )
1395 |     }
1396 | 
1397 |     val alerts = httpClient.getAlerts(state)
1398 | 
1399 |     CallToolResult(content = alerts.map { TextContent(it) })
1400 | }
1401 | 
1402 | // Register a tool to fetch weather forecast by latitude and longitude
1403 | server.addTool(
1404 |     name = "get_forecast",
1405 |     description = """
1406 |         Get weather forecast for a specific latitude/longitude
1407 |     """.trimIndent(),
1408 |     inputSchema = Tool.Input(
1409 |         properties = buildJsonObject {
1410 |             putJsonObject("latitude") { put("type", "number") }
1411 |             putJsonObject("longitude") { put("type", "number") }
1412 |         },
1413 |         required = listOf("latitude", "longitude")
1414 |     )
1415 | ) { request ->
1416 |     val latitude = request.arguments["latitude"]?.jsonPrimitive?.doubleOrNull
1417 |     val longitude = request.arguments["longitude"]?.jsonPrimitive?.doubleOrNull
1418 |     if (latitude == null || longitude == null) {
1419 |         return@addTool CallToolResult(
1420 |             content = listOf(TextContent("The 'latitude' and 'longitude' parameters are required."))
1421 |         )
1422 |     }
1423 | 
1424 |     val forecast = httpClient.getForecast(latitude, longitude)
1425 | 
1426 |     CallToolResult(content = forecast.map { TextContent(it) })
1427 | }
1428 | ```
1429 | 
1430 | ### Running the server
1431 | 
1432 | Finally, implement the main function to run the server:
1433 | 
1434 | ```kotlin
1435 | fun main() = `run mcp server`()
1436 | ```
1437 | 
1438 | Make sure to run `./gradlew build` to build your server. This is a very important step in getting your server to connect.
1439 | 
1440 | Let's now test your server from an existing MCP host, Claude for Desktop.
1441 | 
1442 | ## Testing your server with Claude for Desktop
1443 | 
1444 | <Note>
1445 | 
1446 | Claude for Desktop is not yet available on Linux. Linux users can proceed to the [Building a client](/quickstart/client) tutorial to build an MCP client that connects to the server we just built.
1447 | 
1448 | </Note>
1449 | 
1450 | First, make sure you have Claude for Desktop installed. [You can install the latest version
1451 | here.](https://claude.ai/download) If you already have Claude for Desktop, **make sure it's updated to the latest version.**
1452 | 
1453 | We'll need to configure Claude for Desktop for whichever MCP servers you want to use.
1454 | To do this, open your Claude for Desktop App configuration at `~/Library/Application Support/Claude/claude_desktop_config.json` in a text editor.
1455 | Make sure to create the file if it doesn't exist.
1456 | 
1457 | For example, if you have [VS Code](https://code.visualstudio.com/) installed:
1458 | 
1459 | <CodeGroup>
1460 | 
1461 | ```bash macOS/Linux
1462 | code ~/Library/Application\ Support/Claude/claude_desktop_config.json
1463 | ```
1464 | 
1465 | ```powershell Windows
1466 | code $env:AppData\Claude\claude_desktop_config.json
1467 | ```
1468 | 
1469 | </CodeGroup>
1470 | 
1471 | You'll then add your servers in the `mcpServers` key.
1472 | The MCP UI elements will only show up in Claude for Desktop if at least one server is properly configured.
1473 | 
1474 | In this case, we'll add our single weather server like so:
1475 | 
1476 | <CodeGroup>
1477 | 
1478 | ```json macOS/Linux
1479 | {
1480 |   "mcpServers": {
1481 |     "weather": {
1482 |       "command": "java",
1483 |       "args": [
1484 |         "-jar",
1485 |         "/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather/build/libs/weather-0.1.0-all.jar"
1486 |       ]
1487 |     }
1488 |   }
1489 | }
1490 | ```
1491 | 
1492 | ```json Windows
1493 | {
1494 |   "mcpServers": {
1495 |     "weather": {
1496 |       "command": "java",
1497 |       "args": [
1498 |         "-jar",
1499 |         "C:\\PATH\\TO\\PARENT\\FOLDER\\weather\\build\\libs\\weather-0.1.0-all.jar"
1500 |       ]
1501 |     }
1502 |   }
1503 | }
1504 | ```
1505 | 
1506 | </CodeGroup>
1507 | 
1508 | This tells Claude for Desktop:
1509 | 
1510 | 1. There's an MCP server named "weather"
1511 | 2. Launch it by running `java -jar /ABSOLUTE/PATH/TO/PARENT/FOLDER/weather/build/libs/weather-0.1.0-all.jar`
1512 | 
1513 | Save the file, and restart **Claude for Desktop**.
1514 | 
1515 | </Tab>
1516 | 
1517 | <Tab title='C#'>
1518 | 
1519 | Let's get started with building our weather server! [You can find the complete code for what we'll be building here.](https://github.com/modelcontextprotocol/csharp-sdk/tree/main/samples/QuickstartWeatherServer)
1520 | 
1521 | ### Prerequisite knowledge
1522 | 
1523 | This quickstart assumes you have familiarity with:
1524 | 
1525 | - C#
1526 | - LLMs like Claude
1527 | - .NET 8 or higher
1528 | 
1529 | ### Logging in MCP Servers
1530 | 
1531 | When implementing MCP servers, be careful about how you handle logging:
1532 | 
1533 | **For STDIO-based servers:** Never write to standard output (stdout). This includes:
1534 | 
1535 | - `print()` statements in Python
1536 | - `console.log()` in JavaScript
1537 | - `fmt.Println()` in Go
1538 | - Similar stdout functions in other languages
1539 | 
1540 | Writing to stdout will corrupt the JSON-RPC messages and break your server.
1541 | 
1542 | **For HTTP-based servers:** Standard output logging is fine since it doesn't interfere with HTTP responses.
1543 | 
1544 | ### Best Practices
1545 | 
1546 | 1. Use a logging library that writes to stderr or files
1547 | 
1548 | ### System requirements
1549 | 
1550 | - [.NET 8 SDK](https://dotnet.microsoft.com/download/dotnet/8.0) or higher installed.
1551 | 
1552 | ### Set up your environment
1553 | 
1554 | First, let's install `dotnet` if you haven't already. You can download `dotnet` from [official Microsoft .NET website](https://dotnet.microsoft.com/download/). Verify your `dotnet` installation:
1555 | 
1556 | ```bash
1557 | dotnet --version
1558 | ```
1559 | 
1560 | Now, let's create and set up your project:
1561 | 
1562 | <CodeGroup>
1563 | 
1564 | ```bash macOS/Linux
1565 | # Create a new directory for our project
1566 | mkdir weather
1567 | cd weather
1568 | # Initialize a new C# project
1569 | dotnet new console
1570 | ```
1571 | 
1572 | ```powershell Windows
1573 | # Create a new directory for our project
1574 | mkdir weather
1575 | cd weather
1576 | # Initialize a new C# project
1577 | dotnet new console
1578 | ```
1579 | 
1580 | </CodeGroup>
1581 | After running `dotnet new console`, you will be presented with a new C# project.
1582 | You can open the project in your favorite IDE, such as [Visual Studio](https://visualstudio.microsoft.com/) or [Rider](https://www.jetbrains.com/rider/).
1583 | Alternatively, you can create a C# application using the [Visual Studio project wizard](https://learn.microsoft.com/en-us/visualstudio/get-started/csharp/tutorial-console?view=vs-2022).
1584 | After creating the project, add NuGet package for the Model Context Protocol SDK and hosting:
1585 | 
1586 | ```bash
1587 | # Add the Model Context Protocol SDK NuGet package
1588 | dotnet add package ModelContextProtocol --prerelease
1589 | # Add the .NET Hosting NuGet package
1590 | dotnet add package Microsoft.Extensions.Hosting
1591 | ```
1592 | 
1593 | Now let’s dive into building your server.
1594 | 
1595 | ## Building your server
1596 | 
1597 | Open the `Program.cs` file in your project and replace its contents with the following code:
1598 | 
1599 | ```csharp
1600 | using Microsoft.Extensions.DependencyInjection;
1601 | using Microsoft.Extensions.Hosting;
1602 | using ModelContextProtocol;
1603 | using System.Net.Http.Headers;
1604 | 
1605 | var builder = Host.CreateEmptyApplicationBuilder(settings: null);
1606 | 
1607 | builder.Services.AddMcpServer()
1608 |     .WithStdioServerTransport()
1609 |     .WithToolsFromAssembly();
1610 | 
1611 | builder.Services.AddSingleton(_ =>
1612 | {
1613 |     var client = new HttpClient() { BaseAddress = new Uri("https://api.weather.gov") };
1614 |     client.DefaultRequestHeaders.UserAgent.Add(new ProductInfoHeaderValue("weather-tool", "1.0"));
1615 |     return client;
1616 | });
1617 | 
1618 | var app = builder.Build();
1619 | 
1620 | await app.RunAsync();
1621 | ```
1622 | 
1623 | <Note>
1624 | 
1625 | When creating the `ApplicationHostBuilder`, ensure you use `CreateEmptyApplicationBuilder` instead of `CreateDefaultBuilder`. This ensures that the server does not write any additional messages to the console. This is only necessary for servers using STDIO transport.
1626 | 
1627 | </Note>
1628 | 
1629 | This code sets up a basic console application that uses the Model Context Protocol SDK to create an MCP server with standard I/O transport.
1630 | 
1631 | ### Weather API helper functions
1632 | 
1633 | Create an extension class for `HttpClient` which helps simplify JSON request handling:
1634 | 
1635 | ```csharp
1636 | using System.Text.Json;
1637 | 
1638 | internal static class HttpClientExt
1639 | {
1640 |     public static async Task<JsonDocument> ReadJsonDocumentAsync(this HttpClient client, string requestUri)
1641 |     {
1642 |         using var response = await client.GetAsync(requestUri);
1643 |         response.EnsureSuccessStatusCode();
1644 |         return await JsonDocument.ParseAsync(await response.Content.ReadAsStreamAsync());
1645 |     }
1646 | }
1647 | ```
1648 | 
1649 | Next, define a class with the tool execution handlers for querying and converting responses from the National Weather Service API:
1650 | 
1651 | ```csharp
1652 | using ModelContextProtocol.Server;
1653 | using System.ComponentModel;
1654 | using System.Globalization;
1655 | using System.Text.Json;
1656 | 
1657 | namespace QuickstartWeatherServer.Tools;
1658 | 
1659 | [McpServerToolType]
1660 | public static class WeatherTools
1661 | {
1662 |     [McpServerTool, Description("Get weather alerts for a US state.")]
1663 |     public static async Task<string> GetAlerts(
1664 |         HttpClient client,
1665 |         [Description("The US state to get alerts for.")] string state)
1666 |     {
1667 |         using var jsonDocument = await client.ReadJsonDocumentAsync(
quot;/alerts/active/area/{state}");
1668 |         var jsonElement = jsonDocument.RootElement;
1669 |         var alerts = jsonElement.GetProperty("features").EnumerateArray();
1670 | 
1671 |         if (!alerts.Any())
1672 |         {
1673 |             return "No active alerts for this state.";
1674 |         }
1675 | 
1676 |         return string.Join("\n--\n", alerts.Select(alert =>
1677 |         {
1678 |             JsonElement properties = alert.GetProperty("properties");
1679 |             return 
quot;""
1680 |                     Event: {properties.GetProperty("event").GetString()}
1681 |                     Area: {properties.GetProperty("areaDesc").GetString()}
1682 |                     Severity: {properties.GetProperty("severity").GetString()}
1683 |                     Description: {properties.GetProperty("description").GetString()}
1684 |                     Instruction: {properties.GetProperty("instruction").GetString()}
1685 |                     """;
1686 |         }));
1687 |     }
1688 | 
1689 |     [McpServerTool, Description("Get weather forecast for a location.")]
1690 |     public static async Task<string> GetForecast(
1691 |         HttpClient client,
1692 |         [Description("Latitude of the location.")] double latitude,
1693 |         [Description("Longitude of the location.")] double longitude)
1694 |     {
1695 |         var pointUrl = string.Create(CultureInfo.InvariantCulture, 
quot;/points/{latitude},{longitude}");
1696 |         using var jsonDocument = await client.ReadJsonDocumentAsync(pointUrl);
1697 |         var forecastUrl = jsonDocument.RootElement.GetProperty("properties").GetProperty("forecast").GetString()
1698 |             ?? throw new Exception(
quot;No forecast URL provided by {client.BaseAddress}points/{latitude},{longitude}");
1699 | 
1700 |         using var forecastDocument = await client.ReadJsonDocumentAsync(forecastUrl);
1701 |         var periods = forecastDocument.RootElement.GetProperty("properties").GetProperty("periods").EnumerateArray();
1702 | 
1703 |         return string.Join("\n---\n", periods.Select(period => 
quot;""
1704 |                 {period.GetProperty("name").GetString()}
1705 |                 Temperature: {period.GetProperty("temperature").GetInt32()}°F
1706 |                 Wind: {period.GetProperty("windSpeed").GetString()} {period.GetProperty("windDirection").GetString()}
1707 |                 Forecast: {period.GetProperty("detailedForecast").GetString()}
1708 |                 """));
1709 |     }
1710 | }
1711 | ```
1712 | 
1713 | ### Running the server
1714 | 
1715 | Finally, run the server using the following command:
1716 | 
1717 | ```bash
1718 | dotnet run
1719 | ```
1720 | 
1721 | This will start the server and listen for incoming requests on standard input/output.
1722 | 
1723 | ## Testing your server with Claude for Desktop
1724 | 
1725 | <Note>
1726 | 
1727 | Claude for Desktop is not yet available on Linux. Linux users can proceed to the [Building a client](/quickstart/client) tutorial to build an MCP client that connects to the server we just built.
1728 | 
1729 | </Note>
1730 | 
1731 | First, make sure you have Claude for Desktop installed. [You can install the latest version
1732 | here.](https://claude.ai/download) If you already have Claude for Desktop, **make sure it's updated to the latest version.**
1733 | We'll need to configure Claude for Desktop for whichever MCP servers you want to use. To do this, open your Claude for Desktop App configuration at `~/Library/Application Support/Claude/claude_desktop_config.json` in a text editor. Make sure to create the file if it doesn't exist.
1734 | For example, if you have [VS Code](https://code.visualstudio.com/) installed:
1735 | 
1736 | <CodeGroup>
1737 | 
1738 | ```bash macOS/Linux
1739 | code ~/Library/Application\ Support/Claude/claude_desktop_config.json
1740 | ```
1741 | 
1742 | ```powershell Windows
1743 | code $env:AppData\Claude\claude_desktop_config.json
1744 | ```
1745 | 
1746 | </CodeGroup>
1747 | 
1748 | You'll then add your servers in the `mcpServers` key. The MCP UI elements will only show up in Claude for Desktop if at least one server is properly configured.
1749 | In this case, we'll add our single weather server like so:
1750 | 
1751 | <CodeGroup>
1752 | 
1753 | ```json macOS/Linux
1754 | {
1755 |   "mcpServers": {
1756 |     "weather": {
1757 |       "command": "dotnet",
1758 |       "args": ["run", "--project", "/ABSOLUTE/PATH/TO/PROJECT", "--no-build"]
1759 |     }
1760 |   }
1761 | }
1762 | ```
1763 | 
1764 | ```json Windows
1765 | {
1766 |   "mcpServers": {
1767 |     "weather": {
1768 |       "command": "dotnet",
1769 |       "args": [
1770 |         "run",
1771 |         "--project",
1772 |         "C:\\ABSOLUTE\\PATH\\TO\\PROJECT",
1773 |         "--no-build"
1774 |       ]
1775 |     }
1776 |   }
1777 | }
1778 | ```
1779 | 
1780 | </CodeGroup>
1781 | 
1782 | This tells Claude for Desktop:
1783 | 
1784 | 1. There's an MCP server named "weather"
1785 | 2. Launch it by running `dotnet run /ABSOLUTE/PATH/TO/PROJECT`
1786 |    Save the file, and restart **Claude for Desktop**.
1787 | 
1788 | </Tab>
1789 | </Tabs>
1790 | 
1791 | ### Test with commands
1792 | 
1793 | Let's make sure Claude for Desktop is picking up the two tools we've exposed in our `weather` server. You can do this by looking for the "Search and tools" <img src="/images/claude-desktop-mcp-slider.svg" style={{display: 'inline', margin: 0, height: '1.3em'}} /> icon:
1794 | 
1795 | <Frame>
1796 |   <img src="/images/visual-indicator-mcp-tools.png" />
1797 | </Frame>
1798 | 
1799 | After clicking on the slider icon, you should see two tools listed:
1800 | 
1801 | <Frame>
1802 |   <img src="/images/available-mcp-tools.png" />
1803 | </Frame>
1804 | 
1805 | If your server isn't being picked up by Claude for Desktop, proceed to the [Troubleshooting](#troubleshooting) section for debugging tips.
1806 | 
1807 | If the tool settings icon has shown up, you can now test your server by running the following commands in Claude for Desktop:
1808 | 
1809 | - What's the weather in Sacramento?
1810 | - What are the active weather alerts in Texas?
1811 | 
1812 | <Frame>
1813 |   <img src="/images/current-weather.png" />
1814 | </Frame>
1815 | <Frame>
1816 |   <img src="/images/weather-alerts.png" />
1817 | </Frame>
1818 | 
1819 | <Note>
1820 | 
1821 | Since this is the US National Weather service, the queries will only work for US locations.
1822 | 
1823 | </Note>
1824 | 
1825 | ## What's happening under the hood
1826 | 
1827 | When you ask a question:
1828 | 
1829 | 1. The client sends your question to Claude
1830 | 2. Claude analyzes the available tools and decides which one(s) to use
1831 | 3. The client executes the chosen tool(s) through the MCP server
1832 | 4. The results are sent back to Claude
1833 | 5. Claude formulates a natural language response
1834 | 6. The response is displayed to you!
1835 | 
1836 | ## Troubleshooting
1837 | 
1838 | <AccordionGroup>
1839 | <Accordion title="Claude for Desktop Integration Issues">
1840 | 
1841 | **Getting logs from Claude for Desktop**
1842 | 
1843 | Claude.app logging related to MCP is written to log files in `~/Library/Logs/Claude`:
1844 | 
1845 | - `mcp.log` will contain general logging about MCP connections and connection failures.
1846 | - Files named `mcp-server-SERVERNAME.log` will contain error (stderr) logging from the named server.
1847 | 
1848 | You can run the following command to list recent logs and follow along with any new ones:
1849 | 
1850 | ```bash
1851 | # Check Claude's logs for errors
1852 | tail -n 20 -f ~/Library/Logs/Claude/mcp*.log
1853 | ```
1854 | 
1855 | **Server not showing up in Claude**
1856 | 
1857 | 1. Check your `claude_desktop_config.json` file syntax
1858 | 2. Make sure the path to your project is absolute and not relative
1859 | 3. Restart Claude for Desktop completely
1860 | 
1861 | **Tool calls failing silently**
1862 | 
1863 | If Claude attempts to use the tools but they fail:
1864 | 
1865 | 1. Check Claude's logs for errors
1866 | 2. Verify your server builds and runs without errors
1867 | 3. Try restarting Claude for Desktop
1868 | 
1869 | **None of this is working. What do I do?**
1870 | 
1871 | Please refer to our [debugging guide](/legacy/tools/debugging) for better debugging tools and more detailed guidance.
1872 | 
1873 | </Accordion>
1874 | <Accordion title="Weather API Issues">
1875 | 
1876 | **Error: Failed to retrieve grid point data**
1877 | 
1878 | This usually means either:
1879 | 
1880 | 1. The coordinates are outside the US
1881 | 2. The NWS API is having issues
1882 | 3. You're being rate limited
1883 | 
1884 | Fix:
1885 | 
1886 | - Verify you're using US coordinates
1887 | - Add a small delay between requests
1888 | - Check the NWS API status page
1889 | 
1890 | **Error: No active alerts for [STATE]**
1891 | 
1892 | This isn't an error - it just means there are no current weather alerts for that state. Try a different state or check during severe weather.
1893 | 
1894 | </Accordion>
1895 | 
1896 | </AccordionGroup>
1897 | 
1898 | <Note>
1899 | 
1900 | For more advanced troubleshooting, check out our guide on [Debugging MCP](/legacy/tools/debugging)
1901 | 
1902 | </Note>
1903 | 
1904 | ## Next steps
1905 | 
1906 | <CardGroup cols={2}>
1907 |   <Card title="Building a client" icon="outlet" href="/quickstart/client">
1908 |     Learn how to build your own MCP client that can connect to your server
1909 |   </Card>
1910 |   <Card title="Example servers" icon="grid" href="/examples">
1911 |     Check out our gallery of official MCP servers and implementations
1912 |   </Card>
1913 |   <Card title="Debugging Guide" icon="bug" href="/legacy/tools/debugging">
1914 |     Learn how to effectively debug MCP servers and integrations
1915 |   </Card>
1916 |   <Card
1917 |     title="Building MCP with LLMs"
1918 |     icon="comments"
1919 |     href="/tutorials/building-mcp-with-llms"
1920 |   >
1921 |     Learn how to use LLMs like Claude to speed up your MCP development
1922 |   </Card>
1923 | </CardGroup>
1924 | 


--------------------------------------------------------------------------------
/docs/quickstart/user.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Connect to Local MCP Servers
  3 | description: Learn how to extend Claude Desktop with local MCP servers to enable file system access and other powerful integrations
  4 | ---
  5 | 
  6 | Model Context Protocol (MCP) servers extend AI applications' capabilities by providing secure, controlled access to local resources and tools. Many clients support MCP, enabling diverse integration possibilities across different platforms and applications.
  7 | 
  8 | This guide demonstrates how to connect to local MCP servers using Claude Desktop as an example, one of the [many clients that support MCP](/clients). While we focus on Claude Desktop's implementation, the concepts apply broadly to other MCP-compatible clients. By the end of this tutorial, Claude will be able to interact with files on your computer, create new documents, organize folders, and search through your file system—all with your explicit permission for each action.
  9 | 
 10 | <Frame>
 11 |   <img
 12 |     src="/images/quickstart-filesystem.png"
 13 |     alt="Claude Desktop with filesystem integration showing file management capabilities"
 14 |   />
 15 | </Frame>
 16 | 
 17 | ## Prerequisites
 18 | 
 19 | Before starting this tutorial, ensure you have the following installed on your system:
 20 | 
 21 | ### Claude Desktop
 22 | 
 23 | Download and install [Claude Desktop](https://claude.ai/download) for your operating system. Claude Desktop is currently available for macOS and Windows. Linux support is coming soon.
 24 | 
 25 | If you already have Claude Desktop installed, verify you're running the latest version by clicking the Claude menu and selecting "Check for Updates..."
 26 | 
 27 | ### Node.js
 28 | 
 29 | The Filesystem Server and many other MCP servers require Node.js to run. Verify your Node.js installation by opening a terminal or command prompt and running:
 30 | 
 31 | ```bash
 32 | node --version
 33 | ```
 34 | 
 35 | If Node.js is not installed, download it from [nodejs.org](https://nodejs.org/). We recommend the LTS (Long Term Support) version for stability.
 36 | 
 37 | ## Understanding MCP Servers
 38 | 
 39 | MCP servers are programs that run on your computer and provide specific capabilities to Claude Desktop through a standardized protocol. Each server exposes tools that Claude can use to perform actions, with your approval. The Filesystem Server we'll install provides tools for:
 40 | 
 41 | - Reading file contents and directory structures
 42 | - Creating new files and directories
 43 | - Moving and renaming files
 44 | - Searching for files by name or content
 45 | 
 46 | All actions require your explicit approval before execution, ensuring you maintain full control over what Claude can access and modify.
 47 | 
 48 | ## Installing the Filesystem Server
 49 | 
 50 | The process involves configuring Claude Desktop to automatically start the Filesystem Server whenever you launch the application. This configuration is done through a JSON file that tells Claude Desktop which servers to run and how to connect to them.
 51 | 
 52 | <Steps>
 53 | <Step title="Open Claude Desktop Settings">
 54 | Start by accessing the Claude Desktop settings. Click on the Claude menu in your system's menu bar (not the settings within the Claude window itself) and select "Settings..."
 55 | 
 56 | On macOS, this appears in the top menu bar:
 57 | 
 58 | <Frame style={{ textAlign: "center" }}>
 59 |   <img
 60 |     src="/images/quickstart-menu.png"
 61 |     width="400"
 62 |     alt="Claude Desktop menu showing Settings option"
 63 |   />
 64 | </Frame>
 65 | 
 66 | This opens the Claude Desktop configuration window, which is separate from your Claude account settings.
 67 | 
 68 | </Step>
 69 | 
 70 | <Step title="Access Developer Settings">
 71 | In the Settings window, navigate to the "Developer" tab in the left sidebar. This section contains options for configuring MCP servers and other developer features.
 72 | 
 73 | Click the "Edit Config" button to open the configuration file:
 74 | 
 75 | <Frame>
 76 |   <img
 77 |     src="/images/quickstart-developer.png"
 78 |     alt="Developer settings showing Edit Config button"
 79 |   />
 80 | </Frame>
 81 | 
 82 | This action creates a new configuration file if one doesn't exist, or opens your existing configuration. The file is located at:
 83 | 
 84 | - **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`
 85 | - **Windows**: `%APPDATA%\Claude\claude_desktop_config.json`
 86 | 
 87 | </Step>
 88 | 
 89 | <Step title="Configure the Filesystem Server">
 90 | Replace the contents of the configuration file with the following JSON structure. This configuration tells Claude Desktop to start the Filesystem Server with access to specific directories:
 91 | 
 92 | <CodeGroup>
 93 | 
 94 | ```json macOS
 95 | {
 96 |   "mcpServers": {
 97 |     "filesystem": {
 98 |       "command": "npx",
 99 |       "args": [
100 |         "-y",
101 |         "@modelcontextprotocol/server-filesystem",
102 |         "/Users/username/Desktop",
103 |         "/Users/username/Downloads"
104 |       ]
105 |     }
106 |   }
107 | }
108 | ```
109 | 
110 | ```json Windows
111 | {
112 |   "mcpServers": {
113 |     "filesystem": {
114 |       "command": "npx",
115 |       "args": [
116 |         "-y",
117 |         "@modelcontextprotocol/server-filesystem",
118 |         "C:\\Users\\username\\Desktop",
119 |         "C:\\Users\\username\\Downloads"
120 |       ]
121 |     }
122 |   }
123 | }
124 | ```
125 | 
126 | </CodeGroup>
127 | 
128 | Replace `username` with your actual computer username. The paths listed in the `args` array specify which directories the Filesystem Server can access. You can modify these paths or add additional directories as needed.
129 | 
130 | <Tip>
131 | **Understanding the Configuration**
132 | 
133 | - `"filesystem"`: A friendly name for the server that appears in Claude Desktop
134 | - `"command": "npx"`: Uses Node.js's npx tool to run the server
135 | - `"-y"`: Automatically confirms the installation of the server package
136 | - `"@modelcontextprotocol/server-filesystem"`: The package name of the Filesystem Server
137 | - The remaining arguments: Directories the server is allowed to access
138 | 
139 | </Tip>
140 | 
141 | <Warning>
142 | **Security Consideration**
143 | 
144 | Only grant access to directories you're comfortable with Claude reading and modifying. The server runs with your user account permissions, so it can perform any file operations you can perform manually.
145 | 
146 | </Warning>
147 | </Step>
148 | 
149 | <Step title="Restart Claude Desktop">
150 | After saving the configuration file, completely quit Claude Desktop and restart it. The application needs to restart to load the new configuration and start the MCP server.
151 | 
152 | Upon successful restart, you'll see an MCP server indicator <img src="/images/claude-desktop-mcp-slider.svg" style={{display: 'inline', margin: 0, height: '1.3em'}} /> in the bottom-right corner of the conversation input box:
153 | 
154 | <Frame>
155 |   <img
156 |     src="/images/quickstart-slider.png"
157 |     alt="Claude Desktop interface showing MCP server indicator"
158 |   />
159 | </Frame>
160 | 
161 | Click on this indicator to view the available tools provided by the Filesystem Server:
162 | 
163 | <Frame style={{ textAlign: "center" }}>
164 |   <img
165 |     src="/images/quickstart-tools.png"
166 |     width="400"
167 |     alt="Available filesystem tools in Claude Desktop"
168 |   />
169 | </Frame>
170 | 
171 | If the server indicator doesn't appear, refer to the [Troubleshooting](#troubleshooting) section for debugging steps.
172 | 
173 | </Step>
174 | </Steps>
175 | 
176 | ## Using the Filesystem Server
177 | 
178 | With the Filesystem Server connected, Claude can now interact with your file system. Try these example requests to explore the capabilities:
179 | 
180 | ### File Management Examples
181 | 
182 | - **"Can you write a poem and save it to my desktop?"** - Claude will compose a poem and create a new text file on your desktop
183 | - **"What work-related files are in my downloads folder?"** - Claude will scan your downloads and identify work-related documents
184 | - **"Please organize all images on my desktop into a new folder called 'Images'"** - Claude will create a folder and move image files into it
185 | 
186 | ### How Approval Works
187 | 
188 | Before executing any file system operation, Claude will request your approval. This ensures you maintain control over all actions:
189 | 
190 | <Frame style={{ textAlign: "center" }}>
191 |   <img
192 |     src="/images/quickstart-approve.png"
193 |     width="500"
194 |     alt="Claude requesting approval to perform a file operation"
195 |   />
196 | </Frame>
197 | 
198 | Review each request carefully before approving. You can always deny a request if you're not comfortable with the proposed action.
199 | 
200 | ## Troubleshooting
201 | 
202 | If you encounter issues setting up or using the Filesystem Server, these solutions address common problems:
203 | 
204 | <AccordionGroup>
205 | <Accordion title="Server not showing up in Claude / hammer icon missing">
206 | 
207 | 1. Restart Claude Desktop completely
208 | 2. Check your `claude_desktop_config.json` file syntax
209 | 3. Make sure the file paths included in `claude_desktop_config.json` are valid and that they are absolute and not relative
210 | 4. Look at [logs](#getting-logs-from-claude-for-desktop) to see why the server is not connecting
211 | 5. In your command line, try manually running the server (replacing `username` as you did in `claude_desktop_config.json`) to see if you get any errors:
212 | 
213 | <CodeGroup>
214 | 
215 | ```bash macOS/Linux
216 | npx -y @modelcontextprotocol/server-filesystem /Users/username/Desktop /Users/username/Downloads
217 | ```
218 | 
219 | ```powershell Windows
220 | npx -y @modelcontextprotocol/server-filesystem C:\Users\username\Desktop C:\Users\username\Downloads
221 | ```
222 | 
223 | </CodeGroup>
224 | 
225 | </Accordion>
226 | <Accordion title="Getting logs from Claude Desktop">
227 | 
228 | Claude.app logging related to MCP is written to log files in:
229 | 
230 | - macOS: `~/Library/Logs/Claude`
231 | - Windows: `%APPDATA%\Claude\logs`
232 | 
233 | - `mcp.log` will contain general logging about MCP connections and connection failures.
234 | - Files named `mcp-server-SERVERNAME.log` will contain error (stderr) logging from the named server.
235 | 
236 | You can run the following command to list recent logs and follow along with any new ones (on Windows, it will only show recent logs):
237 | 
238 | <CodeGroup>
239 | 
240 | ```bash macOS/Linux
241 | tail -n 20 -f ~/Library/Logs/Claude/mcp*.log
242 | ```
243 | 
244 | ```powershell Windows
245 | type "%APPDATA%\Claude\logs\mcp*.log"
246 | ```
247 | 
248 | </CodeGroup>
249 | 
250 | </Accordion>
251 | <Accordion title="Tool calls failing silently">
252 | 
253 | If Claude attempts to use the tools but they fail:
254 | 
255 | 1. Check Claude's logs for errors
256 | 2. Verify your server builds and runs without errors
257 | 3. Try restarting Claude Desktop
258 | 
259 | </Accordion>
260 | <Accordion title="None of this is working. What do I do?">
261 | 
262 | Please refer to our [debugging guide](/legacy/tools/debugging) for better debugging tools and more detailed guidance.
263 | 
264 | </Accordion>
265 | <Accordion title="ENOENT error and `${APPDATA}` in paths on Windows">
266 | 
267 | If your configured server fails to load, and you see within its logs an error referring to `${APPDATA}` within a path, you may need to add the expanded value of `%APPDATA%` to your `env` key in `claude_desktop_config.json`:
268 | 
269 | ```json
270 | {
271 |   "brave-search": {
272 |     "command": "npx",
273 |     "args": ["-y", "@modelcontextprotocol/server-brave-search"],
274 |     "env": {
275 |       "APPDATA": "C:\\Users\\user\\AppData\\Roaming\\",
276 |       "BRAVE_API_KEY": "..."
277 |     }
278 |   }
279 | }
280 | ```
281 | 
282 | With this change in place, launch Claude Desktop once again.
283 | 
284 | <Warning>
285 | 
286 | **NPM should be installed globally**
287 | 
288 | The `npx` command may continue to fail if you have not installed NPM globally. If NPM is already installed globally, you will find `%APPDATA%\npm` exists on your system. If not, you can install NPM globally by running the following command:
289 | 
290 | ```bash
291 | npm install -g npm
292 | ```
293 | 
294 | </Warning>
295 | 
296 | </Accordion>
297 | </AccordionGroup>
298 | 
299 | ## Next Steps
300 | 
301 | Now that you've successfully connected Claude Desktop to a local MCP server, explore these options to expand your setup:
302 | 
303 | <CardGroup cols={2}>
304 |   <Card
305 |     title="Explore other servers"
306 |     icon="grid"
307 |     href="https://github.com/modelcontextprotocol/servers"
308 |   >
309 |     Browse our collection of official and community-created MCP servers for
310 |     additional capabilities
311 |   </Card>
312 |   <Card title="Build your own server" icon="code" href="/quickstart/server">
313 |     Create custom MCP servers tailored to your specific workflows and
314 |     integrations
315 |   </Card>
316 |   <Card
317 |     title="Connect to remote servers"
318 |     icon="cloud"
319 |     href="/docs/tutorials/use-remote-mcp-server"
320 |   >
321 |     Learn how to connect Claude to remote MCP servers for cloud-based tools and
322 |     services
323 |   </Card>
324 |   <Card
325 |     title="Understand the protocol"
326 |     icon="book"
327 |     href="/docs/learn/architecture"
328 |   >
329 |     Dive deeper into how MCP works and its architecture
330 |   </Card>
331 | </CardGroup>
332 | 


--------------------------------------------------------------------------------
/docs/sdk/java/mcp-client.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Java MCP Client
  3 | description: Learn how to use the Model Context Protocol (MCP) client to interact with MCP servers
  4 | ---
  5 | 
  6 | Go to the [Java MCP Server](/sdk/java/mcp-server) to learn how to build MCP servers or the [Java MCP Overview](/sdk/java/mcp-overview) to understand the overall architecture.
  7 | 
  8 | # Model Context Protocol Client
  9 | 
 10 | The MCP Client is a key component in the Model Context Protocol (MCP) architecture, responsible for establishing and managing connections with MCP servers. It implements the client-side of the protocol, handling:
 11 | 
 12 | - Protocol version negotiation to ensure compatibility with servers
 13 | - Capability negotiation to determine available features
 14 | - Message transport and JSON-RPC communication
 15 | - Tool discovery and execution
 16 | - Resource access and management
 17 | - Prompt system interactions
 18 | - Optional features like roots management and sampling support
 19 | 
 20 | <Tip>
 21 | The core `io.modelcontextprotocol.sdk:mcp` module provides STDIO and SSE client transport implementations without requiring external web frameworks.
 22 | 
 23 | Spring-specific transport implementations are available as an **optional** dependency `io.modelcontextprotocol.sdk:mcp-spring-webflux` for [Spring Framework](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-client-boot-starter-docs.html) users.
 24 | 
 25 | </Tip>
 26 | 
 27 | <Tip>
 28 |   This [quickstart demo](/quickstart/client), based on Spring AI MCP, will show
 29 |   you how to build an AI client that connects to MCP servers.
 30 | </Tip>
 31 | 
 32 | The client provides both synchronous and asynchronous APIs for flexibility in different application contexts.
 33 | 
 34 | <Tabs>
 35 |   <Tab title="Sync API">
 36 | 
 37 | ```java
 38 | // Create a sync client with custom configuration
 39 | McpSyncClient client = McpClient.sync(transport)
 40 |     .requestTimeout(Duration.ofSeconds(10))
 41 |     .capabilities(ClientCapabilities.builder()
 42 |         .roots(true)      // Enable roots capability
 43 |         .sampling()       // Enable sampling capability
 44 |         .build())
 45 |     .sampling(request -> new CreateMessageResult(response))
 46 |     .build();
 47 | 
 48 | // Initialize connection
 49 | client.initialize();
 50 | 
 51 | // List available tools
 52 | ListToolsResult tools = client.listTools();
 53 | 
 54 | // Call a tool
 55 | CallToolResult result = client.callTool(
 56 |     new CallToolRequest("calculator",
 57 |         Map.of("operation", "add", "a", 2, "b", 3))
 58 | );
 59 | 
 60 | // List and read resources
 61 | ListResourcesResult resources = client.listResources();
 62 | ReadResourceResult resource = client.readResource(
 63 |     new ReadResourceRequest("resource://uri")
 64 | );
 65 | 
 66 | // List and use prompts
 67 | ListPromptsResult prompts = client.listPrompts();
 68 | GetPromptResult prompt = client.getPrompt(
 69 |     new GetPromptRequest("greeting", Map.of("name", "Spring"))
 70 | );
 71 | 
 72 | // Add/remove roots
 73 | client.addRoot(new Root("file:///path", "description"));
 74 | client.removeRoot("file:///path");
 75 | 
 76 | // Close client
 77 | client.closeGracefully();
 78 | ```
 79 | 
 80 |   </Tab>
 81 | 
 82 |   <Tab title="Async API">
 83 | 
 84 | ```java
 85 | // Create an async client with custom configuration
 86 | McpAsyncClient client = McpClient.async(transport)
 87 |     .requestTimeout(Duration.ofSeconds(10))
 88 |     .capabilities(ClientCapabilities.builder()
 89 |         .roots(true)      // Enable roots capability
 90 |         .sampling()       // Enable sampling capability
 91 |         .build())
 92 |     .sampling(request -> Mono.just(new CreateMessageResult(response)))
 93 |     .toolsChangeConsumer(tools -> Mono.fromRunnable(() -> {
 94 |         logger.info("Tools updated: {}", tools);
 95 |     }))
 96 |     .resourcesChangeConsumer(resources -> Mono.fromRunnable(() -> {
 97 |         logger.info("Resources updated: {}", resources);
 98 |     }))
 99 |     .promptsChangeConsumer(prompts -> Mono.fromRunnable(() -> {
100 |         logger.info("Prompts updated: {}", prompts);
101 |     }))
102 |     .build();
103 | 
104 | // Initialize connection and use features
105 | client.initialize()
106 |     .flatMap(initResult -> client.listTools())
107 |     .flatMap(tools -> {
108 |         return client.callTool(new CallToolRequest(
109 |             "calculator",
110 |             Map.of("operation", "add", "a", 2, "b", 3)
111 |         ));
112 |     })
113 |     .flatMap(result -> {
114 |         return client.listResources()
115 |             .flatMap(resources ->
116 |                 client.readResource(new ReadResourceRequest("resource://uri"))
117 |             );
118 |     })
119 |     .flatMap(resource -> {
120 |         return client.listPrompts()
121 |             .flatMap(prompts ->
122 |                 client.getPrompt(new GetPromptRequest(
123 |                     "greeting",
124 |                     Map.of("name", "Spring")
125 |                 ))
126 |             );
127 |     })
128 |     .flatMap(prompt -> {
129 |         return client.addRoot(new Root("file:///path", "description"))
130 |             .then(client.removeRoot("file:///path"));
131 |     })
132 |     .doFinally(signalType -> {
133 |         client.closeGracefully().subscribe();
134 |     })
135 |     .subscribe();
136 | ```
137 | 
138 |   </Tab>
139 | </Tabs>
140 | 
141 | ## Client Transport
142 | 
143 | The transport layer handles the communication between MCP clients and servers, providing different implementations for various use cases. The client transport manages message serialization, connection establishment, and protocol-specific communication patterns.
144 | 
145 | <Tabs>
146 |     <Tab title="STDIO">
147 | 
148 |         Creates transport for in-process based communication
149 |         ```java
150 |         ServerParameters params = ServerParameters.builder("npx")
151 |             .args("-y", "@modelcontextprotocol/server-everything", "dir")
152 |             .build();
153 |         McpTransport transport = new StdioClientTransport(params);
154 |         ```
155 | 
156 |     </Tab>
157 |     <Tab title="SSE (HttpClient)">
158 | 
159 |         Creates a framework agnostic (pure Java API) SSE client transport. Included in the core mcp module.
160 |         ```java
161 |         McpTransport transport = new HttpClientSseClientTransport("http://your-mcp-server");
162 |         ```
163 | 
164 |     </Tab>
165 |     <Tab title="SSE (WebFlux)">
166 | 
167 |         Creates WebFlux-based SSE client transport. Requires the mcp-webflux-sse-transport dependency.
168 |         ```java
169 |         WebClient.Builder webClientBuilder = WebClient.builder()
170 |             .baseUrl("http://your-mcp-server");
171 |         McpTransport transport = new WebFluxSseClientTransport(webClientBuilder);
172 |         ```
173 | 
174 |     </Tab>
175 | 
176 | </Tabs>
177 | 
178 | ## Client Capabilities
179 | 
180 | The client can be configured with various capabilities:
181 | 
182 | ```java
183 | var capabilities = ClientCapabilities.builder()
184 |     .roots(true)      // Enable filesystem roots support with list changes notifications
185 |     .sampling()       // Enable LLM sampling support
186 |     .build();
187 | ```
188 | 
189 | ### Roots Support
190 | 
191 | Roots define the boundaries of where servers can operate within the filesystem:
192 | 
193 | ```java
194 | // Add a root dynamically
195 | client.addRoot(new Root("file:///path", "description"));
196 | 
197 | // Remove a root
198 | client.removeRoot("file:///path");
199 | 
200 | // Notify server of roots changes
201 | client.rootsListChangedNotification();
202 | ```
203 | 
204 | The roots capability allows servers to:
205 | 
206 | - Request the list of accessible filesystem roots
207 | - Receive notifications when the roots list changes
208 | - Understand which directories and files they have access to
209 | 
210 | ### Sampling Support
211 | 
212 | Sampling enables servers to request LLM interactions ("completions" or "generations") through the client:
213 | 
214 | ```java
215 | // Configure sampling handler
216 | Function<CreateMessageRequest, CreateMessageResult> samplingHandler = request -> {
217 |     // Sampling implementation that interfaces with LLM
218 |     return new CreateMessageResult(response);
219 | };
220 | 
221 | // Create client with sampling support
222 | var client = McpClient.sync(transport)
223 |     .capabilities(ClientCapabilities.builder()
224 |         .sampling()
225 |         .build())
226 |     .sampling(samplingHandler)
227 |     .build();
228 | ```
229 | 
230 | This capability allows:
231 | 
232 | - Servers to leverage AI capabilities without requiring API keys
233 | - Clients to maintain control over model access and permissions
234 | - Support for both text and image-based interactions
235 | - Optional inclusion of MCP server context in prompts
236 | 
237 | ### Logging Support
238 | 
239 | The client can register a logging consumer to receive log messages from the server and set the minimum logging level to filter messages:
240 | 
241 | ```java
242 | var mcpClient = McpClient.sync(transport)
243 |         .loggingConsumer(notification -> {
244 |             System.out.println("Received log message: " + notification.data());
245 |         })
246 |         .build();
247 | 
248 | mcpClient.initialize();
249 | 
250 | mcpClient.setLoggingLevel(McpSchema.LoggingLevel.INFO);
251 | 
252 | // Call the tool that can sends logging notifications
253 | CallToolResult result = mcpClient.callTool(new McpSchema.CallToolRequest("logging-test", Map.of()));
254 | ```
255 | 
256 | Clients can control the minimum logging level they receive through the `mcpClient.setLoggingLevel(level)` request. Messages below the set level will be filtered out.
257 | Supported logging levels (in order of increasing severity): DEBUG (0), INFO (1), NOTICE (2), WARNING (3), ERROR (4), CRITICAL (5), ALERT (6), EMERGENCY (7)
258 | 
259 | ## Using MCP Clients
260 | 
261 | ### Tool Execution
262 | 
263 | Tools are server-side functions that clients can discover and execute. The MCP client provides methods to list available tools and execute them with specific parameters. Each tool has a unique name and accepts a map of parameters.
264 | 
265 | <Tabs>
266 |   <Tab title="Sync API">
267 | 
268 | ```java
269 | // List available tools and their names
270 | var tools = client.listTools();
271 | tools.forEach(tool -> System.out.println(tool.getName()));
272 | 
273 | // Execute a tool with parameters
274 | var result = client.callTool("calculator", Map.of(
275 |     "operation", "add",
276 |     "a", 1,
277 |     "b", 2
278 | ));
279 | ```
280 | 
281 |   </Tab>
282 | 
283 |   <Tab title="Async API">
284 | 
285 | ```java
286 | // List available tools asynchronously
287 | client.listTools()
288 |     .doOnNext(tools -> tools.forEach(tool ->
289 |         System.out.println(tool.getName())))
290 |     .subscribe();
291 | 
292 | // Execute a tool asynchronously
293 | client.callTool("calculator", Map.of(
294 |         "operation", "add",
295 |         "a", 1,
296 |         "b", 2
297 |     ))
298 |     .subscribe();
299 | ```
300 | 
301 |   </Tab>
302 | </Tabs>
303 | 
304 | ### Resource Access
305 | 
306 | Resources represent server-side data sources that clients can access using URI templates. The MCP client provides methods to discover available resources and retrieve their contents through a standardized interface.
307 | 
308 | <Tabs>
309 |   <Tab title="Sync API">
310 | 
311 | ```java
312 | // List available resources and their names
313 | var resources = client.listResources();
314 | resources.forEach(resource -> System.out.println(resource.getName()));
315 | 
316 | // Retrieve resource content using a URI template
317 | var content = client.getResource("file", Map.of(
318 |     "path", "/path/to/file.txt"
319 | ));
320 | ```
321 | 
322 |   </Tab>
323 | 
324 |   <Tab title="Async API">
325 | 
326 | ```java
327 | // List available resources asynchronously
328 | client.listResources()
329 |     .doOnNext(resources -> resources.forEach(resource ->
330 |         System.out.println(resource.getName())))
331 |     .subscribe();
332 | 
333 | // Retrieve resource content asynchronously
334 | client.getResource("file", Map.of(
335 |         "path", "/path/to/file.txt"
336 |     ))
337 |     .subscribe();
338 | ```
339 | 
340 |   </Tab>
341 | </Tabs>
342 | 
343 | ### Prompt System
344 | 
345 | The prompt system enables interaction with server-side prompt templates. These templates can be discovered and executed with custom parameters, allowing for dynamic text generation based on predefined patterns.
346 | 
347 | <Tabs>
348 |   <Tab title="Sync API">
349 | 
350 | ```java
351 | // List available prompt templates
352 | var prompts = client.listPrompts();
353 | prompts.forEach(prompt -> System.out.println(prompt.getName()));
354 | 
355 | // Execute a prompt template with parameters
356 | var response = client.executePrompt("echo", Map.of(
357 |     "text", "Hello, World!"
358 | ));
359 | ```
360 | 
361 |   </Tab>
362 | 
363 |   <Tab title="Async API">
364 | 
365 | ```java
366 | // List available prompt templates asynchronously
367 | client.listPrompts()
368 |     .doOnNext(prompts -> prompts.forEach(prompt ->
369 |         System.out.println(prompt.getName())))
370 |     .subscribe();
371 | 
372 | // Execute a prompt template asynchronously
373 | client.executePrompt("echo", Map.of(
374 |         "text", "Hello, World!"
375 |     ))
376 |     .subscribe();
377 | ```
378 | 
379 |   </Tab>
380 | </Tabs>
381 | 
382 | ### Using Completion
383 | 
384 | As part of the [Completion capabilities](/specification/2025-03-26/server/utilities/completion), MCP provides a standardized way for servers to offer argument autocompletion suggestions for prompts and resource URIs.
385 | 
386 | Check the [Server Completion capabilities](/sdk/java/mcp-server#completion-specification) to learn how to enable and configure completions on the server side.
387 | 
388 | On the client side, the MCP client provides methods to request auto-completions:
389 | 
390 | <Tabs>
391 |   <Tab title="Sync API">
392 | 
393 | ```java
394 | 
395 | CompleteRequest request = new CompleteRequest(
396 |         new PromptReference("code_review"),
397 |         new CompleteRequest.CompleteArgument("language", "py"));
398 | 
399 | CompleteResult result = syncMcpClient.completeCompletion(request);
400 | 
401 | ```
402 | 
403 |   </Tab>
404 | 
405 |   <Tab title="Async API">
406 | 
407 | ```java
408 | 
409 | CompleteRequest request = new CompleteRequest(
410 |         new PromptReference("code_review"),
411 |         new CompleteRequest.CompleteArgument("language", "py"));
412 | 
413 | Mono<CompleteResult> result = mcpClient.completeCompletion(request);
414 | 
415 | ```
416 | 
417 |   </Tab>
418 | </Tabs>
419 | 


--------------------------------------------------------------------------------
/docs/sdk/java/mcp-overview.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Java SDK Overview
  3 | description: Introduction to the Model Context Protocol (MCP) Java SDK
  4 | ---
  5 | 
  6 | Java SDK for the [Model Context Protocol](https://modelcontextprotocol.org/docs/concepts/architecture)
  7 | enables standardized integration between AI models and tools.
  8 | 
  9 | ## Content
 10 | 
 11 | - [Introduction](/sdk/java/mcp-overview#features) - Overview of the Model Context Protocol (MCP) Java SDK and its features.
 12 |   - [Architecture](/sdk/java/mcp-overview#architecture) - The Java MCP SDK architecture overview.
 13 |   - [Java Dependencies](/sdk/java/mcp-overview#dependencies) - Java dependencies required to use the MCP SDK.
 14 | - [Java MCP Client](/sdk/java/mcp-client) - Learn how to use the MCP client to interact with MCP servers.
 15 | - [Java MCP Server](/sdk/java/mcp-server) - Learn how to implement and configure an MCP server.
 16 | 
 17 | ## Features
 18 | 
 19 | - MCP Client and MCP Server implementations supporting:
 20 |   - Protocol [version compatibility negotiation](/specification/2024-11-05/basic/lifecycle/#initialization)
 21 |   - [Tool](/specification/2024-11-05/server/tools/) discovery, execution, list change notifications
 22 |   - [Resource](/specification/2024-11-05/server/resources/) management with URI templates
 23 |   - [Roots](/specification/2024-11-05/client/roots/) list management and notifications
 24 |   - [Prompt](/specification/2024-11-05/server/prompts/) handling and management
 25 |   - [Sampling](/specification/2024-11-05/client/sampling/) support for AI model interactions
 26 | - Multiple transport implementations:
 27 |   - Default transports (included in core `mcp` module, no external web frameworks required):
 28 |     - Stdio-based transport for process-based communication
 29 |     - Java HttpClient-based SSE client transport for HTTP SSE Client-side streaming
 30 |     - Servlet-based SSE server transport for HTTP SSE Server streaming
 31 |   - Optional Spring-based transports (convenience if using Spring Framework):
 32 |     - WebFlux SSE client and server transports for reactive HTTP streaming
 33 |     - WebMVC SSE transport for servlet-based HTTP streaming
 34 | - Supports Synchronous and Asynchronous programming paradigms
 35 | 
 36 | <Tip>
 37 | 
 38 | The core `io.modelcontextprotocol.sdk:mcp` module provides default STDIO and SSE client and server transport implementations without requiring external web frameworks.
 39 | 
 40 | Spring-specific transports are available as optional dependencies for convenience when using the [Spring Framework](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-client-boot-starter-docs.html).
 41 | 
 42 | </Tip>
 43 | 
 44 | ## Architecture
 45 | 
 46 | The SDK follows a layered architecture with clear separation of concerns:
 47 | 
 48 | ![MCP Stack Architecture](/images/java/mcp-stack.svg)
 49 | 
 50 | - **Client/Server Layer (McpClient/McpServer)**: Both use McpSession for sync/async operations,
 51 |   with McpClient handling client-side protocol operations and McpServer managing server-side protocol operations.
 52 | - **Session Layer (McpSession)**: Manages communication patterns and state using DefaultMcpSession implementation.
 53 | - **Transport Layer (McpTransport)**: Handles JSON-RPC message serialization/deserialization via:
 54 |   - StdioTransport (stdin/stdout) in the core module
 55 |   - HTTP SSE transports in dedicated transport modules (Java HttpClient, Spring WebFlux, Spring WebMVC)
 56 | 
 57 | The [MCP Client](/sdk/java/mcp-client) is a key component in the Model Context Protocol (MCP) architecture, responsible for establishing and managing connections with MCP servers.
 58 | It implements the client-side of the protocol.
 59 | 
 60 | ![Java MCP Client Architecture](/images/java/java-mcp-client-architecture.jpg)
 61 | 
 62 | The [MCP Server](/sdk/java/mcp-server) is a foundational component in the Model Context Protocol (MCP) architecture that provides tools, resources, and capabilities to clients.
 63 | It implements the server-side of the protocol.
 64 | 
 65 | ![Java MCP Server Architecture](/images/java/java-mcp-server-architecture.jpg)
 66 | 
 67 | Key Interactions:
 68 | 
 69 | - **Client/Server Initialization**: Transport setup, protocol compatibility check, capability negotiation, and implementation details exchange.
 70 | - **Message Flow**: JSON-RPC message handling with validation, type-safe response processing, and error handling.
 71 | - **Resource Management**: Resource discovery, URI template-based access, subscription system, and content retrieval.
 72 | 
 73 | ## Dependencies
 74 | 
 75 | Add the following Maven dependency to your project:
 76 | 
 77 | <Tabs>
 78 |   <Tab title="Maven">
 79 | 
 80 | The core MCP functionality:
 81 | 
 82 | ```xml
 83 | <dependency>
 84 |     <groupId>io.modelcontextprotocol.sdk</groupId>
 85 |     <artifactId>mcp</artifactId>
 86 | </dependency>
 87 | ```
 88 | 
 89 | The core `mcp` module already includes default STDIO and SSE transport implementations and doesn't require external web frameworks.
 90 | 
 91 | If you're using the Spring Framework and want to use Spring-specific transport implementations, add one of the following optional dependencies:
 92 | 
 93 | ```xml
 94 | <!-- Optional: Spring WebFlux-based SSE client and server transport -->
 95 | <dependency>
 96 |     <groupId>io.modelcontextprotocol.sdk</groupId>
 97 |     <artifactId>mcp-spring-webflux</artifactId>
 98 | </dependency>
 99 | 
100 | <!-- Optional: Spring WebMVC-based SSE server transport -->
101 | <dependency>
102 |     <groupId>io.modelcontextprotocol.sdk</groupId>
103 |     <artifactId>mcp-spring-webmvc</artifactId>
104 | </dependency>
105 | ```
106 | 
107 |   </Tab>
108 |     <Tab title="Gradle">
109 | 
110 |     The core MCP functionality:
111 | 
112 | ```groovy
113 | dependencies {
114 |   implementation platform("io.modelcontextprotocol.sdk:mcp")
115 |   //...
116 | }
117 | ```
118 | 
119 |     The core `mcp` module already includes default STDIO and SSE transport implementations and doesn't require external web frameworks.
120 | 
121 |     If you're using the Spring Framework and want to use Spring-specific transport implementations, add one of the following optional dependencies:
122 | 
123 |     ```groovy
124 |     // Optional: Spring WebFlux-based SSE client and server transport
125 |     dependencies {
126 |       implementation platform("io.modelcontextprotocol.sdk:mcp-spring-webflux")
127 |     }
128 | 
129 |     // Optional: Spring WebMVC-based SSE server transport
130 |     dependencies {
131 |       implementation platform("io.modelcontextprotocol.sdk:mcp-spring-webmvc")
132 |     }
133 |     ```
134 | 
135 |   </Tab>
136 | </Tabs>
137 | 
138 | ### Bill of Materials (BOM)
139 | 
140 | The Bill of Materials (BOM) declares the recommended versions of all the dependencies used by a given release.
141 | Using the BOM from your application's build script avoids the need for you to specify and maintain the dependency versions yourself.
142 | Instead, the version of the BOM you're using determines the utilized dependency versions.
143 | It also ensures that you're using supported and tested versions of the dependencies by default, unless you choose to override them.
144 | 
145 | Add the BOM to your project:
146 | 
147 | <Tabs>
148 |   <Tab title="Maven">
149 | 
150 | ```xml
151 | <dependencyManagement>
152 |     <dependencies>
153 |         <dependency>
154 |             <groupId>io.modelcontextprotocol.sdk</groupId>
155 |             <artifactId>mcp-bom</artifactId>
156 |             <version>0.10.0</version>
157 |             <type>pom</type>
158 |             <scope>import</scope>
159 |         </dependency>
160 |     </dependencies>
161 | </dependencyManagement>
162 | ```
163 | 
164 |   </Tab>
165 | 
166 |   <Tab title="Gradle">
167 | 
168 | ```groovy
169 | dependencies {
170 |   implementation platform("io.modelcontextprotocol.sdk:mcp-bom:0.10.0")
171 |   //...
172 | }
173 | ```
174 | 
175 | Gradle users can also use the Spring AI MCP BOM by leveraging Gradle (5.0+) native support for declaring dependency constraints using a Maven BOM.
176 | This is implemented by adding a 'platform' dependency handler method to the dependencies section of your Gradle build script.
177 | As shown in the snippet above this can then be followed by version-less declarations of the Starter Dependencies for the one or more spring-ai modules you wish to use, e.g. spring-ai-openai.
178 | 
179 |   </Tab>
180 | </Tabs>
181 | 
182 | Replace the version number with the version of the BOM you want to use.
183 | 
184 | ### Available Dependencies
185 | 
186 | The following dependencies are available and managed by the BOM:
187 | 
188 | - Core Dependencies
189 |   - `io.modelcontextprotocol.sdk:mcp` - Core MCP library providing the base functionality and APIs for Model Context Protocol implementation, including default STDIO and SSE client and server transport implementations. No external web frameworks required.
190 | - Optional Transport Dependencies (convenience if using Spring Framework)
191 |   - `io.modelcontextprotocol.sdk:mcp-spring-webflux` - WebFlux-based Server-Sent Events (SSE) transport implementation for reactive applications.
192 |   - `io.modelcontextprotocol.sdk:mcp-spring-webmvc` - WebMVC-based Server-Sent Events (SSE) transport implementation for servlet-based applications.
193 | - Testing Dependencies
194 |   - `io.modelcontextprotocol.sdk:mcp-test` - Testing utilities and support for MCP-based applications.
195 | 


--------------------------------------------------------------------------------
/docs/sdk/java/mcp-server.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Java MCP Server
  3 | description: Learn how to implement and configure a Model Context Protocol (MCP) server
  4 | ---
  5 | 
  6 | Go to the [Java MCP Client](/sdk/java/mcp-client) to learn how to build MCP clients or [Java MCP Overview](/sdk/java/mcp-overview) for a general overview of the Model Context Protocol (MCP) in Java.
  7 | 
  8 | ## Overview
  9 | 
 10 | The MCP Server is a foundational component in the Model Context Protocol (MCP) architecture that provides tools, resources, and capabilities to clients. It implements the server-side of the protocol, responsible for:
 11 | 
 12 | - Exposing tools that clients can discover and execute
 13 | - Managing resources with URI-based access patterns
 14 | - Providing prompt templates and handling prompt requests
 15 | - Supporting capability negotiation with clients
 16 | - Implementing server-side protocol operations
 17 | - Managing concurrent client connections
 18 | - Providing structured logging and notifications
 19 | 
 20 | <Tip>
 21 | 
 22 | The core `io.modelcontextprotocol.sdk:mcp` module provides STDIO and SSE server transport implementations without requiring external web frameworks.
 23 | 
 24 | Spring-specific transport implementations are available as an **optional** dependencies `io.modelcontextprotocol.sdk:mcp-spring-webflux`, `io.modelcontextprotocol.sdk:mcp-spring-webmvc` for [Spring Framework](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-client-boot-starter-docs.html) users.
 25 | 
 26 | </Tip>
 27 | 
 28 | <Tip>
 29 |   This [quickstart demo](/quickstart/server), based on Spring AI MCP, will show
 30 |   you how to build an MCP server.
 31 | </Tip>
 32 | 
 33 | The server supports both synchronous and asynchronous APIs, allowing for flexible integration in different application contexts.
 34 | 
 35 | <Tabs>
 36 |   <Tab title="Sync API">
 37 | 
 38 | ```java
 39 | // Create a server with custom configuration
 40 | McpSyncServer syncServer = McpServer.sync(transportProvider)
 41 |     .serverInfo("my-server", "1.0.0")
 42 |     .capabilities(ServerCapabilities.builder()
 43 |         .resources(false, true)  // Enable resource support
 44 |         .tools(true)             // Enable tool support
 45 |         .prompts(true)           // Enable prompt support
 46 |         .logging()               // Enable logging support
 47 |         .completions()           // Enable completions support
 48 |         .build())
 49 |     .build();
 50 | 
 51 | // Register tools, resources, and prompts
 52 | syncServer.addTool(syncToolSpecification);
 53 | syncServer.addResource(syncResourceSpecification);
 54 | syncServer.addPrompt(syncPromptSpecification);
 55 | 
 56 | // Close the server when done
 57 | syncServer.close();
 58 | ```
 59 | 
 60 |   </Tab>
 61 | 
 62 |   <Tab title="Async API">
 63 | 
 64 | ```java
 65 | // Create an async server with custom configuration
 66 | McpAsyncServer asyncServer = McpServer.async(transportProvider)
 67 |     .serverInfo("my-server", "1.0.0")
 68 |     .capabilities(ServerCapabilities.builder()
 69 |         .resources(false, true)     // Enable resource support
 70 |         .tools(true)                // Enable tool support
 71 |         .prompts(true)              // Enable prompt support
 72 |         .logging()                  // Enable logging support
 73 |         .completions()              // Enable completions support
 74 |         .build())
 75 |     .build();
 76 | 
 77 | // Register tools, resources, and prompts
 78 | asyncServer.addTool(asyncToolSpecification)
 79 |     .doOnSuccess(v -> logger.info("Tool registered"))
 80 |     .subscribe();
 81 | 
 82 | asyncServer.addResource(asyncResourceSpecification)
 83 |     .doOnSuccess(v -> logger.info("Resource registered"))
 84 |     .subscribe();
 85 | 
 86 | asyncServer.addPrompt(asyncPromptSpecification)
 87 |     .doOnSuccess(v -> logger.info("Prompt registered"))
 88 |     .subscribe();
 89 | 
 90 | // Close the server when done
 91 | asyncServer.close()
 92 |     .doOnSuccess(v -> logger.info("Server closed"))
 93 |     .subscribe();
 94 | ```
 95 | 
 96 |   </Tab>
 97 | </Tabs>
 98 | 
 99 | ## Server Transport Providers
100 | 
101 | The transport layer in the MCP SDK is responsible for handling the communication between clients and servers.
102 | It provides different implementations to support various communication protocols and patterns.
103 | The SDK includes several built-in transport provider implementations:
104 | 
105 | <Tabs>
106 | 
107 |   <Tab title="STDIO">
108 | 
109 |     <>
110 |       Create in-process based transport:
111 | 
112 |       ```java
113 |       StdioServerTransportProvider transportProvider = new StdioServerTransportProvider(new ObjectMapper());
114 |       ```
115 | 
116 |       Provides bidirectional JSON-RPC message handling over standard input/output streams with non-blocking message processing, serialization/deserialization, and graceful shutdown support.
117 | 
118 |       Key features:
119 |       <ul>
120 |         <li>Bidirectional communication through stdin/stdout</li>
121 |         <li>Process-based integration support</li>
122 |         <li>Simple setup and configuration</li>
123 |         <li>Lightweight implementation</li>
124 |       </ul>
125 |     </>
126 | 
127 |   </Tab>
128 | 
129 | <Tab title="SSE (WebFlux)">
130 | 
131 |   <>
132 |     <p>Creates WebFlux-based SSE server transport.<br />Requires the <code>mcp-spring-webflux</code> dependency.</p>
133 | 
134 |     ```java
135 |     @Configuration
136 |     class McpConfig {
137 |         @Bean
138 |         WebFluxSseServerTransportProvider webFluxSseServerTransportProvider(ObjectMapper mapper) {
139 |             return new WebFluxSseServerTransportProvider(mapper, "/mcp/message");
140 |         }
141 | 
142 |         @Bean
143 |         RouterFunction<?> mcpRouterFunction(WebFluxSseServerTransportProvider transportProvider) {
144 |             return transportProvider.getRouterFunction();
145 |         }
146 |     }
147 |     ```
148 | 
149 |     <p>Implements the MCP HTTP with SSE transport specification, providing:</p>
150 |     <ul>
151 |       <li>Reactive HTTP streaming with WebFlux</li>
152 |       <li>Concurrent client connections through SSE endpoints</li>
153 |       <li>Message routing and session management</li>
154 |       <li>Graceful shutdown capabilities</li>
155 |     </ul>
156 | 
157 |   </>
158 | 
159 | </Tab>
160 | 
161 | <Tab title="SSE (WebMvc)">
162 | 
163 |   <>
164 |     <p>Creates WebMvc-based SSE server transport.<br />Requires the <code>mcp-spring-webmvc</code> dependency.</p>
165 | 
166 |     ```java
167 |     @Configuration
168 |     @EnableWebMvc
169 |     class McpConfig {
170 |         @Bean
171 |         WebMvcSseServerTransportProvider webMvcSseServerTransportProvider(ObjectMapper mapper) {
172 |             return new WebMvcSseServerTransportProvider(mapper, "/mcp/message");
173 |         }
174 | 
175 |         @Bean
176 |         RouterFunction<ServerResponse> mcpRouterFunction(WebMvcSseServerTransportProvider transportProvider) {
177 |             return transportProvider.getRouterFunction();
178 |         }
179 |     }
180 |     ```
181 | 
182 |     <p>Implements the MCP HTTP with SSE transport specification, providing:</p>
183 |     <ul>
184 |       <li>Server-side event streaming</li>
185 |       <li>Integration with Spring WebMVC</li>
186 |       <li>Support for traditional web applications</li>
187 |       <li>Synchronous operation handling</li>
188 |     </ul>
189 | 
190 |   </>
191 | 
192 | </Tab>
193 | 
194 | <Tab title="SSE (Servlet)">
195 | 
196 |   <>
197 |     <p>
198 |       Creates a Servlet-based SSE server transport. It is included in the core <code>mcp</code> module.<br />
199 |       The <code>HttpServletSseServerTransport</code> can be used with any Servlet container.<br />
200 |       To use it with a Spring Web application, you can register it as a Servlet bean:
201 |     </p>
202 | 
203 |     ```java
204 |     @Configuration
205 |     @EnableWebMvc
206 |     public class McpServerConfig implements WebMvcConfigurer {
207 | 
208 |         @Bean
209 |         public HttpServletSseServerTransportProvider servletSseServerTransportProvider() {
210 |             return new HttpServletSseServerTransportProvider(new ObjectMapper(), "/mcp/message");
211 |         }
212 | 
213 |         @Bean
214 |         public ServletRegistrationBean customServletBean(HttpServletSseServerTransportProvider transportProvider) {
215 |             return new ServletRegistrationBean(transportProvider);
216 |         }
217 |     }
218 |     ```
219 | 
220 |     <p>
221 |       Implements the MCP HTTP with SSE transport specification using the traditional Servlet API, providing:
222 |     </p>
223 |     <ul>
224 |       <li>Asynchronous message handling using Servlet 6.0 async support</li>
225 |       <li>Session management for multiple client connections</li>
226 |       <li>
227 |         Two types of endpoints:
228 |         <ul>
229 |           <li>SSE endpoint (<code>/sse</code>) for server-to-client events</li>
230 |           <li>Message endpoint (configurable) for client-to-server requests</li>
231 |         </ul>
232 |       </li>
233 |       <li>Error handling and response formatting</li>
234 |       <li>Graceful shutdown support</li>
235 |     </ul>
236 | 
237 |   </>
238 | 
239 | </Tab>
240 | 
241 | </Tabs>
242 | 
243 | ## Server Capabilities
244 | 
245 | The server can be configured with various capabilities:
246 | 
247 | ```java
248 | var capabilities = ServerCapabilities.builder()
249 |     .resources(false, true)  // Resource support with list changes notifications
250 |     .tools(true)            // Tool support with list changes notifications
251 |     .prompts(true)          // Prompt support with list changes notifications
252 |     .logging()              // Enable logging support (enabled by default with logging level INFO)
253 |     .build();
254 | ```
255 | 
256 | ### Logging Support
257 | 
258 | The server provides structured logging capabilities that allow sending log messages to clients with different severity levels:
259 | 
260 | ```java
261 | // Send a log message to clients
262 | server.loggingNotification(LoggingMessageNotification.builder()
263 |     .level(LoggingLevel.INFO)
264 |     .logger("custom-logger")
265 |     .data("Custom log message")
266 |     .build());
267 | ```
268 | 
269 | Clients can control the minimum logging level they receive through the `mcpClient.setLoggingLevel(level)` request. Messages below the set level will be filtered out.
270 | Supported logging levels (in order of increasing severity): DEBUG (0), INFO (1), NOTICE (2), WARNING (3), ERROR (4), CRITICAL (5), ALERT (6), EMERGENCY (7)
271 | 
272 | ### Tool Specification
273 | 
274 | The Model Context Protocol allows servers to [expose tools](/specification/2024-11-05/server/tools/) that can be invoked by language models.
275 | The Java SDK allows implementing a Tool Specifications with their handler functions.
276 | Tools enable AI models to perform calculations, access external APIs, query databases, and manipulate files:
277 | 
278 | <Tabs>
279 |   <Tab title="Sync">
280 | 
281 | ```java
282 | // Sync tool specification
283 | var schema = """
284 |             {
285 |               "type" : "object",
286 |               "id" : "urn:jsonschema:Operation",
287 |               "properties" : {
288 |                 "operation" : {
289 |                   "type" : "string"
290 |                 },
291 |                 "a" : {
292 |                   "type" : "number"
293 |                 },
294 |                 "b" : {
295 |                   "type" : "number"
296 |                 }
297 |               }
298 |             }
299 |             """;
300 | var syncToolSpecification = new McpServerFeatures.SyncToolSpecification(
301 |     new Tool("calculator", "Basic calculator", schema),
302 |     (exchange, arguments) -> {
303 |         // Tool implementation
304 |         return new CallToolResult(result, false);
305 |     }
306 | );
307 | ```
308 | 
309 |   </Tab>
310 | 
311 |   <Tab title="Async">
312 | 
313 | ```java
314 | // Async tool specification
315 | var schema = """
316 |             {
317 |               "type" : "object",
318 |               "id" : "urn:jsonschema:Operation",
319 |               "properties" : {
320 |                 "operation" : {
321 |                   "type" : "string"
322 |                 },
323 |                 "a" : {
324 |                   "type" : "number"
325 |                 },
326 |                 "b" : {
327 |                   "type" : "number"
328 |                 }
329 |               }
330 |             }
331 |             """;
332 | var asyncToolSpecification = new McpServerFeatures.AsyncToolSpecification(
333 |     new Tool("calculator", "Basic calculator", schema),
334 |     (exchange, arguments) -> {
335 |         // Tool implementation
336 |         return Mono.just(new CallToolResult(result, false));
337 |     }
338 | );
339 | ```
340 | 
341 |   </Tab>
342 | </Tabs>
343 | 
344 | The Tool specification includes a Tool definition with `name`, `description`, and `parameter schema` followed by a call handler that implements the tool's logic.
345 | The function's first argument is `McpAsyncServerExchange` for client interaction, and the second is a map of tool arguments.
346 | 
347 | ### Resource Specification
348 | 
349 | Specification of a resource with its handler function.
350 | Resources provide context to AI models by exposing data such as: File contents, Database records, API responses, System information, Application state.
351 | Example resource specification:
352 | 
353 | <Tabs>
354 |   <Tab title="Sync">
355 | 
356 | ```java
357 | // Sync resource specification
358 | var syncResourceSpecification = new McpServerFeatures.SyncResourceSpecification(
359 |     new Resource("custom://resource", "name", "description", "mime-type", null),
360 |     (exchange, request) -> {
361 |         // Resource read implementation
362 |         return new ReadResourceResult(contents);
363 |     }
364 | );
365 | ```
366 | 
367 |   </Tab>
368 | 
369 |   <Tab title="Async">
370 | 
371 | ```java
372 | // Async resource specification
373 | var asyncResourceSpecification = new McpServerFeatures.AsyncResourceSpecification(
374 |     new Resource("custom://resource", "name", "description", "mime-type", null),
375 |     (exchange, request) -> {
376 |         // Resource read implementation
377 |         return Mono.just(new ReadResourceResult(contents));
378 |     }
379 | );
380 | ```
381 | 
382 |   </Tab>
383 | </Tabs>
384 | 
385 | The resource specification comprised of resource definitions and resource read handler.
386 | The resource definition including `name`, `description`, and `MIME type`.
387 | The first argument of the function that handles resource read requests is an `McpAsyncServerExchange` upon which the server can
388 | interact with the connected client.
389 | The second arguments is a `McpSchema.ReadResourceRequest`.
390 | 
391 | ### Prompt Specification
392 | 
393 | As part of the [Prompting capabilities](/specification/2024-11-05/server/prompts/), MCP provides a standardized way for servers to expose prompt templates to clients.
394 | The Prompt Specification is a structured template for AI model interactions that enables consistent message formatting, parameter substitution, context injection, response formatting, and instruction templating.
395 | 
396 | <Tabs>
397 |   <Tab title="Sync">
398 | 
399 | ```java
400 | // Sync prompt specification
401 | var syncPromptSpecification = new McpServerFeatures.SyncPromptSpecification(
402 |     new Prompt("greeting", "description", List.of(
403 |         new PromptArgument("name", "description", true)
404 |     )),
405 |     (exchange, request) -> {
406 |         // Prompt implementation
407 |         return new GetPromptResult(description, messages);
408 |     }
409 | );
410 | ```
411 | 
412 |   </Tab>
413 | 
414 |   <Tab title="Async">
415 | 
416 | ```java
417 | // Async prompt specification
418 | var asyncPromptSpecification = new McpServerFeatures.AsyncPromptSpecification(
419 |     new Prompt("greeting", "description", List.of(
420 |         new PromptArgument("name", "description", true)
421 |     )),
422 |     (exchange, request) -> {
423 |         // Prompt implementation
424 |         return Mono.just(new GetPromptResult(description, messages));
425 |     }
426 | );
427 | ```
428 | 
429 |   </Tab>
430 | </Tabs>
431 | 
432 | The prompt definition includes name (identifier for the prompt), description (purpose of the prompt), and list of arguments (parameters for templating).
433 | The handler function processes requests and returns formatted templates.
434 | The first argument is `McpAsyncServerExchange` for client interaction, and the second argument is a `GetPromptRequest` instance.
435 | 
436 | ### Completion Specification
437 | 
438 | As part of the [Completion capabilities](/specification/2025-03-26/server/utilities/completion), MCP provides a provides a standardized way for servers to offer argument autocompletion suggestions for prompts and resource URIs.
439 | 
440 | <Tabs>
441 |   <Tab title="Sync">
442 | 
443 | ```java
444 | // Sync completion specification
445 | var syncCompletionSpecification = new McpServerFeatures.SyncCompletionSpecification(
446 | 			new McpSchema.PromptReference("code_review"), (exchange, request) -> {
447 | 
448 |         // completion implementation ...
449 | 
450 |         return new McpSchema.CompleteResult(
451 |             new CompleteResult.CompleteCompletion(
452 |               List.of("python", "pytorch", "pyside"),
453 |               10, // total
454 |               false // hasMore
455 |             ));
456 |       }
457 | );
458 | 
459 | // Create a sync server with completion capabilities
460 | var mcpServer = McpServer.sync(mcpServerTransportProvider)
461 |   .capabilities(ServerCapabilities.builder()
462 |     .completions() // enable completions support
463 |       // ...
464 |     .build())
465 |   // ...
466 |   .completions(new McpServerFeatures.SyncCompletionSpecification( // register completion specification
467 |       new McpSchema.PromptReference("code_review"), syncCompletionSpecification))
468 |   .build();
469 | 
470 | ```
471 | 
472 |   </Tab>
473 | 
474 |   <Tab title="Async">
475 | 
476 | ```java
477 | // Async prompt specification
478 | var asyncCompletionSpecification = new McpServerFeatures.AsyncCompletionSpecification(
479 | 			new McpSchema.PromptReference("code_review"), (exchange, request) -> {
480 | 
481 |         // completion implementation ...
482 | 
483 |         return Mono.just(new McpSchema.CompleteResult(
484 |             new CompleteResult.CompleteCompletion(
485 |               List.of("python", "pytorch", "pyside"),
486 |               10, // total
487 |               false // hasMore
488 |             )));
489 |       }
490 | );
491 | 
492 | // Create a async server with completion capabilities
493 | var mcpServer = McpServer.async(mcpServerTransportProvider)
494 |   .capabilities(ServerCapabilities.builder()
495 |     .completions() // enable completions support
496 |       // ...
497 |     .build())
498 |   // ...
499 |   .completions(new McpServerFeatures.AsyncCompletionSpecification( // register completion specification
500 |       new McpSchema.PromptReference("code_review"), asyncCompletionSpecification))
501 |   .build();
502 | 
503 | ```
504 | 
505 |   </Tab>
506 | </Tabs>
507 | 
508 | The `McpSchema.CompletionReference` definition defines the type (`PromptRefernce` or `ResourceRefernce`) and the identifier for the completion specification (e.g handler).
509 | The handler function processes requests and returns the completion response.
510 | The first argument is `McpAsyncServerExchange` for client interaction, and the second argument is a `CompleteRequest` instance.
511 | 
512 | Check the [using completion](/sdk/java/mcp-client#using-completion) to learn how to use the completion capabilities on the client side.
513 | 
514 | ### Using Sampling from a Server
515 | 
516 | To use [Sampling capabilities](/specification/2024-11-05/client/sampling/), connect to a client that supports sampling.
517 | No special server configuration is needed, but verify client sampling support before making requests.
518 | Learn about [client sampling support](./mcp-client#sampling-support).
519 | 
520 | Once connected to a compatible client, the server can request language model generations:
521 | 
522 | <Tabs>
523 |   <Tab title="Sync API">
524 | 
525 | ```java
526 | // Create a server
527 | McpSyncServer server = McpServer.sync(transportProvider)
528 |     .serverInfo("my-server", "1.0.0")
529 |     .build();
530 | 
531 | // Define a tool that uses sampling
532 | var calculatorTool = new McpServerFeatures.SyncToolSpecification(
533 |     new Tool("ai-calculator", "Performs calculations using AI", schema),
534 |     (exchange, arguments) -> {
535 |         // Check if client supports sampling
536 |         if (exchange.getClientCapabilities().sampling() == null) {
537 |             return new CallToolResult("Client does not support AI capabilities", false);
538 |         }
539 | 
540 |         // Create a sampling request
541 |         McpSchema.CreateMessageRequest request = McpSchema.CreateMessageRequest.builder()
542 |             .messages(List.of(new McpSchema.SamplingMessage(McpSchema.Role.USER,
543 |                 new McpSchema.TextContent("Calculate: " + arguments.get("expression")))
544 |             .modelPreferences(McpSchema.ModelPreferences.builder()
545 |                 .hints(List.of(
546 |                     McpSchema.ModelHint.of("claude-3-sonnet"),
547 |                     McpSchema.ModelHint.of("claude")
548 |                 ))
549 |                 .intelligencePriority(0.8)  // Prioritize intelligence
550 |                 .speedPriority(0.5)         // Moderate speed importance
551 |                 .build())
552 |             .systemPrompt("You are a helpful calculator assistant. Provide only the numerical answer.")
553 |             .maxTokens(100)
554 |             .build();
555 | 
556 |         // Request sampling from the client
557 |         McpSchema.CreateMessageResult result = exchange.createMessage(request);
558 | 
559 |         // Process the result
560 |         String answer = result.content().text();
561 |         return new CallToolResult(answer, false);
562 |     }
563 | );
564 | 
565 | // Add the tool to the server
566 | server.addTool(calculatorTool);
567 | ```
568 | 
569 |   </Tab>
570 | 
571 |   <Tab title="Async API">
572 | 
573 | ```java
574 | // Create a server
575 | McpAsyncServer server = McpServer.async(transportProvider)
576 |     .serverInfo("my-server", "1.0.0")
577 |     .build();
578 | 
579 | // Define a tool that uses sampling
580 | var calculatorTool = new McpServerFeatures.AsyncToolSpecification(
581 |     new Tool("ai-calculator", "Performs calculations using AI", schema),
582 |     (exchange, arguments) -> {
583 |         // Check if client supports sampling
584 |         if (exchange.getClientCapabilities().sampling() == null) {
585 |             return Mono.just(new CallToolResult("Client does not support AI capabilities", false));
586 |         }
587 | 
588 |         // Create a sampling request
589 |         McpSchema.CreateMessageRequest request = McpSchema.CreateMessageRequest.builder()
590 |             .content(new McpSchema.TextContent("Calculate: " + arguments.get("expression")))
591 |             .modelPreferences(McpSchema.ModelPreferences.builder()
592 |                 .hints(List.of(
593 |                     McpSchema.ModelHint.of("claude-3-sonnet"),
594 |                     McpSchema.ModelHint.of("claude")
595 |                 ))
596 |                 .intelligencePriority(0.8)  // Prioritize intelligence
597 |                 .speedPriority(0.5)         // Moderate speed importance
598 |                 .build())
599 |             .systemPrompt("You are a helpful calculator assistant. Provide only the numerical answer.")
600 |             .maxTokens(100)
601 |             .build();
602 | 
603 |         // Request sampling from the client
604 |         return exchange.createMessage(request)
605 |             .map(result -> {
606 |                 // Process the result
607 |                 String answer = result.content().text();
608 |                 return new CallToolResult(answer, false);
609 |             });
610 |     }
611 | );
612 | 
613 | // Add the tool to the server
614 | server.addTool(calculatorTool)
615 |     .subscribe();
616 | ```
617 | 
618 |   </Tab>
619 | </Tabs>
620 | 
621 | The `CreateMessageRequest` object allows you to specify: `Content` - the input text or image for the model,
622 | `Model Preferences` - hints and priorities for model selection, `System Prompt` - instructions for the model's behavior and
623 | `Max Tokens` - maximum length of the generated response.
624 | 
625 | ### Logging Support
626 | 
627 | The server provides structured logging capabilities that allow sending log messages to clients with different severity levels. The
628 | log notifications can only be sent from within an existing client session, such as tools, resources, and prompts calls.
629 | 
630 | For example, we can send a log message from within a tool handler function.
631 | On the client side, you can register a logging consumer to receive log messages from the server and set the minimum logging level to filter messages.
632 | 
633 | ```java
634 | var mcpClient = McpClient.sync(transport)
635 |         .loggingConsumer(notification -> {
636 |             System.out.println("Received log message: " + notification.data());
637 |         })
638 |         .build();
639 | 
640 | mcpClient.initialize();
641 | 
642 | mcpClient.setLoggingLevel(McpSchema.LoggingLevel.INFO);
643 | 
644 | // Call the tool that sends logging notifications
645 | CallToolResult result = mcpClient.callTool(new McpSchema.CallToolRequest("logging-test", Map.of()));
646 | ```
647 | 
648 | The server can send log messages using the `McpAsyncServerExchange`/`McpSyncServerExchange` object in the tool/resource/prompt handler function:
649 | 
650 | ```java
651 | var tool = new McpServerFeatures.AsyncToolSpecification(
652 |     new McpSchema.Tool("logging-test", "Test logging notifications", emptyJsonSchema),
653 |     (exchange, request) -> {
654 | 
655 |       exchange.loggingNotification( // Use the exchange to send log messages
656 |           McpSchema.LoggingMessageNotification.builder()
657 |             .level(McpSchema.LoggingLevel.DEBUG)
658 |             .logger("test-logger")
659 |             .data("Debug message")
660 |             .build())
661 |         .block();
662 | 
663 |       return Mono.just(new CallToolResult("Logging test completed", false));
664 |     });
665 | 
666 | var mcpServer = McpServer.async(mcpServerTransportProvider)
667 |   .serverInfo("test-server", "1.0.0")
668 |   .capabilities(
669 |     ServerCapabilities.builder()
670 |       .logging() // Enable logging support
671 |       .tools(true)
672 |       .build())
673 |   .tools(tool)
674 |   .build();
675 | ```
676 | 
677 | Clients can control the minimum logging level they receive through the `mcpClient.setLoggingLevel(level)` request. Messages below the set level will be filtered out.
678 | Supported logging levels (in order of increasing severity): DEBUG (0), INFO (1), NOTICE (2), WARNING (3), ERROR (4), CRITICAL (5), ALERT (6), EMERGENCY (7)
679 | 
680 | ## Error Handling
681 | 
682 | The SDK provides comprehensive error handling through the McpError class, covering protocol compatibility, transport communication, JSON-RPC messaging, tool execution, resource management, prompt handling, timeouts, and connection issues. This unified error handling approach ensures consistent and reliable error management across both synchronous and asynchronous operations.
683 | 


--------------------------------------------------------------------------------
/docs/snippets/snippet-intro.mdx:
--------------------------------------------------------------------------------
1 | One of the core principles of software development is DRY (Don't Repeat
2 | Yourself). This is a principle that apply to documentation as
3 | well. If you find yourself repeating the same content in multiple places, you
4 | should consider creating a custom snippet to keep your content in sync.
5 | 


--------------------------------------------------------------------------------
/docs/specification/2024-11-05/architecture/index.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Architecture
  3 | ---
  4 | 
  5 | The Model Context Protocol (MCP) follows a client-host-server architecture where each
  6 | host can run multiple client instances. This architecture enables users to integrate AI
  7 | capabilities across applications while maintaining clear security boundaries and
  8 | isolating concerns. Built on JSON-RPC, MCP provides a stateful session protocol focused
  9 | on context exchange and sampling coordination between clients and servers.
 10 | 
 11 | ## Core Components
 12 | 
 13 | ```mermaid
 14 | graph LR
 15 |     subgraph "Application Host Process"
 16 |         H[Host]
 17 |         C1[Client 1]
 18 |         C2[Client 2]
 19 |         C3[Client 3]
 20 |         H --> C1
 21 |         H --> C2
 22 |         H --> C3
 23 |     end
 24 | 
 25 |     subgraph "Local machine"
 26 |         S1[Server 1<br>Files & Git]
 27 |         S2[Server 2<br>Database]
 28 |         R1[("Local<br>Resource A")]
 29 |         R2[("Local<br>Resource B")]
 30 | 
 31 |         C1 --> S1
 32 |         C2 --> S2
 33 |         S1 <--> R1
 34 |         S2 <--> R2
 35 |     end
 36 | 
 37 |     subgraph "Internet"
 38 |         S3[Server 3<br>External APIs]
 39 |         R3[("Remote<br>Resource C")]
 40 | 
 41 |         C3 --> S3
 42 |         S3 <--> R3
 43 |     end
 44 | ```
 45 | 
 46 | ### Host
 47 | 
 48 | The host process acts as the container and coordinator:
 49 | 
 50 | - Creates and manages multiple client instances
 51 | - Controls client connection permissions and lifecycle
 52 | - Enforces security policies and consent requirements
 53 | - Handles user authorization decisions
 54 | - Coordinates AI/LLM integration and sampling
 55 | - Manages context aggregation across clients
 56 | 
 57 | ### Clients
 58 | 
 59 | Each client is created by the host and maintains an isolated server connection:
 60 | 
 61 | - Establishes one stateful session per server
 62 | - Handles protocol negotiation and capability exchange
 63 | - Routes protocol messages bidirectionally
 64 | - Manages subscriptions and notifications
 65 | - Maintains security boundaries between servers
 66 | 
 67 | A host application creates and manages multiple clients, with each client having a 1:1
 68 | relationship with a particular server.
 69 | 
 70 | ### Servers
 71 | 
 72 | Servers provide specialized context and capabilities:
 73 | 
 74 | - Expose resources, tools and prompts via MCP primitives
 75 | - Operate independently with focused responsibilities
 76 | - Request sampling through client interfaces
 77 | - Must respect security constraints
 78 | - Can be local processes or remote services
 79 | 
 80 | ## Design Principles
 81 | 
 82 | MCP is built on several key design principles that inform its architecture and
 83 | implementation:
 84 | 
 85 | 1. **Servers should be extremely easy to build**
 86 |    - Host applications handle complex orchestration responsibilities
 87 |    - Servers focus on specific, well-defined capabilities
 88 |    - Simple interfaces minimize implementation overhead
 89 |    - Clear separation enables maintainable code
 90 | 
 91 | 2. **Servers should be highly composable**
 92 |    - Each server provides focused functionality in isolation
 93 |    - Multiple servers can be combined seamlessly
 94 |    - Shared protocol enables interoperability
 95 |    - Modular design supports extensibility
 96 | 
 97 | 3. **Servers should not be able to read the whole conversation, nor "see into" other
 98 |    servers**
 99 |    - Servers receive only necessary contextual information
100 |    - Full conversation history stays with the host
101 |    - Each server connection maintains isolation
102 |    - Cross-server interactions are controlled by the host
103 |    - Host process enforces security boundaries
104 | 
105 | 4. **Features can be added to servers and clients progressively**
106 |    - Core protocol provides minimal required functionality
107 |    - Additional capabilities can be negotiated as needed
108 |    - Servers and clients evolve independently
109 |    - Protocol designed for future extensibility
110 |    - Backwards compatibility is maintained
111 | 
112 | ## Message Types
113 | 
114 | MCP defines three core message types based on
115 | [JSON-RPC 2.0](https://www.jsonrpc.org/specification):
116 | 
117 | - **Requests**: Bidirectional messages with method and parameters expecting a response
118 | - **Responses**: Successful results or errors matching specific request IDs
119 | - **Notifications**: One-way messages requiring no response
120 | 
121 | Each message type follows the JSON-RPC 2.0 specification for structure and delivery
122 | semantics.
123 | 
124 | ## Capability Negotiation
125 | 
126 | The Model Context Protocol uses a capability-based negotiation system where clients and
127 | servers explicitly declare their supported features during initialization. Capabilities
128 | determine which protocol features and primitives are available during a session.
129 | 
130 | - Servers declare capabilities like resource subscriptions, tool support, and prompt
131 |   templates
132 | - Clients declare capabilities like sampling support and notification handling
133 | - Both parties must respect declared capabilities throughout the session
134 | - Additional capabilities can be negotiated through extensions to the protocol
135 | 
136 | ```mermaid
137 | sequenceDiagram
138 |     participant Host
139 |     participant Client
140 |     participant Server
141 | 
142 |     Host->>+Client: Initialize client
143 |     Client->>+Server: Initialize session with capabilities
144 |     Server-->>Client: Respond with supported capabilities
145 | 
146 |     Note over Host,Server: Active Session with Negotiated Features
147 | 
148 |     loop Client Requests
149 |         Host->>Client: User- or model-initiated action
150 |         Client->>Server: Request (tools/resources)
151 |         Server-->>Client: Response
152 |         Client-->>Host: Update UI or respond to model
153 |     end
154 | 
155 |     loop Server Requests
156 |         Server->>Client: Request (sampling)
157 |         Client->>Host: Forward to AI
158 |         Host-->>Client: AI response
159 |         Client-->>Server: Response
160 |     end
161 | 
162 |     loop Notifications
163 |         Server--)Client: Resource updates
164 |         Client--)Server: Status changes
165 |     end
166 | 
167 |     Host->>Client: Terminate
168 |     Client->>-Server: End session
169 |     deactivate Server
170 | ```
171 | 
172 | Each capability unlocks specific protocol features for use during the session. For
173 | example:
174 | 
175 | - Implemented [server features](/specification/2024-11-05/server) must be
176 |   advertised in the server's capabilities
177 | - Emitting resource subscription notifications requires the server to declare
178 |   subscription support
179 | - Tool invocation requires the server to declare tool capabilities
180 | - [Sampling](/specification/2024-11-05/client) requires the client to
181 |   declare support in its capabilities
182 | 
183 | This capability negotiation ensures clients and servers have a clear understanding of
184 | supported functionality while maintaining protocol extensibility.
185 | 


--------------------------------------------------------------------------------
/docs/specification/2024-11-05/basic/index.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Overview
 3 | ---
 4 | 
 5 | <Info>**Protocol Revision**: 2024-11-05</Info>
 6 | 
 7 | All messages between MCP clients and servers **MUST** follow the
 8 | [JSON-RPC 2.0](https://www.jsonrpc.org/specification) specification. The protocol defines
 9 | three fundamental types of messages:
10 | 
11 | | Type            | Description                            | Requirements                           |
12 | | --------------- | -------------------------------------- | -------------------------------------- |
13 | | `Requests`      | Messages sent to initiate an operation | Must include unique ID and method name |
14 | | `Responses`     | Messages sent in reply to requests     | Must include same ID as request        |
15 | | `Notifications` | One-way messages with no reply         | Must not include an ID                 |
16 | 
17 | **Responses** are further sub-categorized as either **successful results** or **errors**.
18 | Results can follow any JSON object structure, while errors must include an error code and
19 | message at minimum.
20 | 
21 | ## Protocol Layers
22 | 
23 | The Model Context Protocol consists of several key components that work together:
24 | 
25 | - **Base Protocol**: Core JSON-RPC message types
26 | - **Lifecycle Management**: Connection initialization, capability negotiation, and
27 |   session control
28 | - **Server Features**: Resources, prompts, and tools exposed by servers
29 | - **Client Features**: Sampling and root directory lists provided by clients
30 | - **Utilities**: Cross-cutting concerns like logging and argument completion
31 | 
32 | All implementations **MUST** support the base protocol and lifecycle management
33 | components. Other components **MAY** be implemented based on the specific needs of the
34 | application.
35 | 
36 | These protocol layers establish clear separation of concerns while enabling rich
37 | interactions between clients and servers. The modular design allows implementations to
38 | support exactly the features they need.
39 | 
40 | See the following pages for more details on the different components:
41 | 
42 | <CardGroup cols={3}>
43 |   <Card
44 |     title="Lifecycle"
45 |     icon="arrows-rotate"
46 |     href="/specification/2024-11-05/basic/lifecycle"
47 |   />
48 |   <Card
49 |     title="Resources"
50 |     icon="file-lines"
51 |     href="/specification/2024-11-05/server/resources"
52 |   />
53 |   <Card
54 |     title="Prompts"
55 |     icon="message"
56 |     href="/specification/2024-11-05/server/prompts"
57 |   />
58 |   <Card
59 |     title="Tools"
60 |     icon="wrench"
61 |     href="/specification/2024-11-05/server/tools"
62 |   />
63 |   <Card
64 |     title="Logging"
65 |     icon="rectangle-list"
66 |     href="/specification/2024-11-05/server/utilities/logging"
67 |   />
68 |   <Card
69 |     title="Sampling"
70 |     icon="code"
71 |     href="/specification/2024-11-05/client/sampling"
72 |   />
73 | </CardGroup>
74 | 
75 | ## Auth
76 | 
77 | Authentication and authorization are not currently part of the core MCP specification,
78 | but we are considering ways to introduce them in future. Join us in
79 | [GitHub Discussions](https://github.com/modelcontextprotocol/specification/discussions)
80 | to help shape the future of the protocol!
81 | 
82 | Clients and servers **MAY** negotiate their own custom authentication and authorization
83 | strategies.
84 | 
85 | ## Schema
86 | 
87 | The full specification of the protocol is defined as a
88 | [TypeScript schema](http://github.com/modelcontextprotocol/specification/tree/main/schema/2024-11-05/schema.ts).
89 | This is the source of truth for all protocol messages and structures.
90 | 
91 | There is also a
92 | [JSON Schema](http://github.com/modelcontextprotocol/specification/tree/main/schema/2024-11-05/schema.json),
93 | which is automatically generated from the TypeScript source of truth, for use with
94 | various automated tooling.
95 | 


--------------------------------------------------------------------------------
/docs/specification/2024-11-05/basic/lifecycle.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Lifecycle
  3 | type: docs
  4 | weight: 30
  5 | ---
  6 | 
  7 | <Info>**Protocol Revision**: 2024-11-05</Info>
  8 | 
  9 | The Model Context Protocol (MCP) defines a rigorous lifecycle for client-server
 10 | connections that ensures proper capability negotiation and state management.
 11 | 
 12 | 1. **Initialization**: Capability negotiation and protocol version agreement
 13 | 2. **Operation**: Normal protocol communication
 14 | 3. **Shutdown**: Graceful termination of the connection
 15 | 
 16 | ```mermaid
 17 | sequenceDiagram
 18 |     participant Client
 19 |     participant Server
 20 | 
 21 |     Note over Client,Server: Initialization Phase
 22 |     activate Client
 23 |     Client->>+Server: initialize request
 24 |     Server-->>Client: initialize response
 25 |     Client--)Server: initialized notification
 26 | 
 27 |     Note over Client,Server: Operation Phase
 28 |     rect rgb(200, 220, 250)
 29 |         note over Client,Server: Normal protocol operations
 30 |     end
 31 | 
 32 |     Note over Client,Server: Shutdown
 33 |     Client--)-Server: Disconnect
 34 |     deactivate Server
 35 |     Note over Client,Server: Connection closed
 36 | ```
 37 | 
 38 | ## Lifecycle Phases
 39 | 
 40 | ### Initialization
 41 | 
 42 | The initialization phase **MUST** be the first interaction between client and server.
 43 | During this phase, the client and server:
 44 | 
 45 | - Establish protocol version compatibility
 46 | - Exchange and negotiate capabilities
 47 | - Share implementation details
 48 | 
 49 | The client **MUST** initiate this phase by sending an `initialize` request containing:
 50 | 
 51 | - Protocol version supported
 52 | - Client capabilities
 53 | - Client implementation information
 54 | 
 55 | ```json
 56 | {
 57 |   "jsonrpc": "2.0",
 58 |   "id": 1,
 59 |   "method": "initialize",
 60 |   "params": {
 61 |     "protocolVersion": "2024-11-05",
 62 |     "capabilities": {
 63 |       "roots": {
 64 |         "listChanged": true
 65 |       },
 66 |       "sampling": {}
 67 |     },
 68 |     "clientInfo": {
 69 |       "name": "ExampleClient",
 70 |       "version": "1.0.0"
 71 |     }
 72 |   }
 73 | }
 74 | ```
 75 | 
 76 | The server **MUST** respond with its own capabilities and information:
 77 | 
 78 | ```json
 79 | {
 80 |   "jsonrpc": "2.0",
 81 |   "id": 1,
 82 |   "result": {
 83 |     "protocolVersion": "2024-11-05",
 84 |     "capabilities": {
 85 |       "logging": {},
 86 |       "prompts": {
 87 |         "listChanged": true
 88 |       },
 89 |       "resources": {
 90 |         "subscribe": true,
 91 |         "listChanged": true
 92 |       },
 93 |       "tools": {
 94 |         "listChanged": true
 95 |       }
 96 |     },
 97 |     "serverInfo": {
 98 |       "name": "ExampleServer",
 99 |       "version": "1.0.0"
100 |     }
101 |   }
102 | }
103 | ```
104 | 
105 | After successful initialization, the client **MUST** send an `initialized` notification
106 | to indicate it is ready to begin normal operations:
107 | 
108 | ```json
109 | {
110 |   "jsonrpc": "2.0",
111 |   "method": "notifications/initialized"
112 | }
113 | ```
114 | 
115 | - The client **SHOULD NOT** send requests other than
116 |   [pings](/specification/2024-11-05/basic/utilities/ping) before the server
117 |   has responded to the `initialize` request.
118 | - The server **SHOULD NOT** send requests other than
119 |   [pings](/specification/2024-11-05/basic/utilities/ping) and
120 |   [logging](/specification/2024-11-05/server/utilities/logging) before
121 |   receiving the `initialized` notification.
122 | 
123 | #### Version Negotiation
124 | 
125 | In the `initialize` request, the client **MUST** send a protocol version it supports.
126 | This **SHOULD** be the _latest_ version supported by the client.
127 | 
128 | If the server supports the requested protocol version, it **MUST** respond with the same
129 | version. Otherwise, the server **MUST** respond with another protocol version it
130 | supports. This **SHOULD** be the _latest_ version supported by the server.
131 | 
132 | If the client does not support the version in the server's response, it **SHOULD**
133 | disconnect.
134 | 
135 | #### Capability Negotiation
136 | 
137 | Client and server capabilities establish which optional protocol features will be
138 | available during the session.
139 | 
140 | Key capabilities include:
141 | 
142 | | Category | Capability     | Description                                                                         |
143 | | -------- | -------------- | ----------------------------------------------------------------------------------- |
144 | | Client   | `roots`        | Ability to provide filesystem [roots](/specification/2024-11-05/client/roots)       |
145 | | Client   | `sampling`     | Support for LLM [sampling](/specification/2024-11-05/client/sampling) requests      |
146 | | Client   | `experimental` | Describes support for non-standard experimental features                            |
147 | | Server   | `prompts`      | Offers [prompt templates](/specification/2024-11-05/server/prompts)                 |
148 | | Server   | `resources`    | Provides readable [resources](/specification/2024-11-05/server/resources)           |
149 | | Server   | `tools`        | Exposes callable [tools](/specification/2024-11-05/server/tools)                    |
150 | | Server   | `logging`      | Emits structured [log messages](/specification/2024-11-05/server/utilities/logging) |
151 | | Server   | `experimental` | Describes support for non-standard experimental features                            |
152 | 
153 | Capability objects can describe sub-capabilities like:
154 | 
155 | - `listChanged`: Support for list change notifications (for prompts, resources, and
156 |   tools)
157 | - `subscribe`: Support for subscribing to individual items' changes (resources only)
158 | 
159 | ### Operation
160 | 
161 | During the operation phase, the client and server exchange messages according to the
162 | negotiated capabilities.
163 | 
164 | Both parties **SHOULD**:
165 | 
166 | - Respect the negotiated protocol version
167 | - Only use capabilities that were successfully negotiated
168 | 
169 | ### Shutdown
170 | 
171 | During the shutdown phase, one side (usually the client) cleanly terminates the protocol
172 | connection. No specific shutdown messages are defined—instead, the underlying transport
173 | mechanism should be used to signal connection termination:
174 | 
175 | #### stdio
176 | 
177 | For the stdio [transport](/specification/2024-11-05/basic/transports), the
178 | client **SHOULD** initiate shutdown by:
179 | 
180 | 1. First, closing the input stream to the child process (the server)
181 | 2. Waiting for the server to exit, or sending `SIGTERM` if the server does not exit
182 |    within a reasonable time
183 | 3. Sending `SIGKILL` if the server does not exit within a reasonable time after `SIGTERM`
184 | 
185 | The server **MAY** initiate shutdown by closing its output stream to the client and
186 | exiting.
187 | 
188 | #### HTTP
189 | 
190 | For HTTP [transports](/specification/2024-11-05/basic/transports), shutdown
191 | is indicated by closing the associated HTTP connection(s).
192 | 
193 | ## Error Handling
194 | 
195 | Implementations **SHOULD** be prepared to handle these error cases:
196 | 
197 | - Protocol version mismatch
198 | - Failure to negotiate required capabilities
199 | - Initialize request timeout
200 | - Shutdown timeout
201 | 
202 | Implementations **SHOULD** implement appropriate timeouts for all requests, to prevent
203 | hung connections and resource exhaustion.
204 | 
205 | Example initialization error:
206 | 
207 | ```json
208 | {
209 |   "jsonrpc": "2.0",
210 |   "id": 1,
211 |   "error": {
212 |     "code": -32602,
213 |     "message": "Unsupported protocol version",
214 |     "data": {
215 |       "supported": ["2024-11-05"],
216 |       "requested": "1.0.0"
217 |     }
218 |   }
219 | }
220 | ```
221 | 


--------------------------------------------------------------------------------
/docs/specification/2024-11-05/basic/messages.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Messages
 3 | type: docs
 4 | weight: 20
 5 | ---
 6 | 
 7 | <Info>**Protocol Revision**: 2024-11-05</Info>
 8 | 
 9 | All messages in MCP **MUST** follow the
10 | [JSON-RPC 2.0](https://www.jsonrpc.org/specification) specification. The protocol defines
11 | three types of messages:
12 | 
13 | ## Requests
14 | 
15 | Requests are sent from the client to the server or vice versa.
16 | 
17 | ```typescript
18 | {
19 |   jsonrpc: "2.0";
20 |   id: string | number;
21 |   method: string;
22 |   params?: {
23 |     [key: string]: unknown;
24 |   };
25 | }
26 | ```
27 | 
28 | - Requests **MUST** include a string or integer ID.
29 | - Unlike base JSON-RPC, the ID **MUST NOT** be `null`.
30 | - The request ID **MUST NOT** have been previously used by the requestor within the same
31 |   session.
32 | 
33 | ## Responses
34 | 
35 | Responses are sent in reply to requests.
36 | 
37 | ```typescript
38 | {
39 |   jsonrpc: "2.0";
40 |   id: string | number;
41 |   result?: {
42 |     [key: string]: unknown;
43 |   }
44 |   error?: {
45 |     code: number;
46 |     message: string;
47 |     data?: unknown;
48 |   }
49 | }
50 | ```
51 | 
52 | - Responses **MUST** include the same ID as the request they correspond to.
53 | - Either a `result` or an `error` **MUST** be set. A response **MUST NOT** set both.
54 | - Error codes **MUST** be integers.
55 | 
56 | ## Notifications
57 | 
58 | Notifications are sent from the client to the server or vice versa. They do not expect a
59 | response.
60 | 
61 | ```typescript
62 | {
63 |   jsonrpc: "2.0";
64 |   method: string;
65 |   params?: {
66 |     [key: string]: unknown;
67 |   };
68 | }
69 | ```
70 | 
71 | - Notifications **MUST NOT** include an ID.
72 | 


--------------------------------------------------------------------------------
/docs/specification/2024-11-05/basic/transports.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Transports
  3 | type: docs
  4 | weight: 40
  5 | ---
  6 | 
  7 | <Info>**Protocol Revision**: 2024-11-05</Info>
  8 | 
  9 | MCP currently defines two standard transport mechanisms for client-server communication:
 10 | 
 11 | 1. [stdio](#stdio), communication over standard in and standard out
 12 | 2. [HTTP with Server-Sent Events](#http-with-sse) (SSE)
 13 | 
 14 | Clients **SHOULD** support stdio whenever possible.
 15 | 
 16 | It is also possible for clients and servers to implement
 17 | [custom transports](#custom-transports) in a pluggable fashion.
 18 | 
 19 | ## stdio
 20 | 
 21 | In the **stdio** transport:
 22 | 
 23 | - The client launches the MCP server as a subprocess.
 24 | - The server receives JSON-RPC messages on its standard input (`stdin`) and writes
 25 |   responses to its standard output (`stdout`).
 26 | - Messages are delimited by newlines, and **MUST NOT** contain embedded newlines.
 27 | - The server **MAY** write UTF-8 strings to its standard error (`stderr`) for logging
 28 |   purposes. Clients **MAY** capture, forward, or ignore this logging.
 29 | - The server **MUST NOT** write anything to its `stdout` that is not a valid MCP message.
 30 | - The client **MUST NOT** write anything to the server's `stdin` that is not a valid MCP
 31 |   message.
 32 | 
 33 | ```mermaid
 34 | sequenceDiagram
 35 |     participant Client
 36 |     participant Server Process
 37 | 
 38 |     Client->>+Server Process: Launch subprocess
 39 |     loop Message Exchange
 40 |         Client->>Server Process: Write to stdin
 41 |         Server Process->>Client: Write to stdout
 42 |         Server Process--)Client: Optional logs on stderr
 43 |     end
 44 |     Client->>Server Process: Close stdin, terminate subprocess
 45 |     deactivate Server Process
 46 | ```
 47 | 
 48 | ## HTTP with SSE
 49 | 
 50 | In the **SSE** transport, the server operates as an independent process that can handle
 51 | multiple client connections.
 52 | 
 53 | #### Security Warning
 54 | 
 55 | When implementing HTTP with SSE transport:
 56 | 
 57 | 1. Servers **MUST** validate the `Origin` header on all incoming connections to prevent DNS rebinding attacks
 58 | 2. When running locally, servers **SHOULD** bind only to localhost (127.0.0.1) rather than all network interfaces (0.0.0.0)
 59 | 3. Servers **SHOULD** implement proper authentication for all connections
 60 | 
 61 | Without these protections, attackers could use DNS rebinding to interact with local MCP servers from remote websites.
 62 | 
 63 | The server **MUST** provide two endpoints:
 64 | 
 65 | 1. An SSE endpoint, for clients to establish a connection and receive messages from the
 66 |    server
 67 | 2. A regular HTTP POST endpoint for clients to send messages to the server
 68 | 
 69 | When a client connects, the server **MUST** send an `endpoint` event containing a URI for
 70 | the client to use for sending messages. All subsequent client messages **MUST** be sent
 71 | as HTTP POST requests to this endpoint.
 72 | 
 73 | Server messages are sent as SSE `message` events, with the message content encoded as
 74 | JSON in the event data.
 75 | 
 76 | ```mermaid
 77 | sequenceDiagram
 78 |     participant Client
 79 |     participant Server
 80 | 
 81 |     Client->>Server: Open SSE connection
 82 |     Server->>Client: endpoint event
 83 |     loop Message Exchange
 84 |         Client->>Server: HTTP POST messages
 85 |         Server->>Client: SSE message events
 86 |     end
 87 |     Client->>Server: Close SSE connection
 88 | ```
 89 | 
 90 | ## Custom Transports
 91 | 
 92 | Clients and servers **MAY** implement additional custom transport mechanisms to suit
 93 | their specific needs. The protocol is transport-agnostic and can be implemented over any
 94 | communication channel that supports bidirectional message exchange.
 95 | 
 96 | Implementers who choose to support custom transports **MUST** ensure they preserve the
 97 | JSON-RPC message format and lifecycle requirements defined by MCP. Custom transports
 98 | **SHOULD** document their specific connection establishment and message exchange patterns
 99 | to aid interoperability.
100 | 


--------------------------------------------------------------------------------
/docs/specification/2024-11-05/basic/utilities/cancellation.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Cancellation
 3 | weight: 10
 4 | ---
 5 | 
 6 | <Info>**Protocol Revision**: 2024-11-05</Info>
 7 | 
 8 | The Model Context Protocol (MCP) supports optional cancellation of in-progress requests
 9 | through notification messages. Either side can send a cancellation notification to
10 | indicate that a previously-issued request should be terminated.
11 | 
12 | ## Cancellation Flow
13 | 
14 | When a party wants to cancel an in-progress request, it sends a `notifications/cancelled`
15 | notification containing:
16 | 
17 | - The ID of the request to cancel
18 | - An optional reason string that can be logged or displayed
19 | 
20 | ```json
21 | {
22 |   "jsonrpc": "2.0",
23 |   "method": "notifications/cancelled",
24 |   "params": {
25 |     "requestId": "123",
26 |     "reason": "User requested cancellation"
27 |   }
28 | }
29 | ```
30 | 
31 | ## Behavior Requirements
32 | 
33 | 1. Cancellation notifications **MUST** only reference requests that:
34 |    - Were previously issued in the same direction
35 |    - Are believed to still be in-progress
36 | 2. The `initialize` request **MUST NOT** be cancelled by clients
37 | 3. Receivers of cancellation notifications **SHOULD**:
38 |    - Stop processing the cancelled request
39 |    - Free associated resources
40 |    - Not send a response for the cancelled request
41 | 4. Receivers **MAY** ignore cancellation notifications if:
42 |    - The referenced request is unknown
43 |    - Processing has already completed
44 |    - The request cannot be cancelled
45 | 5. The sender of the cancellation notification **SHOULD** ignore any response to the
46 |    request that arrives afterward
47 | 
48 | ## Timing Considerations
49 | 
50 | Due to network latency, cancellation notifications may arrive after request processing
51 | has completed, and potentially after a response has already been sent.
52 | 
53 | Both parties **MUST** handle these race conditions gracefully:
54 | 
55 | ```mermaid
56 | sequenceDiagram
57 |    participant Client
58 |    participant Server
59 | 
60 |    Client->>Server: Request (ID: 123)
61 |    Note over Server: Processing starts
62 |    Client--)Server: notifications/cancelled (ID: 123)
63 |    alt
64 |       Note over Server: Processing may have<br/>completed before<br/>cancellation arrives
65 |    else If not completed
66 |       Note over Server: Stop processing
67 |    end
68 | ```
69 | 
70 | ## Implementation Notes
71 | 
72 | - Both parties **SHOULD** log cancellation reasons for debugging
73 | - Application UIs **SHOULD** indicate when cancellation is requested
74 | 
75 | ## Error Handling
76 | 
77 | Invalid cancellation notifications **SHOULD** be ignored:
78 | 
79 | - Unknown request IDs
80 | - Already completed requests
81 | - Malformed notifications
82 | 
83 | This maintains the "fire and forget" nature of notifications while allowing for race
84 | conditions in asynchronous communication.
85 | 


--------------------------------------------------------------------------------
/docs/specification/2024-11-05/basic/utilities/ping.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Ping
 3 | weight: 5
 4 | ---
 5 | 
 6 | <Info>**Protocol Revision**: 2024-11-05</Info>
 7 | 
 8 | The Model Context Protocol includes an optional ping mechanism that allows either party
 9 | to verify that their counterpart is still responsive and the connection is alive.
10 | 
11 | ## Overview
12 | 
13 | The ping functionality is implemented through a simple request/response pattern. Either
14 | the client or server can initiate a ping by sending a `ping` request.
15 | 
16 | ## Message Format
17 | 
18 | A ping request is a standard JSON-RPC request with no parameters:
19 | 
20 | ```json
21 | {
22 |   "jsonrpc": "2.0",
23 |   "id": "123",
24 |   "method": "ping"
25 | }
26 | ```
27 | 
28 | ## Behavior Requirements
29 | 
30 | 1. The receiver **MUST** respond promptly with an empty response:
31 | 
32 | ```json
33 | {
34 |   "jsonrpc": "2.0",
35 |   "id": "123",
36 |   "result": {}
37 | }
38 | ```
39 | 
40 | 2. If no response is received within a reasonable timeout period, the sender **MAY**:
41 |    - Consider the connection stale
42 |    - Terminate the connection
43 |    - Attempt reconnection procedures
44 | 
45 | ## Usage Patterns
46 | 
47 | ```mermaid
48 | sequenceDiagram
49 |     participant Sender
50 |     participant Receiver
51 | 
52 |     Sender->>Receiver: ping request
53 |     Receiver->>Sender: empty response
54 | ```
55 | 
56 | ## Implementation Considerations
57 | 
58 | - Implementations **SHOULD** periodically issue pings to detect connection health
59 | - The frequency of pings **SHOULD** be configurable
60 | - Timeouts **SHOULD** be appropriate for the network environment
61 | - Excessive pinging **SHOULD** be avoided to reduce network overhead
62 | 
63 | ## Error Handling
64 | 
65 | - Timeouts **SHOULD** be treated as connection failures
66 | - Multiple failed pings **MAY** trigger connection reset
67 | - Implementations **SHOULD** log ping failures for diagnostics
68 | 


--------------------------------------------------------------------------------
/docs/specification/2024-11-05/basic/utilities/progress.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Progress
 3 | weight: 30
 4 | ---
 5 | 
 6 | <Info>**Protocol Revision**: 2024-11-05</Info>
 7 | 
 8 | The Model Context Protocol (MCP) supports optional progress tracking for long-running
 9 | operations through notification messages. Either side can send progress notifications to
10 | provide updates about operation status.
11 | 
12 | ## Progress Flow
13 | 
14 | When a party wants to _receive_ progress updates for a request, it includes a
15 | `progressToken` in the request metadata.
16 | 
17 | - Progress tokens **MUST** be a string or integer value
18 | - Progress tokens can be chosen by the sender using any means, but **MUST** be unique
19 |   across all active requests.
20 | 
21 | ```json
22 | {
23 |   "jsonrpc": "2.0",
24 |   "id": 1,
25 |   "method": "some_method",
26 |   "params": {
27 |     "_meta": {
28 |       "progressToken": "abc123"
29 |     }
30 |   }
31 | }
32 | ```
33 | 
34 | The receiver **MAY** then send progress notifications containing:
35 | 
36 | - The original progress token
37 | - The current progress value so far
38 | - An optional "total" value
39 | 
40 | ```json
41 | {
42 |   "jsonrpc": "2.0",
43 |   "method": "notifications/progress",
44 |   "params": {
45 |     "progressToken": "abc123",
46 |     "progress": 50,
47 |     "total": 100
48 |   }
49 | }
50 | ```
51 | 
52 | - The `progress` value **MUST** increase with each notification, even if the total is
53 |   unknown.
54 | - The `progress` and the `total` values **MAY** be floating point.
55 | 
56 | ## Behavior Requirements
57 | 
58 | 1. Progress notifications **MUST** only reference tokens that:
59 |    - Were provided in an active request
60 |    - Are associated with an in-progress operation
61 | 
62 | 2. Receivers of progress requests **MAY**:
63 |    - Choose not to send any progress notifications
64 |    - Send notifications at whatever frequency they deem appropriate
65 |    - Omit the total value if unknown
66 | 
67 | ```mermaid
68 | sequenceDiagram
69 |     participant Sender
70 |     participant Receiver
71 | 
72 |     Note over Sender,Receiver: Request with progress token
73 |     Sender->>Receiver: Method request with progressToken
74 | 
75 |     Note over Sender,Receiver: Progress updates
76 |     loop Progress Updates
77 |         Receiver-->>Sender: Progress notification (0.2/1.0)
78 |         Receiver-->>Sender: Progress notification (0.6/1.0)
79 |         Receiver-->>Sender: Progress notification (1.0/1.0)
80 |     end
81 | 
82 |     Note over Sender,Receiver: Operation complete
83 |     Receiver->>Sender: Method response
84 | ```
85 | 
86 | ## Implementation Notes
87 | 
88 | - Senders and receivers **SHOULD** track active progress tokens
89 | - Both parties **SHOULD** implement rate limiting to prevent flooding
90 | - Progress notifications **MUST** stop after completion
91 | 


--------------------------------------------------------------------------------
/docs/specification/2024-11-05/client/roots.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Roots
  3 | type: docs
  4 | weight: 40
  5 | ---
  6 | 
  7 | <Info>**Protocol Revision**: 2024-11-05</Info>
  8 | 
  9 | The Model Context Protocol (MCP) provides a standardized way for clients to expose
 10 | filesystem "roots" to servers. Roots define the boundaries of where servers can operate
 11 | within the filesystem, allowing them to understand which directories and files they have
 12 | access to. Servers can request the list of roots from supporting clients and receive
 13 | notifications when that list changes.
 14 | 
 15 | ## User Interaction Model
 16 | 
 17 | Roots in MCP are typically exposed through workspace or project configuration interfaces.
 18 | 
 19 | For example, implementations could offer a workspace/project picker that allows users to
 20 | select directories and files the server should have access to. This can be combined with
 21 | automatic workspace detection from version control systems or project files.
 22 | 
 23 | However, implementations are free to expose roots through any interface pattern that
 24 | suits their needs&mdash;the protocol itself does not mandate any specific user
 25 | interaction model.
 26 | 
 27 | ## Capabilities
 28 | 
 29 | Clients that support roots **MUST** declare the `roots` capability during
 30 | [initialization](/specification/2024-11-05/basic/lifecycle#initialization):
 31 | 
 32 | ```json
 33 | {
 34 |   "capabilities": {
 35 |     "roots": {
 36 |       "listChanged": true
 37 |     }
 38 |   }
 39 | }
 40 | ```
 41 | 
 42 | `listChanged` indicates whether the client will emit notifications when the list of roots
 43 | changes.
 44 | 
 45 | ## Protocol Messages
 46 | 
 47 | ### Listing Roots
 48 | 
 49 | To retrieve roots, servers send a `roots/list` request:
 50 | 
 51 | **Request:**
 52 | 
 53 | ```json
 54 | {
 55 |   "jsonrpc": "2.0",
 56 |   "id": 1,
 57 |   "method": "roots/list"
 58 | }
 59 | ```
 60 | 
 61 | **Response:**
 62 | 
 63 | ```json
 64 | {
 65 |   "jsonrpc": "2.0",
 66 |   "id": 1,
 67 |   "result": {
 68 |     "roots": [
 69 |       {
 70 |         "uri": "file:///home/user/projects/myproject",
 71 |         "name": "My Project"
 72 |       }
 73 |     ]
 74 |   }
 75 | }
 76 | ```
 77 | 
 78 | ### Root List Changes
 79 | 
 80 | When roots change, clients that support `listChanged` **MUST** send a notification:
 81 | 
 82 | ```json
 83 | {
 84 |   "jsonrpc": "2.0",
 85 |   "method": "notifications/roots/list_changed"
 86 | }
 87 | ```
 88 | 
 89 | ## Message Flow
 90 | 
 91 | ```mermaid
 92 | sequenceDiagram
 93 |     participant Server
 94 |     participant Client
 95 | 
 96 |     Note over Server,Client: Discovery
 97 |     Server->>Client: roots/list
 98 |     Client-->>Server: Available roots
 99 | 
100 |     Note over Server,Client: Changes
101 |     Client--)Server: notifications/roots/list_changed
102 |     Server->>Client: roots/list
103 |     Client-->>Server: Updated roots
104 | ```
105 | 
106 | ## Data Types
107 | 
108 | ### Root
109 | 
110 | A root definition includes:
111 | 
112 | - `uri`: Unique identifier for the root. This **MUST** be a `file://` URI in the current
113 |   specification.
114 | - `name`: Optional human-readable name for display purposes.
115 | 
116 | Example roots for different use cases:
117 | 
118 | #### Project Directory
119 | 
120 | ```json
121 | {
122 |   "uri": "file:///home/user/projects/myproject",
123 |   "name": "My Project"
124 | }
125 | ```
126 | 
127 | #### Multiple Repositories
128 | 
129 | ```json
130 | [
131 |   {
132 |     "uri": "file:///home/user/repos/frontend",
133 |     "name": "Frontend Repository"
134 |   },
135 |   {
136 |     "uri": "file:///home/user/repos/backend",
137 |     "name": "Backend Repository"
138 |   }
139 | ]
140 | ```
141 | 
142 | ## Error Handling
143 | 
144 | Clients **SHOULD** return standard JSON-RPC errors for common failure cases:
145 | 
146 | - Client does not support roots: `-32601` (Method not found)
147 | - Internal errors: `-32603`
148 | 
149 | Example error:
150 | 
151 | ```json
152 | {
153 |   "jsonrpc": "2.0",
154 |   "id": 1,
155 |   "error": {
156 |     "code": -32601,
157 |     "message": "Roots not supported",
158 |     "data": {
159 |       "reason": "Client does not have roots capability"
160 |     }
161 |   }
162 | }
163 | ```
164 | 
165 | ## Security Considerations
166 | 
167 | 1. Clients **MUST**:
168 |    - Only expose roots with appropriate permissions
169 |    - Validate all root URIs to prevent path traversal
170 |    - Implement proper access controls
171 |    - Monitor root accessibility
172 | 
173 | 2. Servers **SHOULD**:
174 |    - Handle cases where roots become unavailable
175 |    - Respect root boundaries during operations
176 |    - Validate all paths against provided roots
177 | 
178 | ## Implementation Guidelines
179 | 
180 | 1. Clients **SHOULD**:
181 |    - Prompt users for consent before exposing roots to servers
182 |    - Provide clear user interfaces for root management
183 |    - Validate root accessibility before exposing
184 |    - Monitor for root changes
185 | 
186 | 2. Servers **SHOULD**:
187 |    - Check for roots capability before usage
188 |    - Handle root list changes gracefully
189 |    - Respect root boundaries in operations
190 |    - Cache root information appropriately
191 | 


--------------------------------------------------------------------------------
/docs/specification/2024-11-05/client/sampling.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Sampling
  3 | type: docs
  4 | weight: 40
  5 | ---
  6 | 
  7 | <Info>**Protocol Revision**: 2024-11-05</Info>
  8 | 
  9 | The Model Context Protocol (MCP) provides a standardized way for servers to request LLM
 10 | sampling ("completions" or "generations") from language models via clients. This flow
 11 | allows clients to maintain control over model access, selection, and permissions while
 12 | enabling servers to leverage AI capabilities&mdash;with no server API keys necessary.
 13 | Servers can request text or image-based interactions and optionally include context from
 14 | MCP servers in their prompts.
 15 | 
 16 | ## User Interaction Model
 17 | 
 18 | Sampling in MCP allows servers to implement agentic behaviors, by enabling LLM calls to
 19 | occur _nested_ inside other MCP server features.
 20 | 
 21 | Implementations are free to expose sampling through any interface pattern that suits
 22 | their needs&mdash;the protocol itself does not mandate any specific user interaction
 23 | model.
 24 | 
 25 | <Warning>
 26 | 
 27 | For trust & safety and security, there **SHOULD** always
 28 | be a human in the loop with the ability to deny sampling requests.
 29 | 
 30 | Applications **SHOULD**:
 31 | 
 32 | - Provide UI that makes it easy and intuitive to review sampling requests
 33 | - Allow users to view and edit prompts before sending
 34 | - Present generated responses for review before delivery
 35 | 
 36 | </Warning>
 37 | 
 38 | ## Capabilities
 39 | 
 40 | Clients that support sampling **MUST** declare the `sampling` capability during
 41 | [initialization](/specification/2024-11-05/basic/lifecycle#initialization):
 42 | 
 43 | ```json
 44 | {
 45 |   "capabilities": {
 46 |     "sampling": {}
 47 |   }
 48 | }
 49 | ```
 50 | 
 51 | ## Protocol Messages
 52 | 
 53 | ### Creating Messages
 54 | 
 55 | To request a language model generation, servers send a `sampling/createMessage` request:
 56 | 
 57 | **Request:**
 58 | 
 59 | ```json
 60 | {
 61 |   "jsonrpc": "2.0",
 62 |   "id": 1,
 63 |   "method": "sampling/createMessage",
 64 |   "params": {
 65 |     "messages": [
 66 |       {
 67 |         "role": "user",
 68 |         "content": {
 69 |           "type": "text",
 70 |           "text": "What is the capital of France?"
 71 |         }
 72 |       }
 73 |     ],
 74 |     "modelPreferences": {
 75 |       "hints": [
 76 |         {
 77 |           "name": "claude-3-sonnet"
 78 |         }
 79 |       ],
 80 |       "intelligencePriority": 0.8,
 81 |       "speedPriority": 0.5
 82 |     },
 83 |     "systemPrompt": "You are a helpful assistant.",
 84 |     "maxTokens": 100
 85 |   }
 86 | }
 87 | ```
 88 | 
 89 | **Response:**
 90 | 
 91 | ```json
 92 | {
 93 |   "jsonrpc": "2.0",
 94 |   "id": 1,
 95 |   "result": {
 96 |     "role": "assistant",
 97 |     "content": {
 98 |       "type": "text",
 99 |       "text": "The capital of France is Paris."
100 |     },
101 |     "model": "claude-3-sonnet-20240307",
102 |     "stopReason": "endTurn"
103 |   }
104 | }
105 | ```
106 | 
107 | ## Message Flow
108 | 
109 | ```mermaid
110 | sequenceDiagram
111 |     participant Server
112 |     participant Client
113 |     participant User
114 |     participant LLM
115 | 
116 |     Note over Server,Client: Server initiates sampling
117 |     Server->>Client: sampling/createMessage
118 | 
119 |     Note over Client,User: Human-in-the-loop review
120 |     Client->>User: Present request for approval
121 |     User-->>Client: Review and approve/modify
122 | 
123 |     Note over Client,LLM: Model interaction
124 |     Client->>LLM: Forward approved request
125 |     LLM-->>Client: Return generation
126 | 
127 |     Note over Client,User: Response review
128 |     Client->>User: Present response for approval
129 |     User-->>Client: Review and approve/modify
130 | 
131 |     Note over Server,Client: Complete request
132 |     Client-->>Server: Return approved response
133 | ```
134 | 
135 | ## Data Types
136 | 
137 | ### Messages
138 | 
139 | Sampling messages can contain:
140 | 
141 | #### Text Content
142 | 
143 | ```json
144 | {
145 |   "type": "text",
146 |   "text": "The message content"
147 | }
148 | ```
149 | 
150 | #### Image Content
151 | 
152 | ```json
153 | {
154 |   "type": "image",
155 |   "data": "base64-encoded-image-data",
156 |   "mimeType": "image/jpeg"
157 | }
158 | ```
159 | 
160 | ### Model Preferences
161 | 
162 | Model selection in MCP requires careful abstraction since servers and clients may use
163 | different AI providers with distinct model offerings. A server cannot simply request a
164 | specific model by name since the client may not have access to that exact model or may
165 | prefer to use a different provider's equivalent model.
166 | 
167 | To solve this, MCP implements a preference system that combines abstract capability
168 | priorities with optional model hints:
169 | 
170 | #### Capability Priorities
171 | 
172 | Servers express their needs through three normalized priority values (0-1):
173 | 
174 | - `costPriority`: How important is minimizing costs? Higher values prefer cheaper models.
175 | - `speedPriority`: How important is low latency? Higher values prefer faster models.
176 | - `intelligencePriority`: How important are advanced capabilities? Higher values prefer
177 |   more capable models.
178 | 
179 | #### Model Hints
180 | 
181 | While priorities help select models based on characteristics, `hints` allow servers to
182 | suggest specific models or model families:
183 | 
184 | - Hints are treated as substrings that can match model names flexibly
185 | - Multiple hints are evaluated in order of preference
186 | - Clients **MAY** map hints to equivalent models from different providers
187 | - Hints are advisory&mdash;clients make final model selection
188 | 
189 | For example:
190 | 
191 | ```json
192 | {
193 |   "hints": [
194 |     { "name": "claude-3-sonnet" }, // Prefer Sonnet-class models
195 |     { "name": "claude" } // Fall back to any Claude model
196 |   ],
197 |   "costPriority": 0.3, // Cost is less important
198 |   "speedPriority": 0.8, // Speed is very important
199 |   "intelligencePriority": 0.5 // Moderate capability needs
200 | }
201 | ```
202 | 
203 | The client processes these preferences to select an appropriate model from its available
204 | options. For instance, if the client doesn't have access to Claude models but has Gemini,
205 | it might map the sonnet hint to `gemini-1.5-pro` based on similar capabilities.
206 | 
207 | ## Error Handling
208 | 
209 | Clients **SHOULD** return errors for common failure cases:
210 | 
211 | Example error:
212 | 
213 | ```json
214 | {
215 |   "jsonrpc": "2.0",
216 |   "id": 1,
217 |   "error": {
218 |     "code": -1,
219 |     "message": "User rejected sampling request"
220 |   }
221 | }
222 | ```
223 | 
224 | ## Security Considerations
225 | 
226 | 1. Clients **SHOULD** implement user approval controls
227 | 2. Both parties **SHOULD** validate message content
228 | 3. Clients **SHOULD** respect model preference hints
229 | 4. Clients **SHOULD** implement rate limiting
230 | 5. Both parties **MUST** handle sensitive data appropriately
231 | 


--------------------------------------------------------------------------------
/docs/specification/2024-11-05/index.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Specification
  3 | ---
  4 | 
  5 | [Model Context Protocol](https://modelcontextprotocol.io) (MCP) is an open protocol that
  6 | enables seamless integration between LLM applications and external data sources and
  7 | tools. Whether you're building an AI-powered IDE, enhancing a chat interface, or creating
  8 | custom AI workflows, MCP provides a standardized way to connect LLMs with the context
  9 | they need.
 10 | 
 11 | This specification defines the authoritative protocol requirements, based on the
 12 | TypeScript schema in
 13 | [schema.ts](https://github.com/modelcontextprotocol/specification/blob/main/schema/2024-11-05/schema.ts).
 14 | 
 15 | For implementation guides and examples, visit
 16 | [modelcontextprotocol.io](https://modelcontextprotocol.io).
 17 | 
 18 | The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD
 19 | NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
 20 | interpreted as described in [BCP 14](https://datatracker.ietf.org/doc/html/bcp14)
 21 | [[RFC2119](https://datatracker.ietf.org/doc/html/rfc2119)]
 22 | [[RFC8174](https://datatracker.ietf.org/doc/html/rfc8174)] when, and only when, they
 23 | appear in all capitals, as shown here.
 24 | 
 25 | ## Overview
 26 | 
 27 | MCP provides a standardized way for applications to:
 28 | 
 29 | - Share contextual information with language models
 30 | - Expose tools and capabilities to AI systems
 31 | - Build composable integrations and workflows
 32 | 
 33 | The protocol uses [JSON-RPC](https://www.jsonrpc.org/) 2.0 messages to establish
 34 | communication between:
 35 | 
 36 | - **Hosts**: LLM applications that initiate connections
 37 | - **Clients**: Connectors within the host application
 38 | - **Servers**: Services that provide context and capabilities
 39 | 
 40 | MCP takes some inspiration from the
 41 | [Language Server Protocol](https://microsoft.github.io/language-server-protocol/), which
 42 | standardizes how to add support for programming languages across a whole ecosystem of
 43 | development tools. In a similar way, MCP standardizes how to integrate additional context
 44 | and tools into the ecosystem of AI applications.
 45 | 
 46 | ## Key Details
 47 | 
 48 | ### Base Protocol
 49 | 
 50 | - [JSON-RPC](https://www.jsonrpc.org/) message format
 51 | - Stateful connections
 52 | - Server and client capability negotiation
 53 | 
 54 | ### Features
 55 | 
 56 | Servers offer any of the following features to clients:
 57 | 
 58 | - **Resources**: Context and data, for the user or the AI model to use
 59 | - **Prompts**: Templated messages and workflows for users
 60 | - **Tools**: Functions for the AI model to execute
 61 | 
 62 | Clients may offer the following feature to servers:
 63 | 
 64 | - **Sampling**: Server-initiated agentic behaviors and recursive LLM interactions
 65 | 
 66 | ### Additional Utilities
 67 | 
 68 | - Configuration
 69 | - Progress tracking
 70 | - Cancellation
 71 | - Error reporting
 72 | - Logging
 73 | 
 74 | ## Security and Trust & Safety
 75 | 
 76 | The Model Context Protocol enables powerful capabilities through arbitrary data access
 77 | and code execution paths. With this power comes important security and trust
 78 | considerations that all implementors must carefully address.
 79 | 
 80 | ### Key Principles
 81 | 
 82 | 1. **User Consent and Control**
 83 |    - Users must explicitly consent to and understand all data access and operations
 84 |    - Users must retain control over what data is shared and what actions are taken
 85 |    - Implementors should provide clear UIs for reviewing and authorizing activities
 86 | 
 87 | 2. **Data Privacy**
 88 |    - Hosts must obtain explicit user consent before exposing user data to servers
 89 |    - Hosts must not transmit resource data elsewhere without user consent
 90 |    - User data should be protected with appropriate access controls
 91 | 
 92 | 3. **Tool Safety**
 93 |    - Tools represent arbitrary code execution and must be treated with appropriate
 94 |      caution
 95 |    - Hosts must obtain explicit user consent before invoking any tool
 96 |    - Users should understand what each tool does before authorizing its use
 97 | 
 98 | 4. **LLM Sampling Controls**
 99 |    - Users must explicitly approve any LLM sampling requests
100 |    - Users should control:
101 |      - Whether sampling occurs at all
102 |      - The actual prompt that will be sent
103 |      - What results the server can see
104 |    - The protocol intentionally limits server visibility into prompts
105 | 
106 | ### Implementation Guidelines
107 | 
108 | While MCP itself cannot enforce these security principles at the protocol level,
109 | implementors **SHOULD**:
110 | 
111 | 1. Build robust consent and authorization flows into their applications
112 | 2. Provide clear documentation of security implications
113 | 3. Implement appropriate access controls and data protections
114 | 4. Follow security best practices in their integrations
115 | 5. Consider privacy implications in their feature designs
116 | 
117 | ## Learn More
118 | 
119 | Explore the detailed specification for each protocol component:
120 | 
121 | <CardGroup cols={5}>
122 |   <Card
123 |     title="Architecture"
124 |     icon="sitemap"
125 |     href="/specification/2024-11-05/architecture"
126 |   />
127 |   <Card
128 |     title="Base Protocol"
129 |     icon="code"
130 |     href="/specification/2024-11-05/basic"
131 |   />
132 |   <Card
133 |     title="Server Features"
134 |     icon="server"
135 |     href="/specification/2024-11-05/server"
136 |   />
137 |   <Card
138 |     title="Client Features"
139 |     icon="user"
140 |     href="/specification/2024-11-05/client"
141 |   />
142 |   <Card title="Contributing" icon="pencil" href="/development/contributing" />
143 | </CardGroup>
144 | 


--------------------------------------------------------------------------------
/docs/specification/2024-11-05/server/index.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Overview
 3 | ---
 4 | 
 5 | <Info>**Protocol Revision**: 2024-11-05</Info>
 6 | 
 7 | Servers provide the fundamental building blocks for adding context to language models via
 8 | MCP. These primitives enable rich interactions between clients, servers, and language
 9 | models:
10 | 
11 | - **Prompts**: Pre-defined templates or instructions that guide language model
12 |   interactions
13 | - **Resources**: Structured data or content that provides additional context to the model
14 | - **Tools**: Executable functions that allow models to perform actions or retrieve
15 |   information
16 | 
17 | Each primitive can be summarized in the following control hierarchy:
18 | 
19 | | Primitive | Control                | Description                                        | Example                         |
20 | | --------- | ---------------------- | -------------------------------------------------- | ------------------------------- |
21 | | Prompts   | User-controlled        | Interactive templates invoked by user choice       | Slash commands, menu options    |
22 | | Resources | Application-controlled | Contextual data attached and managed by the client | File contents, git history      |
23 | | Tools     | Model-controlled       | Functions exposed to the LLM to take actions       | API POST requests, file writing |
24 | 
25 | Explore these key primitives in more detail below:
26 | 
27 | <CardGroup cols={3}>
28 |   <Card
29 |     title="Prompts"
30 |     icon="message"
31 |     href="/specification/2024-11-05/server/prompts"
32 |   />
33 |   <Card
34 |     title="Resources"
35 |     icon="file-lines"
36 |     href="/specification/2024-11-05/server/resources"
37 |   />
38 |   <Card
39 |     title="Tools"
40 |     icon="wrench"
41 |     href="/specification/2024-11-05/server/tools"
42 |   />
43 | </CardGroup>
44 | 


--------------------------------------------------------------------------------
/docs/specification/2024-11-05/server/prompts.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Prompts
  3 | weight: 10
  4 | ---
  5 | 
  6 | <Info>**Protocol Revision**: 2024-11-05</Info>
  7 | 
  8 | The Model Context Protocol (MCP) provides a standardized way for servers to expose prompt
  9 | templates to clients. Prompts allow servers to provide structured messages and
 10 | instructions for interacting with language models. Clients can discover available
 11 | prompts, retrieve their contents, and provide arguments to customize them.
 12 | 
 13 | ## User Interaction Model
 14 | 
 15 | Prompts are designed to be **user-controlled**, meaning they are exposed from servers to
 16 | clients with the intention of the user being able to explicitly select them for use.
 17 | 
 18 | Typically, prompts would be triggered through user-initiated commands in the user
 19 | interface, which allows users to naturally discover and invoke available prompts.
 20 | 
 21 | For example, as slash commands:
 22 | 
 23 | ![Example of prompt exposed as slash command](/specification/2024-11-05/server/slash-command.png)
 24 | 
 25 | However, implementors are free to expose prompts through any interface pattern that suits
 26 | their needs&mdash;the protocol itself does not mandate any specific user interaction
 27 | model.
 28 | 
 29 | ## Capabilities
 30 | 
 31 | Servers that support prompts **MUST** declare the `prompts` capability during
 32 | [initialization](/specification/2024-11-05/basic/lifecycle#initialization):
 33 | 
 34 | ```json
 35 | {
 36 |   "capabilities": {
 37 |     "prompts": {
 38 |       "listChanged": true
 39 |     }
 40 |   }
 41 | }
 42 | ```
 43 | 
 44 | `listChanged` indicates whether the server will emit notifications when the list of
 45 | available prompts changes.
 46 | 
 47 | ## Protocol Messages
 48 | 
 49 | ### Listing Prompts
 50 | 
 51 | To retrieve available prompts, clients send a `prompts/list` request. This operation
 52 | supports
 53 | [pagination](/specification/2024-11-05/server/utilities/pagination).
 54 | 
 55 | **Request:**
 56 | 
 57 | ```json
 58 | {
 59 |   "jsonrpc": "2.0",
 60 |   "id": 1,
 61 |   "method": "prompts/list",
 62 |   "params": {
 63 |     "cursor": "optional-cursor-value"
 64 |   }
 65 | }
 66 | ```
 67 | 
 68 | **Response:**
 69 | 
 70 | ```json
 71 | {
 72 |   "jsonrpc": "2.0",
 73 |   "id": 1,
 74 |   "result": {
 75 |     "prompts": [
 76 |       {
 77 |         "name": "code_review",
 78 |         "description": "Asks the LLM to analyze code quality and suggest improvements",
 79 |         "arguments": [
 80 |           {
 81 |             "name": "code",
 82 |             "description": "The code to review",
 83 |             "required": true
 84 |           }
 85 |         ]
 86 |       }
 87 |     ],
 88 |     "nextCursor": "next-page-cursor"
 89 |   }
 90 | }
 91 | ```
 92 | 
 93 | ### Getting a Prompt
 94 | 
 95 | To retrieve a specific prompt, clients send a `prompts/get` request. Arguments may be
 96 | auto-completed through [the completion API](/specification/2024-11-05/server/utilities/completion).
 97 | 
 98 | **Request:**
 99 | 
100 | ```json
101 | {
102 |   "jsonrpc": "2.0",
103 |   "id": 2,
104 |   "method": "prompts/get",
105 |   "params": {
106 |     "name": "code_review",
107 |     "arguments": {
108 |       "code": "def hello():\n    print('world')"
109 |     }
110 |   }
111 | }
112 | ```
113 | 
114 | **Response:**
115 | 
116 | ```json
117 | {
118 |   "jsonrpc": "2.0",
119 |   "id": 2,
120 |   "result": {
121 |     "description": "Code review prompt",
122 |     "messages": [
123 |       {
124 |         "role": "user",
125 |         "content": {
126 |           "type": "text",
127 |           "text": "Please review this Python code:\ndef hello():\n    print('world')"
128 |         }
129 |       }
130 |     ]
131 |   }
132 | }
133 | ```
134 | 
135 | ### List Changed Notification
136 | 
137 | When the list of available prompts changes, servers that declared the `listChanged`
138 | capability **SHOULD** send a notification:
139 | 
140 | ```json
141 | {
142 |   "jsonrpc": "2.0",
143 |   "method": "notifications/prompts/list_changed"
144 | }
145 | ```
146 | 
147 | ## Message Flow
148 | 
149 | ```mermaid
150 | sequenceDiagram
151 |     participant Client
152 |     participant Server
153 | 
154 |     Note over Client,Server: Discovery
155 |     Client->>Server: prompts/list
156 |     Server-->>Client: List of prompts
157 | 
158 |     Note over Client,Server: Usage
159 |     Client->>Server: prompts/get
160 |     Server-->>Client: Prompt content
161 | 
162 |     opt listChanged
163 |       Note over Client,Server: Changes
164 |       Server--)Client: prompts/list_changed
165 |       Client->>Server: prompts/list
166 |       Server-->>Client: Updated prompts
167 |     end
168 | ```
169 | 
170 | ## Data Types
171 | 
172 | ### Prompt
173 | 
174 | A prompt definition includes:
175 | 
176 | - `name`: Unique identifier for the prompt
177 | - `description`: Optional human-readable description
178 | - `arguments`: Optional list of arguments for customization
179 | 
180 | ### PromptMessage
181 | 
182 | Messages in a prompt can contain:
183 | 
184 | - `role`: Either "user" or "assistant" to indicate the speaker
185 | - `content`: One of the following content types:
186 | 
187 | #### Text Content
188 | 
189 | Text content represents plain text messages:
190 | 
191 | ```json
192 | {
193 |   "type": "text",
194 |   "text": "The text content of the message"
195 | }
196 | ```
197 | 
198 | This is the most common content type used for natural language interactions.
199 | 
200 | #### Image Content
201 | 
202 | Image content allows including visual information in messages:
203 | 
204 | ```json
205 | {
206 |   "type": "image",
207 |   "data": "base64-encoded-image-data",
208 |   "mimeType": "image/png"
209 | }
210 | ```
211 | 
212 | The image data **MUST** be base64-encoded and include a valid MIME type. This enables
213 | multi-modal interactions where visual context is important.
214 | 
215 | #### Embedded Resources
216 | 
217 | Embedded resources allow referencing server-side resources directly in messages:
218 | 
219 | ```json
220 | {
221 |   "type": "resource",
222 |   "resource": {
223 |     "uri": "resource://example",
224 |     "mimeType": "text/plain",
225 |     "text": "Resource content"
226 |   }
227 | }
228 | ```
229 | 
230 | Resources can contain either text or binary (blob) data and **MUST** include:
231 | 
232 | - A valid resource URI
233 | - The appropriate MIME type
234 | - Either text content or base64-encoded blob data
235 | 
236 | Embedded resources enable prompts to seamlessly incorporate server-managed content like
237 | documentation, code samples, or other reference materials directly into the conversation
238 | flow.
239 | 
240 | ## Error Handling
241 | 
242 | Servers **SHOULD** return standard JSON-RPC errors for common failure cases:
243 | 
244 | - Invalid prompt name: `-32602` (Invalid params)
245 | - Missing required arguments: `-32602` (Invalid params)
246 | - Internal errors: `-32603` (Internal error)
247 | 
248 | ## Implementation Considerations
249 | 
250 | 1. Servers **SHOULD** validate prompt arguments before processing
251 | 2. Clients **SHOULD** handle pagination for large prompt lists
252 | 3. Both parties **SHOULD** respect capability negotiation
253 | 
254 | ## Security
255 | 
256 | Implementations **MUST** carefully validate all prompt inputs and outputs to prevent
257 | injection attacks or unauthorized access to resources.
258 | 


--------------------------------------------------------------------------------
/docs/specification/2024-11-05/server/resource-picker.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/specification/2024-11-05/server/resource-picker.png


--------------------------------------------------------------------------------
/docs/specification/2024-11-05/server/resources.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Resources
  3 | type: docs
  4 | weight: 20
  5 | ---
  6 | 
  7 | <Info>**Protocol Revision**: 2024-11-05</Info>
  8 | 
  9 | The Model Context Protocol (MCP) provides a standardized way for servers to expose
 10 | resources to clients. Resources allow servers to share data that provides context to
 11 | language models, such as files, database schemas, or application-specific information.
 12 | Each resource is uniquely identified by a
 13 | [URI](https://datatracker.ietf.org/doc/html/rfc3986).
 14 | 
 15 | ## User Interaction Model
 16 | 
 17 | Resources in MCP are designed to be **application-driven**, with host applications
 18 | determining how to incorporate context based on their needs.
 19 | 
 20 | For example, applications could:
 21 | 
 22 | - Expose resources through UI elements for explicit selection, in a tree or list view
 23 | - Allow the user to search through and filter available resources
 24 | - Implement automatic context inclusion, based on heuristics or the AI model's selection
 25 | 
 26 | ![Example of resource context picker](/specification/2024-11-05/server/resource-picker.png)
 27 | 
 28 | However, implementations are free to expose resources through any interface pattern that
 29 | suits their needs&mdash;the protocol itself does not mandate any specific user
 30 | interaction model.
 31 | 
 32 | ## Capabilities
 33 | 
 34 | Servers that support resources **MUST** declare the `resources` capability:
 35 | 
 36 | ```json
 37 | {
 38 |   "capabilities": {
 39 |     "resources": {
 40 |       "subscribe": true,
 41 |       "listChanged": true
 42 |     }
 43 |   }
 44 | }
 45 | ```
 46 | 
 47 | The capability supports two optional features:
 48 | 
 49 | - `subscribe`: whether the client can subscribe to be notified of changes to individual
 50 |   resources.
 51 | - `listChanged`: whether the server will emit notifications when the list of available
 52 |   resources changes.
 53 | 
 54 | Both `subscribe` and `listChanged` are optional&mdash;servers can support neither,
 55 | either, or both:
 56 | 
 57 | ```json
 58 | {
 59 |   "capabilities": {
 60 |     "resources": {} // Neither feature supported
 61 |   }
 62 | }
 63 | ```
 64 | 
 65 | ```json
 66 | {
 67 |   "capabilities": {
 68 |     "resources": {
 69 |       "subscribe": true // Only subscriptions supported
 70 |     }
 71 |   }
 72 | }
 73 | ```
 74 | 
 75 | ```json
 76 | {
 77 |   "capabilities": {
 78 |     "resources": {
 79 |       "listChanged": true // Only list change notifications supported
 80 |     }
 81 |   }
 82 | }
 83 | ```
 84 | 
 85 | ## Protocol Messages
 86 | 
 87 | ### Listing Resources
 88 | 
 89 | To discover available resources, clients send a `resources/list` request. This operation
 90 | supports
 91 | [pagination](/specification/2024-11-05/server/utilities/pagination).
 92 | 
 93 | **Request:**
 94 | 
 95 | ```json
 96 | {
 97 |   "jsonrpc": "2.0",
 98 |   "id": 1,
 99 |   "method": "resources/list",
100 |   "params": {
101 |     "cursor": "optional-cursor-value"
102 |   }
103 | }
104 | ```
105 | 
106 | **Response:**
107 | 
108 | ```json
109 | {
110 |   "jsonrpc": "2.0",
111 |   "id": 1,
112 |   "result": {
113 |     "resources": [
114 |       {
115 |         "uri": "file:///project/src/main.rs",
116 |         "name": "main.rs",
117 |         "description": "Primary application entry point",
118 |         "mimeType": "text/x-rust"
119 |       }
120 |     ],
121 |     "nextCursor": "next-page-cursor"
122 |   }
123 | }
124 | ```
125 | 
126 | ### Reading Resources
127 | 
128 | To retrieve resource contents, clients send a `resources/read` request:
129 | 
130 | **Request:**
131 | 
132 | ```json
133 | {
134 |   "jsonrpc": "2.0",
135 |   "id": 2,
136 |   "method": "resources/read",
137 |   "params": {
138 |     "uri": "file:///project/src/main.rs"
139 |   }
140 | }
141 | ```
142 | 
143 | **Response:**
144 | 
145 | ```json
146 | {
147 |   "jsonrpc": "2.0",
148 |   "id": 2,
149 |   "result": {
150 |     "contents": [
151 |       {
152 |         "uri": "file:///project/src/main.rs",
153 |         "mimeType": "text/x-rust",
154 |         "text": "fn main() {\n    println!(\"Hello world!\");\n}"
155 |       }
156 |     ]
157 |   }
158 | }
159 | ```
160 | 
161 | ### Resource Templates
162 | 
163 | Resource templates allow servers to expose parameterized resources using
164 | [URI templates](https://datatracker.ietf.org/doc/html/rfc6570). Arguments may be
165 | auto-completed through [the completion API](/specification/2024-11-05/server/utilities/completion).
166 | 
167 | **Request:**
168 | 
169 | ```json
170 | {
171 |   "jsonrpc": "2.0",
172 |   "id": 3,
173 |   "method": "resources/templates/list"
174 | }
175 | ```
176 | 
177 | **Response:**
178 | 
179 | ```json
180 | {
181 |   "jsonrpc": "2.0",
182 |   "id": 3,
183 |   "result": {
184 |     "resourceTemplates": [
185 |       {
186 |         "uriTemplate": "file:///{path}",
187 |         "name": "Project Files",
188 |         "description": "Access files in the project directory",
189 |         "mimeType": "application/octet-stream"
190 |       }
191 |     ]
192 |   }
193 | }
194 | ```
195 | 
196 | ### List Changed Notification
197 | 
198 | When the list of available resources changes, servers that declared the `listChanged`
199 | capability **SHOULD** send a notification:
200 | 
201 | ```json
202 | {
203 |   "jsonrpc": "2.0",
204 |   "method": "notifications/resources/list_changed"
205 | }
206 | ```
207 | 
208 | ### Subscriptions
209 | 
210 | The protocol supports optional subscriptions to resource changes. Clients can subscribe
211 | to specific resources and receive notifications when they change:
212 | 
213 | **Subscribe Request:**
214 | 
215 | ```json
216 | {
217 |   "jsonrpc": "2.0",
218 |   "id": 4,
219 |   "method": "resources/subscribe",
220 |   "params": {
221 |     "uri": "file:///project/src/main.rs"
222 |   }
223 | }
224 | ```
225 | 
226 | **Update Notification:**
227 | 
228 | ```json
229 | {
230 |   "jsonrpc": "2.0",
231 |   "method": "notifications/resources/updated",
232 |   "params": {
233 |     "uri": "file:///project/src/main.rs"
234 |   }
235 | }
236 | ```
237 | 
238 | ## Message Flow
239 | 
240 | ```mermaid
241 | sequenceDiagram
242 |     participant Client
243 |     participant Server
244 | 
245 |     Note over Client,Server: Resource Discovery
246 |     Client->>Server: resources/list
247 |     Server-->>Client: List of resources
248 | 
249 |     Note over Client,Server: Resource Access
250 |     Client->>Server: resources/read
251 |     Server-->>Client: Resource contents
252 | 
253 |     Note over Client,Server: Subscriptions
254 |     Client->>Server: resources/subscribe
255 |     Server-->>Client: Subscription confirmed
256 | 
257 |     Note over Client,Server: Updates
258 |     Server--)Client: notifications/resources/updated
259 |     Client->>Server: resources/read
260 |     Server-->>Client: Updated contents
261 | ```
262 | 
263 | ## Data Types
264 | 
265 | ### Resource
266 | 
267 | A resource definition includes:
268 | 
269 | - `uri`: Unique identifier for the resource
270 | - `name`: Human-readable name
271 | - `description`: Optional description
272 | - `mimeType`: Optional MIME type
273 | 
274 | ### Resource Contents
275 | 
276 | Resources can contain either text or binary data:
277 | 
278 | #### Text Content
279 | 
280 | ```json
281 | {
282 |   "uri": "file:///example.txt",
283 |   "mimeType": "text/plain",
284 |   "text": "Resource content"
285 | }
286 | ```
287 | 
288 | #### Binary Content
289 | 
290 | ```json
291 | {
292 |   "uri": "file:///example.png",
293 |   "mimeType": "image/png",
294 |   "blob": "base64-encoded-data"
295 | }
296 | ```
297 | 
298 | ## Common URI Schemes
299 | 
300 | The protocol defines several standard URI schemes. This list not
301 | exhaustive&mdash;implementations are always free to use additional, custom URI schemes.
302 | 
303 | ### https://
304 | 
305 | Used to represent a resource available on the web.
306 | 
307 | Servers **SHOULD** use this scheme only when the client is able to fetch and load the
308 | resource directly from the web on its own—that is, it doesn’t need to read the resource
309 | via the MCP server.
310 | 
311 | For other use cases, servers **SHOULD** prefer to use another URI scheme, or define a
312 | custom one, even if the server will itself be downloading resource contents over the
313 | internet.
314 | 
315 | ### file://
316 | 
317 | Used to identify resources that behave like a filesystem. However, the resources do not
318 | need to map to an actual physical filesystem.
319 | 
320 | MCP servers **MAY** identify file:// resources with an
321 | [XDG MIME type](https://specifications.freedesktop.org/shared-mime-info-spec/0.14/ar01s02.html#id-1.3.14),
322 | like `inode/directory`, to represent non-regular files (such as directories) that don’t
323 | otherwise have a standard MIME type.
324 | 
325 | ### git://
326 | 
327 | Git version control integration.
328 | 
329 | ## Error Handling
330 | 
331 | Servers **SHOULD** return standard JSON-RPC errors for common failure cases:
332 | 
333 | - Resource not found: `-32002`
334 | - Internal errors: `-32603`
335 | 
336 | Example error:
337 | 
338 | ```json
339 | {
340 |   "jsonrpc": "2.0",
341 |   "id": 5,
342 |   "error": {
343 |     "code": -32002,
344 |     "message": "Resource not found",
345 |     "data": {
346 |       "uri": "file:///nonexistent.txt"
347 |     }
348 |   }
349 | }
350 | ```
351 | 
352 | ## Security Considerations
353 | 
354 | 1. Servers **MUST** validate all resource URIs
355 | 2. Access controls **SHOULD** be implemented for sensitive resources
356 | 3. Binary data **MUST** be properly encoded
357 | 4. Resource permissions **SHOULD** be checked before operations
358 | 


--------------------------------------------------------------------------------
/docs/specification/2024-11-05/server/slash-command.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/specification/2024-11-05/server/slash-command.png


--------------------------------------------------------------------------------
/docs/specification/2024-11-05/server/tools.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Tools
  3 | type: docs
  4 | weight: 40
  5 | ---
  6 | 
  7 | <Info>**Protocol Revision**: 2024-11-05</Info>
  8 | 
  9 | The Model Context Protocol (MCP) allows servers to expose tools that can be invoked by
 10 | language models. Tools enable models to interact with external systems, such as querying
 11 | databases, calling APIs, or performing computations. Each tool is uniquely identified by
 12 | a name and includes metadata describing its schema.
 13 | 
 14 | ## User Interaction Model
 15 | 
 16 | Tools in MCP are designed to be **model-controlled**, meaning that the language model can
 17 | discover and invoke tools automatically based on its contextual understanding and the
 18 | user's prompts.
 19 | 
 20 | However, implementations are free to expose tools through any interface pattern that
 21 | suits their needs&mdash;the protocol itself does not mandate any specific user
 22 | interaction model.
 23 | 
 24 | <Warning>
 25 | 
 26 | For trust & safety and security, there **SHOULD** always
 27 | be a human in the loop with the ability to deny tool invocations.
 28 | 
 29 | Applications **SHOULD**:
 30 | 
 31 | - Provide UI that makes clear which tools are being exposed to the AI model
 32 | - Insert clear visual indicators when tools are invoked
 33 | - Present confirmation prompts to the user for operations, to ensure a human is in the
 34 |   loop
 35 | 
 36 | </Warning>
 37 | 
 38 | ## Capabilities
 39 | 
 40 | Servers that support tools **MUST** declare the `tools` capability:
 41 | 
 42 | ```json
 43 | {
 44 |   "capabilities": {
 45 |     "tools": {
 46 |       "listChanged": true
 47 |     }
 48 |   }
 49 | }
 50 | ```
 51 | 
 52 | `listChanged` indicates whether the server will emit notifications when the list of
 53 | available tools changes.
 54 | 
 55 | ## Protocol Messages
 56 | 
 57 | ### Listing Tools
 58 | 
 59 | To discover available tools, clients send a `tools/list` request. This operation supports
 60 | [pagination](/specification/2024-11-05/server/utilities/pagination).
 61 | 
 62 | **Request:**
 63 | 
 64 | ```json
 65 | {
 66 |   "jsonrpc": "2.0",
 67 |   "id": 1,
 68 |   "method": "tools/list",
 69 |   "params": {
 70 |     "cursor": "optional-cursor-value"
 71 |   }
 72 | }
 73 | ```
 74 | 
 75 | **Response:**
 76 | 
 77 | ```json
 78 | {
 79 |   "jsonrpc": "2.0",
 80 |   "id": 1,
 81 |   "result": {
 82 |     "tools": [
 83 |       {
 84 |         "name": "get_weather",
 85 |         "description": "Get current weather information for a location",
 86 |         "inputSchema": {
 87 |           "type": "object",
 88 |           "properties": {
 89 |             "location": {
 90 |               "type": "string",
 91 |               "description": "City name or zip code"
 92 |             }
 93 |           },
 94 |           "required": ["location"]
 95 |         }
 96 |       }
 97 |     ],
 98 |     "nextCursor": "next-page-cursor"
 99 |   }
100 | }
101 | ```
102 | 
103 | ### Calling Tools
104 | 
105 | To invoke a tool, clients send a `tools/call` request:
106 | 
107 | **Request:**
108 | 
109 | ```json
110 | {
111 |   "jsonrpc": "2.0",
112 |   "id": 2,
113 |   "method": "tools/call",
114 |   "params": {
115 |     "name": "get_weather",
116 |     "arguments": {
117 |       "location": "New York"
118 |     }
119 |   }
120 | }
121 | ```
122 | 
123 | **Response:**
124 | 
125 | ```json
126 | {
127 |   "jsonrpc": "2.0",
128 |   "id": 2,
129 |   "result": {
130 |     "content": [
131 |       {
132 |         "type": "text",
133 |         "text": "Current weather in New York:\nTemperature: 72°F\nConditions: Partly cloudy"
134 |       }
135 |     ],
136 |     "isError": false
137 |   }
138 | }
139 | ```
140 | 
141 | ### List Changed Notification
142 | 
143 | When the list of available tools changes, servers that declared the `listChanged`
144 | capability **SHOULD** send a notification:
145 | 
146 | ```json
147 | {
148 |   "jsonrpc": "2.0",
149 |   "method": "notifications/tools/list_changed"
150 | }
151 | ```
152 | 
153 | ## Message Flow
154 | 
155 | ```mermaid
156 | sequenceDiagram
157 |     participant LLM
158 |     participant Client
159 |     participant Server
160 | 
161 |     Note over Client,Server: Discovery
162 |     Client->>Server: tools/list
163 |     Server-->>Client: List of tools
164 | 
165 |     Note over Client,LLM: Tool Selection
166 |     LLM->>Client: Select tool to use
167 | 
168 |     Note over Client,Server: Invocation
169 |     Client->>Server: tools/call
170 |     Server-->>Client: Tool result
171 |     Client->>LLM: Process result
172 | 
173 |     Note over Client,Server: Updates
174 |     Server--)Client: tools/list_changed
175 |     Client->>Server: tools/list
176 |     Server-->>Client: Updated tools
177 | ```
178 | 
179 | ## Data Types
180 | 
181 | ### Tool
182 | 
183 | A tool definition includes:
184 | 
185 | - `name`: Unique identifier for the tool
186 | - `description`: Human-readable description of functionality
187 | - `inputSchema`: JSON Schema defining expected parameters
188 | 
189 | ### Tool Result
190 | 
191 | Tool results can contain multiple content items of different types:
192 | 
193 | #### Text Content
194 | 
195 | ```json
196 | {
197 |   "type": "text",
198 |   "text": "Tool result text"
199 | }
200 | ```
201 | 
202 | #### Image Content
203 | 
204 | ```json
205 | {
206 |   "type": "image",
207 |   "data": "base64-encoded-data",
208 |   "mimeType": "image/png"
209 | }
210 | ```
211 | 
212 | #### Embedded Resources
213 | 
214 | [Resources](/specification/2024-11-05/server/resources) **MAY** be
215 | embedded, to provide additional context or data, behind a URI that can be subscribed to
216 | or fetched again by the client later:
217 | 
218 | ```json
219 | {
220 |   "type": "resource",
221 |   "resource": {
222 |     "uri": "resource://example",
223 |     "mimeType": "text/plain",
224 |     "text": "Resource content"
225 |   }
226 | }
227 | ```
228 | 
229 | ## Error Handling
230 | 
231 | Tools use two error reporting mechanisms:
232 | 
233 | 1. **Protocol Errors**: Standard JSON-RPC errors for issues like:
234 |    - Unknown tools
235 |    - Invalid arguments
236 |    - Server errors
237 | 
238 | 2. **Tool Execution Errors**: Reported in tool results with `isError: true`:
239 |    - API failures
240 |    - Invalid input data
241 |    - Business logic errors
242 | 
243 | Example protocol error:
244 | 
245 | ```json
246 | {
247 |   "jsonrpc": "2.0",
248 |   "id": 3,
249 |   "error": {
250 |     "code": -32602,
251 |     "message": "Unknown tool: invalid_tool_name"
252 |   }
253 | }
254 | ```
255 | 
256 | Example tool execution error:
257 | 
258 | ```json
259 | {
260 |   "jsonrpc": "2.0",
261 |   "id": 4,
262 |   "result": {
263 |     "content": [
264 |       {
265 |         "type": "text",
266 |         "text": "Failed to fetch weather data: API rate limit exceeded"
267 |       }
268 |     ],
269 |     "isError": true
270 |   }
271 | }
272 | ```
273 | 
274 | ## Security Considerations
275 | 
276 | 1. Servers **MUST**:
277 |    - Validate all tool inputs
278 |    - Implement proper access controls
279 |    - Rate limit tool invocations
280 |    - Sanitize tool outputs
281 | 
282 | 2. Clients **SHOULD**:
283 |    - Prompt for user confirmation on sensitive operations
284 |    - Show tool inputs to the user before calling the server, to avoid malicious or
285 |      accidental data exfiltration
286 |    - Validate tool results before passing to LLM
287 |    - Implement timeouts for tool calls
288 |    - Log tool usage for audit purposes
289 | 


--------------------------------------------------------------------------------
/docs/specification/2024-11-05/server/utilities/completion.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Completion
  3 | ---
  4 | 
  5 | <Info>**Protocol Revision**: 2024-11-05</Info>
  6 | 
  7 | The Model Context Protocol (MCP) provides a standardized way for servers to offer
  8 | argument autocompletion suggestions for prompts and resource URIs. This enables rich,
  9 | IDE-like experiences where users receive contextual suggestions while entering argument
 10 | values.
 11 | 
 12 | ## User Interaction Model
 13 | 
 14 | Completion in MCP is designed to support interactive user experiences similar to IDE code
 15 | completion.
 16 | 
 17 | For example, applications may show completion suggestions in a dropdown or popup menu as
 18 | users type, with the ability to filter and select from available options.
 19 | 
 20 | However, implementations are free to expose completion through any interface pattern that
 21 | suits their needs&mdash;the protocol itself does not mandate any specific user
 22 | interaction model.
 23 | 
 24 | ## Protocol Messages
 25 | 
 26 | ### Requesting Completions
 27 | 
 28 | To get completion suggestions, clients send a `completion/complete` request specifying
 29 | what is being completed through a reference type:
 30 | 
 31 | **Request:**
 32 | 
 33 | ```json
 34 | {
 35 |   "jsonrpc": "2.0",
 36 |   "id": 1,
 37 |   "method": "completion/complete",
 38 |   "params": {
 39 |     "ref": {
 40 |       "type": "ref/prompt",
 41 |       "name": "code_review"
 42 |     },
 43 |     "argument": {
 44 |       "name": "language",
 45 |       "value": "py"
 46 |     }
 47 |   }
 48 | }
 49 | ```
 50 | 
 51 | **Response:**
 52 | 
 53 | ```json
 54 | {
 55 |   "jsonrpc": "2.0",
 56 |   "id": 1,
 57 |   "result": {
 58 |     "completion": {
 59 |       "values": ["python", "pytorch", "pyside"],
 60 |       "total": 10,
 61 |       "hasMore": true
 62 |     }
 63 |   }
 64 | }
 65 | ```
 66 | 
 67 | ### Reference Types
 68 | 
 69 | The protocol supports two types of completion references:
 70 | 
 71 | | Type           | Description                 | Example                                             |
 72 | | -------------- | --------------------------- | --------------------------------------------------- |
 73 | | `ref/prompt`   | References a prompt by name | `{"type": "ref/prompt", "name": "code_review"}`     |
 74 | | `ref/resource` | References a resource URI   | `{"type": "ref/resource", "uri": "file:///{path}"}` |
 75 | 
 76 | ### Completion Results
 77 | 
 78 | Servers return an array of completion values ranked by relevance, with:
 79 | 
 80 | - Maximum 100 items per response
 81 | - Optional total number of available matches
 82 | - Boolean indicating if additional results exist
 83 | 
 84 | ## Message Flow
 85 | 
 86 | ```mermaid
 87 | sequenceDiagram
 88 |     participant Client
 89 |     participant Server
 90 | 
 91 |     Note over Client: User types argument
 92 |     Client->>Server: completion/complete
 93 |     Server-->>Client: Completion suggestions
 94 | 
 95 |     Note over Client: User continues typing
 96 |     Client->>Server: completion/complete
 97 |     Server-->>Client: Refined suggestions
 98 | ```
 99 | 
100 | ## Data Types
101 | 
102 | ### CompleteRequest
103 | 
104 | - `ref`: A `PromptReference` or `ResourceReference`
105 | - `argument`: Object containing:
106 |   - `name`: Argument name
107 |   - `value`: Current value
108 | 
109 | ### CompleteResult
110 | 
111 | - `completion`: Object containing:
112 |   - `values`: Array of suggestions (max 100)
113 |   - `total`: Optional total matches
114 |   - `hasMore`: Additional results flag
115 | 
116 | ## Implementation Considerations
117 | 
118 | 1. Servers **SHOULD**:
119 |    - Return suggestions sorted by relevance
120 |    - Implement fuzzy matching where appropriate
121 |    - Rate limit completion requests
122 |    - Validate all inputs
123 | 
124 | 2. Clients **SHOULD**:
125 |    - Debounce rapid completion requests
126 |    - Cache completion results where appropriate
127 |    - Handle missing or partial results gracefully
128 | 
129 | ## Security
130 | 
131 | Implementations **MUST**:
132 | 
133 | - Validate all completion inputs
134 | - Implement appropriate rate limiting
135 | - Control access to sensitive suggestions
136 | - Prevent completion-based information disclosure
137 | 


--------------------------------------------------------------------------------
/docs/specification/2024-11-05/server/utilities/logging.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Logging
  3 | ---
  4 | 
  5 | <Info>**Protocol Revision**: 2024-11-05</Info>
  6 | 
  7 | The Model Context Protocol (MCP) provides a standardized way for servers to send
  8 | structured log messages to clients. Clients can control logging verbosity by setting
  9 | minimum log levels, with servers sending notifications containing severity levels,
 10 | optional logger names, and arbitrary JSON-serializable data.
 11 | 
 12 | ## User Interaction Model
 13 | 
 14 | Implementations are free to expose logging through any interface pattern that suits their
 15 | needs&mdash;the protocol itself does not mandate any specific user interaction model.
 16 | 
 17 | ## Capabilities
 18 | 
 19 | Servers that emit log message notifications **MUST** declare the `logging` capability:
 20 | 
 21 | ```json
 22 | {
 23 |   "capabilities": {
 24 |     "logging": {}
 25 |   }
 26 | }
 27 | ```
 28 | 
 29 | ## Log Levels
 30 | 
 31 | The protocol follows the standard syslog severity levels specified in
 32 | [RFC 5424](https://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1):
 33 | 
 34 | | Level     | Description                      | Example Use Case           |
 35 | | --------- | -------------------------------- | -------------------------- |
 36 | | debug     | Detailed debugging information   | Function entry/exit points |
 37 | | info      | General informational messages   | Operation progress updates |
 38 | | notice    | Normal but significant events    | Configuration changes      |
 39 | | warning   | Warning conditions               | Deprecated feature usage   |
 40 | | error     | Error conditions                 | Operation failures         |
 41 | | critical  | Critical conditions              | System component failures  |
 42 | | alert     | Action must be taken immediately | Data corruption detected   |
 43 | | emergency | System is unusable               | Complete system failure    |
 44 | 
 45 | ## Protocol Messages
 46 | 
 47 | ### Setting Log Level
 48 | 
 49 | To configure the minimum log level, clients **MAY** send a `logging/setLevel` request:
 50 | 
 51 | **Request:**
 52 | 
 53 | ```json
 54 | {
 55 |   "jsonrpc": "2.0",
 56 |   "id": 1,
 57 |   "method": "logging/setLevel",
 58 |   "params": {
 59 |     "level": "info"
 60 |   }
 61 | }
 62 | ```
 63 | 
 64 | ### Log Message Notifications
 65 | 
 66 | Servers send log messages using `notifications/message` notifications:
 67 | 
 68 | ```json
 69 | {
 70 |   "jsonrpc": "2.0",
 71 |   "method": "notifications/message",
 72 |   "params": {
 73 |     "level": "error",
 74 |     "logger": "database",
 75 |     "data": {
 76 |       "error": "Connection failed",
 77 |       "details": {
 78 |         "host": "localhost",
 79 |         "port": 5432
 80 |       }
 81 |     }
 82 |   }
 83 | }
 84 | ```
 85 | 
 86 | ## Message Flow
 87 | 
 88 | ```mermaid
 89 | sequenceDiagram
 90 |     participant Client
 91 |     participant Server
 92 | 
 93 |     Note over Client,Server: Configure Logging
 94 |     Client->>Server: logging/setLevel (info)
 95 |     Server-->>Client: Empty Result
 96 | 
 97 |     Note over Client,Server: Server Activity
 98 |     Server--)Client: notifications/message (info)
 99 |     Server--)Client: notifications/message (warning)
100 |     Server--)Client: notifications/message (error)
101 | 
102 |     Note over Client,Server: Level Change
103 |     Client->>Server: logging/setLevel (error)
104 |     Server-->>Client: Empty Result
105 |     Note over Server: Only sends error level<br/>and above
106 | ```
107 | 
108 | ## Error Handling
109 | 
110 | Servers **SHOULD** return standard JSON-RPC errors for common failure cases:
111 | 
112 | - Invalid log level: `-32602` (Invalid params)
113 | - Configuration errors: `-32603` (Internal error)
114 | 
115 | ## Implementation Considerations
116 | 
117 | 1. Servers **SHOULD**:
118 |    - Rate limit log messages
119 |    - Include relevant context in data field
120 |    - Use consistent logger names
121 |    - Remove sensitive information
122 | 
123 | 2. Clients **MAY**:
124 |    - Present log messages in the UI
125 |    - Implement log filtering/search
126 |    - Display severity visually
127 |    - Persist log messages
128 | 
129 | ## Security
130 | 
131 | 1. Log messages **MUST NOT** contain:
132 |    - Credentials or secrets
133 |    - Personal identifying information
134 |    - Internal system details that could aid attacks
135 | 
136 | 2. Implementations **SHOULD**:
137 |    - Rate limit messages
138 |    - Validate all data fields
139 |    - Control log access
140 |    - Monitor for sensitive content
141 | 


--------------------------------------------------------------------------------
/docs/specification/2024-11-05/server/utilities/pagination.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Pagination
 3 | ---
 4 | 
 5 | <Info>**Protocol Revision**: 2024-11-05</Info>
 6 | 
 7 | The Model Context Protocol (MCP) supports paginating list operations that may return
 8 | large result sets. Pagination allows servers to yield results in smaller chunks rather
 9 | than all at once.
10 | 
11 | Pagination is especially important when connecting to external services over the
12 | internet, but also useful for local integrations to avoid performance issues with large
13 | data sets.
14 | 
15 | ## Pagination Model
16 | 
17 | Pagination in MCP uses an opaque cursor-based approach, instead of numbered pages.
18 | 
19 | - The **cursor** is an opaque string token, representing a position in the result set
20 | - **Page size** is determined by the server, and clients **MUST NOT** assume a fixed page
21 |   size
22 | 
23 | ## Response Format
24 | 
25 | Pagination starts when the server sends a **response** that includes:
26 | 
27 | - The current page of results
28 | - An optional `nextCursor` field if more results exist
29 | 
30 | ```json
31 | {
32 |   "jsonrpc": "2.0",
33 |   "id": "123",
34 |   "result": {
35 |     "resources": [...],
36 |     "nextCursor": "eyJwYWdlIjogM30="
37 |   }
38 | }
39 | ```
40 | 
41 | ## Request Format
42 | 
43 | After receiving a cursor, the client can _continue_ paginating by issuing a request
44 | including that cursor:
45 | 
46 | ```json
47 | {
48 |   "jsonrpc": "2.0",
49 |   "method": "resources/list",
50 |   "params": {
51 |     "cursor": "eyJwYWdlIjogMn0="
52 |   }
53 | }
54 | ```
55 | 
56 | ## Pagination Flow
57 | 
58 | ```mermaid
59 | sequenceDiagram
60 |     participant Client
61 |     participant Server
62 | 
63 |     Client->>Server: List Request (no cursor)
64 |     loop Pagination Loop
65 |       Server-->>Client: Page of results + nextCursor
66 |       Client->>Server: List Request (with cursor)
67 |     end
68 | ```
69 | 
70 | ## Operations Supporting Pagination
71 | 
72 | The following MCP operations support pagination:
73 | 
74 | - `resources/list` - List available resources
75 | - `resources/templates/list` - List resource templates
76 | - `prompts/list` - List available prompts
77 | - `tools/list` - List available tools
78 | 
79 | ## Implementation Guidelines
80 | 
81 | 1. Servers **SHOULD**:
82 |    - Provide stable cursors
83 |    - Handle invalid cursors gracefully
84 | 
85 | 2. Clients **SHOULD**:
86 |    - Treat a missing `nextCursor` as the end of results
87 |    - Support both paginated and non-paginated flows
88 | 
89 | 3. Clients **MUST** treat cursors as opaque tokens:
90 |    - Don't make assumptions about cursor format
91 |    - Don't attempt to parse or modify cursors
92 |    - Don't persist cursors across sessions
93 | 
94 | ## Error Handling
95 | 
96 | Invalid cursors **SHOULD** result in an error with code -32602 (Invalid params).
97 | 


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/architecture/index.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Architecture
  3 | ---
  4 | 
  5 | The Model Context Protocol (MCP) follows a client-host-server architecture where each
  6 | host can run multiple client instances. This architecture enables users to integrate AI
  7 | capabilities across applications while maintaining clear security boundaries and
  8 | isolating concerns. Built on JSON-RPC, MCP provides a stateful session protocol focused
  9 | on context exchange and sampling coordination between clients and servers.
 10 | 
 11 | ## Core Components
 12 | 
 13 | ```mermaid
 14 | graph LR
 15 |     subgraph "Application Host Process"
 16 |         H[Host]
 17 |         C1[Client 1]
 18 |         C2[Client 2]
 19 |         C3[Client 3]
 20 |         H --> C1
 21 |         H --> C2
 22 |         H --> C3
 23 |     end
 24 | 
 25 |     subgraph "Local machine"
 26 |         S1[Server 1<br>Files & Git]
 27 |         S2[Server 2<br>Database]
 28 |         R1[("Local<br>Resource A")]
 29 |         R2[("Local<br>Resource B")]
 30 | 
 31 |         C1 --> S1
 32 |         C2 --> S2
 33 |         S1 <--> R1
 34 |         S2 <--> R2
 35 |     end
 36 | 
 37 |     subgraph "Internet"
 38 |         S3[Server 3<br>External APIs]
 39 |         R3[("Remote<br>Resource C")]
 40 | 
 41 |         C3 --> S3
 42 |         S3 <--> R3
 43 |     end
 44 | ```
 45 | 
 46 | ### Host
 47 | 
 48 | The host process acts as the container and coordinator:
 49 | 
 50 | - Creates and manages multiple client instances
 51 | - Controls client connection permissions and lifecycle
 52 | - Enforces security policies and consent requirements
 53 | - Handles user authorization decisions
 54 | - Coordinates AI/LLM integration and sampling
 55 | - Manages context aggregation across clients
 56 | 
 57 | ### Clients
 58 | 
 59 | Each client is created by the host and maintains an isolated server connection:
 60 | 
 61 | - Establishes one stateful session per server
 62 | - Handles protocol negotiation and capability exchange
 63 | - Routes protocol messages bidirectionally
 64 | - Manages subscriptions and notifications
 65 | - Maintains security boundaries between servers
 66 | 
 67 | A host application creates and manages multiple clients, with each client having a 1:1
 68 | relationship with a particular server.
 69 | 
 70 | ### Servers
 71 | 
 72 | Servers provide specialized context and capabilities:
 73 | 
 74 | - Expose resources, tools and prompts via MCP primitives
 75 | - Operate independently with focused responsibilities
 76 | - Request sampling through client interfaces
 77 | - Must respect security constraints
 78 | - Can be local processes or remote services
 79 | 
 80 | ## Design Principles
 81 | 
 82 | MCP is built on several key design principles that inform its architecture and
 83 | implementation:
 84 | 
 85 | 1. **Servers should be extremely easy to build**
 86 |    - Host applications handle complex orchestration responsibilities
 87 |    - Servers focus on specific, well-defined capabilities
 88 |    - Simple interfaces minimize implementation overhead
 89 |    - Clear separation enables maintainable code
 90 | 
 91 | 2. **Servers should be highly composable**
 92 |    - Each server provides focused functionality in isolation
 93 |    - Multiple servers can be combined seamlessly
 94 |    - Shared protocol enables interoperability
 95 |    - Modular design supports extensibility
 96 | 
 97 | 3. **Servers should not be able to read the whole conversation, nor "see into" other
 98 |    servers**
 99 |    - Servers receive only necessary contextual information
100 |    - Full conversation history stays with the host
101 |    - Each server connection maintains isolation
102 |    - Cross-server interactions are controlled by the host
103 |    - Host process enforces security boundaries
104 | 
105 | 4. **Features can be added to servers and clients progressively**
106 |    - Core protocol provides minimal required functionality
107 |    - Additional capabilities can be negotiated as needed
108 |    - Servers and clients evolve independently
109 |    - Protocol designed for future extensibility
110 |    - Backwards compatibility is maintained
111 | 
112 | ## Capability Negotiation
113 | 
114 | The Model Context Protocol uses a capability-based negotiation system where clients and
115 | servers explicitly declare their supported features during initialization. Capabilities
116 | determine which protocol features and primitives are available during a session.
117 | 
118 | - Servers declare capabilities like resource subscriptions, tool support, and prompt
119 |   templates
120 | - Clients declare capabilities like sampling support and notification handling
121 | - Both parties must respect declared capabilities throughout the session
122 | - Additional capabilities can be negotiated through extensions to the protocol
123 | 
124 | ```mermaid
125 | sequenceDiagram
126 |     participant Host
127 |     participant Client
128 |     participant Server
129 | 
130 |     Host->>+Client: Initialize client
131 |     Client->>+Server: Initialize session with capabilities
132 |     Server-->>Client: Respond with supported capabilities
133 | 
134 |     Note over Host,Server: Active Session with Negotiated Features
135 | 
136 |     loop Client Requests
137 |         Host->>Client: User- or model-initiated action
138 |         Client->>Server: Request (tools/resources)
139 |         Server-->>Client: Response
140 |         Client-->>Host: Update UI or respond to model
141 |     end
142 | 
143 |     loop Server Requests
144 |         Server->>Client: Request (sampling)
145 |         Client->>Host: Forward to AI
146 |         Host-->>Client: AI response
147 |         Client-->>Server: Response
148 |     end
149 | 
150 |     loop Notifications
151 |         Server--)Client: Resource updates
152 |         Client--)Server: Status changes
153 |     end
154 | 
155 |     Host->>Client: Terminate
156 |     Client->>-Server: End session
157 |     deactivate Server
158 | ```
159 | 
160 | Each capability unlocks specific protocol features for use during the session. For
161 | example:
162 | 
163 | - Implemented [server features](/specification/2025-03-26/server) must be advertised in the
164 |   server's capabilities
165 | - Emitting resource subscription notifications requires the server to declare
166 |   subscription support
167 | - Tool invocation requires the server to declare tool capabilities
168 | - [Sampling](/specification/2025-03-26/client) requires the client to declare support in its
169 |   capabilities
170 | 
171 | This capability negotiation ensures clients and servers have a clear understanding of
172 | supported functionality while maintaining protocol extensibility.
173 | 


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/basic/authorization.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Authorization
  3 | ---
  4 | 
  5 | <Info>**Protocol Revision**: 2025-03-26</Info>
  6 | 
  7 | ## Introduction
  8 | 
  9 | ### Purpose and Scope
 10 | 
 11 | The Model Context Protocol provides authorization capabilities at the transport level,
 12 | enabling MCP clients to make requests to restricted MCP servers on behalf of resource
 13 | owners. This specification defines the authorization flow for HTTP-based transports.
 14 | 
 15 | ### Protocol Requirements
 16 | 
 17 | Authorization is **OPTIONAL** for MCP implementations. When supported:
 18 | 
 19 | - Implementations using an HTTP-based transport **SHOULD** conform to this specification.
 20 | - Implementations using an STDIO transport **SHOULD NOT** follow this specification, and
 21 |   instead retrieve credentials from the environment.
 22 | - Implementations using alternative transports **MUST** follow established security best
 23 |   practices for their protocol.
 24 | 
 25 | ### Standards Compliance
 26 | 
 27 | This authorization mechanism is based on established specifications listed below, but
 28 | implements a selected subset of their features to ensure security and interoperability
 29 | while maintaining simplicity:
 30 | 
 31 | - [OAuth 2.1 IETF DRAFT](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-12)
 32 | - OAuth 2.0 Authorization Server Metadata
 33 |   ([RFC8414](https://datatracker.ietf.org/doc/html/rfc8414))
 34 | - OAuth 2.0 Dynamic Client Registration Protocol
 35 |   ([RFC7591](https://datatracker.ietf.org/doc/html/rfc7591))
 36 | 
 37 | ## Authorization Flow
 38 | 
 39 | ### Overview
 40 | 
 41 | 1. MCP auth implementations **MUST** implement OAuth 2.1 with appropriate security
 42 |    measures for both confidential and public clients.
 43 | 
 44 | 2. MCP auth implementations **SHOULD** support the OAuth 2.0 Dynamic Client Registration
 45 |    Protocol ([RFC7591](https://datatracker.ietf.org/doc/html/rfc7591)).
 46 | 
 47 | 3. MCP servers **SHOULD** and MCP clients **MUST** implement OAuth 2.0 Authorization
 48 |    Server Metadata ([RFC8414](https://datatracker.ietf.org/doc/html/rfc8414)). Servers
 49 |    that do not support Authorization Server Metadata **MUST** follow the default URI
 50 |    schema.
 51 | 
 52 | ### OAuth Grant Types
 53 | 
 54 | OAuth specifies different flows or grant types, which are different ways of obtaining an
 55 | access token. Each of these targets different use cases and scenarios.
 56 | 
 57 | MCP servers **SHOULD** support the OAuth grant types that best align with the intended
 58 | audience. For instance:
 59 | 
 60 | 1. Authorization Code: useful when the client is acting on behalf of a (human) end user.
 61 |    - For instance, an agent calls an MCP tool implemented by a SaaS system.
 62 | 2. Client Credentials: the client is another application (not a human)
 63 |    - For instance, an agent calls a secure MCP tool to check inventory at a specific
 64 |      store. No need to impersonate the end user.
 65 | 
 66 | ### Example: authorization code grant
 67 | 
 68 | This demonstrates the OAuth 2.1 flow for the authorization code grant type, used for user
 69 | auth.
 70 | 
 71 | **NOTE**: The following example assumes the MCP server is also functioning as the
 72 | authorization server. However, the authorization server may be deployed as its own
 73 | distinct service.
 74 | 
 75 | A human user completes the OAuth flow through a web browser, obtaining an access token
 76 | that identifies them personally and allows the client to act on their behalf.
 77 | 
 78 | When authorization is required and not yet proven by the client, servers **MUST** respond
 79 | with _HTTP 401 Unauthorized_.
 80 | 
 81 | Clients initiate the
 82 | [OAuth 2.1 IETF DRAFT](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-12#name-authorization-code-grant)
 83 | authorization flow after receiving the _HTTP 401 Unauthorized_.
 84 | 
 85 | The following demonstrates the basic OAuth 2.1 for public clients using PKCE.
 86 | 
 87 | ```mermaid
 88 | sequenceDiagram
 89 |     participant B as User-Agent (Browser)
 90 |     participant C as Client
 91 |     participant M as MCP Server
 92 | 
 93 |     C->>M: MCP Request
 94 |     M->>C: HTTP 401 Unauthorized
 95 |     Note over C: Generate code_verifier and code_challenge
 96 |     C->>B: Open browser with authorization URL + code_challenge
 97 |     B->>M: GET /authorize
 98 |     Note over M: User logs in and authorizes
 99 |     M->>B: Redirect to callback URL with auth code
100 |     B->>C: Callback with authorization code
101 |     C->>M: Token Request with code + code_verifier
102 |     M->>C: Access Token (+ Refresh Token)
103 |     C->>M: MCP Request with Access Token
104 |     Note over C,M: Begin standard MCP message exchange
105 | ```
106 | 
107 | ### Server Metadata Discovery
108 | 
109 | For server capability discovery:
110 | 
111 | - MCP clients _MUST_ follow the OAuth 2.0 Authorization Server Metadata protocol defined
112 |   in [RFC8414](https://datatracker.ietf.org/doc/html/rfc8414).
113 | - MCP server _SHOULD_ follow the OAuth 2.0 Authorization Server Metadata protocol.
114 | - MCP servers that do not support the OAuth 2.0 Authorization Server Metadata protocol,
115 |   _MUST_ support fallback URLs.
116 | 
117 | The discovery flow is illustrated below:
118 | 
119 | ```mermaid
120 | sequenceDiagram
121 |     participant C as Client
122 |     participant S as Server
123 | 
124 |     C->>S: GET /.well-known/oauth-authorization-server
125 |     alt Discovery Success
126 |         S->>C: 200 OK + Metadata Document
127 |         Note over C: Use endpoints from metadata
128 |     else Discovery Failed
129 |         S->>C: 404 Not Found
130 |         Note over C: Fall back to default endpoints
131 |     end
132 |     Note over C: Continue with authorization flow
133 | ```
134 | 
135 | #### Server Metadata Discovery Headers
136 | 
137 | MCP clients _SHOULD_ include the header `MCP-Protocol-Version: <protocol-version>` during
138 | Server Metadata Discovery to allow the MCP server to respond based on the MCP protocol
139 | version.
140 | 
141 | For example: `MCP-Protocol-Version: 2024-11-05`
142 | 
143 | #### Authorization Base URL
144 | 
145 | The authorization base URL **MUST** be determined from the MCP server URL by discarding
146 | any existing `path` component. For example:
147 | 
148 | If the MCP server URL is `https://api.example.com/v1/mcp`, then:
149 | 
150 | - The authorization base URL is `https://api.example.com`
151 | - The metadata endpoint **MUST** be at
152 |   `https://api.example.com/.well-known/oauth-authorization-server`
153 | 
154 | This ensures authorization endpoints are consistently located at the root level of the
155 | domain hosting the MCP server, regardless of any path components in the MCP server URL.
156 | 
157 | #### Fallbacks for Servers without Metadata Discovery
158 | 
159 | For servers that do not implement OAuth 2.0 Authorization Server Metadata, clients
160 | **MUST** use the following default endpoint paths relative to the [authorization base
161 | URL](#authorization-base-url):
162 | 
163 | | Endpoint               | Default Path | Description                          |
164 | | ---------------------- | ------------ | ------------------------------------ |
165 | | Authorization Endpoint | /authorize   | Used for authorization requests      |
166 | | Token Endpoint         | /token       | Used for token exchange & refresh    |
167 | | Registration Endpoint  | /register    | Used for dynamic client registration |
168 | 
169 | For example, with an MCP server hosted at `https://api.example.com/v1/mcp`, the default
170 | endpoints would be:
171 | 
172 | - `https://api.example.com/authorize`
173 | - `https://api.example.com/token`
174 | - `https://api.example.com/register`
175 | 
176 | Clients **MUST** first attempt to discover endpoints via the metadata document before
177 | falling back to default paths. When using default paths, all other protocol requirements
178 | remain unchanged.
179 | 
180 | ### Dynamic Client Registration
181 | 
182 | MCP clients and servers **SHOULD** support the
183 | [OAuth 2.0 Dynamic Client Registration Protocol](https://datatracker.ietf.org/doc/html/rfc7591)
184 | to allow MCP clients to obtain OAuth client IDs without user interaction. This provides a
185 | standardized way for clients to automatically register with new servers, which is crucial
186 | for MCP because:
187 | 
188 | - Clients cannot know all possible servers in advance
189 | - Manual registration would create friction for users
190 | - It enables seamless connection to new servers
191 | - Servers can implement their own registration policies
192 | 
193 | Any MCP servers that _do not_ support Dynamic Client Registration need to provide
194 | alternative ways to obtain a client ID (and, if applicable, client secret). For one of
195 | these servers, MCP clients will have to either:
196 | 
197 | 1. Hardcode a client ID (and, if applicable, client secret) specifically for that MCP
198 |    server, or
199 | 2. Present a UI to users that allows them to enter these details, after registering an
200 |    OAuth client themselves (e.g., through a configuration interface hosted by the
201 |    server).
202 | 
203 | ### Authorization Flow Steps
204 | 
205 | The complete Authorization flow proceeds as follows:
206 | 
207 | ```mermaid
208 | sequenceDiagram
209 |     participant B as User-Agent (Browser)
210 |     participant C as Client
211 |     participant M as MCP Server
212 | 
213 |     C->>M: GET /.well-known/oauth-authorization-server
214 |     alt Server Supports Discovery
215 |         M->>C: Authorization Server Metadata
216 |     else No Discovery
217 |         M->>C: 404 (Use default endpoints)
218 |     end
219 | 
220 |     alt Dynamic Client Registration
221 |         C->>M: POST /register
222 |         M->>C: Client Credentials
223 |     end
224 | 
225 |     Note over C: Generate PKCE Parameters
226 |     C->>B: Open browser with authorization URL + code_challenge
227 |     B->>M: Authorization Request
228 |     Note over M: User /authorizes
229 |     M->>B: Redirect to callback with authorization code
230 |     B->>C: Authorization code callback
231 |     C->>M: Token Request + code_verifier
232 |     M->>C: Access Token (+ Refresh Token)
233 |     C->>M: API Requests with Access Token
234 | ```
235 | 
236 | #### Decision Flow Overview
237 | 
238 | ```mermaid
239 | flowchart TD
240 |     A[Start Auth Flow] --> B{Check Metadata Discovery}
241 |     B -->|Available| C[Use Metadata Endpoints]
242 |     B -->|Not Available| D[Use Default Endpoints]
243 | 
244 |     C --> G{Check Registration Endpoint}
245 |     D --> G
246 | 
247 |     G -->|Available| H[Perform Dynamic Registration]
248 |     G -->|Not Available| I[Alternative Registration Required]
249 | 
250 |     H --> J[Start OAuth Flow]
251 |     I --> J
252 | 
253 |     J --> K[Generate PKCE Parameters]
254 |     K --> L[Request Authorization]
255 |     L --> M[User Authorization]
256 |     M --> N[Exchange Code for Tokens]
257 |     N --> O[Use Access Token]
258 | ```
259 | 
260 | ### Access Token Usage
261 | 
262 | #### Token Requirements
263 | 
264 | Access token handling **MUST** conform to
265 | [OAuth 2.1 Section 5](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-12#section-5)
266 | requirements for resource requests. Specifically:
267 | 
268 | 1. MCP client **MUST** use the Authorization request header field
269 |    [Section 5.1.1](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-12#section-5.1.1):
270 | 
271 | ```
272 | Authorization: Bearer <access-token>
273 | ```
274 | 
275 | Note that authorization **MUST** be included in every HTTP request from client to server,
276 | even if they are part of the same logical session.
277 | 
278 | 2. Access tokens **MUST NOT** be included in the URI query string
279 | 
280 | Example request:
281 | 
282 | ```http
283 | GET /v1/contexts HTTP/1.1
284 | Host: mcp.example.com
285 | Authorization: Bearer eyJhbGciOiJIUzI1NiIs...
286 | ```
287 | 
288 | #### Token Handling
289 | 
290 | Resource servers **MUST** validate access tokens as described in
291 | [Section 5.2](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-12#section-5.2).
292 | If validation fails, servers **MUST** respond according to
293 | [Section 5.3](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-12#section-5.3)
294 | error handling requirements. Invalid or expired tokens **MUST** receive a HTTP 401
295 | response.
296 | 
297 | ### Security Considerations
298 | 
299 | The following security requirements **MUST** be implemented:
300 | 
301 | 1. Clients **MUST** securely store tokens following OAuth 2.0 best practices
302 | 2. Servers **SHOULD** enforce token expiration and rotation
303 | 3. All authorization endpoints **MUST** be served over HTTPS
304 | 4. Servers **MUST** validate redirect URIs to prevent open redirect vulnerabilities
305 | 5. Redirect URIs **MUST** be either localhost URLs or HTTPS URLs
306 | 
307 | ### Error Handling
308 | 
309 | Servers **MUST** return appropriate HTTP status codes for authorization errors:
310 | 
311 | | Status Code | Description  | Usage                                      |
312 | | ----------- | ------------ | ------------------------------------------ |
313 | | 401         | Unauthorized | Authorization required or token invalid    |
314 | | 403         | Forbidden    | Invalid scopes or insufficient permissions |
315 | | 400         | Bad Request  | Malformed authorization request            |
316 | 
317 | ### Implementation Requirements
318 | 
319 | 1. Implementations **MUST** follow OAuth 2.1 security best practices
320 | 2. PKCE is **REQUIRED** for all clients
321 | 3. Token rotation **SHOULD** be implemented for enhanced security
322 | 4. Token lifetimes **SHOULD** be limited based on security requirements
323 | 
324 | ### Third-Party Authorization Flow
325 | 
326 | #### Overview
327 | 
328 | MCP servers **MAY** support delegated authorization through third-party authorization
329 | servers. In this flow, the MCP server acts as both an OAuth client (to the third-party
330 | auth server) and an OAuth authorization server (to the MCP client).
331 | 
332 | #### Flow Description
333 | 
334 | The third-party authorization flow comprises these steps:
335 | 
336 | 1. MCP client initiates standard OAuth flow with MCP server
337 | 2. MCP server redirects user to third-party authorization server
338 | 3. User authorizes with third-party server
339 | 4. Third-party server redirects back to MCP server with authorization code
340 | 5. MCP server exchanges code for third-party access token
341 | 6. MCP server generates its own access token bound to the third-party session
342 | 7. MCP server completes original OAuth flow with MCP client
343 | 
344 | ```mermaid
345 | sequenceDiagram
346 |     participant B as User-Agent (Browser)
347 |     participant C as MCP Client
348 |     participant M as MCP Server
349 |     participant T as Third-Party Auth Server
350 | 
351 |     C->>M: Initial OAuth Request
352 |     M->>B: Redirect to Third-Party /authorize
353 |     B->>T: Authorization Request
354 |     Note over T: User authorizes
355 |     T->>B: Redirect to MCP Server callback
356 |     B->>M: Authorization code
357 |     M->>T: Exchange code for token
358 |     T->>M: Third-party access token
359 |     Note over M: Generate bound MCP token
360 |     M->>B: Redirect to MCP Client callback
361 |     B->>C: MCP authorization code
362 |     C->>M: Exchange code for token
363 |     M->>C: MCP access token
364 | ```
365 | 
366 | #### Session Binding Requirements
367 | 
368 | MCP servers implementing third-party authorization **MUST**:
369 | 
370 | 1. Maintain secure mapping between third-party tokens and issued MCP tokens
371 | 2. Validate third-party token status before honoring MCP tokens
372 | 3. Implement appropriate token lifecycle management
373 | 4. Handle third-party token expiration and renewal
374 | 
375 | #### Security Considerations
376 | 
377 | When implementing third-party authorization, servers **MUST**:
378 | 
379 | 1. Validate all redirect URIs
380 | 2. Securely store third-party credentials
381 | 3. Implement appropriate session timeout handling
382 | 4. Consider security implications of token chaining
383 | 5. Implement proper error handling for third-party auth failures
384 | 
385 | ## Best Practices
386 | 
387 | #### Local clients as Public OAuth 2.1 Clients
388 | 
389 | We strongly recommend that local clients implement OAuth 2.1 as a public client:
390 | 
391 | 1. Utilizing code challenges (PKCE) for authorization requests to prevent interception
392 |    attacks
393 | 2. Implementing secure token storage appropriate for the local system
394 | 3. Following token refresh best practices to maintain sessions
395 | 4. Properly handling token expiration and renewal
396 | 
397 | #### Authorization Metadata Discovery
398 | 
399 | We strongly recommend that all clients implement metadata discovery. This reduces the
400 | need for users to provide endpoints manually or clients to fallback to the defined
401 | defaults.
402 | 
403 | #### Dynamic Client Registration
404 | 
405 | Since clients do not know the set of MCP servers in advance, we strongly recommend the
406 | implementation of dynamic client registration. This allows applications to automatically
407 | register with the MCP server, and removes the need for users to obtain client ids
408 | manually.
409 | 


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/basic/index.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Overview
  3 | ---
  4 | 
  5 | <Info>**Protocol Revision**: 2025-03-26</Info>
  6 | 
  7 | The Model Context Protocol consists of several key components that work together:
  8 | 
  9 | - **Base Protocol**: Core JSON-RPC message types
 10 | - **Lifecycle Management**: Connection initialization, capability negotiation, and
 11 |   session control
 12 | - **Server Features**: Resources, prompts, and tools exposed by servers
 13 | - **Client Features**: Sampling and root directory lists provided by clients
 14 | - **Utilities**: Cross-cutting concerns like logging and argument completion
 15 | 
 16 | All implementations **MUST** support the base protocol and lifecycle management
 17 | components. Other components **MAY** be implemented based on the specific needs of the
 18 | application.
 19 | 
 20 | These protocol layers establish clear separation of concerns while enabling rich
 21 | interactions between clients and servers. The modular design allows implementations to
 22 | support exactly the features they need.
 23 | 
 24 | ## Messages
 25 | 
 26 | All messages between MCP clients and servers **MUST** follow the
 27 | [JSON-RPC 2.0](https://www.jsonrpc.org/specification) specification. The protocol defines
 28 | these types of messages:
 29 | 
 30 | ### Requests
 31 | 
 32 | Requests are sent from the client to the server or vice versa, to initiate an operation.
 33 | 
 34 | ```typescript
 35 | {
 36 |   jsonrpc: "2.0";
 37 |   id: string | number;
 38 |   method: string;
 39 |   params?: {
 40 |     [key: string]: unknown;
 41 |   };
 42 | }
 43 | ```
 44 | 
 45 | - Requests **MUST** include a string or integer ID.
 46 | - Unlike base JSON-RPC, the ID **MUST NOT** be `null`.
 47 | - The request ID **MUST NOT** have been previously used by the requestor within the same
 48 |   session.
 49 | 
 50 | ### Responses
 51 | 
 52 | Responses are sent in reply to requests, containing the result or error of the operation.
 53 | 
 54 | ```typescript
 55 | {
 56 |   jsonrpc: "2.0";
 57 |   id: string | number;
 58 |   result?: {
 59 |     [key: string]: unknown;
 60 |   }
 61 |   error?: {
 62 |     code: number;
 63 |     message: string;
 64 |     data?: unknown;
 65 |   }
 66 | }
 67 | ```
 68 | 
 69 | - Responses **MUST** include the same ID as the request they correspond to.
 70 | - **Responses** are further sub-categorized as either **successful results** or
 71 |   **errors**. Either a `result` or an `error` **MUST** be set. A response **MUST NOT**
 72 |   set both.
 73 | - Results **MAY** follow any JSON object structure, while errors **MUST** include an
 74 |   error code and message at minimum.
 75 | - Error codes **MUST** be integers.
 76 | 
 77 | ### Notifications
 78 | 
 79 | Notifications are sent from the client to the server or vice versa, as a one-way message.
 80 | The receiver **MUST NOT** send a response.
 81 | 
 82 | ```typescript
 83 | {
 84 |   jsonrpc: "2.0";
 85 |   method: string;
 86 |   params?: {
 87 |     [key: string]: unknown;
 88 |   };
 89 | }
 90 | ```
 91 | 
 92 | - Notifications **MUST NOT** include an ID.
 93 | 
 94 | ### Batching
 95 | 
 96 | JSON-RPC also defines a means to
 97 | [batch multiple requests and notifications](https://www.jsonrpc.org/specification#batch),
 98 | by sending them in an array. MCP implementations **MAY** support sending JSON-RPC
 99 | batches, but **MUST** support receiving JSON-RPC batches.
100 | 
101 | ## Auth
102 | 
103 | MCP provides an [Authorization](/specification/2025-03-26/basic/authorization) framework for use with HTTP.
104 | Implementations using an HTTP-based transport **SHOULD** conform to this specification,
105 | whereas implementations using STDIO transport **SHOULD NOT** follow this specification,
106 | and instead retrieve credentials from the environment.
107 | 
108 | Additionally, clients and servers **MAY** negotiate their own custom authentication and
109 | authorization strategies.
110 | 
111 | For further discussions and contributions to the evolution of MCP’s auth mechanisms, join
112 | us in
113 | [GitHub Discussions](https://github.com/modelcontextprotocol/specification/discussions)
114 | to help shape the future of the protocol!
115 | 
116 | ## Schema
117 | 
118 | The full specification of the protocol is defined as a
119 | [TypeScript schema](https://github.com/modelcontextprotocol/specification/blob/main/schema/2025-03-26/schema.ts).
120 | This is the source of truth for all protocol messages and structures.
121 | 
122 | There is also a
123 | [JSON Schema](https://github.com/modelcontextprotocol/specification/blob/main/schema/2025-03-26/schema.json),
124 | which is automatically generated from the TypeScript source of truth, for use with
125 | various automated tooling.
126 | 


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/basic/lifecycle.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Lifecycle
  3 | ---
  4 | 
  5 | <Info>**Protocol Revision**: 2025-03-26</Info>
  6 | 
  7 | The Model Context Protocol (MCP) defines a rigorous lifecycle for client-server
  8 | connections that ensures proper capability negotiation and state management.
  9 | 
 10 | 1. **Initialization**: Capability negotiation and protocol version agreement
 11 | 2. **Operation**: Normal protocol communication
 12 | 3. **Shutdown**: Graceful termination of the connection
 13 | 
 14 | ```mermaid
 15 | sequenceDiagram
 16 |     participant Client
 17 |     participant Server
 18 | 
 19 |     Note over Client,Server: Initialization Phase
 20 |     activate Client
 21 |     Client->>+Server: initialize request
 22 |     Server-->>Client: initialize response
 23 |     Client--)Server: initialized notification
 24 | 
 25 |     Note over Client,Server: Operation Phase
 26 |     rect rgb(200, 220, 250)
 27 |         note over Client,Server: Normal protocol operations
 28 |     end
 29 | 
 30 |     Note over Client,Server: Shutdown
 31 |     Client--)-Server: Disconnect
 32 |     deactivate Server
 33 |     Note over Client,Server: Connection closed
 34 | ```
 35 | 
 36 | ## Lifecycle Phases
 37 | 
 38 | ### Initialization
 39 | 
 40 | The initialization phase **MUST** be the first interaction between client and server.
 41 | During this phase, the client and server:
 42 | 
 43 | - Establish protocol version compatibility
 44 | - Exchange and negotiate capabilities
 45 | - Share implementation details
 46 | 
 47 | The client **MUST** initiate this phase by sending an `initialize` request containing:
 48 | 
 49 | - Protocol version supported
 50 | - Client capabilities
 51 | - Client implementation information
 52 | 
 53 | ```json
 54 | {
 55 |   "jsonrpc": "2.0",
 56 |   "id": 1,
 57 |   "method": "initialize",
 58 |   "params": {
 59 |     "protocolVersion": "2025-03-26",
 60 |     "capabilities": {
 61 |       "roots": {
 62 |         "listChanged": true
 63 |       },
 64 |       "sampling": {}
 65 |     },
 66 |     "clientInfo": {
 67 |       "name": "ExampleClient",
 68 |       "version": "1.0.0"
 69 |     }
 70 |   }
 71 | }
 72 | ```
 73 | 
 74 | The initialize request **MUST NOT** be part of a JSON-RPC
 75 | [batch](https://www.jsonrpc.org/specification#batch), as other requests and notifications
 76 | are not possible until initialization has completed. This also permits backwards
 77 | compatibility with prior protocol versions that do not explicitly support JSON-RPC
 78 | batches.
 79 | 
 80 | The server **MUST** respond with its own capabilities and information:
 81 | 
 82 | ```json
 83 | {
 84 |   "jsonrpc": "2.0",
 85 |   "id": 1,
 86 |   "result": {
 87 |     "protocolVersion": "2025-03-26",
 88 |     "capabilities": {
 89 |       "logging": {},
 90 |       "prompts": {
 91 |         "listChanged": true
 92 |       },
 93 |       "resources": {
 94 |         "subscribe": true,
 95 |         "listChanged": true
 96 |       },
 97 |       "tools": {
 98 |         "listChanged": true
 99 |       }
100 |     },
101 |     "serverInfo": {
102 |       "name": "ExampleServer",
103 |       "version": "1.0.0"
104 |     },
105 |     "instructions": "Optional instructions for the client"
106 |   }
107 | }
108 | ```
109 | 
110 | After successful initialization, the client **MUST** send an `initialized` notification
111 | to indicate it is ready to begin normal operations:
112 | 
113 | ```json
114 | {
115 |   "jsonrpc": "2.0",
116 |   "method": "notifications/initialized"
117 | }
118 | ```
119 | 
120 | - The client **SHOULD NOT** send requests other than
121 |   [pings](/specification/2025-03-26/basic/utilities/ping) before the server has responded to the
122 |   `initialize` request.
123 | - The server **SHOULD NOT** send requests other than
124 |   [pings](/specification/2025-03-26/basic/utilities/ping) and
125 |   [logging](/specification/2025-03-26/server/utilities/logging) before receiving the `initialized`
126 |   notification.
127 | 
128 | #### Version Negotiation
129 | 
130 | In the `initialize` request, the client **MUST** send a protocol version it supports.
131 | This **SHOULD** be the _latest_ version supported by the client.
132 | 
133 | If the server supports the requested protocol version, it **MUST** respond with the same
134 | version. Otherwise, the server **MUST** respond with another protocol version it
135 | supports. This **SHOULD** be the _latest_ version supported by the server.
136 | 
137 | If the client does not support the version in the server's response, it **SHOULD**
138 | disconnect.
139 | 
140 | #### Capability Negotiation
141 | 
142 | Client and server capabilities establish which optional protocol features will be
143 | available during the session.
144 | 
145 | Key capabilities include:
146 | 
147 | | Category | Capability     | Description                                                                               |
148 | | -------- | -------------- | ----------------------------------------------------------------------------------------- |
149 | | Client   | `roots`        | Ability to provide filesystem [roots](/specification/2025-03-26/client/roots)             |
150 | | Client   | `sampling`     | Support for LLM [sampling](/specification/2025-03-26/client/sampling) requests            |
151 | | Client   | `experimental` | Describes support for non-standard experimental features                                  |
152 | | Server   | `prompts`      | Offers [prompt templates](/specification/2025-03-26/server/prompts)                       |
153 | | Server   | `resources`    | Provides readable [resources](/specification/2025-03-26/server/resources)                 |
154 | | Server   | `tools`        | Exposes callable [tools](/specification/2025-03-26/server/tools)                          |
155 | | Server   | `logging`      | Emits structured [log messages](/specification/2025-03-26/server/utilities/logging)       |
156 | | Server   | `completions`  | Supports argument [autocompletion](/specification/2025-03-26/server/utilities/completion) |
157 | | Server   | `experimental` | Describes support for non-standard experimental features                                  |
158 | 
159 | Capability objects can describe sub-capabilities like:
160 | 
161 | - `listChanged`: Support for list change notifications (for prompts, resources, and
162 |   tools)
163 | - `subscribe`: Support for subscribing to individual items' changes (resources only)
164 | 
165 | ### Operation
166 | 
167 | During the operation phase, the client and server exchange messages according to the
168 | negotiated capabilities.
169 | 
170 | Both parties **SHOULD**:
171 | 
172 | - Respect the negotiated protocol version
173 | - Only use capabilities that were successfully negotiated
174 | 
175 | ### Shutdown
176 | 
177 | During the shutdown phase, one side (usually the client) cleanly terminates the protocol
178 | connection. No specific shutdown messages are defined—instead, the underlying transport
179 | mechanism should be used to signal connection termination:
180 | 
181 | #### stdio
182 | 
183 | For the stdio [transport](/specification/2025-03-26/basic/transports), the client **SHOULD** initiate
184 | shutdown by:
185 | 
186 | 1. First, closing the input stream to the child process (the server)
187 | 2. Waiting for the server to exit, or sending `SIGTERM` if the server does not exit
188 |    within a reasonable time
189 | 3. Sending `SIGKILL` if the server does not exit within a reasonable time after `SIGTERM`
190 | 
191 | The server **MAY** initiate shutdown by closing its output stream to the client and
192 | exiting.
193 | 
194 | #### HTTP
195 | 
196 | For HTTP [transports](/specification/2025-03-26/basic/transports), shutdown is indicated by closing the
197 | associated HTTP connection(s).
198 | 
199 | ## Timeouts
200 | 
201 | Implementations **SHOULD** establish timeouts for all sent requests, to prevent hung
202 | connections and resource exhaustion. When the request has not received a success or error
203 | response within the timeout period, the sender **SHOULD** issue a [cancellation
204 | notification](/specification/2025-03-26/basic/utilities/cancellation) for that request and stop waiting for
205 | a response.
206 | 
207 | SDKs and other middleware **SHOULD** allow these timeouts to be configured on a
208 | per-request basis.
209 | 
210 | Implementations **MAY** choose to reset the timeout clock when receiving a [progress
211 | notification](/specification/2025-03-26/basic/utilities/progress) corresponding to the request, as this
212 | implies that work is actually happening. However, implementations **SHOULD** always
213 | enforce a maximum timeout, regardless of progress notifications, to limit the impact of a
214 | misbehaving client or server.
215 | 
216 | ## Error Handling
217 | 
218 | Implementations **SHOULD** be prepared to handle these error cases:
219 | 
220 | - Protocol version mismatch
221 | - Failure to negotiate required capabilities
222 | - Request [timeouts](#timeouts)
223 | 
224 | Example initialization error:
225 | 
226 | ```json
227 | {
228 |   "jsonrpc": "2.0",
229 |   "id": 1,
230 |   "error": {
231 |     "code": -32602,
232 |     "message": "Unsupported protocol version",
233 |     "data": {
234 |       "supported": ["2024-11-05"],
235 |       "requested": "1.0.0"
236 |     }
237 |   }
238 | }
239 | ```
240 | 


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/basic/transports.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Transports
  3 | ---
  4 | 
  5 | <Info>**Protocol Revision**: 2025-03-26</Info>
  6 | 
  7 | MCP uses JSON-RPC to encode messages. JSON-RPC messages **MUST** be UTF-8 encoded.
  8 | 
  9 | The protocol currently defines two standard transport mechanisms for client-server
 10 | communication:
 11 | 
 12 | 1. [stdio](#stdio), communication over standard in and standard out
 13 | 2. [Streamable HTTP](#streamable-http)
 14 | 
 15 | Clients **SHOULD** support stdio whenever possible.
 16 | 
 17 | It is also possible for clients and servers to implement
 18 | [custom transports](#custom-transports) in a pluggable fashion.
 19 | 
 20 | ## stdio
 21 | 
 22 | In the **stdio** transport:
 23 | 
 24 | - The client launches the MCP server as a subprocess.
 25 | - The server reads JSON-RPC messages from its standard input (`stdin`) and sends messages
 26 |   to its standard output (`stdout`).
 27 | - Messages may be JSON-RPC requests, notifications, responses—or a JSON-RPC
 28 |   [batch](https://www.jsonrpc.org/specification#batch) containing one or more requests
 29 |   and/or notifications.
 30 | - Messages are delimited by newlines, and **MUST NOT** contain embedded newlines.
 31 | - The server **MAY** write UTF-8 strings to its standard error (`stderr`) for logging
 32 |   purposes. Clients **MAY** capture, forward, or ignore this logging.
 33 | - The server **MUST NOT** write anything to its `stdout` that is not a valid MCP message.
 34 | - The client **MUST NOT** write anything to the server's `stdin` that is not a valid MCP
 35 |   message.
 36 | 
 37 | ```mermaid
 38 | sequenceDiagram
 39 |     participant Client
 40 |     participant Server Process
 41 | 
 42 |     Client->>+Server Process: Launch subprocess
 43 |     loop Message Exchange
 44 |         Client->>Server Process: Write to stdin
 45 |         Server Process->>Client: Write to stdout
 46 |         Server Process--)Client: Optional logs on stderr
 47 |     end
 48 |     Client->>Server Process: Close stdin, terminate subprocess
 49 |     deactivate Server Process
 50 | ```
 51 | 
 52 | ## Streamable HTTP
 53 | 
 54 | <Info>
 55 | 
 56 | This replaces the [HTTP+SSE
 57 | transport](/specification/2024-11-05/basic/transports#http-with-sse) from
 58 | protocol version 2024-11-05. See the [backwards compatibility](#backwards-compatibility)
 59 | guide below.
 60 | 
 61 | </Info>
 62 | 
 63 | In the **Streamable HTTP** transport, the server operates as an independent process that
 64 | can handle multiple client connections. This transport uses HTTP POST and GET requests.
 65 | Server can optionally make use of
 66 | [Server-Sent Events](https://en.wikipedia.org/wiki/Server-sent_events) (SSE) to stream
 67 | multiple server messages. This permits basic MCP servers, as well as more feature-rich
 68 | servers supporting streaming and server-to-client notifications and requests.
 69 | 
 70 | The server **MUST** provide a single HTTP endpoint path (hereafter referred to as the
 71 | **MCP endpoint**) that supports both POST and GET methods. For example, this could be a
 72 | URL like `https://example.com/mcp`.
 73 | 
 74 | #### Security Warning
 75 | 
 76 | When implementing Streamable HTTP transport:
 77 | 
 78 | 1. Servers **MUST** validate the `Origin` header on all incoming connections to prevent DNS rebinding attacks
 79 | 2. When running locally, servers **SHOULD** bind only to localhost (127.0.0.1) rather than all network interfaces (0.0.0.0)
 80 | 3. Servers **SHOULD** implement proper authentication for all connections
 81 | 
 82 | Without these protections, attackers could use DNS rebinding to interact with local MCP servers from remote websites.
 83 | 
 84 | ### Sending Messages to the Server
 85 | 
 86 | Every JSON-RPC message sent from the client **MUST** be a new HTTP POST request to the
 87 | MCP endpoint.
 88 | 
 89 | 1. The client **MUST** use HTTP POST to send JSON-RPC messages to the MCP endpoint.
 90 | 2. The client **MUST** include an `Accept` header, listing both `application/json` and
 91 |    `text/event-stream` as supported content types.
 92 | 3. The body of the POST request **MUST** be one of the following:
 93 |    - A single JSON-RPC _request_, _notification_, or _response_
 94 |    - An array [batching](https://www.jsonrpc.org/specification#batch) one or more
 95 |      _requests and/or notifications_
 96 |    - An array [batching](https://www.jsonrpc.org/specification#batch) one or more
 97 |      _responses_
 98 | 4. If the input consists solely of (any number of) JSON-RPC _responses_ or
 99 |    _notifications_:
100 |    - If the server accepts the input, the server **MUST** return HTTP status code 202
101 |      Accepted with no body.
102 |    - If the server cannot accept the input, it **MUST** return an HTTP error status code
103 |      (e.g., 400 Bad Request). The HTTP response body **MAY** comprise a JSON-RPC _error
104 |      response_ that has no `id`.
105 | 5. If the input contains any number of JSON-RPC _requests_, the server **MUST** either
106 |    return `Content-Type: text/event-stream`, to initiate an SSE stream, or
107 |    `Content-Type: application/json`, to return one JSON object. The client **MUST**
108 |    support both these cases.
109 | 6. If the server initiates an SSE stream:
110 |    - The SSE stream **SHOULD** eventually include one JSON-RPC _response_ per each
111 |      JSON-RPC _request_ sent in the POST body. These _responses_ **MAY** be
112 |      [batched](https://www.jsonrpc.org/specification#batch).
113 |    - The server **MAY** send JSON-RPC _requests_ and _notifications_ before sending a
114 |      JSON-RPC _response_. These messages **SHOULD** relate to the originating client
115 |      _request_. These _requests_ and _notifications_ **MAY** be
116 |      [batched](https://www.jsonrpc.org/specification#batch).
117 |    - The server **SHOULD NOT** close the SSE stream before sending a JSON-RPC _response_
118 |      per each received JSON-RPC _request_, unless the [session](#session-management)
119 |      expires.
120 |    - After all JSON-RPC _responses_ have been sent, the server **SHOULD** close the SSE
121 |      stream.
122 |    - Disconnection **MAY** occur at any time (e.g., due to network conditions).
123 |      Therefore:
124 |      - Disconnection **SHOULD NOT** be interpreted as the client cancelling its request.
125 |      - To cancel, the client **SHOULD** explicitly send an MCP `CancelledNotification`.
126 |      - To avoid message loss due to disconnection, the server **MAY** make the stream
127 |        [resumable](#resumability-and-redelivery).
128 | 
129 | ### Listening for Messages from the Server
130 | 
131 | 1. The client **MAY** issue an HTTP GET to the MCP endpoint. This can be used to open an
132 |    SSE stream, allowing the server to communicate to the client, without the client first
133 |    sending data via HTTP POST.
134 | 2. The client **MUST** include an `Accept` header, listing `text/event-stream` as a
135 |    supported content type.
136 | 3. The server **MUST** either return `Content-Type: text/event-stream` in response to
137 |    this HTTP GET, or else return HTTP 405 Method Not Allowed, indicating that the server
138 |    does not offer an SSE stream at this endpoint.
139 | 4. If the server initiates an SSE stream:
140 |    - The server **MAY** send JSON-RPC _requests_ and _notifications_ on the stream. These
141 |      _requests_ and _notifications_ **MAY** be
142 |      [batched](https://www.jsonrpc.org/specification#batch).
143 |    - These messages **SHOULD** be unrelated to any concurrently-running JSON-RPC
144 |      _request_ from the client.
145 |    - The server **MUST NOT** send a JSON-RPC _response_ on the stream **unless**
146 |      [resuming](#resumability-and-redelivery) a stream associated with a previous client
147 |      request.
148 |    - The server **MAY** close the SSE stream at any time.
149 |    - The client **MAY** close the SSE stream at any time.
150 | 
151 | ### Multiple Connections
152 | 
153 | 1. The client **MAY** remain connected to multiple SSE streams simultaneously.
154 | 2. The server **MUST** send each of its JSON-RPC messages on only one of the connected
155 |    streams; that is, it **MUST NOT** broadcast the same message across multiple streams.
156 |    - The risk of message loss **MAY** be mitigated by making the stream
157 |      [resumable](#resumability-and-redelivery).
158 | 
159 | ### Resumability and Redelivery
160 | 
161 | To support resuming broken connections, and redelivering messages that might otherwise be
162 | lost:
163 | 
164 | 1. Servers **MAY** attach an `id` field to their SSE events, as described in the
165 |    [SSE standard](https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation).
166 |    - If present, the ID **MUST** be globally unique across all streams within that
167 |      [session](#session-management)—or all streams with that specific client, if session
168 |      management is not in use.
169 | 2. If the client wishes to resume after a broken connection, it **SHOULD** issue an HTTP
170 |    GET to the MCP endpoint, and include the
171 |    [`Last-Event-ID`](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-last-event-id-header)
172 |    header to indicate the last event ID it received.
173 |    - The server **MAY** use this header to replay messages that would have been sent
174 |      after the last event ID, _on the stream that was disconnected_, and to resume the
175 |      stream from that point.
176 |    - The server **MUST NOT** replay messages that would have been delivered on a
177 |      different stream.
178 | 
179 | In other words, these event IDs should be assigned by servers on a _per-stream_ basis, to
180 | act as a cursor within that particular stream.
181 | 
182 | ### Session Management
183 | 
184 | An MCP "session" consists of logically related interactions between a client and a
185 | server, beginning with the [initialization phase](/specification/2025-03-26/basic/lifecycle). To support
186 | servers which want to establish stateful sessions:
187 | 
188 | 1. A server using the Streamable HTTP transport **MAY** assign a session ID at
189 |    initialization time, by including it in an `Mcp-Session-Id` header on the HTTP
190 |    response containing the `InitializeResult`.
191 |    - The session ID **SHOULD** be globally unique and cryptographically secure (e.g., a
192 |      securely generated UUID, a JWT, or a cryptographic hash).
193 |    - The session ID **MUST** only contain visible ASCII characters (ranging from 0x21 to
194 |      0x7E).
195 | 2. If an `Mcp-Session-Id` is returned by the server during initialization, clients using
196 |    the Streamable HTTP transport **MUST** include it in the `Mcp-Session-Id` header on
197 |    all of their subsequent HTTP requests.
198 |    - Servers that require a session ID **SHOULD** respond to requests without an
199 |      `Mcp-Session-Id` header (other than initialization) with HTTP 400 Bad Request.
200 | 3. The server **MAY** terminate the session at any time, after which it **MUST** respond
201 |    to requests containing that session ID with HTTP 404 Not Found.
202 | 4. When a client receives HTTP 404 in response to a request containing an
203 |    `Mcp-Session-Id`, it **MUST** start a new session by sending a new `InitializeRequest`
204 |    without a session ID attached.
205 | 5. Clients that no longer need a particular session (e.g., because the user is leaving
206 |    the client application) **SHOULD** send an HTTP DELETE to the MCP endpoint with the
207 |    `Mcp-Session-Id` header, to explicitly terminate the session.
208 |    - The server **MAY** respond to this request with HTTP 405 Method Not Allowed,
209 |      indicating that the server does not allow clients to terminate sessions.
210 | 
211 | ### Sequence Diagram
212 | 
213 | ```mermaid
214 | sequenceDiagram
215 |     participant Client
216 |     participant Server
217 | 
218 |     note over Client, Server: initialization
219 | 
220 |     Client->>+Server: POST InitializeRequest
221 |     Server->>-Client: InitializeResponse<br>Mcp-Session-Id: 1868a90c...
222 | 
223 |     Client->>+Server: POST InitializedNotification<br>Mcp-Session-Id: 1868a90c...
224 |     Server->>-Client: 202 Accepted
225 | 
226 |     note over Client, Server: client requests
227 |     Client->>+Server: POST ... request ...<br>Mcp-Session-Id: 1868a90c...
228 | 
229 |     alt single HTTP response
230 |       Server->>Client: ... response ...
231 |     else server opens SSE stream
232 |       loop while connection remains open
233 |           Server-)Client: ... SSE messages from server ...
234 |       end
235 |       Server-)Client: SSE event: ... response ...
236 |     end
237 |     deactivate Server
238 | 
239 |     note over Client, Server: client notifications/responses
240 |     Client->>+Server: POST ... notification/response ...<br>Mcp-Session-Id: 1868a90c...
241 |     Server->>-Client: 202 Accepted
242 | 
243 |     note over Client, Server: server requests
244 |     Client->>+Server: GET<br>Mcp-Session-Id: 1868a90c...
245 |     loop while connection remains open
246 |         Server-)Client: ... SSE messages from server ...
247 |     end
248 |     deactivate Server
249 | 
250 | ```
251 | 
252 | ### Backwards Compatibility
253 | 
254 | Clients and servers can maintain backwards compatibility with the deprecated [HTTP+SSE
255 | transport](/specification/2024-11-05/basic/transports#http-with-sse) (from
256 | protocol version 2024-11-05) as follows:
257 | 
258 | **Servers** wanting to support older clients should:
259 | 
260 | - Continue to host both the SSE and POST endpoints of the old transport, alongside the
261 |   new "MCP endpoint" defined for the Streamable HTTP transport.
262 |   - It is also possible to combine the old POST endpoint and the new MCP endpoint, but
263 |     this may introduce unneeded complexity.
264 | 
265 | **Clients** wanting to support older servers should:
266 | 
267 | 1. Accept an MCP server URL from the user, which may point to either a server using the
268 |    old transport or the new transport.
269 | 2. Attempt to POST an `InitializeRequest` to the server URL, with an `Accept` header as
270 |    defined above:
271 |    - If it succeeds, the client can assume this is a server supporting the new Streamable
272 |      HTTP transport.
273 |    - If it fails with an HTTP 4xx status code (e.g., 405 Method Not Allowed or 404 Not
274 |      Found):
275 |      - Issue a GET request to the server URL, expecting that this will open an SSE stream
276 |        and return an `endpoint` event as the first event.
277 |      - When the `endpoint` event arrives, the client can assume this is a server running
278 |        the old HTTP+SSE transport, and should use that transport for all subsequent
279 |        communication.
280 | 
281 | ## Custom Transports
282 | 
283 | Clients and servers **MAY** implement additional custom transport mechanisms to suit
284 | their specific needs. The protocol is transport-agnostic and can be implemented over any
285 | communication channel that supports bidirectional message exchange.
286 | 
287 | Implementers who choose to support custom transports **MUST** ensure they preserve the
288 | JSON-RPC message format and lifecycle requirements defined by MCP. Custom transports
289 | **SHOULD** document their specific connection establishment and message exchange patterns
290 | to aid interoperability.
291 | 


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/basic/utilities/cancellation.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Cancellation
 3 | ---
 4 | 
 5 | <Info>**Protocol Revision**: 2025-03-26</Info>
 6 | 
 7 | The Model Context Protocol (MCP) supports optional cancellation of in-progress requests
 8 | through notification messages. Either side can send a cancellation notification to
 9 | indicate that a previously-issued request should be terminated.
10 | 
11 | ## Cancellation Flow
12 | 
13 | When a party wants to cancel an in-progress request, it sends a `notifications/cancelled`
14 | notification containing:
15 | 
16 | - The ID of the request to cancel
17 | - An optional reason string that can be logged or displayed
18 | 
19 | ```json
20 | {
21 |   "jsonrpc": "2.0",
22 |   "method": "notifications/cancelled",
23 |   "params": {
24 |     "requestId": "123",
25 |     "reason": "User requested cancellation"
26 |   }
27 | }
28 | ```
29 | 
30 | ## Behavior Requirements
31 | 
32 | 1. Cancellation notifications **MUST** only reference requests that:
33 |    - Were previously issued in the same direction
34 |    - Are believed to still be in-progress
35 | 2. The `initialize` request **MUST NOT** be cancelled by clients
36 | 3. Receivers of cancellation notifications **SHOULD**:
37 |    - Stop processing the cancelled request
38 |    - Free associated resources
39 |    - Not send a response for the cancelled request
40 | 4. Receivers **MAY** ignore cancellation notifications if:
41 |    - The referenced request is unknown
42 |    - Processing has already completed
43 |    - The request cannot be cancelled
44 | 5. The sender of the cancellation notification **SHOULD** ignore any response to the
45 |    request that arrives afterward
46 | 
47 | ## Timing Considerations
48 | 
49 | Due to network latency, cancellation notifications may arrive after request processing
50 | has completed, and potentially after a response has already been sent.
51 | 
52 | Both parties **MUST** handle these race conditions gracefully:
53 | 
54 | ```mermaid
55 | sequenceDiagram
56 |    participant Client
57 |    participant Server
58 | 
59 |    Client->>Server: Request (ID: 123)
60 |    Note over Server: Processing starts
61 |    Client--)Server: notifications/cancelled (ID: 123)
62 |    alt
63 |       Note over Server: Processing may have<br/>completed before<br/>cancellation arrives
64 |    else If not completed
65 |       Note over Server: Stop processing
66 |    end
67 | ```
68 | 
69 | ## Implementation Notes
70 | 
71 | - Both parties **SHOULD** log cancellation reasons for debugging
72 | - Application UIs **SHOULD** indicate when cancellation is requested
73 | 
74 | ## Error Handling
75 | 
76 | Invalid cancellation notifications **SHOULD** be ignored:
77 | 
78 | - Unknown request IDs
79 | - Already completed requests
80 | - Malformed notifications
81 | 
82 | This maintains the "fire and forget" nature of notifications while allowing for race
83 | conditions in asynchronous communication.
84 | 


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/basic/utilities/ping.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Ping
 3 | ---
 4 | 
 5 | <Info>**Protocol Revision**: 2025-03-26</Info>
 6 | 
 7 | The Model Context Protocol includes an optional ping mechanism that allows either party
 8 | to verify that their counterpart is still responsive and the connection is alive.
 9 | 
10 | ## Overview
11 | 
12 | The ping functionality is implemented through a simple request/response pattern. Either
13 | the client or server can initiate a ping by sending a `ping` request.
14 | 
15 | ## Message Format
16 | 
17 | A ping request is a standard JSON-RPC request with no parameters:
18 | 
19 | ```json
20 | {
21 |   "jsonrpc": "2.0",
22 |   "id": "123",
23 |   "method": "ping"
24 | }
25 | ```
26 | 
27 | ## Behavior Requirements
28 | 
29 | 1. The receiver **MUST** respond promptly with an empty response:
30 | 
31 | ```json
32 | {
33 |   "jsonrpc": "2.0",
34 |   "id": "123",
35 |   "result": {}
36 | }
37 | ```
38 | 
39 | 2. If no response is received within a reasonable timeout period, the sender **MAY**:
40 |    - Consider the connection stale
41 |    - Terminate the connection
42 |    - Attempt reconnection procedures
43 | 
44 | ## Usage Patterns
45 | 
46 | ```mermaid
47 | sequenceDiagram
48 |     participant Sender
49 |     participant Receiver
50 | 
51 |     Sender->>Receiver: ping request
52 |     Receiver->>Sender: empty response
53 | ```
54 | 
55 | ## Implementation Considerations
56 | 
57 | - Implementations **SHOULD** periodically issue pings to detect connection health
58 | - The frequency of pings **SHOULD** be configurable
59 | - Timeouts **SHOULD** be appropriate for the network environment
60 | - Excessive pinging **SHOULD** be avoided to reduce network overhead
61 | 
62 | ## Error Handling
63 | 
64 | - Timeouts **SHOULD** be treated as connection failures
65 | - Multiple failed pings **MAY** trigger connection reset
66 | - Implementations **SHOULD** log ping failures for diagnostics
67 | 


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/basic/utilities/progress.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Progress
 3 | ---
 4 | 
 5 | <Info>**Protocol Revision**: 2025-03-26</Info>
 6 | 
 7 | The Model Context Protocol (MCP) supports optional progress tracking for long-running
 8 | operations through notification messages. Either side can send progress notifications to
 9 | provide updates about operation status.
10 | 
11 | ## Progress Flow
12 | 
13 | When a party wants to _receive_ progress updates for a request, it includes a
14 | `progressToken` in the request metadata.
15 | 
16 | - Progress tokens **MUST** be a string or integer value
17 | - Progress tokens can be chosen by the sender using any means, but **MUST** be unique
18 |   across all active requests.
19 | 
20 | ```json
21 | {
22 |   "jsonrpc": "2.0",
23 |   "id": 1,
24 |   "method": "some_method",
25 |   "params": {
26 |     "_meta": {
27 |       "progressToken": "abc123"
28 |     }
29 |   }
30 | }
31 | ```
32 | 
33 | The receiver **MAY** then send progress notifications containing:
34 | 
35 | - The original progress token
36 | - The current progress value so far
37 | - An optional "total" value
38 | - An optional "message" value
39 | 
40 | ```json
41 | {
42 |   "jsonrpc": "2.0",
43 |   "method": "notifications/progress",
44 |   "params": {
45 |     "progressToken": "abc123",
46 |     "progress": 50,
47 |     "total": 100,
48 |     "message": "Reticulating splines..."
49 |   }
50 | }
51 | ```
52 | 
53 | - The `progress` value **MUST** increase with each notification, even if the total is
54 |   unknown.
55 | - The `progress` and the `total` values **MAY** be floating point.
56 | - The `message` field **SHOULD** provide relevant human readable progress information.
57 | 
58 | ## Behavior Requirements
59 | 
60 | 1. Progress notifications **MUST** only reference tokens that:
61 |    - Were provided in an active request
62 |    - Are associated with an in-progress operation
63 | 
64 | 2. Receivers of progress requests **MAY**:
65 |    - Choose not to send any progress notifications
66 |    - Send notifications at whatever frequency they deem appropriate
67 |    - Omit the total value if unknown
68 | 
69 | ```mermaid
70 | sequenceDiagram
71 |     participant Sender
72 |     participant Receiver
73 | 
74 |     Note over Sender,Receiver: Request with progress token
75 |     Sender->>Receiver: Method request with progressToken
76 | 
77 |     Note over Sender,Receiver: Progress updates
78 |     loop Progress Updates
79 |         Receiver-->>Sender: Progress notification (0.2/1.0)
80 |         Receiver-->>Sender: Progress notification (0.6/1.0)
81 |         Receiver-->>Sender: Progress notification (1.0/1.0)
82 |     end
83 | 
84 |     Note over Sender,Receiver: Operation complete
85 |     Receiver->>Sender: Method response
86 | ```
87 | 
88 | ## Implementation Notes
89 | 
90 | - Senders and receivers **SHOULD** track active progress tokens
91 | - Both parties **SHOULD** implement rate limiting to prevent flooding
92 | - Progress notifications **MUST** stop after completion
93 | 


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/changelog.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Key Changes
 3 | ---
 4 | 
 5 | This document lists changes made to the Model Context Protocol (MCP) specification since
 6 | the previous revision, [2024-11-05](/specification/2024-11-05).
 7 | 
 8 | ## Major changes
 9 | 
10 | 1. Added a comprehensive **[authorization framework](/specification/2025-03-26/basic/authorization)**
11 |    based on OAuth 2.1 (PR
12 |    [#133](https://github.com/modelcontextprotocol/specification/pull/133))
13 | 1. Replaced the previous HTTP+SSE transport with a more flexible **[Streamable HTTP
14 |    transport](/specification/2025-03-26/basic/transports#streamable-http)** (PR
15 |    [#206](https://github.com/modelcontextprotocol/specification/pull/206))
16 | 1. Added support for JSON-RPC **[batching](https://www.jsonrpc.org/specification#batch)**
17 |    (PR [#228](https://github.com/modelcontextprotocol/specification/pull/228))
18 | 1. Added comprehensive **tool annotations** for better describing tool behavior, like
19 |    whether it is read-only or destructive (PR
20 |    [#185](https://github.com/modelcontextprotocol/specification/pull/185))
21 | 
22 | ## Other schema changes
23 | 
24 | - Added `message` field to `ProgressNotification` to provide descriptive status updates
25 | - Added support for audio data, joining the existing text and image content types
26 | - Added `completions` capability to explicitly indicate support for argument
27 |   autocompletion suggestions
28 | 
29 | See
30 | [the updated schema](http://github.com/modelcontextprotocol/specification/tree/main/schema/2025-03-26/schema.ts)
31 | for more details.
32 | 
33 | ## Full changelog
34 | 
35 | For a complete list of all changes that have been made since the last protocol revision,
36 | [see GitHub](https://github.com/modelcontextprotocol/specification/compare/2024-11-05...2025-03-26).
37 | 


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/client/roots.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Roots
  3 | ---
  4 | 
  5 | <Info>**Protocol Revision**: 2025-03-26</Info>
  6 | 
  7 | The Model Context Protocol (MCP) provides a standardized way for clients to expose
  8 | filesystem "roots" to servers. Roots define the boundaries of where servers can operate
  9 | within the filesystem, allowing them to understand which directories and files they have
 10 | access to. Servers can request the list of roots from supporting clients and receive
 11 | notifications when that list changes.
 12 | 
 13 | ## User Interaction Model
 14 | 
 15 | Roots in MCP are typically exposed through workspace or project configuration interfaces.
 16 | 
 17 | For example, implementations could offer a workspace/project picker that allows users to
 18 | select directories and files the server should have access to. This can be combined with
 19 | automatic workspace detection from version control systems or project files.
 20 | 
 21 | However, implementations are free to expose roots through any interface pattern that
 22 | suits their needs&mdash;the protocol itself does not mandate any specific user
 23 | interaction model.
 24 | 
 25 | ## Capabilities
 26 | 
 27 | Clients that support roots **MUST** declare the `roots` capability during
 28 | [initialization](/specification/2025-03-26/basic/lifecycle#initialization):
 29 | 
 30 | ```json
 31 | {
 32 |   "capabilities": {
 33 |     "roots": {
 34 |       "listChanged": true
 35 |     }
 36 |   }
 37 | }
 38 | ```
 39 | 
 40 | `listChanged` indicates whether the client will emit notifications when the list of roots
 41 | changes.
 42 | 
 43 | ## Protocol Messages
 44 | 
 45 | ### Listing Roots
 46 | 
 47 | To retrieve roots, servers send a `roots/list` request:
 48 | 
 49 | **Request:**
 50 | 
 51 | ```json
 52 | {
 53 |   "jsonrpc": "2.0",
 54 |   "id": 1,
 55 |   "method": "roots/list"
 56 | }
 57 | ```
 58 | 
 59 | **Response:**
 60 | 
 61 | ```json
 62 | {
 63 |   "jsonrpc": "2.0",
 64 |   "id": 1,
 65 |   "result": {
 66 |     "roots": [
 67 |       {
 68 |         "uri": "file:///home/user/projects/myproject",
 69 |         "name": "My Project"
 70 |       }
 71 |     ]
 72 |   }
 73 | }
 74 | ```
 75 | 
 76 | ### Root List Changes
 77 | 
 78 | When roots change, clients that support `listChanged` **MUST** send a notification:
 79 | 
 80 | ```json
 81 | {
 82 |   "jsonrpc": "2.0",
 83 |   "method": "notifications/roots/list_changed"
 84 | }
 85 | ```
 86 | 
 87 | ## Message Flow
 88 | 
 89 | ```mermaid
 90 | sequenceDiagram
 91 |     participant Server
 92 |     participant Client
 93 | 
 94 |     Note over Server,Client: Discovery
 95 |     Server->>Client: roots/list
 96 |     Client-->>Server: Available roots
 97 | 
 98 |     Note over Server,Client: Changes
 99 |     Client--)Server: notifications/roots/list_changed
100 |     Server->>Client: roots/list
101 |     Client-->>Server: Updated roots
102 | ```
103 | 
104 | ## Data Types
105 | 
106 | ### Root
107 | 
108 | A root definition includes:
109 | 
110 | - `uri`: Unique identifier for the root. This **MUST** be a `file://` URI in the current
111 |   specification.
112 | - `name`: Optional human-readable name for display purposes.
113 | 
114 | Example roots for different use cases:
115 | 
116 | #### Project Directory
117 | 
118 | ```json
119 | {
120 |   "uri": "file:///home/user/projects/myproject",
121 |   "name": "My Project"
122 | }
123 | ```
124 | 
125 | #### Multiple Repositories
126 | 
127 | ```json
128 | [
129 |   {
130 |     "uri": "file:///home/user/repos/frontend",
131 |     "name": "Frontend Repository"
132 |   },
133 |   {
134 |     "uri": "file:///home/user/repos/backend",
135 |     "name": "Backend Repository"
136 |   }
137 | ]
138 | ```
139 | 
140 | ## Error Handling
141 | 
142 | Clients **SHOULD** return standard JSON-RPC errors for common failure cases:
143 | 
144 | - Client does not support roots: `-32601` (Method not found)
145 | - Internal errors: `-32603`
146 | 
147 | Example error:
148 | 
149 | ```json
150 | {
151 |   "jsonrpc": "2.0",
152 |   "id": 1,
153 |   "error": {
154 |     "code": -32601,
155 |     "message": "Roots not supported",
156 |     "data": {
157 |       "reason": "Client does not have roots capability"
158 |     }
159 |   }
160 | }
161 | ```
162 | 
163 | ## Security Considerations
164 | 
165 | 1. Clients **MUST**:
166 |    - Only expose roots with appropriate permissions
167 |    - Validate all root URIs to prevent path traversal
168 |    - Implement proper access controls
169 |    - Monitor root accessibility
170 | 
171 | 2. Servers **SHOULD**:
172 |    - Handle cases where roots become unavailable
173 |    - Respect root boundaries during operations
174 |    - Validate all paths against provided roots
175 | 
176 | ## Implementation Guidelines
177 | 
178 | 1. Clients **SHOULD**:
179 |    - Prompt users for consent before exposing roots to servers
180 |    - Provide clear user interfaces for root management
181 |    - Validate root accessibility before exposing
182 |    - Monitor for root changes
183 | 
184 | 2. Servers **SHOULD**:
185 |    - Check for roots capability before usage
186 |    - Handle root list changes gracefully
187 |    - Respect root boundaries in operations
188 |    - Cache root information appropriately
189 | 


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/client/sampling.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Sampling
  3 | ---
  4 | 
  5 | <Info>**Protocol Revision**: 2025-03-26</Info>
  6 | 
  7 | The Model Context Protocol (MCP) provides a standardized way for servers to request LLM
  8 | sampling ("completions" or "generations") from language models via clients. This flow
  9 | allows clients to maintain control over model access, selection, and permissions while
 10 | enabling servers to leverage AI capabilities&mdash;with no server API keys necessary.
 11 | Servers can request text, audio, or image-based interactions and optionally include
 12 | context from MCP servers in their prompts.
 13 | 
 14 | ## User Interaction Model
 15 | 
 16 | Sampling in MCP allows servers to implement agentic behaviors, by enabling LLM calls to
 17 | occur _nested_ inside other MCP server features.
 18 | 
 19 | Implementations are free to expose sampling through any interface pattern that suits
 20 | their needs&mdash;the protocol itself does not mandate any specific user interaction
 21 | model.
 22 | 
 23 | <Warning>
 24 | 
 25 | For trust & safety and security, there **SHOULD** always
 26 | be a human in the loop with the ability to deny sampling requests.
 27 | 
 28 | Applications **SHOULD**:
 29 | 
 30 | - Provide UI that makes it easy and intuitive to review sampling requests
 31 | - Allow users to view and edit prompts before sending
 32 | - Present generated responses for review before delivery
 33 | 
 34 | </Warning>
 35 | 
 36 | ## Capabilities
 37 | 
 38 | Clients that support sampling **MUST** declare the `sampling` capability during
 39 | [initialization](/specification/2025-03-26/basic/lifecycle#initialization):
 40 | 
 41 | ```json
 42 | {
 43 |   "capabilities": {
 44 |     "sampling": {}
 45 |   }
 46 | }
 47 | ```
 48 | 
 49 | ## Protocol Messages
 50 | 
 51 | ### Creating Messages
 52 | 
 53 | To request a language model generation, servers send a `sampling/createMessage` request:
 54 | 
 55 | **Request:**
 56 | 
 57 | ```json
 58 | {
 59 |   "jsonrpc": "2.0",
 60 |   "id": 1,
 61 |   "method": "sampling/createMessage",
 62 |   "params": {
 63 |     "messages": [
 64 |       {
 65 |         "role": "user",
 66 |         "content": {
 67 |           "type": "text",
 68 |           "text": "What is the capital of France?"
 69 |         }
 70 |       }
 71 |     ],
 72 |     "modelPreferences": {
 73 |       "hints": [
 74 |         {
 75 |           "name": "claude-3-sonnet"
 76 |         }
 77 |       ],
 78 |       "intelligencePriority": 0.8,
 79 |       "speedPriority": 0.5
 80 |     },
 81 |     "systemPrompt": "You are a helpful assistant.",
 82 |     "maxTokens": 100
 83 |   }
 84 | }
 85 | ```
 86 | 
 87 | **Response:**
 88 | 
 89 | ```json
 90 | {
 91 |   "jsonrpc": "2.0",
 92 |   "id": 1,
 93 |   "result": {
 94 |     "role": "assistant",
 95 |     "content": {
 96 |       "type": "text",
 97 |       "text": "The capital of France is Paris."
 98 |     },
 99 |     "model": "claude-3-sonnet-20240307",
100 |     "stopReason": "endTurn"
101 |   }
102 | }
103 | ```
104 | 
105 | ## Message Flow
106 | 
107 | ```mermaid
108 | sequenceDiagram
109 |     participant Server
110 |     participant Client
111 |     participant User
112 |     participant LLM
113 | 
114 |     Note over Server,Client: Server initiates sampling
115 |     Server->>Client: sampling/createMessage
116 | 
117 |     Note over Client,User: Human-in-the-loop review
118 |     Client->>User: Present request for approval
119 |     User-->>Client: Review and approve/modify
120 | 
121 |     Note over Client,LLM: Model interaction
122 |     Client->>LLM: Forward approved request
123 |     LLM-->>Client: Return generation
124 | 
125 |     Note over Client,User: Response review
126 |     Client->>User: Present response for approval
127 |     User-->>Client: Review and approve/modify
128 | 
129 |     Note over Server,Client: Complete request
130 |     Client-->>Server: Return approved response
131 | ```
132 | 
133 | ## Data Types
134 | 
135 | ### Messages
136 | 
137 | Sampling messages can contain:
138 | 
139 | #### Text Content
140 | 
141 | ```json
142 | {
143 |   "type": "text",
144 |   "text": "The message content"
145 | }
146 | ```
147 | 
148 | #### Image Content
149 | 
150 | ```json
151 | {
152 |   "type": "image",
153 |   "data": "base64-encoded-image-data",
154 |   "mimeType": "image/jpeg"
155 | }
156 | ```
157 | 
158 | #### Audio Content
159 | 
160 | ```json
161 | {
162 |   "type": "audio",
163 |   "data": "base64-encoded-audio-data",
164 |   "mimeType": "audio/wav"
165 | }
166 | ```
167 | 
168 | ### Model Preferences
169 | 
170 | Model selection in MCP requires careful abstraction since servers and clients may use
171 | different AI providers with distinct model offerings. A server cannot simply request a
172 | specific model by name since the client may not have access to that exact model or may
173 | prefer to use a different provider's equivalent model.
174 | 
175 | To solve this, MCP implements a preference system that combines abstract capability
176 | priorities with optional model hints:
177 | 
178 | #### Capability Priorities
179 | 
180 | Servers express their needs through three normalized priority values (0-1):
181 | 
182 | - `costPriority`: How important is minimizing costs? Higher values prefer cheaper models.
183 | - `speedPriority`: How important is low latency? Higher values prefer faster models.
184 | - `intelligencePriority`: How important are advanced capabilities? Higher values prefer
185 |   more capable models.
186 | 
187 | #### Model Hints
188 | 
189 | While priorities help select models based on characteristics, `hints` allow servers to
190 | suggest specific models or model families:
191 | 
192 | - Hints are treated as substrings that can match model names flexibly
193 | - Multiple hints are evaluated in order of preference
194 | - Clients **MAY** map hints to equivalent models from different providers
195 | - Hints are advisory&mdash;clients make final model selection
196 | 
197 | For example:
198 | 
199 | ```json
200 | {
201 |   "hints": [
202 |     { "name": "claude-3-sonnet" }, // Prefer Sonnet-class models
203 |     { "name": "claude" } // Fall back to any Claude model
204 |   ],
205 |   "costPriority": 0.3, // Cost is less important
206 |   "speedPriority": 0.8, // Speed is very important
207 |   "intelligencePriority": 0.5 // Moderate capability needs
208 | }
209 | ```
210 | 
211 | The client processes these preferences to select an appropriate model from its available
212 | options. For instance, if the client doesn't have access to Claude models but has Gemini,
213 | it might map the sonnet hint to `gemini-1.5-pro` based on similar capabilities.
214 | 
215 | ## Error Handling
216 | 
217 | Clients **SHOULD** return errors for common failure cases:
218 | 
219 | Example error:
220 | 
221 | ```json
222 | {
223 |   "jsonrpc": "2.0",
224 |   "id": 1,
225 |   "error": {
226 |     "code": -1,
227 |     "message": "User rejected sampling request"
228 |   }
229 | }
230 | ```
231 | 
232 | ## Security Considerations
233 | 
234 | 1. Clients **SHOULD** implement user approval controls
235 | 2. Both parties **SHOULD** validate message content
236 | 3. Clients **SHOULD** respect model preference hints
237 | 4. Clients **SHOULD** implement rate limiting
238 | 5. Both parties **MUST** handle sensitive data appropriately
239 | 


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/index.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Specification
  3 | ---
  4 | 
  5 | [Model Context Protocol](https://modelcontextprotocol.io) (MCP) is an open protocol that
  6 | enables seamless integration between LLM applications and external data sources and
  7 | tools. Whether you're building an AI-powered IDE, enhancing a chat interface, or creating
  8 | custom AI workflows, MCP provides a standardized way to connect LLMs with the context
  9 | they need.
 10 | 
 11 | This specification defines the authoritative protocol requirements, based on the
 12 | TypeScript schema in
 13 | [schema.ts](https://github.com/modelcontextprotocol/specification/blob/main/schema/2025-03-26/schema.ts).
 14 | 
 15 | For implementation guides and examples, visit
 16 | [modelcontextprotocol.io](https://modelcontextprotocol.io).
 17 | 
 18 | The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD
 19 | NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
 20 | interpreted as described in [BCP 14](https://datatracker.ietf.org/doc/html/bcp14)
 21 | [[RFC2119](https://datatracker.ietf.org/doc/html/rfc2119)]
 22 | [[RFC8174](https://datatracker.ietf.org/doc/html/rfc8174)] when, and only when, they
 23 | appear in all capitals, as shown here.
 24 | 
 25 | ## Overview
 26 | 
 27 | MCP provides a standardized way for applications to:
 28 | 
 29 | - Share contextual information with language models
 30 | - Expose tools and capabilities to AI systems
 31 | - Build composable integrations and workflows
 32 | 
 33 | The protocol uses [JSON-RPC](https://www.jsonrpc.org/) 2.0 messages to establish
 34 | communication between:
 35 | 
 36 | - **Hosts**: LLM applications that initiate connections
 37 | - **Clients**: Connectors within the host application
 38 | - **Servers**: Services that provide context and capabilities
 39 | 
 40 | MCP takes some inspiration from the
 41 | [Language Server Protocol](https://microsoft.github.io/language-server-protocol/), which
 42 | standardizes how to add support for programming languages across a whole ecosystem of
 43 | development tools. In a similar way, MCP standardizes how to integrate additional context
 44 | and tools into the ecosystem of AI applications.
 45 | 
 46 | ## Key Details
 47 | 
 48 | ### Base Protocol
 49 | 
 50 | - [JSON-RPC](https://www.jsonrpc.org/) message format
 51 | - Stateful connections
 52 | - Server and client capability negotiation
 53 | 
 54 | ### Features
 55 | 
 56 | Servers offer any of the following features to clients:
 57 | 
 58 | - **Resources**: Context and data, for the user or the AI model to use
 59 | - **Prompts**: Templated messages and workflows for users
 60 | - **Tools**: Functions for the AI model to execute
 61 | 
 62 | Clients may offer the following feature to servers:
 63 | 
 64 | - **Sampling**: Server-initiated agentic behaviors and recursive LLM interactions
 65 | 
 66 | ### Additional Utilities
 67 | 
 68 | - Configuration
 69 | - Progress tracking
 70 | - Cancellation
 71 | - Error reporting
 72 | - Logging
 73 | 
 74 | ## Security and Trust & Safety
 75 | 
 76 | The Model Context Protocol enables powerful capabilities through arbitrary data access
 77 | and code execution paths. With this power comes important security and trust
 78 | considerations that all implementors must carefully address.
 79 | 
 80 | ### Key Principles
 81 | 
 82 | 1. **User Consent and Control**
 83 |    - Users must explicitly consent to and understand all data access and operations
 84 |    - Users must retain control over what data is shared and what actions are taken
 85 |    - Implementors should provide clear UIs for reviewing and authorizing activities
 86 | 
 87 | 2. **Data Privacy**
 88 |    - Hosts must obtain explicit user consent before exposing user data to servers
 89 |    - Hosts must not transmit resource data elsewhere without user consent
 90 |    - User data should be protected with appropriate access controls
 91 | 
 92 | 3. **Tool Safety**
 93 |    - Tools represent arbitrary code execution and must be treated with appropriate
 94 |      caution.
 95 |      - In particular, descriptions of tool behavior such as annotations should be
 96 |        considered untrusted, unless obtained from a trusted server.
 97 |    - Hosts must obtain explicit user consent before invoking any tool
 98 |    - Users should understand what each tool does before authorizing its use
 99 | 
100 | 4. **LLM Sampling Controls**
101 |    - Users must explicitly approve any LLM sampling requests
102 |    - Users should control:
103 |      - Whether sampling occurs at all
104 |      - The actual prompt that will be sent
105 |      - What results the server can see
106 |    - The protocol intentionally limits server visibility into prompts
107 | 
108 | ### Implementation Guidelines
109 | 
110 | While MCP itself cannot enforce these security principles at the protocol level,
111 | implementors **SHOULD**:
112 | 
113 | 1. Build robust consent and authorization flows into their applications
114 | 2. Provide clear documentation of security implications
115 | 3. Implement appropriate access controls and data protections
116 | 4. Follow security best practices in their integrations
117 | 5. Consider privacy implications in their feature designs
118 | 
119 | ## Learn More
120 | 
121 | Explore the detailed specification for each protocol component:
122 | 
123 | <CardGroup cols={5}>
124 |   <Card
125 |     title="Architecture"
126 |     icon="sitemap"
127 |     href="/specification/2025-03-26/architecture"
128 |   />
129 |   <Card
130 |     title="Base Protocol"
131 |     icon="code"
132 |     href="/specification/2025-03-26/basic"
133 |   />
134 |   <Card
135 |     title="Server Features"
136 |     icon="server"
137 |     href="/specification/2025-03-26/server"
138 |   />
139 |   <Card
140 |     title="Client Features"
141 |     icon="user"
142 |     href="/specification/2025-03-26/client"
143 |   />
144 |   <Card title="Contributing" icon="pencil" href="/development/contributing" />
145 | </CardGroup>
146 | 


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/server/index.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Overview
 3 | ---
 4 | 
 5 | <Info>**Protocol Revision**: 2025-03-26</Info>
 6 | 
 7 | Servers provide the fundamental building blocks for adding context to language models via
 8 | MCP. These primitives enable rich interactions between clients, servers, and language
 9 | models:
10 | 
11 | - **Prompts**: Pre-defined templates or instructions that guide language model
12 |   interactions
13 | - **Resources**: Structured data or content that provides additional context to the model
14 | - **Tools**: Executable functions that allow models to perform actions or retrieve
15 |   information
16 | 
17 | Each primitive can be summarized in the following control hierarchy:
18 | 
19 | | Primitive | Control                | Description                                        | Example                         |
20 | | --------- | ---------------------- | -------------------------------------------------- | ------------------------------- |
21 | | Prompts   | User-controlled        | Interactive templates invoked by user choice       | Slash commands, menu options    |
22 | | Resources | Application-controlled | Contextual data attached and managed by the client | File contents, git history      |
23 | | Tools     | Model-controlled       | Functions exposed to the LLM to take actions       | API POST requests, file writing |
24 | 
25 | Explore these key primitives in more detail below:
26 | 
27 | <CardGroup cols={3}>
28 |   <Card
29 |     title="Prompts"
30 |     icon="message"
31 |     href="/specification/2025-03-26/server/prompts"
32 |   />
33 |   <Card
34 |     title="Resources"
35 |     icon="file-lines"
36 |     href="/specification/2025-03-26/server/resources"
37 |   />
38 |   <Card
39 |     title="Tools"
40 |     icon="wrench"
41 |     href="/specification/2025-03-26/server/tools"
42 |   />
43 | </CardGroup>
44 | 


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/server/prompts.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Prompts
  3 | ---
  4 | 
  5 | <Info>**Protocol Revision**: 2025-03-26</Info>
  6 | 
  7 | The Model Context Protocol (MCP) provides a standardized way for servers to expose prompt
  8 | templates to clients. Prompts allow servers to provide structured messages and
  9 | instructions for interacting with language models. Clients can discover available
 10 | prompts, retrieve their contents, and provide arguments to customize them.
 11 | 
 12 | ## User Interaction Model
 13 | 
 14 | Prompts are designed to be **user-controlled**, meaning they are exposed from servers to
 15 | clients with the intention of the user being able to explicitly select them for use.
 16 | 
 17 | Typically, prompts would be triggered through user-initiated commands in the user
 18 | interface, which allows users to naturally discover and invoke available prompts.
 19 | 
 20 | For example, as slash commands:
 21 | 
 22 | ![Example of prompt exposed as slash command](/specification/2025-03-26/server/slash-command.png)
 23 | 
 24 | However, implementors are free to expose prompts through any interface pattern that suits
 25 | their needs&mdash;the protocol itself does not mandate any specific user interaction
 26 | model.
 27 | 
 28 | ## Capabilities
 29 | 
 30 | Servers that support prompts **MUST** declare the `prompts` capability during
 31 | [initialization](/specification/2025-03-26/basic/lifecycle#initialization):
 32 | 
 33 | ```json
 34 | {
 35 |   "capabilities": {
 36 |     "prompts": {
 37 |       "listChanged": true
 38 |     }
 39 |   }
 40 | }
 41 | ```
 42 | 
 43 | `listChanged` indicates whether the server will emit notifications when the list of
 44 | available prompts changes.
 45 | 
 46 | ## Protocol Messages
 47 | 
 48 | ### Listing Prompts
 49 | 
 50 | To retrieve available prompts, clients send a `prompts/list` request. This operation
 51 | supports [pagination](/specification/2025-03-26/server/utilities/pagination).
 52 | 
 53 | **Request:**
 54 | 
 55 | ```json
 56 | {
 57 |   "jsonrpc": "2.0",
 58 |   "id": 1,
 59 |   "method": "prompts/list",
 60 |   "params": {
 61 |     "cursor": "optional-cursor-value"
 62 |   }
 63 | }
 64 | ```
 65 | 
 66 | **Response:**
 67 | 
 68 | ```json
 69 | {
 70 |   "jsonrpc": "2.0",
 71 |   "id": 1,
 72 |   "result": {
 73 |     "prompts": [
 74 |       {
 75 |         "name": "code_review",
 76 |         "description": "Asks the LLM to analyze code quality and suggest improvements",
 77 |         "arguments": [
 78 |           {
 79 |             "name": "code",
 80 |             "description": "The code to review",
 81 |             "required": true
 82 |           }
 83 |         ]
 84 |       }
 85 |     ],
 86 |     "nextCursor": "next-page-cursor"
 87 |   }
 88 | }
 89 | ```
 90 | 
 91 | ### Getting a Prompt
 92 | 
 93 | To retrieve a specific prompt, clients send a `prompts/get` request. Arguments may be
 94 | auto-completed through [the completion API](/specification/2025-03-26/server/utilities/completion).
 95 | 
 96 | **Request:**
 97 | 
 98 | ```json
 99 | {
100 |   "jsonrpc": "2.0",
101 |   "id": 2,
102 |   "method": "prompts/get",
103 |   "params": {
104 |     "name": "code_review",
105 |     "arguments": {
106 |       "code": "def hello():\n    print('world')"
107 |     }
108 |   }
109 | }
110 | ```
111 | 
112 | **Response:**
113 | 
114 | ```json
115 | {
116 |   "jsonrpc": "2.0",
117 |   "id": 2,
118 |   "result": {
119 |     "description": "Code review prompt",
120 |     "messages": [
121 |       {
122 |         "role": "user",
123 |         "content": {
124 |           "type": "text",
125 |           "text": "Please review this Python code:\ndef hello():\n    print('world')"
126 |         }
127 |       }
128 |     ]
129 |   }
130 | }
131 | ```
132 | 
133 | ### List Changed Notification
134 | 
135 | When the list of available prompts changes, servers that declared the `listChanged`
136 | capability **SHOULD** send a notification:
137 | 
138 | ```json
139 | {
140 |   "jsonrpc": "2.0",
141 |   "method": "notifications/prompts/list_changed"
142 | }
143 | ```
144 | 
145 | ## Message Flow
146 | 
147 | ```mermaid
148 | sequenceDiagram
149 |     participant Client
150 |     participant Server
151 | 
152 |     Note over Client,Server: Discovery
153 |     Client->>Server: prompts/list
154 |     Server-->>Client: List of prompts
155 | 
156 |     Note over Client,Server: Usage
157 |     Client->>Server: prompts/get
158 |     Server-->>Client: Prompt content
159 | 
160 |     opt listChanged
161 |       Note over Client,Server: Changes
162 |       Server--)Client: prompts/list_changed
163 |       Client->>Server: prompts/list
164 |       Server-->>Client: Updated prompts
165 |     end
166 | ```
167 | 
168 | ## Data Types
169 | 
170 | ### Prompt
171 | 
172 | A prompt definition includes:
173 | 
174 | - `name`: Unique identifier for the prompt
175 | - `description`: Optional human-readable description
176 | - `arguments`: Optional list of arguments for customization
177 | 
178 | ### PromptMessage
179 | 
180 | Messages in a prompt can contain:
181 | 
182 | - `role`: Either "user" or "assistant" to indicate the speaker
183 | - `content`: One of the following content types:
184 | 
185 | #### Text Content
186 | 
187 | Text content represents plain text messages:
188 | 
189 | ```json
190 | {
191 |   "type": "text",
192 |   "text": "The text content of the message"
193 | }
194 | ```
195 | 
196 | This is the most common content type used for natural language interactions.
197 | 
198 | #### Image Content
199 | 
200 | Image content allows including visual information in messages:
201 | 
202 | ```json
203 | {
204 |   "type": "image",
205 |   "data": "base64-encoded-image-data",
206 |   "mimeType": "image/png"
207 | }
208 | ```
209 | 
210 | The image data **MUST** be base64-encoded and include a valid MIME type. This enables
211 | multi-modal interactions where visual context is important.
212 | 
213 | #### Audio Content
214 | 
215 | Audio content allows including audio information in messages:
216 | 
217 | ```json
218 | {
219 |   "type": "audio",
220 |   "data": "base64-encoded-audio-data",
221 |   "mimeType": "audio/wav"
222 | }
223 | ```
224 | 
225 | The audio data MUST be base64-encoded and include a valid MIME type. This enables
226 | multi-modal interactions where audio context is important.
227 | 
228 | #### Embedded Resources
229 | 
230 | Embedded resources allow referencing server-side resources directly in messages:
231 | 
232 | ```json
233 | {
234 |   "type": "resource",
235 |   "resource": {
236 |     "uri": "resource://example",
237 |     "mimeType": "text/plain",
238 |     "text": "Resource content"
239 |   }
240 | }
241 | ```
242 | 
243 | Resources can contain either text or binary (blob) data and **MUST** include:
244 | 
245 | - A valid resource URI
246 | - The appropriate MIME type
247 | - Either text content or base64-encoded blob data
248 | 
249 | Embedded resources enable prompts to seamlessly incorporate server-managed content like
250 | documentation, code samples, or other reference materials directly into the conversation
251 | flow.
252 | 
253 | ## Error Handling
254 | 
255 | Servers **SHOULD** return standard JSON-RPC errors for common failure cases:
256 | 
257 | - Invalid prompt name: `-32602` (Invalid params)
258 | - Missing required arguments: `-32602` (Invalid params)
259 | - Internal errors: `-32603` (Internal error)
260 | 
261 | ## Implementation Considerations
262 | 
263 | 1. Servers **SHOULD** validate prompt arguments before processing
264 | 2. Clients **SHOULD** handle pagination for large prompt lists
265 | 3. Both parties **SHOULD** respect capability negotiation
266 | 
267 | ## Security
268 | 
269 | Implementations **MUST** carefully validate all prompt inputs and outputs to prevent
270 | injection attacks or unauthorized access to resources.
271 | 


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/server/resource-picker.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/specification/2025-03-26/server/resource-picker.png


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/server/resources.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Resources
  3 | ---
  4 | 
  5 | <Info>**Protocol Revision**: 2025-03-26</Info>
  6 | 
  7 | The Model Context Protocol (MCP) provides a standardized way for servers to expose
  8 | resources to clients. Resources allow servers to share data that provides context to
  9 | language models, such as files, database schemas, or application-specific information.
 10 | Each resource is uniquely identified by a
 11 | [URI](https://datatracker.ietf.org/doc/html/rfc3986).
 12 | 
 13 | ## User Interaction Model
 14 | 
 15 | Resources in MCP are designed to be **application-driven**, with host applications
 16 | determining how to incorporate context based on their needs.
 17 | 
 18 | For example, applications could:
 19 | 
 20 | - Expose resources through UI elements for explicit selection, in a tree or list view
 21 | - Allow the user to search through and filter available resources
 22 | - Implement automatic context inclusion, based on heuristics or the AI model's selection
 23 | 
 24 | ![Example of resource context picker](/specification/2025-03-26/server/resource-picker.png)
 25 | 
 26 | However, implementations are free to expose resources through any interface pattern that
 27 | suits their needs&mdash;the protocol itself does not mandate any specific user
 28 | interaction model.
 29 | 
 30 | ## Capabilities
 31 | 
 32 | Servers that support resources **MUST** declare the `resources` capability:
 33 | 
 34 | ```json
 35 | {
 36 |   "capabilities": {
 37 |     "resources": {
 38 |       "subscribe": true,
 39 |       "listChanged": true
 40 |     }
 41 |   }
 42 | }
 43 | ```
 44 | 
 45 | The capability supports two optional features:
 46 | 
 47 | - `subscribe`: whether the client can subscribe to be notified of changes to individual
 48 |   resources.
 49 | - `listChanged`: whether the server will emit notifications when the list of available
 50 |   resources changes.
 51 | 
 52 | Both `subscribe` and `listChanged` are optional&mdash;servers can support neither,
 53 | either, or both:
 54 | 
 55 | ```json
 56 | {
 57 |   "capabilities": {
 58 |     "resources": {} // Neither feature supported
 59 |   }
 60 | }
 61 | ```
 62 | 
 63 | ```json
 64 | {
 65 |   "capabilities": {
 66 |     "resources": {
 67 |       "subscribe": true // Only subscriptions supported
 68 |     }
 69 |   }
 70 | }
 71 | ```
 72 | 
 73 | ```json
 74 | {
 75 |   "capabilities": {
 76 |     "resources": {
 77 |       "listChanged": true // Only list change notifications supported
 78 |     }
 79 |   }
 80 | }
 81 | ```
 82 | 
 83 | ## Protocol Messages
 84 | 
 85 | ### Listing Resources
 86 | 
 87 | To discover available resources, clients send a `resources/list` request. This operation
 88 | supports [pagination](/specification/2025-03-26/server/utilities/pagination).
 89 | 
 90 | **Request:**
 91 | 
 92 | ```json
 93 | {
 94 |   "jsonrpc": "2.0",
 95 |   "id": 1,
 96 |   "method": "resources/list",
 97 |   "params": {
 98 |     "cursor": "optional-cursor-value"
 99 |   }
100 | }
101 | ```
102 | 
103 | **Response:**
104 | 
105 | ```json
106 | {
107 |   "jsonrpc": "2.0",
108 |   "id": 1,
109 |   "result": {
110 |     "resources": [
111 |       {
112 |         "uri": "file:///project/src/main.rs",
113 |         "name": "main.rs",
114 |         "description": "Primary application entry point",
115 |         "mimeType": "text/x-rust"
116 |       }
117 |     ],
118 |     "nextCursor": "next-page-cursor"
119 |   }
120 | }
121 | ```
122 | 
123 | ### Reading Resources
124 | 
125 | To retrieve resource contents, clients send a `resources/read` request:
126 | 
127 | **Request:**
128 | 
129 | ```json
130 | {
131 |   "jsonrpc": "2.0",
132 |   "id": 2,
133 |   "method": "resources/read",
134 |   "params": {
135 |     "uri": "file:///project/src/main.rs"
136 |   }
137 | }
138 | ```
139 | 
140 | **Response:**
141 | 
142 | ```json
143 | {
144 |   "jsonrpc": "2.0",
145 |   "id": 2,
146 |   "result": {
147 |     "contents": [
148 |       {
149 |         "uri": "file:///project/src/main.rs",
150 |         "mimeType": "text/x-rust",
151 |         "text": "fn main() {\n    println!(\"Hello world!\");\n}"
152 |       }
153 |     ]
154 |   }
155 | }
156 | ```
157 | 
158 | ### Resource Templates
159 | 
160 | Resource templates allow servers to expose parameterized resources using
161 | [URI templates](https://datatracker.ietf.org/doc/html/rfc6570). Arguments may be
162 | auto-completed through [the completion API](/specification/2025-03-26/server/utilities/completion).
163 | 
164 | **Request:**
165 | 
166 | ```json
167 | {
168 |   "jsonrpc": "2.0",
169 |   "id": 3,
170 |   "method": "resources/templates/list"
171 | }
172 | ```
173 | 
174 | **Response:**
175 | 
176 | ```json
177 | {
178 |   "jsonrpc": "2.0",
179 |   "id": 3,
180 |   "result": {
181 |     "resourceTemplates": [
182 |       {
183 |         "uriTemplate": "file:///{path}",
184 |         "name": "Project Files",
185 |         "description": "Access files in the project directory",
186 |         "mimeType": "application/octet-stream"
187 |       }
188 |     ]
189 |   }
190 | }
191 | ```
192 | 
193 | ### List Changed Notification
194 | 
195 | When the list of available resources changes, servers that declared the `listChanged`
196 | capability **SHOULD** send a notification:
197 | 
198 | ```json
199 | {
200 |   "jsonrpc": "2.0",
201 |   "method": "notifications/resources/list_changed"
202 | }
203 | ```
204 | 
205 | ### Subscriptions
206 | 
207 | The protocol supports optional subscriptions to resource changes. Clients can subscribe
208 | to specific resources and receive notifications when they change:
209 | 
210 | **Subscribe Request:**
211 | 
212 | ```json
213 | {
214 |   "jsonrpc": "2.0",
215 |   "id": 4,
216 |   "method": "resources/subscribe",
217 |   "params": {
218 |     "uri": "file:///project/src/main.rs"
219 |   }
220 | }
221 | ```
222 | 
223 | **Update Notification:**
224 | 
225 | ```json
226 | {
227 |   "jsonrpc": "2.0",
228 |   "method": "notifications/resources/updated",
229 |   "params": {
230 |     "uri": "file:///project/src/main.rs"
231 |   }
232 | }
233 | ```
234 | 
235 | ## Message Flow
236 | 
237 | ```mermaid
238 | sequenceDiagram
239 |     participant Client
240 |     participant Server
241 | 
242 |     Note over Client,Server: Resource Discovery
243 |     Client->>Server: resources/list
244 |     Server-->>Client: List of resources
245 | 
246 |     Note over Client,Server: Resource Access
247 |     Client->>Server: resources/read
248 |     Server-->>Client: Resource contents
249 | 
250 |     Note over Client,Server: Subscriptions
251 |     Client->>Server: resources/subscribe
252 |     Server-->>Client: Subscription confirmed
253 | 
254 |     Note over Client,Server: Updates
255 |     Server--)Client: notifications/resources/updated
256 |     Client->>Server: resources/read
257 |     Server-->>Client: Updated contents
258 | ```
259 | 
260 | ## Data Types
261 | 
262 | ### Resource
263 | 
264 | A resource definition includes:
265 | 
266 | - `uri`: Unique identifier for the resource
267 | - `name`: Human-readable name
268 | - `description`: Optional description
269 | - `mimeType`: Optional MIME type
270 | - `size`: Optional size in bytes
271 | 
272 | ### Resource Contents
273 | 
274 | Resources can contain either text or binary data:
275 | 
276 | #### Text Content
277 | 
278 | ```json
279 | {
280 |   "uri": "file:///example.txt",
281 |   "mimeType": "text/plain",
282 |   "text": "Resource content"
283 | }
284 | ```
285 | 
286 | #### Binary Content
287 | 
288 | ```json
289 | {
290 |   "uri": "file:///example.png",
291 |   "mimeType": "image/png",
292 |   "blob": "base64-encoded-data"
293 | }
294 | ```
295 | 
296 | ## Common URI Schemes
297 | 
298 | The protocol defines several standard URI schemes. This list not
299 | exhaustive&mdash;implementations are always free to use additional, custom URI schemes.
300 | 
301 | ### https://
302 | 
303 | Used to represent a resource available on the web.
304 | 
305 | Servers **SHOULD** use this scheme only when the client is able to fetch and load the
306 | resource directly from the web on its own—that is, it doesn’t need to read the resource
307 | via the MCP server.
308 | 
309 | For other use cases, servers **SHOULD** prefer to use another URI scheme, or define a
310 | custom one, even if the server will itself be downloading resource contents over the
311 | internet.
312 | 
313 | ### file://
314 | 
315 | Used to identify resources that behave like a filesystem. However, the resources do not
316 | need to map to an actual physical filesystem.
317 | 
318 | MCP servers **MAY** identify file:// resources with an
319 | [XDG MIME type](https://specifications.freedesktop.org/shared-mime-info-spec/0.14/ar01s02.html#id-1.3.14),
320 | like `inode/directory`, to represent non-regular files (such as directories) that don’t
321 | otherwise have a standard MIME type.
322 | 
323 | ### git://
324 | 
325 | Git version control integration.
326 | 
327 | ## Error Handling
328 | 
329 | Servers **SHOULD** return standard JSON-RPC errors for common failure cases:
330 | 
331 | - Resource not found: `-32002`
332 | - Internal errors: `-32603`
333 | 
334 | Example error:
335 | 
336 | ```json
337 | {
338 |   "jsonrpc": "2.0",
339 |   "id": 5,
340 |   "error": {
341 |     "code": -32002,
342 |     "message": "Resource not found",
343 |     "data": {
344 |       "uri": "file:///nonexistent.txt"
345 |     }
346 |   }
347 | }
348 | ```
349 | 
350 | ## Security Considerations
351 | 
352 | 1. Servers **MUST** validate all resource URIs
353 | 2. Access controls **SHOULD** be implemented for sensitive resources
354 | 3. Binary data **MUST** be properly encoded
355 | 4. Resource permissions **SHOULD** be checked before operations
356 | 


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/server/slash-command.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/specification/2025-03-26/server/slash-command.png


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/server/tools.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Tools
  3 | ---
  4 | 
  5 | <Info>**Protocol Revision**: 2025-03-26</Info>
  6 | 
  7 | The Model Context Protocol (MCP) allows servers to expose tools that can be invoked by
  8 | language models. Tools enable models to interact with external systems, such as querying
  9 | databases, calling APIs, or performing computations. Each tool is uniquely identified by
 10 | a name and includes metadata describing its schema.
 11 | 
 12 | ## User Interaction Model
 13 | 
 14 | Tools in MCP are designed to be **model-controlled**, meaning that the language model can
 15 | discover and invoke tools automatically based on its contextual understanding and the
 16 | user's prompts.
 17 | 
 18 | However, implementations are free to expose tools through any interface pattern that
 19 | suits their needs&mdash;the protocol itself does not mandate any specific user
 20 | interaction model.
 21 | 
 22 | <Warning>
 23 | 
 24 | For trust & safety and security, there **SHOULD** always
 25 | be a human in the loop with the ability to deny tool invocations.
 26 | 
 27 | Applications **SHOULD**:
 28 | 
 29 | - Provide UI that makes clear which tools are being exposed to the AI model
 30 | - Insert clear visual indicators when tools are invoked
 31 | - Present confirmation prompts to the user for operations, to ensure a human is in the
 32 |   loop
 33 | 
 34 | </Warning>
 35 | 
 36 | ## Capabilities
 37 | 
 38 | Servers that support tools **MUST** declare the `tools` capability:
 39 | 
 40 | ```json
 41 | {
 42 |   "capabilities": {
 43 |     "tools": {
 44 |       "listChanged": true
 45 |     }
 46 |   }
 47 | }
 48 | ```
 49 | 
 50 | `listChanged` indicates whether the server will emit notifications when the list of
 51 | available tools changes.
 52 | 
 53 | ## Protocol Messages
 54 | 
 55 | ### Listing Tools
 56 | 
 57 | To discover available tools, clients send a `tools/list` request. This operation supports
 58 | [pagination](/specification/2025-03-26/server/utilities/pagination).
 59 | 
 60 | **Request:**
 61 | 
 62 | ```json
 63 | {
 64 |   "jsonrpc": "2.0",
 65 |   "id": 1,
 66 |   "method": "tools/list",
 67 |   "params": {
 68 |     "cursor": "optional-cursor-value"
 69 |   }
 70 | }
 71 | ```
 72 | 
 73 | **Response:**
 74 | 
 75 | ```json
 76 | {
 77 |   "jsonrpc": "2.0",
 78 |   "id": 1,
 79 |   "result": {
 80 |     "tools": [
 81 |       {
 82 |         "name": "get_weather",
 83 |         "description": "Get current weather information for a location",
 84 |         "inputSchema": {
 85 |           "type": "object",
 86 |           "properties": {
 87 |             "location": {
 88 |               "type": "string",
 89 |               "description": "City name or zip code"
 90 |             }
 91 |           },
 92 |           "required": ["location"]
 93 |         }
 94 |       }
 95 |     ],
 96 |     "nextCursor": "next-page-cursor"
 97 |   }
 98 | }
 99 | ```
100 | 
101 | ### Calling Tools
102 | 
103 | To invoke a tool, clients send a `tools/call` request:
104 | 
105 | **Request:**
106 | 
107 | ```json
108 | {
109 |   "jsonrpc": "2.0",
110 |   "id": 2,
111 |   "method": "tools/call",
112 |   "params": {
113 |     "name": "get_weather",
114 |     "arguments": {
115 |       "location": "New York"
116 |     }
117 |   }
118 | }
119 | ```
120 | 
121 | **Response:**
122 | 
123 | ```json
124 | {
125 |   "jsonrpc": "2.0",
126 |   "id": 2,
127 |   "result": {
128 |     "content": [
129 |       {
130 |         "type": "text",
131 |         "text": "Current weather in New York:\nTemperature: 72°F\nConditions: Partly cloudy"
132 |       }
133 |     ],
134 |     "isError": false
135 |   }
136 | }
137 | ```
138 | 
139 | ### List Changed Notification
140 | 
141 | When the list of available tools changes, servers that declared the `listChanged`
142 | capability **SHOULD** send a notification:
143 | 
144 | ```json
145 | {
146 |   "jsonrpc": "2.0",
147 |   "method": "notifications/tools/list_changed"
148 | }
149 | ```
150 | 
151 | ## Message Flow
152 | 
153 | ```mermaid
154 | sequenceDiagram
155 |     participant LLM
156 |     participant Client
157 |     participant Server
158 | 
159 |     Note over Client,Server: Discovery
160 |     Client->>Server: tools/list
161 |     Server-->>Client: List of tools
162 | 
163 |     Note over Client,LLM: Tool Selection
164 |     LLM->>Client: Select tool to use
165 | 
166 |     Note over Client,Server: Invocation
167 |     Client->>Server: tools/call
168 |     Server-->>Client: Tool result
169 |     Client->>LLM: Process result
170 | 
171 |     Note over Client,Server: Updates
172 |     Server--)Client: tools/list_changed
173 |     Client->>Server: tools/list
174 |     Server-->>Client: Updated tools
175 | ```
176 | 
177 | ## Data Types
178 | 
179 | ### Tool
180 | 
181 | A tool definition includes:
182 | 
183 | - `name`: Unique identifier for the tool
184 | - `description`: Human-readable description of functionality
185 | - `inputSchema`: JSON Schema defining expected parameters
186 | - `annotations`: optional properties describing tool behavior
187 | 
188 | <Warning>
189 | 
190 | For trust & safety and security, clients **MUST** consider
191 | tool annotations to be untrusted unless they come from trusted servers.
192 | 
193 | </Warning>
194 | 
195 | ### Tool Result
196 | 
197 | Tool results can contain multiple content items of different types:
198 | 
199 | #### Text Content
200 | 
201 | ```json
202 | {
203 |   "type": "text",
204 |   "text": "Tool result text"
205 | }
206 | ```
207 | 
208 | #### Image Content
209 | 
210 | ```json
211 | {
212 |   "type": "image",
213 |   "data": "base64-encoded-data",
214 |   "mimeType": "image/png"
215 | }
216 | ```
217 | 
218 | #### Audio Content
219 | 
220 | ```json
221 | {
222 |   "type": "audio",
223 |   "data": "base64-encoded-audio-data",
224 |   "mimeType": "audio/wav"
225 | }
226 | ```
227 | 
228 | #### Embedded Resources
229 | 
230 | [Resources](/specification/2025-03-26/server/resources) **MAY** be embedded, to provide additional context
231 | or data, behind a URI that can be subscribed to or fetched again by the client later:
232 | 
233 | ```json
234 | {
235 |   "type": "resource",
236 |   "resource": {
237 |     "uri": "resource://example",
238 |     "mimeType": "text/plain",
239 |     "text": "Resource content"
240 |   }
241 | }
242 | ```
243 | 
244 | ## Error Handling
245 | 
246 | Tools use two error reporting mechanisms:
247 | 
248 | 1. **Protocol Errors**: Standard JSON-RPC errors for issues like:
249 |    - Unknown tools
250 |    - Invalid arguments
251 |    - Server errors
252 | 
253 | 2. **Tool Execution Errors**: Reported in tool results with `isError: true`:
254 |    - API failures
255 |    - Invalid input data
256 |    - Business logic errors
257 | 
258 | Example protocol error:
259 | 
260 | ```json
261 | {
262 |   "jsonrpc": "2.0",
263 |   "id": 3,
264 |   "error": {
265 |     "code": -32602,
266 |     "message": "Unknown tool: invalid_tool_name"
267 |   }
268 | }
269 | ```
270 | 
271 | Example tool execution error:
272 | 
273 | ```json
274 | {
275 |   "jsonrpc": "2.0",
276 |   "id": 4,
277 |   "result": {
278 |     "content": [
279 |       {
280 |         "type": "text",
281 |         "text": "Failed to fetch weather data: API rate limit exceeded"
282 |       }
283 |     ],
284 |     "isError": true
285 |   }
286 | }
287 | ```
288 | 
289 | ## Security Considerations
290 | 
291 | 1. Servers **MUST**:
292 |    - Validate all tool inputs
293 |    - Implement proper access controls
294 |    - Rate limit tool invocations
295 |    - Sanitize tool outputs
296 | 
297 | 2. Clients **SHOULD**:
298 |    - Prompt for user confirmation on sensitive operations
299 |    - Show tool inputs to the user before calling the server, to avoid malicious or
300 |      accidental data exfiltration
301 |    - Validate tool results before passing to LLM
302 |    - Implement timeouts for tool calls
303 |    - Log tool usage for audit purposes
304 | 


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/server/utilities/completion.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Completion
  3 | ---
  4 | 
  5 | <Info>**Protocol Revision**: 2025-03-26</Info>
  6 | 
  7 | The Model Context Protocol (MCP) provides a standardized way for servers to offer
  8 | argument autocompletion suggestions for prompts and resource URIs. This enables rich,
  9 | IDE-like experiences where users receive contextual suggestions while entering argument
 10 | values.
 11 | 
 12 | ## User Interaction Model
 13 | 
 14 | Completion in MCP is designed to support interactive user experiences similar to IDE code
 15 | completion.
 16 | 
 17 | For example, applications may show completion suggestions in a dropdown or popup menu as
 18 | users type, with the ability to filter and select from available options.
 19 | 
 20 | However, implementations are free to expose completion through any interface pattern that
 21 | suits their needs&mdash;the protocol itself does not mandate any specific user
 22 | interaction model.
 23 | 
 24 | ## Capabilities
 25 | 
 26 | Servers that support completions **MUST** declare the `completions` capability:
 27 | 
 28 | ```json
 29 | {
 30 |   "capabilities": {
 31 |     "completions": {}
 32 |   }
 33 | }
 34 | ```
 35 | 
 36 | ## Protocol Messages
 37 | 
 38 | ### Requesting Completions
 39 | 
 40 | To get completion suggestions, clients send a `completion/complete` request specifying
 41 | what is being completed through a reference type:
 42 | 
 43 | **Request:**
 44 | 
 45 | ```json
 46 | {
 47 |   "jsonrpc": "2.0",
 48 |   "id": 1,
 49 |   "method": "completion/complete",
 50 |   "params": {
 51 |     "ref": {
 52 |       "type": "ref/prompt",
 53 |       "name": "code_review"
 54 |     },
 55 |     "argument": {
 56 |       "name": "language",
 57 |       "value": "py"
 58 |     }
 59 |   }
 60 | }
 61 | ```
 62 | 
 63 | **Response:**
 64 | 
 65 | ```json
 66 | {
 67 |   "jsonrpc": "2.0",
 68 |   "id": 1,
 69 |   "result": {
 70 |     "completion": {
 71 |       "values": ["python", "pytorch", "pyside"],
 72 |       "total": 10,
 73 |       "hasMore": true
 74 |     }
 75 |   }
 76 | }
 77 | ```
 78 | 
 79 | ### Reference Types
 80 | 
 81 | The protocol supports two types of completion references:
 82 | 
 83 | | Type           | Description                 | Example                                             |
 84 | | -------------- | --------------------------- | --------------------------------------------------- |
 85 | | `ref/prompt`   | References a prompt by name | `{"type": "ref/prompt", "name": "code_review"}`     |
 86 | | `ref/resource` | References a resource URI   | `{"type": "ref/resource", "uri": "file:///{path}"}` |
 87 | 
 88 | ### Completion Results
 89 | 
 90 | Servers return an array of completion values ranked by relevance, with:
 91 | 
 92 | - Maximum 100 items per response
 93 | - Optional total number of available matches
 94 | - Boolean indicating if additional results exist
 95 | 
 96 | ## Message Flow
 97 | 
 98 | ```mermaid
 99 | sequenceDiagram
100 |     participant Client
101 |     participant Server
102 | 
103 |     Note over Client: User types argument
104 |     Client->>Server: completion/complete
105 |     Server-->>Client: Completion suggestions
106 | 
107 |     Note over Client: User continues typing
108 |     Client->>Server: completion/complete
109 |     Server-->>Client: Refined suggestions
110 | ```
111 | 
112 | ## Data Types
113 | 
114 | ### CompleteRequest
115 | 
116 | - `ref`: A `PromptReference` or `ResourceReference`
117 | - `argument`: Object containing:
118 |   - `name`: Argument name
119 |   - `value`: Current value
120 | 
121 | ### CompleteResult
122 | 
123 | - `completion`: Object containing:
124 |   - `values`: Array of suggestions (max 100)
125 |   - `total`: Optional total matches
126 |   - `hasMore`: Additional results flag
127 | 
128 | ## Error Handling
129 | 
130 | Servers **SHOULD** return standard JSON-RPC errors for common failure cases:
131 | 
132 | - Method not found: `-32601` (Capability not supported)
133 | - Invalid prompt name: `-32602` (Invalid params)
134 | - Missing required arguments: `-32602` (Invalid params)
135 | - Internal errors: `-32603` (Internal error)
136 | 
137 | ## Implementation Considerations
138 | 
139 | 1. Servers **SHOULD**:
140 |    - Return suggestions sorted by relevance
141 |    - Implement fuzzy matching where appropriate
142 |    - Rate limit completion requests
143 |    - Validate all inputs
144 | 
145 | 2. Clients **SHOULD**:
146 |    - Debounce rapid completion requests
147 |    - Cache completion results where appropriate
148 |    - Handle missing or partial results gracefully
149 | 
150 | ## Security
151 | 
152 | Implementations **MUST**:
153 | 
154 | - Validate all completion inputs
155 | - Implement appropriate rate limiting
156 | - Control access to sensitive suggestions
157 | - Prevent completion-based information disclosure
158 | 


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/server/utilities/logging.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Logging
  3 | ---
  4 | 
  5 | <Info>**Protocol Revision**: 2025-03-26</Info>
  6 | 
  7 | The Model Context Protocol (MCP) provides a standardized way for servers to send
  8 | structured log messages to clients. Clients can control logging verbosity by setting
  9 | minimum log levels, with servers sending notifications containing severity levels,
 10 | optional logger names, and arbitrary JSON-serializable data.
 11 | 
 12 | ## User Interaction Model
 13 | 
 14 | Implementations are free to expose logging through any interface pattern that suits their
 15 | needs&mdash;the protocol itself does not mandate any specific user interaction model.
 16 | 
 17 | ## Capabilities
 18 | 
 19 | Servers that emit log message notifications **MUST** declare the `logging` capability:
 20 | 
 21 | ```json
 22 | {
 23 |   "capabilities": {
 24 |     "logging": {}
 25 |   }
 26 | }
 27 | ```
 28 | 
 29 | ## Log Levels
 30 | 
 31 | The protocol follows the standard syslog severity levels specified in
 32 | [RFC 5424](https://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1):
 33 | 
 34 | | Level     | Description                      | Example Use Case           |
 35 | | --------- | -------------------------------- | -------------------------- |
 36 | | debug     | Detailed debugging information   | Function entry/exit points |
 37 | | info      | General informational messages   | Operation progress updates |
 38 | | notice    | Normal but significant events    | Configuration changes      |
 39 | | warning   | Warning conditions               | Deprecated feature usage   |
 40 | | error     | Error conditions                 | Operation failures         |
 41 | | critical  | Critical conditions              | System component failures  |
 42 | | alert     | Action must be taken immediately | Data corruption detected   |
 43 | | emergency | System is unusable               | Complete system failure    |
 44 | 
 45 | ## Protocol Messages
 46 | 
 47 | ### Setting Log Level
 48 | 
 49 | To configure the minimum log level, clients **MAY** send a `logging/setLevel` request:
 50 | 
 51 | **Request:**
 52 | 
 53 | ```json
 54 | {
 55 |   "jsonrpc": "2.0",
 56 |   "id": 1,
 57 |   "method": "logging/setLevel",
 58 |   "params": {
 59 |     "level": "info"
 60 |   }
 61 | }
 62 | ```
 63 | 
 64 | ### Log Message Notifications
 65 | 
 66 | Servers send log messages using `notifications/message` notifications:
 67 | 
 68 | ```json
 69 | {
 70 |   "jsonrpc": "2.0",
 71 |   "method": "notifications/message",
 72 |   "params": {
 73 |     "level": "error",
 74 |     "logger": "database",
 75 |     "data": {
 76 |       "error": "Connection failed",
 77 |       "details": {
 78 |         "host": "localhost",
 79 |         "port": 5432
 80 |       }
 81 |     }
 82 |   }
 83 | }
 84 | ```
 85 | 
 86 | ## Message Flow
 87 | 
 88 | ```mermaid
 89 | sequenceDiagram
 90 |     participant Client
 91 |     participant Server
 92 | 
 93 |     Note over Client,Server: Configure Logging
 94 |     Client->>Server: logging/setLevel (info)
 95 |     Server-->>Client: Empty Result
 96 | 
 97 |     Note over Client,Server: Server Activity
 98 |     Server--)Client: notifications/message (info)
 99 |     Server--)Client: notifications/message (warning)
100 |     Server--)Client: notifications/message (error)
101 | 
102 |     Note over Client,Server: Level Change
103 |     Client->>Server: logging/setLevel (error)
104 |     Server-->>Client: Empty Result
105 |     Note over Server: Only sends error level<br/>and above
106 | ```
107 | 
108 | ## Error Handling
109 | 
110 | Servers **SHOULD** return standard JSON-RPC errors for common failure cases:
111 | 
112 | - Invalid log level: `-32602` (Invalid params)
113 | - Configuration errors: `-32603` (Internal error)
114 | 
115 | ## Implementation Considerations
116 | 
117 | 1. Servers **SHOULD**:
118 |    - Rate limit log messages
119 |    - Include relevant context in data field
120 |    - Use consistent logger names
121 |    - Remove sensitive information
122 | 
123 | 2. Clients **MAY**:
124 |    - Present log messages in the UI
125 |    - Implement log filtering/search
126 |    - Display severity visually
127 |    - Persist log messages
128 | 
129 | ## Security
130 | 
131 | 1. Log messages **MUST NOT** contain:
132 |    - Credentials or secrets
133 |    - Personal identifying information
134 |    - Internal system details that could aid attacks
135 | 
136 | 2. Implementations **SHOULD**:
137 |    - Rate limit messages
138 |    - Validate all data fields
139 |    - Control log access
140 |    - Monitor for sensitive content
141 | 


--------------------------------------------------------------------------------
/docs/specification/2025-03-26/server/utilities/pagination.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Pagination
 3 | ---
 4 | 
 5 | <Info>**Protocol Revision**: 2025-03-26</Info>
 6 | 
 7 | The Model Context Protocol (MCP) supports paginating list operations that may return
 8 | large result sets. Pagination allows servers to yield results in smaller chunks rather
 9 | than all at once.
10 | 
11 | Pagination is especially important when connecting to external services over the
12 | internet, but also useful for local integrations to avoid performance issues with large
13 | data sets.
14 | 
15 | ## Pagination Model
16 | 
17 | Pagination in MCP uses an opaque cursor-based approach, instead of numbered pages.
18 | 
19 | - The **cursor** is an opaque string token, representing a position in the result set
20 | - **Page size** is determined by the server, and clients **MUST NOT** assume a fixed page
21 |   size
22 | 
23 | ## Response Format
24 | 
25 | Pagination starts when the server sends a **response** that includes:
26 | 
27 | - The current page of results
28 | - An optional `nextCursor` field if more results exist
29 | 
30 | ```json
31 | {
32 |   "jsonrpc": "2.0",
33 |   "id": "123",
34 |   "result": {
35 |     "resources": [...],
36 |     "nextCursor": "eyJwYWdlIjogM30="
37 |   }
38 | }
39 | ```
40 | 
41 | ## Request Format
42 | 
43 | After receiving a cursor, the client can _continue_ paginating by issuing a request
44 | including that cursor:
45 | 
46 | ```json
47 | {
48 |   "jsonrpc": "2.0",
49 |   "method": "resources/list",
50 |   "params": {
51 |     "cursor": "eyJwYWdlIjogMn0="
52 |   }
53 | }
54 | ```
55 | 
56 | ## Pagination Flow
57 | 
58 | ```mermaid
59 | sequenceDiagram
60 |     participant Client
61 |     participant Server
62 | 
63 |     Client->>Server: List Request (no cursor)
64 |     loop Pagination Loop
65 |       Server-->>Client: Page of results + nextCursor
66 |       Client->>Server: List Request (with cursor)
67 |     end
68 | ```
69 | 
70 | ## Operations Supporting Pagination
71 | 
72 | The following MCP operations support pagination:
73 | 
74 | - `resources/list` - List available resources
75 | - `resources/templates/list` - List resource templates
76 | - `prompts/list` - List available prompts
77 | - `tools/list` - List available tools
78 | 
79 | ## Implementation Guidelines
80 | 
81 | 1. Servers **SHOULD**:
82 |    - Provide stable cursors
83 |    - Handle invalid cursors gracefully
84 | 
85 | 2. Clients **SHOULD**:
86 |    - Treat a missing `nextCursor` as the end of results
87 |    - Support both paginated and non-paginated flows
88 | 
89 | 3. Clients **MUST** treat cursors as opaque tokens:
90 |    - Don't make assumptions about cursor format
91 |    - Don't attempt to parse or modify cursors
92 |    - Don't persist cursors across sessions
93 | 
94 | ## Error Handling
95 | 
96 | Invalid cursors **SHOULD** result in an error with code -32602 (Invalid params).
97 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/architecture/index.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Architecture
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | The Model Context Protocol (MCP) follows a client-host-server architecture where each
  8 | host can run multiple client instances. This architecture enables users to integrate AI
  9 | capabilities across applications while maintaining clear security boundaries and
 10 | isolating concerns. Built on JSON-RPC, MCP provides a stateful session protocol focused
 11 | on context exchange and sampling coordination between clients and servers.
 12 | 
 13 | ## Core Components
 14 | 
 15 | ```mermaid
 16 | graph LR
 17 |     subgraph "Application Host Process"
 18 |         H[Host]
 19 |         C1[Client 1]
 20 |         C2[Client 2]
 21 |         C3[Client 3]
 22 |         H --> C1
 23 |         H --> C2
 24 |         H --> C3
 25 |     end
 26 | 
 27 |     subgraph "Local machine"
 28 |         S1[Server 1<br>Files & Git]
 29 |         S2[Server 2<br>Database]
 30 |         R1[("Local<br>Resource A")]
 31 |         R2[("Local<br>Resource B")]
 32 | 
 33 |         C1 --> S1
 34 |         C2 --> S2
 35 |         S1 <--> R1
 36 |         S2 <--> R2
 37 |     end
 38 | 
 39 |     subgraph "Internet"
 40 |         S3[Server 3<br>External APIs]
 41 |         R3[("Remote<br>Resource C")]
 42 | 
 43 |         C3 --> S3
 44 |         S3 <--> R3
 45 |     end
 46 | ```
 47 | 
 48 | ### Host
 49 | 
 50 | The host process acts as the container and coordinator:
 51 | 
 52 | - Creates and manages multiple client instances
 53 | - Controls client connection permissions and lifecycle
 54 | - Enforces security policies and consent requirements
 55 | - Handles user authorization decisions
 56 | - Coordinates AI/LLM integration and sampling
 57 | - Manages context aggregation across clients
 58 | 
 59 | ### Clients
 60 | 
 61 | Each client is created by the host and maintains an isolated server connection:
 62 | 
 63 | - Establishes one stateful session per server
 64 | - Handles protocol negotiation and capability exchange
 65 | - Routes protocol messages bidirectionally
 66 | - Manages subscriptions and notifications
 67 | - Maintains security boundaries between servers
 68 | 
 69 | A host application creates and manages multiple clients, with each client having a 1:1
 70 | relationship with a particular server.
 71 | 
 72 | ### Servers
 73 | 
 74 | Servers provide specialized context and capabilities:
 75 | 
 76 | - Expose resources, tools and prompts via MCP primitives
 77 | - Operate independently with focused responsibilities
 78 | - Request sampling through client interfaces
 79 | - Must respect security constraints
 80 | - Can be local processes or remote services
 81 | 
 82 | ## Design Principles
 83 | 
 84 | MCP is built on several key design principles that inform its architecture and
 85 | implementation:
 86 | 
 87 | 1. **Servers should be extremely easy to build**
 88 |    - Host applications handle complex orchestration responsibilities
 89 |    - Servers focus on specific, well-defined capabilities
 90 |    - Simple interfaces minimize implementation overhead
 91 |    - Clear separation enables maintainable code
 92 | 
 93 | 2. **Servers should be highly composable**
 94 |    - Each server provides focused functionality in isolation
 95 |    - Multiple servers can be combined seamlessly
 96 |    - Shared protocol enables interoperability
 97 |    - Modular design supports extensibility
 98 | 
 99 | 3. **Servers should not be able to read the whole conversation, nor "see into" other
100 |    servers**
101 |    - Servers receive only necessary contextual information
102 |    - Full conversation history stays with the host
103 |    - Each server connection maintains isolation
104 |    - Cross-server interactions are controlled by the host
105 |    - Host process enforces security boundaries
106 | 
107 | 4. **Features can be added to servers and clients progressively**
108 |    - Core protocol provides minimal required functionality
109 |    - Additional capabilities can be negotiated as needed
110 |    - Servers and clients evolve independently
111 |    - Protocol designed for future extensibility
112 |    - Backwards compatibility is maintained
113 | 
114 | ## Capability Negotiation
115 | 
116 | The Model Context Protocol uses a capability-based negotiation system where clients and
117 | servers explicitly declare their supported features during initialization. Capabilities
118 | determine which protocol features and primitives are available during a session.
119 | 
120 | - Servers declare capabilities like resource subscriptions, tool support, and prompt
121 |   templates
122 | - Clients declare capabilities like sampling support and notification handling
123 | - Both parties must respect declared capabilities throughout the session
124 | - Additional capabilities can be negotiated through extensions to the protocol
125 | 
126 | ```mermaid
127 | sequenceDiagram
128 |     participant Host
129 |     participant Client
130 |     participant Server
131 | 
132 |     Host->>+Client: Initialize client
133 |     Client->>+Server: Initialize session with capabilities
134 |     Server-->>Client: Respond with supported capabilities
135 | 
136 |     Note over Host,Server: Active Session with Negotiated Features
137 | 
138 |     loop Client Requests
139 |         Host->>Client: User- or model-initiated action
140 |         Client->>Server: Request (tools/resources)
141 |         Server-->>Client: Response
142 |         Client-->>Host: Update UI or respond to model
143 |     end
144 | 
145 |     loop Server Requests
146 |         Server->>Client: Request (sampling)
147 |         Client->>Host: Forward to AI
148 |         Host-->>Client: AI response
149 |         Client-->>Server: Response
150 |     end
151 | 
152 |     loop Notifications
153 |         Server--)Client: Resource updates
154 |         Client--)Server: Status changes
155 |     end
156 | 
157 |     Host->>Client: Terminate
158 |     Client->>-Server: End session
159 |     deactivate Server
160 | ```
161 | 
162 | Each capability unlocks specific protocol features for use during the session. For
163 | example:
164 | 
165 | - Implemented [server features](/specification/2025-06-18/server) must be advertised in the
166 |   server's capabilities
167 | - Emitting resource subscription notifications requires the server to declare
168 |   subscription support
169 | - Tool invocation requires the server to declare tool capabilities
170 | - [Sampling](/specification/2025-06-18/client) requires the client to declare support in its
171 |   capabilities
172 | 
173 | This capability negotiation ensures clients and servers have a clear understanding of
174 | supported functionality while maintaining protocol extensibility.
175 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/basic/authorization.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Authorization
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: 2025-06-18</Info>
  8 | 
  9 | ## Introduction
 10 | 
 11 | ### Purpose and Scope
 12 | 
 13 | The Model Context Protocol provides authorization capabilities at the transport level,
 14 | enabling MCP clients to make requests to restricted MCP servers on behalf of resource
 15 | owners. This specification defines the authorization flow for HTTP-based transports.
 16 | 
 17 | ### Protocol Requirements
 18 | 
 19 | Authorization is **OPTIONAL** for MCP implementations. When supported:
 20 | 
 21 | - Implementations using an HTTP-based transport **SHOULD** conform to this specification.
 22 | - Implementations using an STDIO transport **SHOULD NOT** follow this specification, and
 23 |   instead retrieve credentials from the environment.
 24 | - Implementations using alternative transports **MUST** follow established security best
 25 |   practices for their protocol.
 26 | 
 27 | ### Standards Compliance
 28 | 
 29 | This authorization mechanism is based on established specifications listed below, but
 30 | implements a selected subset of their features to ensure security and interoperability
 31 | while maintaining simplicity:
 32 | 
 33 | - OAuth 2.1 IETF DRAFT ([draft-ietf-oauth-v2-1-13](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13))
 34 | - OAuth 2.0 Authorization Server Metadata
 35 |   ([RFC8414](https://datatracker.ietf.org/doc/html/rfc8414))
 36 | - OAuth 2.0 Dynamic Client Registration Protocol
 37 |   ([RFC7591](https://datatracker.ietf.org/doc/html/rfc7591))
 38 | - OAuth 2.0 Protected Resource Metadata ([RFC9728](https://datatracker.ietf.org/doc/html/rfc9728))
 39 | 
 40 | ## Authorization Flow
 41 | 
 42 | ### Roles
 43 | 
 44 | A protected _MCP server_ acts as an [OAuth 2.1 resource server](https://www.ietf.org/archive/id/draft-ietf-oauth-v2-1-13.html#name-roles),
 45 | capable of accepting and responding to protected resource requests using access tokens.
 46 | 
 47 | An _MCP client_ acts as an [OAuth 2.1 client](https://www.ietf.org/archive/id/draft-ietf-oauth-v2-1-13.html#name-roles),
 48 | making protected resource requests on behalf of a resource owner.
 49 | 
 50 | The _authorization server_ is responsible for interacting with the user (if necessary) and issuing access tokens for use at the MCP server.
 51 | The implementation details of the authorization server are beyond the scope of this specification. It may be hosted with the
 52 | resource server or a separate entity. The [Authorization Server Discovery section](#authorization-server-discovery)
 53 | specifies how an MCP server indicates the location of its corresponding authorization server to a client.
 54 | 
 55 | ### Overview
 56 | 
 57 | 1. Authorization servers **MUST** implement OAuth 2.1 with appropriate security
 58 |    measures for both confidential and public clients.
 59 | 
 60 | 1. Authorization servers and MCP clients **SHOULD** support the OAuth 2.0 Dynamic Client Registration
 61 |    Protocol ([RFC7591](https://datatracker.ietf.org/doc/html/rfc7591)).
 62 | 
 63 | 1. MCP servers **MUST** implement OAuth 2.0 Protected Resource Metadata ([RFC9728](https://datatracker.ietf.org/doc/html/rfc9728)).
 64 |    MCP clients **MUST** use OAuth 2.0 Protected Resource Metadata for authorization server discovery.
 65 | 
 66 | 1. Authorization servers **MUST** provide OAuth 2.0 Authorization
 67 |    Server Metadata ([RFC8414](https://datatracker.ietf.org/doc/html/rfc8414)).
 68 |    MCP clients **MUST** use the OAuth 2.0 Authorization Server Metadata.
 69 | 
 70 | ### Authorization Server Discovery
 71 | 
 72 | This section describes the mechanisms by which MCP servers advertise their associated
 73 | authorization servers to MCP clients, as well as the discovery process through which MCP
 74 | clients can determine authorization server endpoints and supported capabilities.
 75 | 
 76 | #### Authorization Server Location
 77 | 
 78 | MCP servers **MUST** implement the OAuth 2.0 Protected Resource Metadata ([RFC9728](https://datatracker.ietf.org/doc/html/rfc9728))
 79 | specification to indicate the locations of authorization servers. The Protected Resource Metadata document returned by the MCP server **MUST** include
 80 | the `authorization_servers` field containing at least one authorization server.
 81 | 
 82 | The specific use of `authorization_servers` is beyond the scope of this specification; implementers should consult
 83 | OAuth 2.0 Protected Resource Metadata ([RFC9728](https://datatracker.ietf.org/doc/html/rfc9728)) for
 84 | guidance on implementation details.
 85 | 
 86 | Implementors should note that Protected Resource Metadata documents can define multiple authorization servers. The responsibility for selecting which authorization server to use lies with the MCP client, following the guidelines specified in
 87 | [RFC9728 Section 7.6 "Authorization Servers"](https://datatracker.ietf.org/doc/html/rfc9728#name-authorization-servers).
 88 | 
 89 | MCP servers **MUST** use the HTTP header `WWW-Authenticate` when returning a _401 Unauthorized_ to indicate the location of the resource server metadata URL
 90 | as described in [RFC9728 Section 5.1 "WWW-Authenticate Response"](https://datatracker.ietf.org/doc/html/rfc9728#name-www-authenticate-response).
 91 | 
 92 | MCP clients **MUST** be able to parse `WWW-Authenticate` headers and respond appropriately to `HTTP 401 Unauthorized` responses from the MCP server.
 93 | 
 94 | #### Server Metadata Discovery
 95 | 
 96 | MCP clients **MUST** follow the OAuth 2.0 Authorization Server Metadata [RFC8414](https://datatracker.ietf.org/doc/html/rfc8414)
 97 | specification to obtain the information required to interact with the authorization server.
 98 | 
 99 | #### Sequence Diagram
100 | 
101 | The following diagram outlines an example flow:
102 | 
103 | ```mermaid
104 | sequenceDiagram
105 |     participant C as Client
106 |     participant M as MCP Server (Resource Server)
107 |     participant A as Authorization Server
108 | 
109 |     C->>M: MCP request without token
110 |     M-->>C: HTTP 401 Unauthorized with WWW-Authenticate header
111 |     Note over C: Extract resource_metadata<br />from WWW-Authenticate
112 | 
113 |     C->>M: GET /.well-known/oauth-protected-resource
114 |     M-->>C: Resource metadata with authorization server URL
115 |     Note over C: Validate RS metadata,<br />build AS metadata URL
116 | 
117 |     C->>A: GET /.well-known/oauth-authorization-server
118 |     A-->>C: Authorization server metadata
119 | 
120 |     Note over C,A: OAuth 2.1 authorization flow happens here
121 | 
122 |     C->>A: Token request
123 |     A-->>C: Access token
124 | 
125 |     C->>M: MCP request with access token
126 |     M-->>C: MCP response
127 |     Note over C,M: MCP communication continues with valid token
128 | ```
129 | 
130 | ### Dynamic Client Registration
131 | 
132 | MCP clients and authorization servers **SHOULD** support the
133 | OAuth 2.0 Dynamic Client Registration Protocol [RFC7591](https://datatracker.ietf.org/doc/html/rfc7591)
134 | to allow MCP clients to obtain OAuth client IDs without user interaction. This provides a
135 | standardized way for clients to automatically register with new authorization servers, which is crucial
136 | for MCP because:
137 | 
138 | - Clients may not know all possible MCP servers and their authorization servers in advance.
139 | - Manual registration would create friction for users.
140 | - It enables seamless connection to new MCP servers and their authorization servers.
141 | - Authorization servers can implement their own registration policies.
142 | 
143 | Any authorization servers that _do not_ support Dynamic Client Registration need to provide
144 | alternative ways to obtain a client ID (and, if applicable, client credentials). For one of
145 | these authorization servers, MCP clients will have to either:
146 | 
147 | 1. Hardcode a client ID (and, if applicable, client credentials) specifically for the MCP client to use when
148 |    interacting with that authorization server, or
149 | 2. Present a UI to users that allows them to enter these details, after registering an
150 |    OAuth client themselves (e.g., through a configuration interface hosted by the
151 |    server).
152 | 
153 | ### Authorization Flow Steps
154 | 
155 | The complete Authorization flow proceeds as follows:
156 | 
157 | ```mermaid
158 | sequenceDiagram
159 |     participant B as User-Agent (Browser)
160 |     participant C as Client
161 |     participant M as MCP Server (Resource Server)
162 |     participant A as Authorization Server
163 | 
164 |     C->>M: MCP request without token
165 |     M->>C: HTTP 401 Unauthorized with WWW-Authenticate header
166 |     Note over C: Extract resource_metadata URL from WWW-Authenticate
167 | 
168 |     C->>M: Request Protected Resource Metadata
169 |     M->>C: Return metadata
170 | 
171 |     Note over C: Parse metadata and extract authorization server(s)<br/>Client determines AS to use
172 | 
173 |     C->>A: GET /.well-known/oauth-authorization-server
174 |     A->>C: Authorization server metadata response
175 | 
176 |     alt Dynamic client registration
177 |         C->>A: POST /register
178 |         A->>C: Client Credentials
179 |     end
180 | 
181 |     Note over C: Generate PKCE parameters<br/>Include resource parameter
182 |     C->>B: Open browser with authorization URL + code_challenge + resource
183 |     B->>A: Authorization request with resource parameter
184 |     Note over A: User authorizes
185 |     A->>B: Redirect to callback with authorization code
186 |     B->>C: Authorization code callback
187 |     C->>A: Token request + code_verifier + resource
188 |     A->>C: Access token (+ refresh token)
189 |     C->>M: MCP request with access token
190 |     M-->>C: MCP response
191 |     Note over C,M: MCP communication continues with valid token
192 | ```
193 | 
194 | #### Resource Parameter Implementation
195 | 
196 | MCP clients **MUST** implement Resource Indicators for OAuth 2.0 as defined in [RFC 8707](https://www.rfc-editor.org/rfc/rfc8707.html)
197 | to explicitly specify the target resource for which the token is being requested. The `resource` parameter:
198 | 
199 | 1. **MUST** be included in both authorization requests and token requests.
200 | 2. **MUST** identify the MCP server that the client intends to use the token with.
201 | 3. **MUST** use the canonical URI of the MCP server as defined in [RFC 8707 Section 2](https://www.rfc-editor.org/rfc/rfc8707.html#name-access-token-request).
202 | 
203 | ##### Canonical Server URI
204 | 
205 | For the purposes of this specification, the canonical URI of an MCP server is defined as the resource identifier as specified in
206 | [RFC 8707 Section 2](https://www.rfc-editor.org/rfc/rfc8707.html#section-2) and aligns with the `resource` parameter in
207 | [RFC 9728](https://datatracker.ietf.org/doc/html/rfc9728).
208 | 
209 | MCP clients **SHOULD** provide the most specific URI that they can for the MCP server they intend to access, following the guidance in [RFC 8707](https://www.rfc-editor.org/rfc/rfc8707). While the canonical form uses lowercase scheme and host components, implementations **SHOULD** accept uppercase scheme and host components for robustness and interoperability.
210 | 
211 | Examples of valid canonical URIs:
212 | 
213 | - `https://mcp.example.com/mcp`
214 | - `https://mcp.example.com`
215 | - `https://mcp.example.com:8443`
216 | - `https://mcp.example.com/server/mcp` (when path component is necessary to identify individual MCP server)
217 | 
218 | Examples of invalid canonical URIs:
219 | 
220 | - `mcp.example.com` (missing scheme)
221 | - `https://mcp.example.com#fragment` (contains fragment)
222 | 
223 | > **Note:** While both `https://mcp.example.com/` (with trailing slash) and `https://mcp.example.com` (without trailing slash) are technically valid absolute URIs according to [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986), implementations **SHOULD** consistently use the form without the trailing slash for better interoperability unless the trailing slash is semantically significant for the specific resource.
224 | 
225 | For example, if accessing an MCP server at `https://mcp.example.com`, the authorization request would include:
226 | 
227 | ```
228 | &resource=https%3A%2F%2Fmcp.example.com
229 | ```
230 | 
231 | MCP clients **MUST** send this parameter regardless of whether authorization servers support it.
232 | 
233 | ### Access Token Usage
234 | 
235 | #### Token Requirements
236 | 
237 | Access token handling when making requests to MCP servers **MUST** conform to the requirements defined in
238 | [OAuth 2.1 Section 5 "Resource Requests"](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-5).
239 | Specifically:
240 | 
241 | 1. MCP client **MUST** use the Authorization request header field defined in
242 |    [OAuth 2.1 Section 5.1.1](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-5.1.1):
243 | 
244 | ```
245 | Authorization: Bearer <access-token>
246 | ```
247 | 
248 | Note that authorization **MUST** be included in every HTTP request from client to server,
249 | even if they are part of the same logical session.
250 | 
251 | 2. Access tokens **MUST NOT** be included in the URI query string
252 | 
253 | Example request:
254 | 
255 | ```http
256 | GET /mcp HTTP/1.1
257 | Host: mcp.example.com
258 | Authorization: Bearer eyJhbGciOiJIUzI1NiIs...
259 | ```
260 | 
261 | #### Token Handling
262 | 
263 | MCP servers, acting in their role as an OAuth 2.1 resource server, **MUST** validate access tokens as described in
264 | [OAuth 2.1 Section 5.2](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-5.2).
265 | MCP servers **MUST** validate that access tokens were issued specifically for them as the intended audience,
266 | according to [RFC 8707 Section 2](https://www.rfc-editor.org/rfc/rfc8707.html#section-2).
267 | If validation fails, servers **MUST** respond according to
268 | [OAuth 2.1 Section 5.3](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-5.3)
269 | error handling requirements. Invalid or expired tokens **MUST** receive a HTTP 401
270 | response.
271 | 
272 | MCP clients **MUST NOT** send tokens to the MCP server other than ones issued by the MCP server's authorization server.
273 | 
274 | Authorization servers **MUST** only accept tokens that are valid for use with their
275 | own resources.
276 | 
277 | MCP servers **MUST NOT** accept or transit any other tokens.
278 | 
279 | ### Error Handling
280 | 
281 | Servers **MUST** return appropriate HTTP status codes for authorization errors:
282 | 
283 | | Status Code | Description  | Usage                                      |
284 | | ----------- | ------------ | ------------------------------------------ |
285 | | 401         | Unauthorized | Authorization required or token invalid    |
286 | | 403         | Forbidden    | Invalid scopes or insufficient permissions |
287 | | 400         | Bad Request  | Malformed authorization request            |
288 | 
289 | ## Security Considerations
290 | 
291 | Implementations **MUST** follow OAuth 2.1 security best practices as laid out in [OAuth 2.1 Section 7. "Security Considerations"](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#name-security-considerations).
292 | 
293 | ### Token Audience Binding and Validation
294 | 
295 | [RFC 8707](https://www.rfc-editor.org/rfc/rfc8707.html) Resource Indicators provide critical security benefits by binding tokens to their intended
296 | audiences **when the Authorization Server supports the capability**. To enable current and future adoption:
297 | 
298 | - MCP clients **MUST** include the `resource` parameter in authorization and token requests as specified in the [Resource Parameter Implementation](#resource-parameter-implementation) section
299 | - MCP servers **MUST** validate that tokens presented to them were specifically issued for their use
300 | 
301 | The [Security Best Practices document](/specification/2025-06-18/basic/security_best_practices#token-passthrough)
302 | outlines why token audience validation is crucial and why token passthrough is explicitly forbidden.
303 | 
304 | ### Token Theft
305 | 
306 | Attackers who obtain tokens stored by the client, or tokens cached or logged on the server can access protected resources with
307 | requests that appear legitimate to resource servers.
308 | 
309 | Clients and servers **MUST** implement secure token storage and follow OAuth best practices,
310 | as outlined in [OAuth 2.1, Section 7.1](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-7.1).
311 | 
312 | Authorization servers **SHOULD** issue short-lived access tokens to reduce the impact of leaked tokens.
313 | For public clients, authorization servers **MUST** rotate refresh tokens as described in [OAuth 2.1 Section 4.3.1 "Token Endpoint Extension"](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-4.3.1).
314 | 
315 | ### Communication Security
316 | 
317 | Implementations **MUST** follow [OAuth 2.1 Section 1.5 "Communication Security"](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-1.5).
318 | 
319 | Specifically:
320 | 
321 | 1. All authorization server endpoints **MUST** be served over HTTPS.
322 | 1. All redirect URIs **MUST** be either `localhost` or use HTTPS.
323 | 
324 | ### Authorization Code Protection
325 | 
326 | An attacker who has gained access to an authorization code contained in an authorization response can try to redeem the authorization code for an access token or otherwise make use of the authorization code.
327 | (Further described in [OAuth 2.1 Section 7.5](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-7.5))
328 | 
329 | To mitigate this, MCP clients **MUST** implement PKCE according to [OAuth 2.1 Section 7.5.2](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-7.5.2).
330 | PKCE helps prevent authorization code interception and injection attacks by requiring clients to create a secret verifier-challenge pair, ensuring that only the original requestor can exchange an authorization code for tokens.
331 | 
332 | ### Open Redirection
333 | 
334 | An attacker may craft malicious redirect URIs to direct users to phishing sites.
335 | 
336 | MCP clients **MUST** have redirect URIs registered with the authorization server.
337 | 
338 | Authorization servers **MUST** validate exact redirect URIs against pre-registered values to prevent redirection attacks.
339 | 
340 | MCP clients **SHOULD** use and verify state parameters in the authorization code flow
341 | and discard any results that do not include or have a mismatch with the original state.
342 | 
343 | Authorization servers **MUST** take precautions to prevent redirecting user agents to untrusted URI's, following suggestions laid out in [OAuth 2.1 Section 7.12.2](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-7.12.2)
344 | 
345 | Authorization servers **SHOULD** only automatically redirect the user agent if it trusts the redirection URI. If the URI is not trusted, the authorization server MAY inform the user and rely on the user to make the correct decision.
346 | 
347 | ### Confused Deputy Problem
348 | 
349 | Attackers can exploit MCP servers acting as intermediaries to third-party APIs, leading to [confused deputy vulnerabilities](/specification/2025-06-18/basic/security_best_practices#confused-deputy-problem).
350 | By using stolen authorization codes, they can obtain access tokens without user consent.
351 | 
352 | MCP proxy servers using static client IDs **MUST** obtain user consent for each dynamically
353 | registered client before forwarding to third-party authorization servers (which may require additional consent).
354 | 
355 | ### Access Token Privilege Restriction
356 | 
357 | An attacker can gain unauthorized access or otherwise compromise an MCP server if the server accepts tokens issued for other resources.
358 | 
359 | This vulnerability has two critical dimensions:
360 | 
361 | 1. **Audience validation failures.** When an MCP server doesn't verify that tokens were specifically intended for it (for example, via the audience claim, as mentioned in [RFC9068](https://www.rfc-editor.org/rfc/rfc9068.html)), it may accept tokens originally issued for other services. This breaks a fundamental OAuth security boundary, allowing attackers to reuse legitimate tokens across different services than intended.
362 | 2. **Token passthrough.** If the MCP server not only accepts tokens with incorrect audiences but also forwards these unmodified tokens to downstream services, it can potentially cause the ["confused deputy" problem](#confused-deputy-problem), where the downstream API may incorrectly trust the token as if it came from the MCP server or assume the token was validated by the upstream API. See the [Token Passthrough section](/specification/2025-06-18/basic/security_best_practices#token-passthrough) of the Security Best Practices guide for additional details.
363 | 
364 | MCP servers **MUST** validate access tokens before processing the request, ensuring the access token is issued specifically for the MCP server, and take all necessary steps to ensure no data is returned to unauthorized parties.
365 | 
366 | A MCP server **MUST** follow the guidelines in [OAuth 2.1 - Section 5.2](https://www.ietf.org/archive/id/draft-ietf-oauth-v2-1-13.html#section-5.2) to validate inbound tokens.
367 | 
368 | MCP servers **MUST** only accept tokens specifically intended for themselves and **MUST** reject tokens that do not include them in the audience claim or otherwise verify that they are the intended recipient of the token. See the [Security Best Practices Token Passthrough section](/specification/2025-06-18/basic/security_best_practices#token-passthrough) for details.
369 | 
370 | If the MCP server makes requests to upstream APIs, it may act as an OAuth client to them. The access token used at the upstream API is a separate token, issued by the upstream authorization server. The MCP server **MUST NOT** pass through the token it received from the MCP client.
371 | 
372 | MCP clients **MUST** implement and use the `resource` parameter as defined in [RFC 8707 - Resource Indicators for OAuth 2.0](https://www.rfc-editor.org/rfc/rfc8707.html)
373 | to explicitly specify the target resource for which the token is being requested. This requirement aligns with the recommendation in
374 | [RFC 9728 Section 7.4](https://datatracker.ietf.org/doc/html/rfc9728#section-7.4). This ensures that access tokens are bound to their intended resources and
375 | cannot be misused across different services.
376 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/basic/index.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Overview
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: 2025-06-18</Info>
  8 | 
  9 | The Model Context Protocol consists of several key components that work together:
 10 | 
 11 | - **Base Protocol**: Core JSON-RPC message types
 12 | - **Lifecycle Management**: Connection initialization, capability negotiation, and
 13 |   session control
 14 | - **Authorization**: Authentication and authorization framework for HTTP-based transports
 15 | - **Server Features**: Resources, prompts, and tools exposed by servers
 16 | - **Client Features**: Sampling and root directory lists provided by clients
 17 | - **Utilities**: Cross-cutting concerns like logging and argument completion
 18 | 
 19 | All implementations **MUST** support the base protocol and lifecycle management
 20 | components. Other components **MAY** be implemented based on the specific needs of the
 21 | application.
 22 | 
 23 | These protocol layers establish clear separation of concerns while enabling rich
 24 | interactions between clients and servers. The modular design allows implementations to
 25 | support exactly the features they need.
 26 | 
 27 | ## Messages
 28 | 
 29 | All messages between MCP clients and servers **MUST** follow the
 30 | [JSON-RPC 2.0](https://www.jsonrpc.org/specification) specification. The protocol defines
 31 | these types of messages:
 32 | 
 33 | ### Requests
 34 | 
 35 | Requests are sent from the client to the server or vice versa, to initiate an operation.
 36 | 
 37 | ```typescript
 38 | {
 39 |   jsonrpc: "2.0";
 40 |   id: string | number;
 41 |   method: string;
 42 |   params?: {
 43 |     [key: string]: unknown;
 44 |   };
 45 | }
 46 | ```
 47 | 
 48 | - Requests **MUST** include a string or integer ID.
 49 | - Unlike base JSON-RPC, the ID **MUST NOT** be `null`.
 50 | - The request ID **MUST NOT** have been previously used by the requestor within the same
 51 |   session.
 52 | 
 53 | ### Responses
 54 | 
 55 | Responses are sent in reply to requests, containing the result or error of the operation.
 56 | 
 57 | ```typescript
 58 | {
 59 |   jsonrpc: "2.0";
 60 |   id: string | number;
 61 |   result?: {
 62 |     [key: string]: unknown;
 63 |   }
 64 |   error?: {
 65 |     code: number;
 66 |     message: string;
 67 |     data?: unknown;
 68 |   }
 69 | }
 70 | ```
 71 | 
 72 | - Responses **MUST** include the same ID as the request they correspond to.
 73 | - **Responses** are further sub-categorized as either **successful results** or
 74 |   **errors**. Either a `result` or an `error` **MUST** be set. A response **MUST NOT**
 75 |   set both.
 76 | - Results **MAY** follow any JSON object structure, while errors **MUST** include an
 77 |   error code and message at minimum.
 78 | - Error codes **MUST** be integers.
 79 | 
 80 | ### Notifications
 81 | 
 82 | Notifications are sent from the client to the server or vice versa, as a one-way message.
 83 | The receiver **MUST NOT** send a response.
 84 | 
 85 | ```typescript
 86 | {
 87 |   jsonrpc: "2.0";
 88 |   method: string;
 89 |   params?: {
 90 |     [key: string]: unknown;
 91 |   };
 92 | }
 93 | ```
 94 | 
 95 | - Notifications **MUST NOT** include an ID.
 96 | 
 97 | ## Auth
 98 | 
 99 | MCP provides an [Authorization](/specification/2025-06-18/basic/authorization) framework for use with HTTP.
100 | Implementations using an HTTP-based transport **SHOULD** conform to this specification,
101 | whereas implementations using STDIO transport **SHOULD NOT** follow this specification,
102 | and instead retrieve credentials from the environment.
103 | 
104 | Additionally, clients and servers **MAY** negotiate their own custom authentication and
105 | authorization strategies.
106 | 
107 | For further discussions and contributions to the evolution of MCP’s auth mechanisms, join
108 | us in
109 | [GitHub Discussions](https://github.com/modelcontextprotocol/specification/discussions)
110 | to help shape the future of the protocol!
111 | 
112 | ## Schema
113 | 
114 | The full specification of the protocol is defined as a
115 | [TypeScript schema](https://github.com/modelcontextprotocol/specification/blob/main/schema/2025-06-18/schema.ts).
116 | This is the source of truth for all protocol messages and structures.
117 | 
118 | There is also a
119 | [JSON Schema](https://github.com/modelcontextprotocol/specification/blob/main/schema/2025-06-18/schema.json),
120 | which is automatically generated from the TypeScript source of truth, for use with
121 | various automated tooling.
122 | 
123 | ### General fields
124 | 
125 | #### `_meta`
126 | 
127 | The `_meta` property/parameter is reserved by MCP to allow clients and servers
128 | to attach additional metadata to their interactions.
129 | 
130 | Certain key names are reserved by MCP for protocol-level metadata, as specified below;
131 | implementations MUST NOT make assumptions about values at these keys.
132 | 
133 | Additionally, definitions in the [schema](https://github.com/modelcontextprotocol/specification/blob/main/schema/2025-06-18/schema.ts)
134 | may reserve particular names for purpose-specific metadata, as declared in those definitions.
135 | 
136 | **Key name format:** valid `_meta` key names have two segments: an optional **prefix**, and a **name**.
137 | 
138 | **Prefix:**
139 | 
140 | - If specified, MUST be a series of labels separated by dots (`.`), followed by a slash (`/`).
141 |   - Labels MUST start with a letter and end with a letter or digit; interior characters can be letters, digits, or hyphens (`-`).
142 | - Any prefix beginning with zero or more valid labels, followed by `modelcontextprotocol` or `mcp`, followed by any valid label,
143 |   is **reserved** for MCP use.
144 |   - For example: `modelcontextprotocol.io/`, `mcp.dev/`, `api.modelcontextprotocol.org/`, and `tools.mcp.com/` are all reserved.
145 | 
146 | **Name:**
147 | 
148 | - Unless empty, MUST begin and end with an alphanumeric character (`[a-z0-9A-Z]`).
149 | - MAY contain hyphens (`-`), underscores (`_`), dots (`.`), and alphanumerics in between.
150 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/basic/lifecycle.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Lifecycle
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: 2025-06-18</Info>
  8 | 
  9 | The Model Context Protocol (MCP) defines a rigorous lifecycle for client-server
 10 | connections that ensures proper capability negotiation and state management.
 11 | 
 12 | 1. **Initialization**: Capability negotiation and protocol version agreement
 13 | 2. **Operation**: Normal protocol communication
 14 | 3. **Shutdown**: Graceful termination of the connection
 15 | 
 16 | ```mermaid
 17 | sequenceDiagram
 18 |     participant Client
 19 |     participant Server
 20 | 
 21 |     Note over Client,Server: Initialization Phase
 22 |     activate Client
 23 |     Client->>+Server: initialize request
 24 |     Server-->>Client: initialize response
 25 |     Client--)Server: initialized notification
 26 | 
 27 |     Note over Client,Server: Operation Phase
 28 |     rect rgb(200, 220, 250)
 29 |         note over Client,Server: Normal protocol operations
 30 |     end
 31 | 
 32 |     Note over Client,Server: Shutdown
 33 |     Client--)-Server: Disconnect
 34 |     deactivate Server
 35 |     Note over Client,Server: Connection closed
 36 | ```
 37 | 
 38 | ## Lifecycle Phases
 39 | 
 40 | ### Initialization
 41 | 
 42 | The initialization phase **MUST** be the first interaction between client and server.
 43 | During this phase, the client and server:
 44 | 
 45 | - Establish protocol version compatibility
 46 | - Exchange and negotiate capabilities
 47 | - Share implementation details
 48 | 
 49 | The client **MUST** initiate this phase by sending an `initialize` request containing:
 50 | 
 51 | - Protocol version supported
 52 | - Client capabilities
 53 | - Client implementation information
 54 | 
 55 | ```json
 56 | {
 57 |   "jsonrpc": "2.0",
 58 |   "id": 1,
 59 |   "method": "initialize",
 60 |   "params": {
 61 |     "protocolVersion": "2024-11-05",
 62 |     "capabilities": {
 63 |       "roots": {
 64 |         "listChanged": true
 65 |       },
 66 |       "sampling": {},
 67 |       "elicitation": {}
 68 |     },
 69 |     "clientInfo": {
 70 |       "name": "ExampleClient",
 71 |       "title": "Example Client Display Name",
 72 |       "version": "1.0.0"
 73 |     }
 74 |   }
 75 | }
 76 | ```
 77 | 
 78 | The server **MUST** respond with its own capabilities and information:
 79 | 
 80 | ```json
 81 | {
 82 |   "jsonrpc": "2.0",
 83 |   "id": 1,
 84 |   "result": {
 85 |     "protocolVersion": "2024-11-05",
 86 |     "capabilities": {
 87 |       "logging": {},
 88 |       "prompts": {
 89 |         "listChanged": true
 90 |       },
 91 |       "resources": {
 92 |         "subscribe": true,
 93 |         "listChanged": true
 94 |       },
 95 |       "tools": {
 96 |         "listChanged": true
 97 |       }
 98 |     },
 99 |     "serverInfo": {
100 |       "name": "ExampleServer",
101 |       "title": "Example Server Display Name",
102 |       "version": "1.0.0"
103 |     },
104 |     "instructions": "Optional instructions for the client"
105 |   }
106 | }
107 | ```
108 | 
109 | After successful initialization, the client **MUST** send an `initialized` notification
110 | to indicate it is ready to begin normal operations:
111 | 
112 | ```json
113 | {
114 |   "jsonrpc": "2.0",
115 |   "method": "notifications/initialized"
116 | }
117 | ```
118 | 
119 | - The client **SHOULD NOT** send requests other than
120 |   [pings](/specification/2025-06-18/basic/utilities/ping) before the server has responded to the
121 |   `initialize` request.
122 | - The server **SHOULD NOT** send requests other than
123 |   [pings](/specification/2025-06-18/basic/utilities/ping) and
124 |   [logging](/specification/2025-06-18/server/utilities/logging) before receiving the `initialized`
125 |   notification.
126 | 
127 | #### Version Negotiation
128 | 
129 | In the `initialize` request, the client **MUST** send a protocol version it supports.
130 | This **SHOULD** be the _latest_ version supported by the client.
131 | 
132 | If the server supports the requested protocol version, it **MUST** respond with the same
133 | version. Otherwise, the server **MUST** respond with another protocol version it
134 | supports. This **SHOULD** be the _latest_ version supported by the server.
135 | 
136 | If the client does not support the version in the server's response, it **SHOULD**
137 | disconnect.
138 | 
139 | <Note>
140 | If using HTTP, the client **MUST** include the `MCP-Protocol-Version:
141 | <protocol-version>` HTTP header on all subsequent requests to the MCP
142 | server.
143 | For details, see [the Protocol Version Header section in Transports](/specification/2025-06-18/basic/transports#protocol-version-header).
144 | </Note>
145 | 
146 | #### Capability Negotiation
147 | 
148 | Client and server capabilities establish which optional protocol features will be
149 | available during the session.
150 | 
151 | Key capabilities include:
152 | 
153 | | Category | Capability     | Description                                                                               |
154 | | -------- | -------------- | ----------------------------------------------------------------------------------------- |
155 | | Client   | `roots`        | Ability to provide filesystem [roots](/specification/2025-06-18/client/roots)             |
156 | | Client   | `sampling`     | Support for LLM [sampling](/specification/2025-06-18/client/sampling) requests            |
157 | | Client   | `elicitation`  | Support for server [elicitation](/specification/2025-06-18/client/elicitation) requests   |
158 | | Client   | `experimental` | Describes support for non-standard experimental features                                  |
159 | | Server   | `prompts`      | Offers [prompt templates](/specification/2025-06-18/server/prompts)                       |
160 | | Server   | `resources`    | Provides readable [resources](/specification/2025-06-18/server/resources)                 |
161 | | Server   | `tools`        | Exposes callable [tools](/specification/2025-06-18/server/tools)                          |
162 | | Server   | `logging`      | Emits structured [log messages](/specification/2025-06-18/server/utilities/logging)       |
163 | | Server   | `completions`  | Supports argument [autocompletion](/specification/2025-06-18/server/utilities/completion) |
164 | | Server   | `experimental` | Describes support for non-standard experimental features                                  |
165 | 
166 | Capability objects can describe sub-capabilities like:
167 | 
168 | - `listChanged`: Support for list change notifications (for prompts, resources, and
169 |   tools)
170 | - `subscribe`: Support for subscribing to individual items' changes (resources only)
171 | 
172 | ### Operation
173 | 
174 | During the operation phase, the client and server exchange messages according to the
175 | negotiated capabilities.
176 | 
177 | Both parties **MUST**:
178 | 
179 | - Respect the negotiated protocol version
180 | - Only use capabilities that were successfully negotiated
181 | 
182 | ### Shutdown
183 | 
184 | During the shutdown phase, one side (usually the client) cleanly terminates the protocol
185 | connection. No specific shutdown messages are defined—instead, the underlying transport
186 | mechanism should be used to signal connection termination:
187 | 
188 | #### stdio
189 | 
190 | For the stdio [transport](/specification/2025-06-18/basic/transports), the client **SHOULD** initiate
191 | shutdown by:
192 | 
193 | 1. First, closing the input stream to the child process (the server)
194 | 2. Waiting for the server to exit, or sending `SIGTERM` if the server does not exit
195 |    within a reasonable time
196 | 3. Sending `SIGKILL` if the server does not exit within a reasonable time after `SIGTERM`
197 | 
198 | The server **MAY** initiate shutdown by closing its output stream to the client and
199 | exiting.
200 | 
201 | #### HTTP
202 | 
203 | For HTTP [transports](/specification/2025-06-18/basic/transports), shutdown is indicated by closing the
204 | associated HTTP connection(s).
205 | 
206 | ## Timeouts
207 | 
208 | Implementations **SHOULD** establish timeouts for all sent requests, to prevent hung
209 | connections and resource exhaustion. When the request has not received a success or error
210 | response within the timeout period, the sender **SHOULD** issue a [cancellation
211 | notification](/specification/2025-06-18/basic/utilities/cancellation) for that request and stop waiting for
212 | a response.
213 | 
214 | SDKs and other middleware **SHOULD** allow these timeouts to be configured on a
215 | per-request basis.
216 | 
217 | Implementations **MAY** choose to reset the timeout clock when receiving a [progress
218 | notification](/specification/2025-06-18/basic/utilities/progress) corresponding to the request, as this
219 | implies that work is actually happening. However, implementations **SHOULD** always
220 | enforce a maximum timeout, regardless of progress notifications, to limit the impact of a
221 | misbehaving client or server.
222 | 
223 | ## Error Handling
224 | 
225 | Implementations **SHOULD** be prepared to handle these error cases:
226 | 
227 | - Protocol version mismatch
228 | - Failure to negotiate required capabilities
229 | - Request [timeouts](#timeouts)
230 | 
231 | Example initialization error:
232 | 
233 | ```json
234 | {
235 |   "jsonrpc": "2.0",
236 |   "id": 1,
237 |   "error": {
238 |     "code": -32602,
239 |     "message": "Unsupported protocol version",
240 |     "data": {
241 |       "supported": ["2024-11-05"],
242 |       "requested": "1.0.0"
243 |     }
244 |   }
245 | }
246 | ```
247 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/basic/security_best_practices.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Security Best Practices
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | ## Introduction
  8 | 
  9 | ### Purpose and Scope
 10 | 
 11 | This document provides security considerations for the Model Context Protocol (MCP), complementing the MCP Authorization specification. This document identifies security risks, attack vectors, and best practices specific to MCP implementations.
 12 | 
 13 | The primary audience for this document includes developers implementing MCP authorization flows, MCP server operators, and security professionals evaluating MCP-based systems. This document should be read alongside the MCP Authorization specification and [OAuth 2.0 security best practices](https://datatracker.ietf.org/doc/html/rfc9700).
 14 | 
 15 | ## Attacks and Mitigations
 16 | 
 17 | This section gives a detailed description of attacks on MCP implementations, along with potential countermeasures.
 18 | 
 19 | ### Confused Deputy Problem
 20 | 
 21 | Attackers can exploit MCP servers proxying other resource servers, creating "[confused deputy](https://en.wikipedia.org/wiki/Confused_deputy_problem)" vulnerabilities.
 22 | 
 23 | #### Terminology
 24 | 
 25 | **MCP Proxy Server**
 26 | : An MCP server that connects MCP clients to third-party APIs, offering MCP features while delegating operations and acting as a single OAuth client to the third-party API server.
 27 | 
 28 | **Third-Party Authorization Server**
 29 | : Authorization server that protects the third-party API. It may lack dynamic client registration support, requiring MCP proxy to use a static client ID for all requests.
 30 | 
 31 | **Third-Party API**
 32 | : The protected resource server that provides the actual API functionality. Access to this
 33 | API requires tokens issued by the third-party authorization server.
 34 | 
 35 | **Static Client ID**
 36 | : A fixed OAuth 2.0 client identifier used by the MCP proxy server when communicating with
 37 | the third-party authorization server. This Client ID refers to the MCP server acting as a client
 38 | to the Third-Party API. It is the same value for all MCP server to Third-Party API interactions regardless of
 39 | which MCP client initiated the request.
 40 | 
 41 | #### Architecture and Attack Flows
 42 | 
 43 | ##### Normal OAuth proxy usage (preserves user consent)
 44 | 
 45 | ```mermaid
 46 | sequenceDiagram
 47 |     participant UA as User-Agent (Browser)
 48 |     participant MC as MCP Client
 49 |     participant M as MCP Proxy Server
 50 |     participant TAS as Third-Party Authorization Server
 51 | 
 52 |     Note over UA,M: Initial Auth flow completed
 53 | 
 54 |     Note over UA,TAS: Step 1: Legitimate user consent for Third Party Server
 55 | 
 56 |     M->>UA: Redirect to third party authorization server
 57 |     UA->>TAS: Authorization request (client_id: mcp-proxy)
 58 |     TAS->>UA: Authorization consent screen
 59 |     Note over UA: Review consent screen
 60 |     UA->>TAS: Approve
 61 |     TAS->>UA: Set consent cookie for client ID: mcp-proxy
 62 |     TAS->>UA: 3P Authorization code + redirect to mcp-proxy-server.com
 63 |     UA->>M: 3P Authorization code
 64 |     Note over M,TAS: Exchange 3P code for 3P token
 65 |     Note over M: Generate MCP authorization code
 66 |     M->>UA: Redirect to MCP Client with MCP authorization code
 67 | 
 68 |     Note over M,UA: Exchange code for token, etc.
 69 | ```
 70 | 
 71 | ##### Malicious OAuth proxy usage (skips user consent)
 72 | 
 73 | ```mermaid
 74 | sequenceDiagram
 75 |     participant UA as User-Agent (Browser)
 76 |     participant M as MCP Proxy Server
 77 |     participant TAS as Third-Party Authorization Server
 78 |     participant A as Attacker
 79 | 
 80 | 
 81 |     Note over UA,A: Step 2: Attack (leveraging existing cookie, skipping consent)
 82 |     A->>M: Dynamically register malicious client, redirect_uri: attacker.com
 83 |     A->>UA: Sends malicious link
 84 |     UA->>TAS: Authorization request (client_id: mcp-proxy) + consent cookie
 85 |     rect rgba(255, 17, 0, 0.67)
 86 |     TAS->>TAS: Cookie present, consent skipped
 87 |     end
 88 | 
 89 |    TAS->>UA: 3P Authorization code + redirect to mcp-proxy-server.com
 90 |    UA->>M: 3P Authorization code
 91 |    Note over M,TAS: Exchange 3P code for 3P token
 92 |    Note over M: Generate MCP authorization code
 93 |    M->>UA: Redirect to attacker.com with MCP Authorization code
 94 |    UA->>A: MCP Authorization code delivered to attacker.com
 95 |    Note over M,A: Attacker exchanges MCP code for MCP token
 96 |    A->>M: Attacker impersonates user to MCP server
 97 | ```
 98 | 
 99 | #### Attack Description
100 | 
101 | When an MCP proxy server uses a static client ID to authenticate with a third-party
102 | authorization server that does not support dynamic client registration, the following
103 | attack becomes possible:
104 | 
105 | 1. A user authenticates normally through the MCP proxy server to access the third-party API
106 | 2. During this flow, the third-party authorization server sets a cookie on the user agent
107 |    indicating consent for the static client ID
108 | 3. An attacker later sends the user a malicious link containing a crafted authorization request which contains a malicious redirect URI along with a new dynamically registered client ID
109 | 4. When the user clicks the link, their browser still has the consent cookie from the previous legitimate request
110 | 5. The third-party authorization server detects the cookie and skips the consent screen
111 | 6. The MCP authorization code is redirected to the attacker's server (specified in the crafted redirect_uri during dynamic client registration)
112 | 7. The attacker exchanges the stolen authorization code for access tokens for the MCP server without the user's explicit approval
113 | 8. Attacker now has access to the third-party API as the compromised user
114 | 
115 | #### Mitigation
116 | 
117 | MCP proxy servers using static client IDs **MUST** obtain user consent for each dynamically
118 | registered client before forwarding to third-party authorization servers (which may require additional consent).
119 | 
120 | ### Token Passthrough
121 | 
122 | "Token passthrough" is an anti-pattern where an MCP server accepts tokens from an MCP client without validating that the tokens were properly issued _to the MCP server_ and "passing them through" to the downstream API.
123 | 
124 | #### Risks
125 | 
126 | Token passthrough is explicitly forbidden in the [authorization specification](/specification/2025-06-18/basic/authorization) as it introduces a number of security risks, that include:
127 | 
128 | - **Security Control Circumvention**
129 |   - The MCP Server or downstream APIs might implement important security controls like rate limiting, request validation, or traffic monitoring, that depend on the token audience or other credential constraints. If clients can obtain and use tokens directly with the downstream APIs without the MCP server validating them properly or ensuring that the tokens are issued for the right service, they bypass these controls.
130 | - **Accountability and Audit Trail Issues**
131 |   - The MCP Server will be unable to identify or distinguish between MCP Clients when clients are calling with an upstream-issued access token which may be opaque to the MCP Server.
132 |   - The downstream Resource Server’s logs may show requests that appear to come from a different source with a different identity, rather than the MCP server that is actually forwarding the tokens.
133 |   - Both factors make incident investigation, controls, and auditing more difficult.
134 |   - If the MCP Server passes tokens without validating their claims (e.g., roles, privileges, or audience) or other metadata, a malicious actor in possession of a stolen token can use the server as a proxy for data exfiltration.
135 | - **Trust Boundary Issues**
136 |   - The downstream Resource Server grants trust to specific entities. This trust might include assumptions about origin or client behavior patterns. Breaking this trust boundary could lead to unexpected issues.
137 |   - If the token is accepted by multiple services without proper validation, an attacker compromising one service can use the token to access other connected services.
138 | - **Future Compatibility Risk**
139 |   - Even if an MCP Server starts as a "pure proxy" today, it might need to add security controls later. Starting with proper token audience separation makes it easier to evolve the security model.
140 | 
141 | #### Mitigation
142 | 
143 | MCP servers **MUST NOT** accept any tokens that were not explicitly issued for the MCP server.
144 | 
145 | ### Session Hijacking
146 | 
147 | Session hijacking is an attack vector where a client is provided a session ID by the server, and an unauthorized party is able to obtain and use that same session ID to impersonate the original client and perform unauthorized actions on their behalf.
148 | 
149 | #### Session Hijack Prompt Injection
150 | 
151 | ```mermaid
152 | sequenceDiagram
153 |     participant Client
154 |     participant ServerA
155 |     participant Queue
156 |     participant ServerB
157 |     participant Attacker
158 | 
159 |     Client->>ServerA: Initialize (connect to streamable HTTP server)
160 |     ServerA-->>Client: Respond with session ID
161 | 
162 |     Attacker->>ServerB: Access/guess session ID
163 |     Note right of Attacker: Attacker knows/guesses session ID
164 | 
165 |     Attacker->>ServerB: Trigger event (malicious payload, using session ID)
166 |     ServerB->>Queue: Enqueue event (keyed by session ID)
167 | 
168 |     ServerA->>Queue: Poll for events (using session ID)
169 |     Queue-->>ServerA: Event data (malicious payload)
170 | 
171 |     ServerA-->>Client: Async response (malicious payload)
172 |     Client->>Client: Acts based on malicious payload
173 | ```
174 | 
175 | #### Session Hijack Impersonation
176 | 
177 | ```mermaid
178 | sequenceDiagram
179 |     participant Client
180 |     participant Server
181 |     participant Attacker
182 | 
183 |     Client->>Server: Initialize (login/authenticate)
184 |     Server-->>Client: Respond with session ID (persistent session created)
185 | 
186 |     Attacker->>Server: Access/guess session ID
187 |     Note right of Attacker: Attacker knows/guesses session ID
188 | 
189 |     Attacker->>Server: Make API call (using session ID, no re-auth)
190 |     Server-->>Attacker: Respond as if Attacker is Client (session hijack)
191 | ```
192 | 
193 | #### Attack Description
194 | 
195 | When you have multiple stateful HTTP servers that handle MCP requests, the following attack vectors are possible:
196 | 
197 | **Session Hijack Prompt Injection**
198 | 
199 | 1. The client connects to **Server A** and receives a session ID.
200 | 1. The attacker obtains an existing session ID and sends a malicious event to **Server B** with said session ID.
201 |    - When a server supports [redelivery/resumable streams](/specification/2025-06-18/basic/transports#resumability-and-redelivery), deliberately terminating the request before receiving the response could lead to it being resumed by the original client via the GET request for server sent events.
202 |    - If a particular server initiates server sent events as a consequence of a tool call such as a `notifications/tools/list_changed`, where it is possible to affect the tools that are offered by the server, a client could end up with tools that they were not aware were enabled.
203 | 
204 | 1. **Server B** enqueues the event (associated with session ID) into a shared queue.
205 | 1. **Server A** polls the queue for events using the session ID and retrieves the malicious payload.
206 | 1. **Server A** sends the malicious payload to the client as an asynchronous or resumed response.
207 | 1. The client receives and acts on the malicious payload, leading to potential compromise.
208 | 
209 | **Session Hijack Impersonation**
210 | 
211 | 1. The MCP client authenticates with the MCP server, creating a persistent session ID.
212 | 2. The attacker obtains the session ID.
213 | 3. The attacker makes calls to the MCP server using the session ID.
214 | 4. MCP server does not check for additional authorization and treats the attacker as a legitimate user, allowing unauthorized access or actions.
215 | 
216 | #### Mitigation
217 | 
218 | To prevent session hijacking and event injection attacks, the following mitigations should be implemented:
219 | 
220 | MCP servers that implement authorization **MUST** verify all inbound requests.
221 | MCP Servers **MUST NOT** use sessions for authentication.
222 | 
223 | MCP servers **MUST** use secure, non-deterministic session IDs.
224 | Generated session IDs (e.g., UUIDs) **SHOULD** use secure random number generators. Avoid predictable or sequential session identifiers that could be guessed by an attacker. Rotating or expiring session IDs can also reduce the risk.
225 | 
226 | MCP servers **SHOULD** bind session IDs to user-specific information.
227 | When storing or transmitting session-related data (e.g., in a queue), combine the session ID with information unique to the authorized user, such as their internal user ID. Use a key format like `<user_id>:<session_id>`. This ensures that even if an attacker guesses a session ID, they cannot impersonate another user as the user ID is derived from the user token and not provided by the client.
228 | 
229 | MCP servers can optionally leverage additional unique identifiers.
230 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/basic/transports.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Transports
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: 2025-06-18</Info>
  8 | 
  9 | MCP uses JSON-RPC to encode messages. JSON-RPC messages **MUST** be UTF-8 encoded.
 10 | 
 11 | The protocol currently defines two standard transport mechanisms for client-server
 12 | communication:
 13 | 
 14 | 1. [stdio](#stdio), communication over standard in and standard out
 15 | 2. [Streamable HTTP](#streamable-http)
 16 | 
 17 | Clients **SHOULD** support stdio whenever possible.
 18 | 
 19 | It is also possible for clients and servers to implement
 20 | [custom transports](#custom-transports) in a pluggable fashion.
 21 | 
 22 | ## stdio
 23 | 
 24 | In the **stdio** transport:
 25 | 
 26 | - The client launches the MCP server as a subprocess.
 27 | - The server reads JSON-RPC messages from its standard input (`stdin`) and sends messages
 28 |   to its standard output (`stdout`).
 29 | - Messages are individual JSON-RPC requests, notifications, or responses.
 30 | - Messages are delimited by newlines, and **MUST NOT** contain embedded newlines.
 31 | - The server **MAY** write UTF-8 strings to its standard error (`stderr`) for logging
 32 |   purposes. Clients **MAY** capture, forward, or ignore this logging.
 33 | - The server **MUST NOT** write anything to its `stdout` that is not a valid MCP message.
 34 | - The client **MUST NOT** write anything to the server's `stdin` that is not a valid MCP
 35 |   message.
 36 | 
 37 | ```mermaid
 38 | sequenceDiagram
 39 |     participant Client
 40 |     participant Server Process
 41 | 
 42 |     Client->>+Server Process: Launch subprocess
 43 |     loop Message Exchange
 44 |         Client->>Server Process: Write to stdin
 45 |         Server Process->>Client: Write to stdout
 46 |         Server Process--)Client: Optional logs on stderr
 47 |     end
 48 |     Client->>Server Process: Close stdin, terminate subprocess
 49 |     deactivate Server Process
 50 | ```
 51 | 
 52 | ## Streamable HTTP
 53 | 
 54 | <Info>
 55 | 
 56 | This replaces the [HTTP+SSE
 57 | transport](/specification/2024-11-05/basic/transports#http-with-sse) from
 58 | protocol version 2024-11-05. See the [backwards compatibility](#backwards-compatibility)
 59 | guide below.
 60 | 
 61 | </Info>
 62 | 
 63 | In the **Streamable HTTP** transport, the server operates as an independent process that
 64 | can handle multiple client connections. This transport uses HTTP POST and GET requests.
 65 | Server can optionally make use of
 66 | [Server-Sent Events](https://en.wikipedia.org/wiki/Server-sent_events) (SSE) to stream
 67 | multiple server messages. This permits basic MCP servers, as well as more feature-rich
 68 | servers supporting streaming and server-to-client notifications and requests.
 69 | 
 70 | The server **MUST** provide a single HTTP endpoint path (hereafter referred to as the
 71 | **MCP endpoint**) that supports both POST and GET methods. For example, this could be a
 72 | URL like `https://example.com/mcp`.
 73 | 
 74 | #### Security Warning
 75 | 
 76 | When implementing Streamable HTTP transport:
 77 | 
 78 | 1. Servers **MUST** validate the `Origin` header on all incoming connections to prevent DNS rebinding attacks
 79 | 2. When running locally, servers **SHOULD** bind only to localhost (127.0.0.1) rather than all network interfaces (0.0.0.0)
 80 | 3. Servers **SHOULD** implement proper authentication for all connections
 81 | 
 82 | Without these protections, attackers could use DNS rebinding to interact with local MCP servers from remote websites.
 83 | 
 84 | ### Sending Messages to the Server
 85 | 
 86 | Every JSON-RPC message sent from the client **MUST** be a new HTTP POST request to the
 87 | MCP endpoint.
 88 | 
 89 | 1. The client **MUST** use HTTP POST to send JSON-RPC messages to the MCP endpoint.
 90 | 2. The client **MUST** include an `Accept` header, listing both `application/json` and
 91 |    `text/event-stream` as supported content types.
 92 | 3. The body of the POST request **MUST** be a single JSON-RPC _request_, _notification_, or _response_.
 93 | 4. If the input is a JSON-RPC _response_ or _notification_:
 94 |    - If the server accepts the input, the server **MUST** return HTTP status code 202
 95 |      Accepted with no body.
 96 |    - If the server cannot accept the input, it **MUST** return an HTTP error status code
 97 |      (e.g., 400 Bad Request). The HTTP response body **MAY** comprise a JSON-RPC _error
 98 |      response_ that has no `id`.
 99 | 5. If the input is a JSON-RPC _request_, the server **MUST** either
100 |    return `Content-Type: text/event-stream`, to initiate an SSE stream, or
101 |    `Content-Type: application/json`, to return one JSON object. The client **MUST**
102 |    support both these cases.
103 | 6. If the server initiates an SSE stream:
104 |    - The SSE stream **SHOULD** eventually include JSON-RPC _response_ for the
105 |      JSON-RPC _request_ sent in the POST body.
106 |    - The server **MAY** send JSON-RPC _requests_ and _notifications_ before sending the
107 |      JSON-RPC _response_. These messages **SHOULD** relate to the originating client
108 |      _request_.
109 |    - The server **SHOULD NOT** close the SSE stream before sending the JSON-RPC _response_
110 |      for the received JSON-RPC _request_, unless the [session](#session-management)
111 |      expires.
112 |    - After the JSON-RPC _response_ has been sent, the server **SHOULD** close the SSE
113 |      stream.
114 |    - Disconnection **MAY** occur at any time (e.g., due to network conditions).
115 |      Therefore:
116 |      - Disconnection **SHOULD NOT** be interpreted as the client cancelling its request.
117 |      - To cancel, the client **SHOULD** explicitly send an MCP `CancelledNotification`.
118 |      - To avoid message loss due to disconnection, the server **MAY** make the stream
119 |        [resumable](#resumability-and-redelivery).
120 | 
121 | ### Listening for Messages from the Server
122 | 
123 | 1. The client **MAY** issue an HTTP GET to the MCP endpoint. This can be used to open an
124 |    SSE stream, allowing the server to communicate to the client, without the client first
125 |    sending data via HTTP POST.
126 | 2. The client **MUST** include an `Accept` header, listing `text/event-stream` as a
127 |    supported content type.
128 | 3. The server **MUST** either return `Content-Type: text/event-stream` in response to
129 |    this HTTP GET, or else return HTTP 405 Method Not Allowed, indicating that the server
130 |    does not offer an SSE stream at this endpoint.
131 | 4. If the server initiates an SSE stream:
132 |    - The server **MAY** send JSON-RPC _requests_ and _notifications_ on the stream.
133 |    - These messages **SHOULD** be unrelated to any concurrently-running JSON-RPC
134 |      _request_ from the client.
135 |    - The server **MUST NOT** send a JSON-RPC _response_ on the stream **unless**
136 |      [resuming](#resumability-and-redelivery) a stream associated with a previous client
137 |      request.
138 |    - The server **MAY** close the SSE stream at any time.
139 |    - The client **MAY** close the SSE stream at any time.
140 | 
141 | ### Multiple Connections
142 | 
143 | 1. The client **MAY** remain connected to multiple SSE streams simultaneously.
144 | 2. The server **MUST** send each of its JSON-RPC messages on only one of the connected
145 |    streams; that is, it **MUST NOT** broadcast the same message across multiple streams.
146 |    - The risk of message loss **MAY** be mitigated by making the stream
147 |      [resumable](#resumability-and-redelivery).
148 | 
149 | ### Resumability and Redelivery
150 | 
151 | To support resuming broken connections, and redelivering messages that might otherwise be
152 | lost:
153 | 
154 | 1. Servers **MAY** attach an `id` field to their SSE events, as described in the
155 |    [SSE standard](https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation).
156 |    - If present, the ID **MUST** be globally unique across all streams within that
157 |      [session](#session-management)—or all streams with that specific client, if session
158 |      management is not in use.
159 | 2. If the client wishes to resume after a broken connection, it **SHOULD** issue an HTTP
160 |    GET to the MCP endpoint, and include the
161 |    [`Last-Event-ID`](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-last-event-id-header)
162 |    header to indicate the last event ID it received.
163 |    - The server **MAY** use this header to replay messages that would have been sent
164 |      after the last event ID, _on the stream that was disconnected_, and to resume the
165 |      stream from that point.
166 |    - The server **MUST NOT** replay messages that would have been delivered on a
167 |      different stream.
168 | 
169 | In other words, these event IDs should be assigned by servers on a _per-stream_ basis, to
170 | act as a cursor within that particular stream.
171 | 
172 | ### Session Management
173 | 
174 | An MCP "session" consists of logically related interactions between a client and a
175 | server, beginning with the [initialization phase](/specification/2025-06-18/basic/lifecycle). To support
176 | servers which want to establish stateful sessions:
177 | 
178 | 1. A server using the Streamable HTTP transport **MAY** assign a session ID at
179 |    initialization time, by including it in an `Mcp-Session-Id` header on the HTTP
180 |    response containing the `InitializeResult`.
181 |    - The session ID **SHOULD** be globally unique and cryptographically secure (e.g., a
182 |      securely generated UUID, a JWT, or a cryptographic hash).
183 |    - The session ID **MUST** only contain visible ASCII characters (ranging from 0x21 to
184 |      0x7E).
185 | 2. If an `Mcp-Session-Id` is returned by the server during initialization, clients using
186 |    the Streamable HTTP transport **MUST** include it in the `Mcp-Session-Id` header on
187 |    all of their subsequent HTTP requests.
188 |    - Servers that require a session ID **SHOULD** respond to requests without an
189 |      `Mcp-Session-Id` header (other than initialization) with HTTP 400 Bad Request.
190 | 3. The server **MAY** terminate the session at any time, after which it **MUST** respond
191 |    to requests containing that session ID with HTTP 404 Not Found.
192 | 4. When a client receives HTTP 404 in response to a request containing an
193 |    `Mcp-Session-Id`, it **MUST** start a new session by sending a new `InitializeRequest`
194 |    without a session ID attached.
195 | 5. Clients that no longer need a particular session (e.g., because the user is leaving
196 |    the client application) **SHOULD** send an HTTP DELETE to the MCP endpoint with the
197 |    `Mcp-Session-Id` header, to explicitly terminate the session.
198 |    - The server **MAY** respond to this request with HTTP 405 Method Not Allowed,
199 |      indicating that the server does not allow clients to terminate sessions.
200 | 
201 | ### Sequence Diagram
202 | 
203 | ```mermaid
204 | sequenceDiagram
205 |     participant Client
206 |     participant Server
207 | 
208 |     note over Client, Server: initialization
209 | 
210 |     Client->>+Server: POST InitializeRequest
211 |     Server->>-Client: InitializeResponse<br>Mcp-Session-Id: 1868a90c...
212 | 
213 |     Client->>+Server: POST InitializedNotification<br>Mcp-Session-Id: 1868a90c...
214 |     Server->>-Client: 202 Accepted
215 | 
216 |     note over Client, Server: client requests
217 |     Client->>+Server: POST ... request ...<br>Mcp-Session-Id: 1868a90c...
218 | 
219 |     alt single HTTP response
220 |       Server->>Client: ... response ...
221 |     else server opens SSE stream
222 |       loop while connection remains open
223 |           Server-)Client: ... SSE messages from server ...
224 |       end
225 |       Server-)Client: SSE event: ... response ...
226 |     end
227 |     deactivate Server
228 | 
229 |     note over Client, Server: client notifications/responses
230 |     Client->>+Server: POST ... notification/response ...<br>Mcp-Session-Id: 1868a90c...
231 |     Server->>-Client: 202 Accepted
232 | 
233 |     note over Client, Server: server requests
234 |     Client->>+Server: GET<br>Mcp-Session-Id: 1868a90c...
235 |     loop while connection remains open
236 |         Server-)Client: ... SSE messages from server ...
237 |     end
238 |     deactivate Server
239 | 
240 | ```
241 | 
242 | ### Protocol Version Header
243 | 
244 | If using HTTP, the client **MUST** include the `MCP-Protocol-Version:
245 | <protocol-version>` HTTP header on all subsequent requests to the MCP
246 | server, allowing the MCP server to respond based on the MCP protocol version.
247 | 
248 | For example: `MCP-Protocol-Version: 2025-06-18`
249 | 
250 | The protocol version sent by the client **SHOULD** be the one [negotiated during
251 | initialization](/specification/2025-06-18/basic/lifecycle#version-negotiation).
252 | 
253 | For backwards compatibility, if the server does _not_ receive an `MCP-Protocol-Version`
254 | header, and has no other way to identify the version - for example, by relying on the
255 | protocol version negotiated during initialization - the server **SHOULD** assume protocol
256 | version `2025-03-26`.
257 | 
258 | If the server receives a request with an invalid or unsupported
259 | `MCP-Protocol-Version`, it **MUST** respond with `400 Bad Request`.
260 | 
261 | ### Backwards Compatibility
262 | 
263 | Clients and servers can maintain backwards compatibility with the deprecated [HTTP+SSE
264 | transport](/specification/2024-11-05/basic/transports#http-with-sse) (from
265 | protocol version 2024-11-05) as follows:
266 | 
267 | **Servers** wanting to support older clients should:
268 | 
269 | - Continue to host both the SSE and POST endpoints of the old transport, alongside the
270 |   new "MCP endpoint" defined for the Streamable HTTP transport.
271 |   - It is also possible to combine the old POST endpoint and the new MCP endpoint, but
272 |     this may introduce unneeded complexity.
273 | 
274 | **Clients** wanting to support older servers should:
275 | 
276 | 1. Accept an MCP server URL from the user, which may point to either a server using the
277 |    old transport or the new transport.
278 | 2. Attempt to POST an `InitializeRequest` to the server URL, with an `Accept` header as
279 |    defined above:
280 |    - If it succeeds, the client can assume this is a server supporting the new Streamable
281 |      HTTP transport.
282 |    - If it fails with an HTTP 4xx status code (e.g., 405 Method Not Allowed or 404 Not
283 |      Found):
284 |      - Issue a GET request to the server URL, expecting that this will open an SSE stream
285 |        and return an `endpoint` event as the first event.
286 |      - When the `endpoint` event arrives, the client can assume this is a server running
287 |        the old HTTP+SSE transport, and should use that transport for all subsequent
288 |        communication.
289 | 
290 | ## Custom Transports
291 | 
292 | Clients and servers **MAY** implement additional custom transport mechanisms to suit
293 | their specific needs. The protocol is transport-agnostic and can be implemented over any
294 | communication channel that supports bidirectional message exchange.
295 | 
296 | Implementers who choose to support custom transports **MUST** ensure they preserve the
297 | JSON-RPC message format and lifecycle requirements defined by MCP. Custom transports
298 | **SHOULD** document their specific connection establishment and message exchange patterns
299 | to aid interoperability.
300 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/basic/utilities/cancellation.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Cancellation
 3 | ---
 4 | 
 5 | <div id="enable-section-numbers" />
 6 | 
 7 | <Info>**Protocol Revision**: 2025-06-18</Info>
 8 | 
 9 | The Model Context Protocol (MCP) supports optional cancellation of in-progress requests
10 | through notification messages. Either side can send a cancellation notification to
11 | indicate that a previously-issued request should be terminated.
12 | 
13 | ## Cancellation Flow
14 | 
15 | When a party wants to cancel an in-progress request, it sends a `notifications/cancelled`
16 | notification containing:
17 | 
18 | - The ID of the request to cancel
19 | - An optional reason string that can be logged or displayed
20 | 
21 | ```json
22 | {
23 |   "jsonrpc": "2.0",
24 |   "method": "notifications/cancelled",
25 |   "params": {
26 |     "requestId": "123",
27 |     "reason": "User requested cancellation"
28 |   }
29 | }
30 | ```
31 | 
32 | ## Behavior Requirements
33 | 
34 | 1. Cancellation notifications **MUST** only reference requests that:
35 |    - Were previously issued in the same direction
36 |    - Are believed to still be in-progress
37 | 2. The `initialize` request **MUST NOT** be cancelled by clients
38 | 3. Receivers of cancellation notifications **SHOULD**:
39 |    - Stop processing the cancelled request
40 |    - Free associated resources
41 |    - Not send a response for the cancelled request
42 | 4. Receivers **MAY** ignore cancellation notifications if:
43 |    - The referenced request is unknown
44 |    - Processing has already completed
45 |    - The request cannot be cancelled
46 | 5. The sender of the cancellation notification **SHOULD** ignore any response to the
47 |    request that arrives afterward
48 | 
49 | ## Timing Considerations
50 | 
51 | Due to network latency, cancellation notifications may arrive after request processing
52 | has completed, and potentially after a response has already been sent.
53 | 
54 | Both parties **MUST** handle these race conditions gracefully:
55 | 
56 | ```mermaid
57 | sequenceDiagram
58 |    participant Client
59 |    participant Server
60 | 
61 |    Client->>Server: Request (ID: 123)
62 |    Note over Server: Processing starts
63 |    Client--)Server: notifications/cancelled (ID: 123)
64 |    alt
65 |       Note over Server: Processing may have<br/>completed before<br/>cancellation arrives
66 |    else If not completed
67 |       Note over Server: Stop processing
68 |    end
69 | ```
70 | 
71 | ## Implementation Notes
72 | 
73 | - Both parties **SHOULD** log cancellation reasons for debugging
74 | - Application UIs **SHOULD** indicate when cancellation is requested
75 | 
76 | ## Error Handling
77 | 
78 | Invalid cancellation notifications **SHOULD** be ignored:
79 | 
80 | - Unknown request IDs
81 | - Already completed requests
82 | - Malformed notifications
83 | 
84 | This maintains the "fire and forget" nature of notifications while allowing for race
85 | conditions in asynchronous communication.
86 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/basic/utilities/ping.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Ping
 3 | ---
 4 | 
 5 | <div id="enable-section-numbers" />
 6 | 
 7 | <Info>**Protocol Revision**: 2025-06-18</Info>
 8 | 
 9 | The Model Context Protocol includes an optional ping mechanism that allows either party
10 | to verify that their counterpart is still responsive and the connection is alive.
11 | 
12 | ## Overview
13 | 
14 | The ping functionality is implemented through a simple request/response pattern. Either
15 | the client or server can initiate a ping by sending a `ping` request.
16 | 
17 | ## Message Format
18 | 
19 | A ping request is a standard JSON-RPC request with no parameters:
20 | 
21 | ```json
22 | {
23 |   "jsonrpc": "2.0",
24 |   "id": "123",
25 |   "method": "ping"
26 | }
27 | ```
28 | 
29 | ## Behavior Requirements
30 | 
31 | 1. The receiver **MUST** respond promptly with an empty response:
32 | 
33 | ```json
34 | {
35 |   "jsonrpc": "2.0",
36 |   "id": "123",
37 |   "result": {}
38 | }
39 | ```
40 | 
41 | 2. If no response is received within a reasonable timeout period, the sender **MAY**:
42 |    - Consider the connection stale
43 |    - Terminate the connection
44 |    - Attempt reconnection procedures
45 | 
46 | ## Usage Patterns
47 | 
48 | ```mermaid
49 | sequenceDiagram
50 |     participant Sender
51 |     participant Receiver
52 | 
53 |     Sender->>Receiver: ping request
54 |     Receiver->>Sender: empty response
55 | ```
56 | 
57 | ## Implementation Considerations
58 | 
59 | - Implementations **SHOULD** periodically issue pings to detect connection health
60 | - The frequency of pings **SHOULD** be configurable
61 | - Timeouts **SHOULD** be appropriate for the network environment
62 | - Excessive pinging **SHOULD** be avoided to reduce network overhead
63 | 
64 | ## Error Handling
65 | 
66 | - Timeouts **SHOULD** be treated as connection failures
67 | - Multiple failed pings **MAY** trigger connection reset
68 | - Implementations **SHOULD** log ping failures for diagnostics
69 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/basic/utilities/progress.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Progress
 3 | ---
 4 | 
 5 | <div id="enable-section-numbers" />
 6 | 
 7 | <Info>**Protocol Revision**: 2025-06-18</Info>
 8 | 
 9 | The Model Context Protocol (MCP) supports optional progress tracking for long-running
10 | operations through notification messages. Either side can send progress notifications to
11 | provide updates about operation status.
12 | 
13 | ## Progress Flow
14 | 
15 | When a party wants to _receive_ progress updates for a request, it includes a
16 | `progressToken` in the request metadata.
17 | 
18 | - Progress tokens **MUST** be a string or integer value
19 | - Progress tokens can be chosen by the sender using any means, but **MUST** be unique
20 |   across all active requests.
21 | 
22 | ```json
23 | {
24 |   "jsonrpc": "2.0",
25 |   "id": 1,
26 |   "method": "some_method",
27 |   "params": {
28 |     "_meta": {
29 |       "progressToken": "abc123"
30 |     }
31 |   }
32 | }
33 | ```
34 | 
35 | The receiver **MAY** then send progress notifications containing:
36 | 
37 | - The original progress token
38 | - The current progress value so far
39 | - An optional "total" value
40 | - An optional "message" value
41 | 
42 | ```json
43 | {
44 |   "jsonrpc": "2.0",
45 |   "method": "notifications/progress",
46 |   "params": {
47 |     "progressToken": "abc123",
48 |     "progress": 50,
49 |     "total": 100,
50 |     "message": "Reticulating splines..."
51 |   }
52 | }
53 | ```
54 | 
55 | - The `progress` value **MUST** increase with each notification, even if the total is
56 |   unknown.
57 | - The `progress` and the `total` values **MAY** be floating point.
58 | - The `message` field **SHOULD** provide relevant human readable progress information.
59 | 
60 | ## Behavior Requirements
61 | 
62 | 1. Progress notifications **MUST** only reference tokens that:
63 |    - Were provided in an active request
64 |    - Are associated with an in-progress operation
65 | 
66 | 2. Receivers of progress requests **MAY**:
67 |    - Choose not to send any progress notifications
68 |    - Send notifications at whatever frequency they deem appropriate
69 |    - Omit the total value if unknown
70 | 
71 | ```mermaid
72 | sequenceDiagram
73 |     participant Sender
74 |     participant Receiver
75 | 
76 |     Note over Sender,Receiver: Request with progress token
77 |     Sender->>Receiver: Method request with progressToken
78 | 
79 |     Note over Sender,Receiver: Progress updates
80 |     Receiver-->>Sender: Progress notification (0.2/1.0)
81 |     Receiver-->>Sender: Progress notification (0.6/1.0)
82 |     Receiver-->>Sender: Progress notification (1.0/1.0)
83 | 
84 |     Note over Sender,Receiver: Operation complete
85 |     Receiver->>Sender: Method response
86 | ```
87 | 
88 | ## Implementation Notes
89 | 
90 | - Senders and receivers **SHOULD** track active progress tokens
91 | - Both parties **SHOULD** implement rate limiting to prevent flooding
92 | - Progress notifications **MUST** stop after completion
93 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/changelog.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Key Changes
 3 | ---
 4 | 
 5 | <div id="enable-section-numbers" />
 6 | 
 7 | This document lists changes made to the Model Context Protocol (MCP) specification since
 8 | the previous revision, [2025-03-26](/specification/2025-03-26).
 9 | 
10 | ## Major changes
11 | 
12 | 1. Remove support for JSON-RPC **[batching](https://www.jsonrpc.org/specification#batch)**
13 |    (PR [#416](https://github.com/modelcontextprotocol/specification/pull/416))
14 | 2. Add support for [structured tool output](/specification/2025-06-18/server/tools#structured-content)
15 |    (PR [#371](https://github.com/modelcontextprotocol/modelcontextprotocol/pull/371))
16 | 3. Classify MCP servers as [OAuth Resource Servers](/specification/2025-06-18/basic/authorization#authorization-server-discovery),
17 |    adding protected resource metadata to discover the corresponding Authorization server.
18 |    (PR [#338](https://github.com/modelcontextprotocol/modelcontextprotocol/pull/338))
19 | 4. Require MCP clients to implement Resource Indicators as described in [RFC 8707](https://www.rfc-editor.org/rfc/rfc8707.html) to prevent
20 |    malicious servers from obtaining access tokens.
21 |    (PR [#734](https://github.com/modelcontextprotocol/modelcontextprotocol/pull/734))
22 | 5. Clarify [security considerations](/specification/2025-06-18/basic/authorization#security-considerations) and best practices
23 |    in the authorization spec and in a new [security best practices page](/specification/2025-06-18/basic/security_best_practices).
24 | 6. Add support for **[elicitation](/specification/2025-06-18/client/elicitation)**, enabling servers to request additional
25 |    information from users during interactions.
26 |    (PR [#382](https://github.com/modelcontextprotocol/modelcontextprotocol/pull/382))
27 | 7. Add support for **[resource links](/specification/2025-06-18/server/tools#resource-links)** in
28 |    tool call results. (PR [#603](https://github.com/modelcontextprotocol/modelcontextprotocol/pull/603))
29 | 8. Require [negotiated protocol version to be specified](/specification/2025-06-18/basic/transports#protocol-version-header)
30 |    via `MCP-Protocol-Version` header in subsequent requests when using HTTP (PR [#548](https://github.com/modelcontextprotocol/modelcontextprotocol/pull/548)).
31 | 9. Change **SHOULD** to **MUST** in [Lifecycle Operation](/specification/2025-06-18/basic/lifecycle#operation)
32 | 
33 | ## Other schema changes
34 | 
35 | 1. Add `_meta` field to additional interface types (PR [#710](https://github.com/modelcontextprotocol/modelcontextprotocol/pull/710)),
36 |    and specify [proper usage](/specification/2025-06-18/basic#meta).
37 | 2. Add `context` field to `CompletionRequest`, providing for completion requests to include
38 |    previously-resolved variables (PR [#598](https://github.com/modelcontextprotocol/modelcontextprotocol/pull/598)).
39 | 3. Add `title` field for human-friendly display names, so that `name` can be used as a programmatic
40 |    identifier (PR [#663](https://github.com/modelcontextprotocol/modelcontextprotocol/pull/663))
41 | 
42 | ## Full changelog
43 | 
44 | For a complete list of all changes that have been made since the last protocol revision,
45 | [see GitHub](https://github.com/modelcontextprotocol/specification/compare/2025-03-26...2025-06-18).
46 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/client/elicitation.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Elicitation
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: 2025-06-18</Info>
  8 | 
  9 | <Note>
 10 | 
 11 | Elicitation is newly introduced in this version of the MCP specification and its design may evolve in future protocol versions.
 12 | 
 13 | </Note>
 14 | 
 15 | The Model Context Protocol (MCP) provides a standardized way for servers to request additional
 16 | information from users through the client during interactions. This flow allows clients to
 17 | maintain control over user interactions and data sharing while enabling servers to gather
 18 | necessary information dynamically.
 19 | Servers request structured data from users with JSON schemas to validate responses.
 20 | 
 21 | ## User Interaction Model
 22 | 
 23 | Elicitation in MCP allows servers to implement interactive workflows by enabling user input
 24 | requests to occur _nested_ inside other MCP server features.
 25 | 
 26 | Implementations are free to expose elicitation through any interface pattern that suits
 27 | their needs&mdash;the protocol itself does not mandate any specific user interaction
 28 | model.
 29 | 
 30 | <Warning>
 31 | 
 32 | For trust & safety and security:
 33 | 
 34 | - Servers **MUST NOT** use elicitation to request sensitive information.
 35 | 
 36 | Applications **SHOULD**:
 37 | 
 38 | - Provide UI that makes it clear which server is requesting information
 39 | - Allow users to review and modify their responses before sending
 40 | - Respect user privacy and provide clear decline and cancel options
 41 | 
 42 | </Warning>
 43 | 
 44 | ## Capabilities
 45 | 
 46 | Clients that support elicitation **MUST** declare the `elicitation` capability during
 47 | [initialization](/specification/2025-06-18/basic/lifecycle#initialization):
 48 | 
 49 | ```json
 50 | {
 51 |   "capabilities": {
 52 |     "elicitation": {}
 53 |   }
 54 | }
 55 | ```
 56 | 
 57 | ## Protocol Messages
 58 | 
 59 | ### Creating Elicitation Requests
 60 | 
 61 | To request information from a user, servers send an `elicitation/create` request:
 62 | 
 63 | #### Simple Text Request
 64 | 
 65 | **Request:**
 66 | 
 67 | ```json
 68 | {
 69 |   "jsonrpc": "2.0",
 70 |   "id": 1,
 71 |   "method": "elicitation/create",
 72 |   "params": {
 73 |     "message": "Please provide your GitHub username",
 74 |     "requestedSchema": {
 75 |       "type": "object",
 76 |       "properties": {
 77 |         "name": {
 78 |           "type": "string"
 79 |         }
 80 |       },
 81 |       "required": ["name"]
 82 |     }
 83 |   }
 84 | }
 85 | ```
 86 | 
 87 | **Response:**
 88 | 
 89 | ```json
 90 | {
 91 |   "jsonrpc": "2.0",
 92 |   "id": 1,
 93 |   "result": {
 94 |     "action": "accept",
 95 |     "content": {
 96 |       "name": "octocat"
 97 |     }
 98 |   }
 99 | }
100 | ```
101 | 
102 | #### Structured Data Request
103 | 
104 | **Request:**
105 | 
106 | ```json
107 | {
108 |   "jsonrpc": "2.0",
109 |   "id": 2,
110 |   "method": "elicitation/create",
111 |   "params": {
112 |     "message": "Please provide your contact information",
113 |     "requestedSchema": {
114 |       "type": "object",
115 |       "properties": {
116 |         "name": {
117 |           "type": "string",
118 |           "description": "Your full name"
119 |         },
120 |         "email": {
121 |           "type": "string",
122 |           "format": "email",
123 |           "description": "Your email address"
124 |         },
125 |         "age": {
126 |           "type": "number",
127 |           "minimum": 18,
128 |           "description": "Your age"
129 |         }
130 |       },
131 |       "required": ["name", "email"]
132 |     }
133 |   }
134 | }
135 | ```
136 | 
137 | **Response:**
138 | 
139 | ```json
140 | {
141 |   "jsonrpc": "2.0",
142 |   "id": 2,
143 |   "result": {
144 |     "action": "accept",
145 |     "content": {
146 |       "name": "Monalisa Octocat",
147 |       "email": "octocat@github.com",
148 |       "age": 30
149 |     }
150 |   }
151 | }
152 | ```
153 | 
154 | **Reject Response Example:**
155 | 
156 | ```json
157 | {
158 |   "jsonrpc": "2.0",
159 |   "id": 2,
160 |   "result": {
161 |     "action": "decline"
162 |   }
163 | }
164 | ```
165 | 
166 | **Cancel Response Example:**
167 | 
168 | ```json
169 | {
170 |   "jsonrpc": "2.0",
171 |   "id": 2,
172 |   "result": {
173 |     "action": "cancel"
174 |   }
175 | }
176 | ```
177 | 
178 | ## Message Flow
179 | 
180 | ```mermaid
181 | sequenceDiagram
182 |     participant User
183 |     participant Client
184 |     participant Server
185 | 
186 |     Note over Server,Client: Server initiates elicitation
187 |     Server->>Client: elicitation/create
188 | 
189 |     Note over Client,User: Human interaction
190 |     Client->>User: Present elicitation UI
191 |     User-->>Client: Provide requested information
192 | 
193 |     Note over Server,Client: Complete request
194 |     Client-->>Server: Return user response
195 | 
196 |     Note over Server: Continue processing with new information
197 | ```
198 | 
199 | ## Request Schema
200 | 
201 | The `requestedSchema` field allows servers to define the structure of the expected response using a restricted subset of JSON Schema. To simplify implementation for clients, elicitation schemas are limited to flat objects with primitive properties only:
202 | 
203 | ```json
204 | "requestedSchema": {
205 |   "type": "object",
206 |   "properties": {
207 |     "propertyName": {
208 |       "type": "string",
209 |       "title": "Display Name",
210 |       "description": "Description of the property"
211 |     },
212 |     "anotherProperty": {
213 |       "type": "number",
214 |       "minimum": 0,
215 |       "maximum": 100
216 |     }
217 |   },
218 |   "required": ["propertyName"]
219 | }
220 | ```
221 | 
222 | ### Supported Schema Types
223 | 
224 | The schema is restricted to these primitive types:
225 | 
226 | 1. **String Schema**
227 | 
228 |    ```json
229 |    {
230 |      "type": "string",
231 |      "title": "Display Name",
232 |      "description": "Description text",
233 |      "minLength": 3,
234 |      "maxLength": 50,
235 |      "format": "email" // Supported: "email", "uri", "date", "date-time"
236 |    }
237 |    ```
238 | 
239 |    Supported formats: `email`, `uri`, `date`, `date-time`
240 | 
241 | 2. **Number Schema**
242 | 
243 |    ```json
244 |    {
245 |      "type": "number", // or "integer"
246 |      "title": "Display Name",
247 |      "description": "Description text",
248 |      "minimum": 0,
249 |      "maximum": 100
250 |    }
251 |    ```
252 | 
253 | 3. **Boolean Schema**
254 | 
255 |    ```json
256 |    {
257 |      "type": "boolean",
258 |      "title": "Display Name",
259 |      "description": "Description text",
260 |      "default": false
261 |    }
262 |    ```
263 | 
264 | 4. **Enum Schema**
265 |    ```json
266 |    {
267 |      "type": "string",
268 |      "title": "Display Name",
269 |      "description": "Description text",
270 |      "enum": ["option1", "option2", "option3"],
271 |      "enumNames": ["Option 1", "Option 2", "Option 3"]
272 |    }
273 |    ```
274 | 
275 | Clients can use this schema to:
276 | 
277 | 1. Generate appropriate input forms
278 | 2. Validate user input before sending
279 | 3. Provide better guidance to users
280 | 
281 | Note that complex nested structures, arrays of objects, and other advanced JSON Schema features are intentionally not supported to simplify client implementation.
282 | 
283 | ## Response Actions
284 | 
285 | Elicitation responses use a three-action model to clearly distinguish between different user actions:
286 | 
287 | ```json
288 | {
289 |   "jsonrpc": "2.0",
290 |   "id": 1,
291 |   "result": {
292 |     "action": "accept", // or "decline" or "cancel"
293 |     "content": {
294 |       "propertyName": "value",
295 |       "anotherProperty": 42
296 |     }
297 |   }
298 | }
299 | ```
300 | 
301 | The three response actions are:
302 | 
303 | 1. **Accept** (`action: "accept"`): User explicitly approved and submitted with data
304 |    - The `content` field contains the submitted data matching the requested schema
305 |    - Example: User clicked "Submit", "OK", "Confirm", etc.
306 | 
307 | 2. **Decline** (`action: "decline"`): User explicitly declined the request
308 |    - The `content` field is typically omitted
309 |    - Example: User clicked "Reject", "Decline", "No", etc.
310 | 
311 | 3. **Cancel** (`action: "cancel"`): User dismissed without making an explicit choice
312 |    - The `content` field is typically omitted
313 |    - Example: User closed the dialog, clicked outside, pressed Escape, etc.
314 | 
315 | Servers should handle each state appropriately:
316 | 
317 | - **Accept**: Process the submitted data
318 | - **Decline**: Handle explicit decline (e.g., offer alternatives)
319 | - **Cancel**: Handle dismissal (e.g., prompt again later)
320 | 
321 | ## Security Considerations
322 | 
323 | 1. Servers **MUST NOT** request sensitive information through elicitation
324 | 2. Clients **SHOULD** implement user approval controls
325 | 3. Both parties **SHOULD** validate elicitation content against the provided schema
326 | 4. Clients **SHOULD** provide clear indication of which server is requesting information
327 | 5. Clients **SHOULD** allow users to decline elicitation requests at any time
328 | 6. Clients **SHOULD** implement rate limiting
329 | 7. Clients **SHOULD** present elicitation requests in a way that makes it clear what information is being requested and why
330 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/client/roots.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Roots
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: 2025-06-18</Info>
  8 | 
  9 | The Model Context Protocol (MCP) provides a standardized way for clients to expose
 10 | filesystem "roots" to servers. Roots define the boundaries of where servers can operate
 11 | within the filesystem, allowing them to understand which directories and files they have
 12 | access to. Servers can request the list of roots from supporting clients and receive
 13 | notifications when that list changes.
 14 | 
 15 | ## User Interaction Model
 16 | 
 17 | Roots in MCP are typically exposed through workspace or project configuration interfaces.
 18 | 
 19 | For example, implementations could offer a workspace/project picker that allows users to
 20 | select directories and files the server should have access to. This can be combined with
 21 | automatic workspace detection from version control systems or project files.
 22 | 
 23 | However, implementations are free to expose roots through any interface pattern that
 24 | suits their needs&mdash;the protocol itself does not mandate any specific user
 25 | interaction model.
 26 | 
 27 | ## Capabilities
 28 | 
 29 | Clients that support roots **MUST** declare the `roots` capability during
 30 | [initialization](/specification/2025-06-18/basic/lifecycle#initialization):
 31 | 
 32 | ```json
 33 | {
 34 |   "capabilities": {
 35 |     "roots": {
 36 |       "listChanged": true
 37 |     }
 38 |   }
 39 | }
 40 | ```
 41 | 
 42 | `listChanged` indicates whether the client will emit notifications when the list of roots
 43 | changes.
 44 | 
 45 | ## Protocol Messages
 46 | 
 47 | ### Listing Roots
 48 | 
 49 | To retrieve roots, servers send a `roots/list` request:
 50 | 
 51 | **Request:**
 52 | 
 53 | ```json
 54 | {
 55 |   "jsonrpc": "2.0",
 56 |   "id": 1,
 57 |   "method": "roots/list"
 58 | }
 59 | ```
 60 | 
 61 | **Response:**
 62 | 
 63 | ```json
 64 | {
 65 |   "jsonrpc": "2.0",
 66 |   "id": 1,
 67 |   "result": {
 68 |     "roots": [
 69 |       {
 70 |         "uri": "file:///home/user/projects/myproject",
 71 |         "name": "My Project"
 72 |       }
 73 |     ]
 74 |   }
 75 | }
 76 | ```
 77 | 
 78 | ### Root List Changes
 79 | 
 80 | When roots change, clients that support `listChanged` **MUST** send a notification:
 81 | 
 82 | ```json
 83 | {
 84 |   "jsonrpc": "2.0",
 85 |   "method": "notifications/roots/list_changed"
 86 | }
 87 | ```
 88 | 
 89 | ## Message Flow
 90 | 
 91 | ```mermaid
 92 | sequenceDiagram
 93 |     participant Server
 94 |     participant Client
 95 | 
 96 |     Note over Server,Client: Discovery
 97 |     Server->>Client: roots/list
 98 |     Client-->>Server: Available roots
 99 | 
100 |     Note over Server,Client: Changes
101 |     Client--)Server: notifications/roots/list_changed
102 |     Server->>Client: roots/list
103 |     Client-->>Server: Updated roots
104 | ```
105 | 
106 | ## Data Types
107 | 
108 | ### Root
109 | 
110 | A root definition includes:
111 | 
112 | - `uri`: Unique identifier for the root. This **MUST** be a `file://` URI in the current
113 |   specification.
114 | - `name`: Optional human-readable name for display purposes.
115 | 
116 | Example roots for different use cases:
117 | 
118 | #### Project Directory
119 | 
120 | ```json
121 | {
122 |   "uri": "file:///home/user/projects/myproject",
123 |   "name": "My Project"
124 | }
125 | ```
126 | 
127 | #### Multiple Repositories
128 | 
129 | ```json
130 | [
131 |   {
132 |     "uri": "file:///home/user/repos/frontend",
133 |     "name": "Frontend Repository"
134 |   },
135 |   {
136 |     "uri": "file:///home/user/repos/backend",
137 |     "name": "Backend Repository"
138 |   }
139 | ]
140 | ```
141 | 
142 | ## Error Handling
143 | 
144 | Clients **SHOULD** return standard JSON-RPC errors for common failure cases:
145 | 
146 | - Client does not support roots: `-32601` (Method not found)
147 | - Internal errors: `-32603`
148 | 
149 | Example error:
150 | 
151 | ```json
152 | {
153 |   "jsonrpc": "2.0",
154 |   "id": 1,
155 |   "error": {
156 |     "code": -32601,
157 |     "message": "Roots not supported",
158 |     "data": {
159 |       "reason": "Client does not have roots capability"
160 |     }
161 |   }
162 | }
163 | ```
164 | 
165 | ## Security Considerations
166 | 
167 | 1. Clients **MUST**:
168 |    - Only expose roots with appropriate permissions
169 |    - Validate all root URIs to prevent path traversal
170 |    - Implement proper access controls
171 |    - Monitor root accessibility
172 | 
173 | 2. Servers **SHOULD**:
174 |    - Handle cases where roots become unavailable
175 |    - Respect root boundaries during operations
176 |    - Validate all paths against provided roots
177 | 
178 | ## Implementation Guidelines
179 | 
180 | 1. Clients **SHOULD**:
181 |    - Prompt users for consent before exposing roots to servers
182 |    - Provide clear user interfaces for root management
183 |    - Validate root accessibility before exposing
184 |    - Monitor for root changes
185 | 
186 | 2. Servers **SHOULD**:
187 |    - Check for roots capability before usage
188 |    - Handle root list changes gracefully
189 |    - Respect root boundaries in operations
190 |    - Cache root information appropriately
191 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/client/sampling.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Sampling
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: 2025-06-18</Info>
  8 | 
  9 | The Model Context Protocol (MCP) provides a standardized way for servers to request LLM
 10 | sampling ("completions" or "generations") from language models via clients. This flow
 11 | allows clients to maintain control over model access, selection, and permissions while
 12 | enabling servers to leverage AI capabilities&mdash;with no server API keys necessary.
 13 | Servers can request text, audio, or image-based interactions and optionally include
 14 | context from MCP servers in their prompts.
 15 | 
 16 | ## User Interaction Model
 17 | 
 18 | Sampling in MCP allows servers to implement agentic behaviors, by enabling LLM calls to
 19 | occur _nested_ inside other MCP server features.
 20 | 
 21 | Implementations are free to expose sampling through any interface pattern that suits
 22 | their needs&mdash;the protocol itself does not mandate any specific user interaction
 23 | model.
 24 | 
 25 | <Warning>
 26 | 
 27 | For trust & safety and security, there **SHOULD** always
 28 | be a human in the loop with the ability to deny sampling requests.
 29 | 
 30 | Applications **SHOULD**:
 31 | 
 32 | - Provide UI that makes it easy and intuitive to review sampling requests
 33 | - Allow users to view and edit prompts before sending
 34 | - Present generated responses for review before delivery
 35 | 
 36 | </Warning>
 37 | 
 38 | ## Capabilities
 39 | 
 40 | Clients that support sampling **MUST** declare the `sampling` capability during
 41 | [initialization](/specification/2025-06-18/basic/lifecycle#initialization):
 42 | 
 43 | ```json
 44 | {
 45 |   "capabilities": {
 46 |     "sampling": {}
 47 |   }
 48 | }
 49 | ```
 50 | 
 51 | ## Protocol Messages
 52 | 
 53 | ### Creating Messages
 54 | 
 55 | To request a language model generation, servers send a `sampling/createMessage` request:
 56 | 
 57 | **Request:**
 58 | 
 59 | ```json
 60 | {
 61 |   "jsonrpc": "2.0",
 62 |   "id": 1,
 63 |   "method": "sampling/createMessage",
 64 |   "params": {
 65 |     "messages": [
 66 |       {
 67 |         "role": "user",
 68 |         "content": {
 69 |           "type": "text",
 70 |           "text": "What is the capital of France?"
 71 |         }
 72 |       }
 73 |     ],
 74 |     "modelPreferences": {
 75 |       "hints": [
 76 |         {
 77 |           "name": "claude-3-sonnet"
 78 |         }
 79 |       ],
 80 |       "intelligencePriority": 0.8,
 81 |       "speedPriority": 0.5
 82 |     },
 83 |     "systemPrompt": "You are a helpful assistant.",
 84 |     "maxTokens": 100
 85 |   }
 86 | }
 87 | ```
 88 | 
 89 | **Response:**
 90 | 
 91 | ```json
 92 | {
 93 |   "jsonrpc": "2.0",
 94 |   "id": 1,
 95 |   "result": {
 96 |     "role": "assistant",
 97 |     "content": {
 98 |       "type": "text",
 99 |       "text": "The capital of France is Paris."
100 |     },
101 |     "model": "claude-3-sonnet-20240307",
102 |     "stopReason": "endTurn"
103 |   }
104 | }
105 | ```
106 | 
107 | ## Message Flow
108 | 
109 | ```mermaid
110 | sequenceDiagram
111 |     participant Server
112 |     participant Client
113 |     participant User
114 |     participant LLM
115 | 
116 |     Note over Server,Client: Server initiates sampling
117 |     Server->>Client: sampling/createMessage
118 | 
119 |     Note over Client,User: Human-in-the-loop review
120 |     Client->>User: Present request for approval
121 |     User-->>Client: Review and approve/modify
122 | 
123 |     Note over Client,LLM: Model interaction
124 |     Client->>LLM: Forward approved request
125 |     LLM-->>Client: Return generation
126 | 
127 |     Note over Client,User: Response review
128 |     Client->>User: Present response for approval
129 |     User-->>Client: Review and approve/modify
130 | 
131 |     Note over Server,Client: Complete request
132 |     Client-->>Server: Return approved response
133 | ```
134 | 
135 | ## Data Types
136 | 
137 | ### Messages
138 | 
139 | Sampling messages can contain:
140 | 
141 | #### Text Content
142 | 
143 | ```json
144 | {
145 |   "type": "text",
146 |   "text": "The message content"
147 | }
148 | ```
149 | 
150 | #### Image Content
151 | 
152 | ```json
153 | {
154 |   "type": "image",
155 |   "data": "base64-encoded-image-data",
156 |   "mimeType": "image/jpeg"
157 | }
158 | ```
159 | 
160 | #### Audio Content
161 | 
162 | ```json
163 | {
164 |   "type": "audio",
165 |   "data": "base64-encoded-audio-data",
166 |   "mimeType": "audio/wav"
167 | }
168 | ```
169 | 
170 | ### Model Preferences
171 | 
172 | Model selection in MCP requires careful abstraction since servers and clients may use
173 | different AI providers with distinct model offerings. A server cannot simply request a
174 | specific model by name since the client may not have access to that exact model or may
175 | prefer to use a different provider's equivalent model.
176 | 
177 | To solve this, MCP implements a preference system that combines abstract capability
178 | priorities with optional model hints:
179 | 
180 | #### Capability Priorities
181 | 
182 | Servers express their needs through three normalized priority values (0-1):
183 | 
184 | - `costPriority`: How important is minimizing costs? Higher values prefer cheaper models.
185 | - `speedPriority`: How important is low latency? Higher values prefer faster models.
186 | - `intelligencePriority`: How important are advanced capabilities? Higher values prefer
187 |   more capable models.
188 | 
189 | #### Model Hints
190 | 
191 | While priorities help select models based on characteristics, `hints` allow servers to
192 | suggest specific models or model families:
193 | 
194 | - Hints are treated as substrings that can match model names flexibly
195 | - Multiple hints are evaluated in order of preference
196 | - Clients **MAY** map hints to equivalent models from different providers
197 | - Hints are advisory&mdash;clients make final model selection
198 | 
199 | For example:
200 | 
201 | ```json
202 | {
203 |   "hints": [
204 |     { "name": "claude-3-sonnet" }, // Prefer Sonnet-class models
205 |     { "name": "claude" } // Fall back to any Claude model
206 |   ],
207 |   "costPriority": 0.3, // Cost is less important
208 |   "speedPriority": 0.8, // Speed is very important
209 |   "intelligencePriority": 0.5 // Moderate capability needs
210 | }
211 | ```
212 | 
213 | The client processes these preferences to select an appropriate model from its available
214 | options. For instance, if the client doesn't have access to Claude models but has Gemini,
215 | it might map the sonnet hint to `gemini-1.5-pro` based on similar capabilities.
216 | 
217 | ## Error Handling
218 | 
219 | Clients **SHOULD** return errors for common failure cases:
220 | 
221 | Example error:
222 | 
223 | ```json
224 | {
225 |   "jsonrpc": "2.0",
226 |   "id": 1,
227 |   "error": {
228 |     "code": -1,
229 |     "message": "User rejected sampling request"
230 |   }
231 | }
232 | ```
233 | 
234 | ## Security Considerations
235 | 
236 | 1. Clients **SHOULD** implement user approval controls
237 | 2. Both parties **SHOULD** validate message content
238 | 3. Clients **SHOULD** respect model preference hints
239 | 4. Clients **SHOULD** implement rate limiting
240 | 5. Both parties **MUST** handle sensitive data appropriately
241 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/index.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Specification
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | [Model Context Protocol](https://modelcontextprotocol.io) (MCP) is an open protocol that
  8 | enables seamless integration between LLM applications and external data sources and
  9 | tools. Whether you're building an AI-powered IDE, enhancing a chat interface, or creating
 10 | custom AI workflows, MCP provides a standardized way to connect LLMs with the context
 11 | they need.
 12 | 
 13 | This specification defines the authoritative protocol requirements, based on the
 14 | TypeScript schema in
 15 | [schema.ts](https://github.com/modelcontextprotocol/specification/blob/main/schema/2025-06-18/schema.ts).
 16 | 
 17 | For implementation guides and examples, visit
 18 | [modelcontextprotocol.io](https://modelcontextprotocol.io).
 19 | 
 20 | The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD
 21 | NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
 22 | interpreted as described in [BCP 14](https://datatracker.ietf.org/doc/html/bcp14)
 23 | [[RFC2119](https://datatracker.ietf.org/doc/html/rfc2119)]
 24 | [[RFC8174](https://datatracker.ietf.org/doc/html/rfc8174)] when, and only when, they
 25 | appear in all capitals, as shown here.
 26 | 
 27 | ## Overview
 28 | 
 29 | MCP provides a standardized way for applications to:
 30 | 
 31 | - Share contextual information with language models
 32 | - Expose tools and capabilities to AI systems
 33 | - Build composable integrations and workflows
 34 | 
 35 | The protocol uses [JSON-RPC](https://www.jsonrpc.org/) 2.0 messages to establish
 36 | communication between:
 37 | 
 38 | - **Hosts**: LLM applications that initiate connections
 39 | - **Clients**: Connectors within the host application
 40 | - **Servers**: Services that provide context and capabilities
 41 | 
 42 | MCP takes some inspiration from the
 43 | [Language Server Protocol](https://microsoft.github.io/language-server-protocol/), which
 44 | standardizes how to add support for programming languages across a whole ecosystem of
 45 | development tools. In a similar way, MCP standardizes how to integrate additional context
 46 | and tools into the ecosystem of AI applications.
 47 | 
 48 | ## Key Details
 49 | 
 50 | ### Base Protocol
 51 | 
 52 | - [JSON-RPC](https://www.jsonrpc.org/) message format
 53 | - Stateful connections
 54 | - Server and client capability negotiation
 55 | 
 56 | ### Features
 57 | 
 58 | Servers offer any of the following features to clients:
 59 | 
 60 | - **Resources**: Context and data, for the user or the AI model to use
 61 | - **Prompts**: Templated messages and workflows for users
 62 | - **Tools**: Functions for the AI model to execute
 63 | 
 64 | Clients may offer the following features to servers:
 65 | 
 66 | - **Sampling**: Server-initiated agentic behaviors and recursive LLM interactions
 67 | - **Roots**: Server-initiated inquiries into uri or filesystem boundaries to operate in
 68 | - **Elicitation**: Server-initiated requests for additional information from users
 69 | 
 70 | ### Additional Utilities
 71 | 
 72 | - Configuration
 73 | - Progress tracking
 74 | - Cancellation
 75 | - Error reporting
 76 | - Logging
 77 | 
 78 | ## Security and Trust & Safety
 79 | 
 80 | The Model Context Protocol enables powerful capabilities through arbitrary data access
 81 | and code execution paths. With this power comes important security and trust
 82 | considerations that all implementors must carefully address.
 83 | 
 84 | ### Key Principles
 85 | 
 86 | 1. **User Consent and Control**
 87 |    - Users must explicitly consent to and understand all data access and operations
 88 |    - Users must retain control over what data is shared and what actions are taken
 89 |    - Implementors should provide clear UIs for reviewing and authorizing activities
 90 | 
 91 | 2. **Data Privacy**
 92 |    - Hosts must obtain explicit user consent before exposing user data to servers
 93 |    - Hosts must not transmit resource data elsewhere without user consent
 94 |    - User data should be protected with appropriate access controls
 95 | 
 96 | 3. **Tool Safety**
 97 |    - Tools represent arbitrary code execution and must be treated with appropriate
 98 |      caution.
 99 |      - In particular, descriptions of tool behavior such as annotations should be
100 |        considered untrusted, unless obtained from a trusted server.
101 |    - Hosts must obtain explicit user consent before invoking any tool
102 |    - Users should understand what each tool does before authorizing its use
103 | 
104 | 4. **LLM Sampling Controls**
105 |    - Users must explicitly approve any LLM sampling requests
106 |    - Users should control:
107 |      - Whether sampling occurs at all
108 |      - The actual prompt that will be sent
109 |      - What results the server can see
110 |    - The protocol intentionally limits server visibility into prompts
111 | 
112 | ### Implementation Guidelines
113 | 
114 | While MCP itself cannot enforce these security principles at the protocol level,
115 | implementors **SHOULD**:
116 | 
117 | 1. Build robust consent and authorization flows into their applications
118 | 2. Provide clear documentation of security implications
119 | 3. Implement appropriate access controls and data protections
120 | 4. Follow security best practices in their integrations
121 | 5. Consider privacy implications in their feature designs
122 | 
123 | ## Learn More
124 | 
125 | Explore the detailed specification for each protocol component:
126 | 
127 | <CardGroup cols={5}>
128 |   <Card
129 |     title="Architecture"
130 |     icon="sitemap"
131 |     href="/specification/2025-06-18/architecture"
132 |   />
133 |   <Card
134 |     title="Base Protocol"
135 |     icon="code"
136 |     href="/specification/2025-06-18/basic"
137 |   />
138 |   <Card
139 |     title="Server Features"
140 |     icon="server"
141 |     href="/specification/2025-06-18/server"
142 |   />
143 |   <Card
144 |     title="Client Features"
145 |     icon="user"
146 |     href="/specification/2025-06-18/client"
147 |   />
148 |   <Card title="Contributing" icon="pencil" href="/development/contributing" />
149 | </CardGroup>
150 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/schema.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Schema Reference
  3 | ---
  4 | 
  5 | <div id="schema-reference" />
  6 | 
  7 | ## Common Types
  8 | 
  9 | ### `Annotations`
 10 | 
 11 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">Annotations</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#annotations-audience">audience</a><span class="tsd-signature-symbol">?:</span> <a href="#role" class="tsd-signature-type tsd-kind-type-alias">Role</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#annotations-lastmodified">lastModified</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#annotations-priority">priority</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Optional annotations for the client. The client can use annotations to inform how objects are used or displayed</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="annotations-audience"><code class="tsd-tag">Optional</code><span>audience</span><a href="#annotations-audience" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">audience</span><span class="tsd-signature-symbol">?:</span> <a href="#role" class="tsd-signature-type tsd-kind-type-alias">Role</a><span class="tsd-signature-symbol">&#x5B;]</span></div><div class="tsd-comment tsd-typography"><p>Describes who the intended customer of this object or data is.</p> <p>It can include multiple entries to indicate content useful for multiple audiences (e.g., <code>&#x5B;&quot;user&quot;, &quot;assistant&quot;]</code>).</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="annotations-lastmodified"><code class="tsd-tag">Optional</code><span>last<wbr/>Modified</span><a href="#annotations-lastmodified" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">lastModified</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The moment the resource was last modified, as an ISO 8601 formatted string.</p> <p>Should be an ISO 8601 formatted string (e.g., &quot;2025-01-12T15:00:58Z&quot;).</p> <p>Examples: last activity timestamp in an open file, timestamp when the resource
 12 | was attached, etc.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="annotations-priority"><code class="tsd-tag">Optional</code><span>priority</span><a href="#annotations-priority" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">priority</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>Describes how important this data is for operating the server.</p> <p>A value of 1 means &quot;most important,&quot; and indicates that the data is
 13 | effectively required, while 0 means &quot;least important,&quot; and indicates that
 14 | the data is entirely optional.</p> </div><div class="tsd-comment tsd-typography"><div class="tsd-tag-TJS-type"><div data-typedoc-h="4" class="tsd-anchor-link" id="tjs-type">TJS-type<a href="#tjs-type" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><p>number</p> </div></div></section>
 15 | 
 16 | ### `AudioContent`
 17 | 
 18 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">AudioContent</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#audiocontent-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#audiocontent-annotations">annotations</a><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#audiocontent-data">data</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#audiocontent-mimetype">mimeType</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;audio&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Audio provided to or from an LLM.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="audiocontent-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#audiocontent-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="audiocontent-annotations"><code class="tsd-tag">Optional</code><span>annotations</span><a href="#audiocontent-annotations" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">annotations</span><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a></div><div class="tsd-comment tsd-typography"><p>Optional annotations for the client.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="audiocontent-data"><span>data</span><a href="#audiocontent-data" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">data</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The base64-encoded audio data.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="audiocontent-mimetype"><span>mime<wbr/>Type</span><a href="#audiocontent-mimetype" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">mimeType</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The MIME type of the audio. Different providers may support different audio types.</p> </div><div class="tsd-comment tsd-typography"></div></section>
 19 | 
 20 | ### `BlobResourceContents`
 21 | 
 22 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">BlobResourceContents</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#blobresourcecontents-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#blobresourcecontents-blob">blob</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#blobresourcecontents-mimetype">mimeType</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#blobresourcecontents-uri">uri</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The contents of a specific resource or sub-resource.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="blobresourcecontents-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#blobresourcecontents-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resourcecontents">ResourceContents</a>.<a href="#resourcecontents-&#x5F;meta">&#x5F;meta</a></p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="blobresourcecontents-blob"><span>blob</span><a href="#blobresourcecontents-blob" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">blob</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>A base64-encoded string representing the binary data of the item.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="blobresourcecontents-mimetype"><code class="tsd-tag">Optional</code><span>mime<wbr/>Type</span><a href="#blobresourcecontents-mimetype" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">mimeType</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The MIME type of this resource, if known.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resourcecontents">ResourceContents</a>.<a href="#resourcecontents-mimetype">mimeType</a></p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="blobresourcecontents-uri"><span>uri</span><a href="#blobresourcecontents-uri" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI of this resource.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resourcecontents">ResourceContents</a>.<a href="#resourcecontents-uri">uri</a></p></aside></section>
 23 | 
 24 | ### `BooleanSchema`
 25 | 
 26 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">BooleanSchema</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">default</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;boolean&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div>
 27 | 
 28 | ### `ClientCapabilities`
 29 | 
 30 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ClientCapabilities</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#clientcapabilities-elicitation">elicitation</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#clientcapabilities-experimental">experimental</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">object</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#clientcapabilities-roots">roots</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#clientcapabilities-sampling">sampling</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Capabilities a client may support. Known capabilities are defined here, in this schema, but this is not a closed set: any client can define its own, additional capabilities.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="clientcapabilities-elicitation"><code class="tsd-tag">Optional</code><span>elicitation</span><a href="#clientcapabilities-elicitation" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">elicitation</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">object</span></div><div class="tsd-comment tsd-typography"><p>Present if the client supports elicitation from the server.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="clientcapabilities-experimental"><code class="tsd-tag">Optional</code><span>experimental</span><a href="#clientcapabilities-experimental" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">experimental</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">object</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Experimental, non-standard capabilities that the client supports.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="clientcapabilities-roots"><code class="tsd-tag">Optional</code><span>roots</span><a href="#clientcapabilities-roots" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">roots</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Present if the client supports listing roots.</p> </div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>Whether the client supports notifications for changes to the roots list.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="clientcapabilities-sampling"><code class="tsd-tag">Optional</code><span>sampling</span><a href="#clientcapabilities-sampling" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">sampling</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">object</span></div><div class="tsd-comment tsd-typography"><p>Present if the client supports sampling from an LLM.</p> </div><div class="tsd-comment tsd-typography"></div></section>
 31 | 
 32 | ### `ContentBlock`
 33 | 
 34 | <div class="tsd-signature"><span class="tsd-kind-type-alias">ContentBlock</span><span class="tsd-signature-symbol">:</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <a href="#textcontent" class="tsd-signature-type tsd-kind-interface">TextContent</a><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <a href="#imagecontent" class="tsd-signature-type tsd-kind-interface">ImageContent</a><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <a href="#audiocontent" class="tsd-signature-type tsd-kind-interface">AudioContent</a><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <a href="#resourcelink" class="tsd-signature-type tsd-kind-interface">ResourceLink</a><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <a href="#embeddedresource" class="tsd-signature-type tsd-kind-interface">EmbeddedResource</a></div>
 35 | 
 36 | ### `Cursor`
 37 | 
 38 | <div class="tsd-signature"><span class="tsd-kind-type-alias">Cursor</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An opaque token used to represent a cursor for pagination.</p> </div><div class="tsd-comment tsd-typography"></div>
 39 | 
 40 | ### `EmbeddedResource`
 41 | 
 42 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">EmbeddedResource</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#embeddedresource-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#embeddedresource-annotations">annotations</a><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">resource</a><span class="tsd-signature-symbol">:</span> <a href="#textresourcecontents" class="tsd-signature-type tsd-kind-interface">TextResourceContents</a> <span class="tsd-signature-symbol">|</span> <a href="#blobresourcecontents" class="tsd-signature-type tsd-kind-interface">BlobResourceContents</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;resource&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The contents of a resource, embedded into a prompt or tool call result.</p> <p>It is up to the client how best to render embedded resources for the benefit
 43 | of the LLM and/or the user.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="embeddedresource-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#embeddedresource-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="embeddedresource-annotations"><code class="tsd-tag">Optional</code><span>annotations</span><a href="#embeddedresource-annotations" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">annotations</span><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a></div><div class="tsd-comment tsd-typography"><p>Optional annotations for the client.</p> </div><div class="tsd-comment tsd-typography"></div></section>
 44 | 
 45 | ### `EmptyResult`
 46 | 
 47 | <div class="tsd-signature"><span class="tsd-kind-type-alias">EmptyResult</span><span class="tsd-signature-symbol">:</span> <a href="#result" class="tsd-signature-type tsd-kind-interface">Result</a></div><div class="tsd-comment tsd-typography"><p>A response that indicates success but carries no data.</p> </div><div class="tsd-comment tsd-typography"></div>
 48 | 
 49 | ### `EnumSchema`
 50 | 
 51 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">EnumSchema</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">enum</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">enumNames</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;string&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div>
 52 | 
 53 | ### `ImageContent`
 54 | 
 55 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ImageContent</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#imagecontent-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#imagecontent-annotations">annotations</a><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#imagecontent-data">data</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#imagecontent-mimetype">mimeType</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;image&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>An image provided to or from an LLM.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="imagecontent-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#imagecontent-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="imagecontent-annotations"><code class="tsd-tag">Optional</code><span>annotations</span><a href="#imagecontent-annotations" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">annotations</span><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a></div><div class="tsd-comment tsd-typography"><p>Optional annotations for the client.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="imagecontent-data"><span>data</span><a href="#imagecontent-data" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">data</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The base64-encoded image data.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="imagecontent-mimetype"><span>mime<wbr/>Type</span><a href="#imagecontent-mimetype" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">mimeType</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The MIME type of the image. Different providers may support different image types.</p> </div><div class="tsd-comment tsd-typography"></div></section>
 56 | 
 57 | ### `Implementation`
 58 | 
 59 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">Implementation</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#implementation-name">name</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#implementation-title">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">version</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Describes the name and version of an MCP implementation, with an optional title for UI representation.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="implementation-name"><span>name</span><a href="#implementation-name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.name</p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="implementation-title"><code class="tsd-tag">Optional</code><span>title</span><a href="#implementation-title" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">title</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
 60 | even by those unfamiliar with domain-specific terminology.</p> <p>If not provided, the name should be used for display (except for Tool,
 61 | where <code>annotations.title</code> should be given precedence over using <code>name</code>,
 62 | if present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.title</p></aside></section>
 63 | 
 64 | ### `JSONRPCError`
 65 | 
 66 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">JSONRPCError</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#jsonrpcerror-error">error</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">code</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">data</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">message</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">id</a><span class="tsd-signature-symbol">:</span> <a href="#requestid" class="tsd-signature-type tsd-kind-type-alias">RequestId</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">jsonrpc</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;2.0&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A response to a request that indicates an error occurred.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="jsonrpcerror-error"><span>error</span><a href="#jsonrpcerror-error" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">error</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">code</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">data</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">message</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">code</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>The error type that occurred.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">data</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">unknown</span></div><div class="tsd-comment tsd-typography"><p>Additional information about the error. The value of this member is defined by the sender (e.g. detailed error information, nested errors etc.).</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">message</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>A short description of the error. The message SHOULD be limited to a concise single sentence.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div></section>
 67 | 
 68 | ### `JSONRPCNotification`
 69 | 
 70 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">JSONRPCNotification</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">jsonrpc</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;2.0&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#jsonrpcnotification-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A notification which does not expect a response.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="jsonrpcnotification-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#jsonrpcnotification-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter-index-signature"><div data-typedoc-h="5"><span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-parameter">key</span>: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Inherited from Notification.params</p></aside></section>
 71 | 
 72 | ### `JSONRPCRequest`
 73 | 
 74 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">JSONRPCRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">id</a><span class="tsd-signature-symbol">:</span> <a href="#requestid" class="tsd-signature-type tsd-kind-type-alias">RequestId</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">jsonrpc</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;2.0&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#jsonrpcrequest-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A request that expects a response.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="jsonrpcrequest-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#jsonrpcrequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter-index-signature"><div data-typedoc-h="5"><span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-parameter">key</span>: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?: </span><a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a></div><div class="tsd-comment tsd-typography"><p>If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></li></ul></div><aside class="tsd-sources"><p>Inherited from Request.params</p></aside></section>
 75 | 
 76 | ### `JSONRPCResponse`
 77 | 
 78 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">JSONRPCResponse</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">id</a><span class="tsd-signature-symbol">:</span> <a href="#requestid" class="tsd-signature-type tsd-kind-type-alias">RequestId</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">jsonrpc</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;2.0&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">result</a><span class="tsd-signature-symbol">:</span> <a href="#result" class="tsd-signature-type tsd-kind-interface">Result</a><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A successful (non-error) response to a request.</p> </div>
 79 | 
 80 | ### `LoggingLevel`
 81 | 
 82 | <div class="tsd-signature"><span class="tsd-kind-type-alias">LoggingLevel</span><span class="tsd-signature-symbol">:</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;debug&quot;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;info&quot;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;notice&quot;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;warning&quot;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;error&quot;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;critical&quot;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;alert&quot;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;emergency&quot;</span></div><div class="tsd-comment tsd-typography"><p>The severity of a log message.</p> <p>These map to syslog message severities, as specified in RFC-5424: <a href="https://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1">https://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1</a></p> </div><div class="tsd-comment tsd-typography"></div>
 83 | 
 84 | ### `ModelHint`
 85 | 
 86 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ModelHint</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#modelhint-name">name</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Hints to use for model selection.</p> <p>Keys not declared here are currently left unspecified by the spec and are up
 87 | to the client to interpret.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="modelhint-name"><code class="tsd-tag">Optional</code><span>name</span><a href="#modelhint-name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>A hint for a model name.</p> <p>The client SHOULD treat this as a substring of a model name; for example:</p> <ul> <li><code>claude-3-5-sonnet</code> should match <code>claude-3-5-sonnet-20241022</code></li> <li><code>sonnet</code> should match <code>claude-3-5-sonnet-20241022</code>, <code>claude-3-sonnet-20240229</code>, etc.</li> <li><code>claude</code> should match any Claude model</li> </ul> <p>The client MAY also map the string to a different provider's model name or a different model family, as long as it fills a similar niche; for example:</p> <ul> <li><code>gemini-1.5-flash</code> could match <code>claude-3-haiku-20240307</code></li> </ul> </div><div class="tsd-comment tsd-typography"></div></section>
 88 | 
 89 | ### `ModelPreferences`
 90 | 
 91 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ModelPreferences</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#modelpreferences-costpriority">costPriority</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#modelpreferences-hints">hints</a><span class="tsd-signature-symbol">?:</span> <a href="#modelhint" class="tsd-signature-type tsd-kind-interface">ModelHint</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#modelpreferences-intelligencepriority">intelligencePriority</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#modelpreferences-speedpriority">speedPriority</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The server's preferences for model selection, requested of the client during sampling.</p> <p>Because LLMs can vary along multiple dimensions, choosing the &quot;best&quot; model is
 92 | rarely straightforward.  Different models excel in different areas—some are
 93 | faster but less capable, others are more capable but more expensive, and so
 94 | on. This interface allows servers to express their priorities across multiple
 95 | dimensions to help clients make an appropriate selection for their use case.</p> <p>These preferences are always advisory. The client MAY ignore them. It is also
 96 | up to the client to decide how to interpret these preferences and how to
 97 | balance them against other considerations.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="modelpreferences-costpriority"><code class="tsd-tag">Optional</code><span>cost<wbr/>Priority</span><a href="#modelpreferences-costpriority" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">costPriority</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>How much to prioritize cost when selecting a model. A value of 0 means cost
 98 | is not important, while a value of 1 means cost is the most important
 99 | factor.</p> </div><div class="tsd-comment tsd-typography"><div class="tsd-tag-TJS-type"><div data-typedoc-h="4" class="tsd-anchor-link" id="tjs-type">TJS-type<a href="#tjs-type" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><p>number</p> </div></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="modelpreferences-hints"><code class="tsd-tag">Optional</code><span>hints</span><a href="#modelpreferences-hints" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">hints</span><span class="tsd-signature-symbol">?:</span> <a href="#modelhint" class="tsd-signature-type tsd-kind-interface">ModelHint</a><span class="tsd-signature-symbol">&#x5B;]</span></div><div class="tsd-comment tsd-typography"><p>Optional hints to use for model selection.</p> <p>If multiple hints are specified, the client MUST evaluate them in order
100 | (such that the first match is taken).</p> <p>The client SHOULD prioritize these hints over the numeric priorities, but
101 | MAY still use the priorities to select from ambiguous matches.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="modelpreferences-intelligencepriority"><code class="tsd-tag">Optional</code><span>intelligence<wbr/>Priority</span><a href="#modelpreferences-intelligencepriority" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">intelligencePriority</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>How much to prioritize intelligence and capabilities when selecting a
102 | model. A value of 0 means intelligence is not important, while a value of 1
103 | means intelligence is the most important factor.</p> </div><div class="tsd-comment tsd-typography"><div class="tsd-tag-TJS-type"><div data-typedoc-h="4" class="tsd-anchor-link" id="tjs-type-1">TJS-type<a href="#tjs-type-1" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><p>number</p> </div></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="modelpreferences-speedpriority"><code class="tsd-tag">Optional</code><span>speed<wbr/>Priority</span><a href="#modelpreferences-speedpriority" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">speedPriority</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>How much to prioritize sampling speed (latency) when selecting a model. A
104 | value of 0 means speed is not important, while a value of 1 means speed is
105 | the most important factor.</p> </div><div class="tsd-comment tsd-typography"><div class="tsd-tag-TJS-type"><div data-typedoc-h="4" class="tsd-anchor-link" id="tjs-type-2">TJS-type<a href="#tjs-type-2" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><p>number</p> </div></div></section>
106 | 
107 | ### `NumberSchema`
108 | 
109 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">NumberSchema</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">maximum</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">minimum</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;number&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;integer&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div>
110 | 
111 | ### `PrimitiveSchemaDefinition`
112 | 
113 | <div class="tsd-signature"><span class="tsd-kind-type-alias">PrimitiveSchemaDefinition</span><span class="tsd-signature-symbol">:</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <a href="#stringschema" class="tsd-signature-type tsd-kind-interface">StringSchema</a><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <a href="#numberschema" class="tsd-signature-type tsd-kind-interface">NumberSchema</a><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <a href="#booleanschema" class="tsd-signature-type tsd-kind-interface">BooleanSchema</a><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <a href="#enumschema" class="tsd-signature-type tsd-kind-interface">EnumSchema</a></div><div class="tsd-comment tsd-typography"><p>Restricted schema definitions that only allow primitive types
114 | without nested objects or arrays.</p> </div><div class="tsd-comment tsd-typography"></div>
115 | 
116 | ### `ProgressToken`
117 | 
118 | <div class="tsd-signature"><span class="tsd-kind-type-alias">ProgressToken</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>A progress token, used to associate progress notifications with the original request.</p> </div><div class="tsd-comment tsd-typography"></div>
119 | 
120 | ### `Prompt`
121 | 
122 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">Prompt</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#prompt-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#prompt-arguments">arguments</a><span class="tsd-signature-symbol">?:</span> <a href="#promptargument" class="tsd-signature-type tsd-kind-interface">PromptArgument</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#prompt-description">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#prompt-name">name</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#prompt-title">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A prompt or prompt template that the server offers.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="prompt-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#prompt-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="prompt-arguments"><code class="tsd-tag">Optional</code><span>arguments</span><a href="#prompt-arguments" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">arguments</span><span class="tsd-signature-symbol">?:</span> <a href="#promptargument" class="tsd-signature-type tsd-kind-interface">PromptArgument</a><span class="tsd-signature-symbol">&#x5B;]</span></div><div class="tsd-comment tsd-typography"><p>A list of arguments to use for templating the prompt.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="prompt-description"><code class="tsd-tag">Optional</code><span>description</span><a href="#prompt-description" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">description</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An optional description of what this prompt provides</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="prompt-name"><span>name</span><a href="#prompt-name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.name</p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="prompt-title"><code class="tsd-tag">Optional</code><span>title</span><a href="#prompt-title" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">title</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
123 | even by those unfamiliar with domain-specific terminology.</p> <p>If not provided, the name should be used for display (except for Tool,
124 | where <code>annotations.title</code> should be given precedence over using <code>name</code>,
125 | if present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.title</p></aside></section>
126 | 
127 | ### `PromptArgument`
128 | 
129 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">PromptArgument</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#promptargument-description">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#promptargument-name">name</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#promptargument-required">required</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#promptargument-title">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Describes an argument that a prompt can accept.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="promptargument-description"><code class="tsd-tag">Optional</code><span>description</span><a href="#promptargument-description" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">description</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>A human-readable description of the argument.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="promptargument-name"><span>name</span><a href="#promptargument-name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.name</p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="promptargument-required"><code class="tsd-tag">Optional</code><span>required</span><a href="#promptargument-required" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">required</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>Whether this argument must be provided.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="promptargument-title"><code class="tsd-tag">Optional</code><span>title</span><a href="#promptargument-title" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">title</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
130 | even by those unfamiliar with domain-specific terminology.</p> <p>If not provided, the name should be used for display (except for Tool,
131 | where <code>annotations.title</code> should be given precedence over using <code>name</code>,
132 | if present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.title</p></aside></section>
133 | 
134 | ### `PromptMessage`
135 | 
136 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">PromptMessage</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">content</a><span class="tsd-signature-symbol">:</span> <a href="#contentblock" class="tsd-signature-type tsd-kind-type-alias">ContentBlock</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">role</a><span class="tsd-signature-symbol">:</span> <a href="#role" class="tsd-signature-type tsd-kind-type-alias">Role</a><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Describes a message returned as part of a prompt.</p> <p>This is similar to <code>SamplingMessage</code>, but also supports the embedding of
137 | resources from the MCP server.</p> </div>
138 | 
139 | ### `PromptReference`
140 | 
141 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">PromptReference</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#promptreference-name">name</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#promptreference-title">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;ref/prompt&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Identifies a prompt.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="promptreference-name"><span>name</span><a href="#promptreference-name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.name</p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="promptreference-title"><code class="tsd-tag">Optional</code><span>title</span><a href="#promptreference-title" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">title</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
142 | even by those unfamiliar with domain-specific terminology.</p> <p>If not provided, the name should be used for display (except for Tool,
143 | where <code>annotations.title</code> should be given precedence over using <code>name</code>,
144 | if present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.title</p></aside></section>
145 | 
146 | ### `RequestId`
147 | 
148 | <div class="tsd-signature"><span class="tsd-kind-type-alias">RequestId</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>A uniquely identifying ID for a request in JSON-RPC.</p> </div><div class="tsd-comment tsd-typography"></div>
149 | 
150 | ### `Resource`
151 | 
152 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">Resource</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resource-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resource-annotations">annotations</a><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resource-description">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resource-mimetype">mimeType</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resource-name">name</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resource-size">size</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resource-title">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resource-uri">uri</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A known resource that the server is capable of reading.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resource-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#resource-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resource-annotations"><code class="tsd-tag">Optional</code><span>annotations</span><a href="#resource-annotations" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">annotations</span><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a></div><div class="tsd-comment tsd-typography"><p>Optional annotations for the client.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resource-description"><code class="tsd-tag">Optional</code><span>description</span><a href="#resource-description" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">description</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>A description of what this resource represents.</p> <p>This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a &quot;hint&quot; to the model.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resource-mimetype"><code class="tsd-tag">Optional</code><span>mime<wbr/>Type</span><a href="#resource-mimetype" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">mimeType</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The MIME type of this resource, if known.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resource-name"><span>name</span><a href="#resource-name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.name</p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resource-size"><code class="tsd-tag">Optional</code><span>size</span><a href="#resource-size" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">size</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>The size of the raw resource content, in bytes (i.e., before base64 encoding or any tokenization), if known.</p> <p>This can be used by Hosts to display file sizes and estimate context window usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resource-title"><code class="tsd-tag">Optional</code><span>title</span><a href="#resource-title" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">title</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
153 | even by those unfamiliar with domain-specific terminology.</p> <p>If not provided, the name should be used for display (except for Tool,
154 | where <code>annotations.title</code> should be given precedence over using <code>name</code>,
155 | if present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.title</p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resource-uri"><span>uri</span><a href="#resource-uri" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI of this resource.</p> </div><div class="tsd-comment tsd-typography"></div></section>
156 | 
157 | ### `ResourceContents`
158 | 
159 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ResourceContents</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcecontents-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcecontents-mimetype">mimeType</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcecontents-uri">uri</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The contents of a specific resource or sub-resource.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcecontents-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#resourcecontents-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcecontents-mimetype"><code class="tsd-tag">Optional</code><span>mime<wbr/>Type</span><a href="#resourcecontents-mimetype" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">mimeType</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The MIME type of this resource, if known.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcecontents-uri"><span>uri</span><a href="#resourcecontents-uri" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI of this resource.</p> </div><div class="tsd-comment tsd-typography"></div></section>
160 | 
161 | ### `ResourceLink`
162 | 
163 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ResourceLink</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcelink-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcelink-annotations">annotations</a><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcelink-description">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcelink-mimetype">mimeType</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcelink-name">name</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcelink-size">size</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcelink-title">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;resource&#x5F;link&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcelink-uri">uri</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A resource that the server is capable of reading, included in a prompt or tool call result.</p> <p>Note: resource links returned by tools are not guaranteed to appear in the results of <code>resources/list</code> requests.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcelink-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#resourcelink-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resource">Resource</a>.<a href="#resource-&#x5F;meta">&#x5F;meta</a></p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcelink-annotations"><code class="tsd-tag">Optional</code><span>annotations</span><a href="#resourcelink-annotations" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">annotations</span><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a></div><div class="tsd-comment tsd-typography"><p>Optional annotations for the client.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resource">Resource</a>.<a href="#resource-annotations">annotations</a></p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcelink-description"><code class="tsd-tag">Optional</code><span>description</span><a href="#resourcelink-description" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">description</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>A description of what this resource represents.</p> <p>This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a &quot;hint&quot; to the model.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resource">Resource</a>.<a href="#resource-description">description</a></p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcelink-mimetype"><code class="tsd-tag">Optional</code><span>mime<wbr/>Type</span><a href="#resourcelink-mimetype" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">mimeType</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The MIME type of this resource, if known.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resource">Resource</a>.<a href="#resource-mimetype">mimeType</a></p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcelink-name"><span>name</span><a href="#resourcelink-name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resource">Resource</a>.<a href="#resource-name">name</a></p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcelink-size"><code class="tsd-tag">Optional</code><span>size</span><a href="#resourcelink-size" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">size</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>The size of the raw resource content, in bytes (i.e., before base64 encoding or any tokenization), if known.</p> <p>This can be used by Hosts to display file sizes and estimate context window usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resource">Resource</a>.<a href="#resource-size">size</a></p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcelink-title"><code class="tsd-tag">Optional</code><span>title</span><a href="#resourcelink-title" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">title</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
164 | even by those unfamiliar with domain-specific terminology.</p> <p>If not provided, the name should be used for display (except for Tool,
165 | where <code>annotations.title</code> should be given precedence over using <code>name</code>,
166 | if present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resource">Resource</a>.<a href="#resource-title">title</a></p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcelink-uri"><span>uri</span><a href="#resourcelink-uri" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI of this resource.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resource">Resource</a>.<a href="#resource-uri">uri</a></p></aside></section>
167 | 
168 | ### `ResourceTemplate`
169 | 
170 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ResourceTemplate</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcetemplate-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcetemplate-annotations">annotations</a><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcetemplate-description">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcetemplate-mimetype">mimeType</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcetemplate-name">name</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcetemplate-title">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcetemplate-uritemplate">uriTemplate</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A template description for resources available on the server.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcetemplate-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#resourcetemplate-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcetemplate-annotations"><code class="tsd-tag">Optional</code><span>annotations</span><a href="#resourcetemplate-annotations" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">annotations</span><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a></div><div class="tsd-comment tsd-typography"><p>Optional annotations for the client.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcetemplate-description"><code class="tsd-tag">Optional</code><span>description</span><a href="#resourcetemplate-description" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">description</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>A description of what this template is for.</p> <p>This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a &quot;hint&quot; to the model.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcetemplate-mimetype"><code class="tsd-tag">Optional</code><span>mime<wbr/>Type</span><a href="#resourcetemplate-mimetype" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">mimeType</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcetemplate-name"><span>name</span><a href="#resourcetemplate-name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.name</p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcetemplate-title"><code class="tsd-tag">Optional</code><span>title</span><a href="#resourcetemplate-title" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">title</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
171 | even by those unfamiliar with domain-specific terminology.</p> <p>If not provided, the name should be used for display (except for Tool,
172 | where <code>annotations.title</code> should be given precedence over using <code>name</code>,
173 | if present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.title</p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcetemplate-uritemplate"><span>uri<wbr/>Template</span><a href="#resourcetemplate-uritemplate" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">uriTemplate</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>A URI template (according to RFC 6570) that can be used to construct resource URIs.</p> </div><div class="tsd-comment tsd-typography"></div></section>
174 | 
175 | ### `ResourceTemplateReference`
176 | 
177 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ResourceTemplateReference</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;ref/resource&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcetemplatereference-uri">uri</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A reference to a resource or resource template definition.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcetemplatereference-uri"><span>uri</span><a href="#resourcetemplatereference-uri" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI or URI template of the resource.</p> </div><div class="tsd-comment tsd-typography"></div></section>
178 | 
179 | ### `Result`
180 | 
181 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">Result</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#result-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="result-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#result-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section>
182 | 
183 | ### `Role`
184 | 
185 | <div class="tsd-signature"><span class="tsd-kind-type-alias">Role</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;user&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;assistant&quot;</span></div><div class="tsd-comment tsd-typography"><p>The sender or recipient of messages and data in a conversation.</p> </div><div class="tsd-comment tsd-typography"></div>
186 | 
187 | ### `Root`
188 | 
189 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">Root</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#root-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#root-name">name</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#root-uri">uri</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Represents a root directory or file that the server can operate on.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="root-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#root-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="root-name"><code class="tsd-tag">Optional</code><span>name</span><a href="#root-name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An optional name for the root. This can be used to provide a human-readable
190 | identifier for the root, which may be useful for display purposes or for
191 | referencing the root in other parts of the application.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="root-uri"><span>uri</span><a href="#root-uri" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI identifying the root. This <em>must</em> start with file:// for now.
192 | This restriction may be relaxed in future versions of the protocol to allow
193 | other URI schemes.</p> </div><div class="tsd-comment tsd-typography"></div></section>
194 | 
195 | ### `SamplingMessage`
196 | 
197 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">SamplingMessage</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">content</a><span class="tsd-signature-symbol">:</span> <a href="#textcontent" class="tsd-signature-type tsd-kind-interface">TextContent</a> <span class="tsd-signature-symbol">|</span> <a href="#imagecontent" class="tsd-signature-type tsd-kind-interface">ImageContent</a> <span class="tsd-signature-symbol">|</span> <a href="#audiocontent" class="tsd-signature-type tsd-kind-interface">AudioContent</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">role</a><span class="tsd-signature-symbol">:</span> <a href="#role" class="tsd-signature-type tsd-kind-type-alias">Role</a><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Describes a message issued to or received from an LLM API.</p> </div>
198 | 
199 | ### `ServerCapabilities`
200 | 
201 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ServerCapabilities</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#servercapabilities-completions">completions</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#servercapabilities-experimental">experimental</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">object</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#servercapabilities-logging">logging</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#servercapabilities-prompts">prompts</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#servercapabilities-resources">resources</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">subscribe</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#servercapabilities-tools">tools</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Capabilities that a server may support. Known capabilities are defined here, in this schema, but this is not a closed set: any server can define its own, additional capabilities.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="servercapabilities-completions"><code class="tsd-tag">Optional</code><span>completions</span><a href="#servercapabilities-completions" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">completions</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">object</span></div><div class="tsd-comment tsd-typography"><p>Present if the server supports argument autocompletion suggestions.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="servercapabilities-experimental"><code class="tsd-tag">Optional</code><span>experimental</span><a href="#servercapabilities-experimental" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">experimental</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">object</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Experimental, non-standard capabilities that the server supports.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="servercapabilities-logging"><code class="tsd-tag">Optional</code><span>logging</span><a href="#servercapabilities-logging" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">logging</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">object</span></div><div class="tsd-comment tsd-typography"><p>Present if the server supports sending log messages to the client.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="servercapabilities-prompts"><code class="tsd-tag">Optional</code><span>prompts</span><a href="#servercapabilities-prompts" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">prompts</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Present if the server offers any prompt templates.</p> </div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>Whether this server supports notifications for changes to the prompt list.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="servercapabilities-resources"><code class="tsd-tag">Optional</code><span>resources</span><a href="#servercapabilities-resources" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">resources</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">subscribe</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Present if the server offers any resources to read.</p> </div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>Whether this server supports notifications for changes to the resource list.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">subscribe</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>Whether this server supports subscribing to resource updates.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="servercapabilities-tools"><code class="tsd-tag">Optional</code><span>tools</span><a href="#servercapabilities-tools" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">tools</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Present if the server offers any tools to call.</p> </div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>Whether this server supports notifications for changes to the tool list.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><div class="tsd-comment tsd-typography"></div></section>
202 | 
203 | ### `StringSchema`
204 | 
205 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">StringSchema</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">format</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">&quot;uri&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;email&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;date&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;date-time&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">maxLength</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">minLength</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;string&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div>
206 | 
207 | ### `TextContent`
208 | 
209 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">TextContent</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#textcontent-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#textcontent-annotations">annotations</a><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#textcontent-text">text</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;text&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Text provided to or from an LLM.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="textcontent-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#textcontent-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="textcontent-annotations"><code class="tsd-tag">Optional</code><span>annotations</span><a href="#textcontent-annotations" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">annotations</span><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a></div><div class="tsd-comment tsd-typography"><p>Optional annotations for the client.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="textcontent-text"><span>text</span><a href="#textcontent-text" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">text</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The text content of the message.</p> </div><div class="tsd-comment tsd-typography"></div></section>
210 | 
211 | ### `TextResourceContents`
212 | 
213 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">TextResourceContents</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#textresourcecontents-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#textresourcecontents-mimetype">mimeType</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#textresourcecontents-text">text</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#textresourcecontents-uri">uri</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The contents of a specific resource or sub-resource.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="textresourcecontents-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#textresourcecontents-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resourcecontents">ResourceContents</a>.<a href="#resourcecontents-&#x5F;meta">&#x5F;meta</a></p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="textresourcecontents-mimetype"><code class="tsd-tag">Optional</code><span>mime<wbr/>Type</span><a href="#textresourcecontents-mimetype" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">mimeType</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The MIME type of this resource, if known.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resourcecontents">ResourceContents</a>.<a href="#resourcecontents-mimetype">mimeType</a></p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="textresourcecontents-text"><span>text</span><a href="#textresourcecontents-text" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">text</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The text of the item. This must only be set if the item can actually be represented as text (not binary data).</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="textresourcecontents-uri"><span>uri</span><a href="#textresourcecontents-uri" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI of this resource.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resourcecontents">ResourceContents</a>.<a href="#resourcecontents-uri">uri</a></p></aside></section>
214 | 
215 | ### `Tool`
216 | 
217 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">Tool</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#tool-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#tool-annotations">annotations</a><span class="tsd-signature-symbol">?:</span> <a href="#toolannotations" class="tsd-signature-type tsd-kind-interface">ToolAnnotations</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#tool-description">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#tool-inputschema">inputSchema</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">properties</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">object</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">required</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">type</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;object&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#tool-name">name</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#tool-outputschema">outputSchema</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">properties</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">object</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">required</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">type</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;object&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#tool-title">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Definition for a tool the client can call.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="tool-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#tool-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="tool-annotations"><code class="tsd-tag">Optional</code><span>annotations</span><a href="#tool-annotations" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">annotations</span><span class="tsd-signature-symbol">?:</span> <a href="#toolannotations" class="tsd-signature-type tsd-kind-interface">ToolAnnotations</a></div><div class="tsd-comment tsd-typography"><p>Optional additional tool information.</p> <p>Display name precedence order is: title, annotations.title, then name.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="tool-description"><code class="tsd-tag">Optional</code><span>description</span><a href="#tool-description" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">description</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>A human-readable description of the tool.</p> <p>This can be used by clients to improve the LLM's understanding of available tools. It can be thought of like a &quot;hint&quot; to the model.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="tool-inputschema"><span>input<wbr/>Schema</span><a href="#tool-inputschema" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">inputSchema</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">properties</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">object</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">required</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">type</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;object&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A JSON Schema object defining the expected parameters for the tool.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="tool-name"><span>name</span><a href="#tool-name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.name</p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="tool-outputschema"><code class="tsd-tag">Optional</code><span>output<wbr/>Schema</span><a href="#tool-outputschema" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">outputSchema</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">properties</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">object</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">required</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">type</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;object&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>An optional JSON Schema object defining the structure of the tool's output returned in
218 | the structuredContent field of a CallToolResult.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="tool-title"><code class="tsd-tag">Optional</code><span>title</span><a href="#tool-title" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">title</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
219 | even by those unfamiliar with domain-specific terminology.</p> <p>If not provided, the name should be used for display (except for Tool,
220 | where <code>annotations.title</code> should be given precedence over using <code>name</code>,
221 | if present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.title</p></aside></section>
222 | 
223 | ### `ToolAnnotations`
224 | 
225 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ToolAnnotations</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#toolannotations-destructivehint">destructiveHint</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#toolannotations-idempotenthint">idempotentHint</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#toolannotations-openworldhint">openWorldHint</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#toolannotations-readonlyhint">readOnlyHint</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#toolannotations-title">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Additional properties describing a Tool to clients.</p> <p>NOTE: all properties in ToolAnnotations are <strong>hints</strong>.
226 | They are not guaranteed to provide a faithful description of
227 | tool behavior (including descriptive properties like <code>title</code>).</p> <p>Clients should never make tool use decisions based on ToolAnnotations
228 | received from untrusted servers.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="toolannotations-destructivehint"><code class="tsd-tag">Optional</code><span>destructive<wbr/>Hint</span><a href="#toolannotations-destructivehint" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">destructiveHint</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>If true, the tool may perform destructive updates to its environment.
229 | If false, the tool performs only additive updates.</p> <p>(This property is meaningful only when <code>readOnlyHint == false</code>)</p> <p>Default: true</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="toolannotations-idempotenthint"><code class="tsd-tag">Optional</code><span>idempotent<wbr/>Hint</span><a href="#toolannotations-idempotenthint" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">idempotentHint</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>If true, calling the tool repeatedly with the same arguments
230 | will have no additional effect on the its environment.</p> <p>(This property is meaningful only when <code>readOnlyHint == false</code>)</p> <p>Default: false</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="toolannotations-openworldhint"><code class="tsd-tag">Optional</code><span>open<wbr/>World<wbr/>Hint</span><a href="#toolannotations-openworldhint" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">openWorldHint</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>If true, this tool may interact with an &quot;open world&quot; of external
231 | entities. If false, the tool's domain of interaction is closed.
232 | For example, the world of a web search tool is open, whereas that
233 | of a memory tool is not.</p> <p>Default: true</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="toolannotations-readonlyhint"><code class="tsd-tag">Optional</code><span>read<wbr/>Only<wbr/>Hint</span><a href="#toolannotations-readonlyhint" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">readOnlyHint</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>If true, the tool does not modify its environment.</p> <p>Default: false</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="toolannotations-title"><code class="tsd-tag">Optional</code><span>title</span><a href="#toolannotations-title" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">title</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>A human-readable title for the tool.</p> </div><div class="tsd-comment tsd-typography"></div></section>
234 | 
235 | ## `completion/complete`
236 | 
237 | ### `CompleteRequest`
238 | 
239 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">CompleteRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;completion/complete&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#completerequest-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">argument</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">value</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">context</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">arguments</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">ref</span><span class="tsd-signature-symbol">:</span> <a href="#promptreference" class="tsd-signature-type tsd-kind-interface">PromptReference</a> <span class="tsd-signature-symbol">|</span> <a href="#resourcetemplatereference" class="tsd-signature-type tsd-kind-interface">ResourceTemplateReference</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A request from the client to the server, to ask for completion options.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="completerequest-params"><span>params</span><a href="#completerequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">argument</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">value</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">context</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">arguments</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">ref</span><span class="tsd-signature-symbol">:</span> <a href="#promptreference" class="tsd-signature-type tsd-kind-interface">PromptReference</a> <span class="tsd-signature-symbol">|</span> <a href="#resourcetemplatereference" class="tsd-signature-type tsd-kind-interface">ResourceTemplateReference</a><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">argument</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">value</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The argument's information</p> </div><div class="tsd-comment tsd-typography"></div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The name of the argument</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">value</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The value of the argument to use for completion matching.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">context</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">arguments</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Additional, optional context for completions</p> </div><div class="tsd-comment tsd-typography"></div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">arguments</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Previously-resolved variables in a URI template or prompt.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">ref</span><span class="tsd-signature-symbol">: </span><a href="#promptreference" class="tsd-signature-type tsd-kind-interface">PromptReference</a> <span class="tsd-signature-symbol">|</span> <a href="#resourcetemplatereference" class="tsd-signature-type tsd-kind-interface">ResourceTemplateReference</a></div></li></ul></div><aside class="tsd-sources"><p>Overrides Request.params</p></aside></section>
240 | 
241 | ### `CompleteResult`
242 | 
243 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">CompleteResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#completeresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#completeresult-completion">completion</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">hasMore</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">total</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">values</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The server's response to a completion/complete request</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="completeresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#completeresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#result">Result</a>.<a href="#result-&#x5F;meta">&#x5F;meta</a></p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="completeresult-completion"><span>completion</span><a href="#completeresult-completion" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">completion</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">hasMore</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">total</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">values</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">hasMore</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">total</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>The total number of completion options available. This can exceed the number of values actually sent in the response.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">values</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span></div><div class="tsd-comment tsd-typography"><p>An array of completion values. Must not exceed 100 items.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div></section>
244 | 
245 | ## `elicitation/create`
246 | 
247 | ### `ElicitRequest`
248 | 
249 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ElicitRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;elicitation/create&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#elicitrequest-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">message</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">requestedSchema</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">properties</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <a href="#primitiveschemadefinition" class="tsd-signature-type tsd-kind-type-alias">PrimitiveSchemaDefinition</a> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">required</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">type</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;object&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A request from the server to elicit additional information from the user via the client.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="elicitrequest-params"><span>params</span><a href="#elicitrequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">message</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">requestedSchema</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">properties</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <a href="#primitiveschemadefinition" class="tsd-signature-type tsd-kind-type-alias">PrimitiveSchemaDefinition</a> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">required</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">type</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;object&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">message</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The message to present to the user.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">requestedSchema</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">properties</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <a href="#primitiveschemadefinition" class="tsd-signature-type tsd-kind-type-alias">PrimitiveSchemaDefinition</a> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">required</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">type</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;object&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A restricted subset of JSON Schema.
250 | Only top-level properties are allowed, without nesting.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Overrides Request.params</p></aside></section>
251 | 
252 | ### `ElicitResult`
253 | 
254 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ElicitResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#elicitresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#elicitresult-action">action</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;accept&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;decline&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;cancel&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#elicitresult-content">content</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">number</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">boolean</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The client's response to an elicitation request.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="elicitresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#elicitresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#result">Result</a>.<a href="#result-&#x5F;meta">&#x5F;meta</a></p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="elicitresult-action"><span>action</span><a href="#elicitresult-action" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">action</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;accept&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;decline&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;cancel&quot;</span></div><div class="tsd-comment tsd-typography"><p>The user action in response to the elicitation.</p> <ul> <li>&quot;accept&quot;: User submitted the form/confirmed the action</li> <li>&quot;decline&quot;: User explicitly declined the action</li> <li>&quot;cancel&quot;: User dismissed without making an explicit choice</li> </ul> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="elicitresult-content"><code class="tsd-tag">Optional</code><span>content</span><a href="#elicitresult-content" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">content</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">number</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">boolean</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The submitted form data, only present when action is &quot;accept&quot;.
255 | Contains values matching the requested schema.</p> </div><div class="tsd-comment tsd-typography"></div></section>
256 | 
257 | ## `initialize`
258 | 
259 | ### `InitializeRequest`
260 | 
261 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">InitializeRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;initialize&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#initializerequest-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">capabilities</span><span class="tsd-signature-symbol">:</span> <a href="#clientcapabilities" class="tsd-signature-type tsd-kind-interface">ClientCapabilities</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">clientInfo</span><span class="tsd-signature-symbol">:</span> <a href="#implementation" class="tsd-signature-type tsd-kind-interface">Implementation</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">protocolVersion</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>This request is sent from the client to the server when it first connects, asking it to begin initialization.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="initializerequest-params"><span>params</span><a href="#initializerequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">capabilities</span><span class="tsd-signature-symbol">:</span> <a href="#clientcapabilities" class="tsd-signature-type tsd-kind-interface">ClientCapabilities</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">clientInfo</span><span class="tsd-signature-symbol">:</span> <a href="#implementation" class="tsd-signature-type tsd-kind-interface">Implementation</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">protocolVersion</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">capabilities</span><span class="tsd-signature-symbol">: </span><a href="#clientcapabilities" class="tsd-signature-type tsd-kind-interface">ClientCapabilities</a></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">clientInfo</span><span class="tsd-signature-symbol">: </span><a href="#implementation" class="tsd-signature-type tsd-kind-interface">Implementation</a></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">protocolVersion</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Overrides Request.params</p></aside></section>
262 | 
263 | ### `InitializeResult`
264 | 
265 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">InitializeResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#initializeresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">capabilities</a><span class="tsd-signature-symbol">:</span> <a href="#servercapabilities" class="tsd-signature-type tsd-kind-interface">ServerCapabilities</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#initializeresult-instructions">instructions</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#initializeresult-protocolversion">protocolVersion</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">serverInfo</a><span class="tsd-signature-symbol">:</span> <a href="#implementation" class="tsd-signature-type tsd-kind-interface">Implementation</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>After receiving an initialize request from the client, the server sends this response.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="initializeresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#initializeresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#result">Result</a>.<a href="#result-&#x5F;meta">&#x5F;meta</a></p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="initializeresult-instructions"><code class="tsd-tag">Optional</code><span>instructions</span><a href="#initializeresult-instructions" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">instructions</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Instructions describing how to use the server and its features.</p> <p>This can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a &quot;hint&quot; to the model. For example, this information MAY be added to the system prompt.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="initializeresult-protocolversion"><span>protocol<wbr/>Version</span><a href="#initializeresult-protocolversion" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">protocolVersion</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.</p> </div><div class="tsd-comment tsd-typography"></div></section>
266 | 
267 | ## `logging/setLevel`
268 | 
269 | ### `SetLevelRequest`
270 | 
271 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">SetLevelRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;logging/setLevel&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#setlevelrequest-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">level</span><span class="tsd-signature-symbol">:</span> <a href="#logginglevel" class="tsd-signature-type tsd-kind-type-alias">LoggingLevel</a> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A request from the client to the server, to enable or adjust logging.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="setlevelrequest-params"><span>params</span><a href="#setlevelrequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">level</span><span class="tsd-signature-symbol">:</span> <a href="#logginglevel" class="tsd-signature-type tsd-kind-type-alias">LoggingLevel</a> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">level</span><span class="tsd-signature-symbol">: </span><a href="#logginglevel" class="tsd-signature-type tsd-kind-type-alias">LoggingLevel</a></div><div class="tsd-comment tsd-typography"><p>The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/message.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Overrides Request.params</p></aside></section>
272 | 
273 | ## `notifications/cancelled`
274 | 
275 | ### `CancelledNotification`
276 | 
277 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">CancelledNotification</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;notifications/cancelled&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#cancellednotification-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">reason</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">requestId</span><span class="tsd-signature-symbol">:</span> <a href="#requestid" class="tsd-signature-type tsd-kind-type-alias">RequestId</a> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>This notification can be sent by either side to indicate that it is cancelling a previously-issued request.</p> <p>The request SHOULD still be in-flight, but due to communication latency, it is always possible that this notification MAY arrive after the request has already finished.</p> <p>This notification indicates that the result will be unused, so any associated processing SHOULD cease.</p> <p>A client MUST NOT attempt to cancel its <code>initialize</code> request.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="cancellednotification-params"><span>params</span><a href="#cancellednotification-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">reason</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">requestId</span><span class="tsd-signature-symbol">:</span> <a href="#requestid" class="tsd-signature-type tsd-kind-type-alias">RequestId</a> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">reason</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">requestId</span><span class="tsd-signature-symbol">: </span><a href="#requestid" class="tsd-signature-type tsd-kind-type-alias">RequestId</a></div><div class="tsd-comment tsd-typography"><p>The ID of the request to cancel.</p> <p>This MUST correspond to the ID of a request previously issued in the same direction.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Overrides Notification.params</p></aside></section>
278 | 
279 | ## `notifications/initialized`
280 | 
281 | ### `InitializedNotification`
282 | 
283 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">InitializedNotification</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;notifications/initialized&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#initializednotification-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>This notification is sent from the client to the server after initialization has finished.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="initializednotification-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#initializednotification-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter-index-signature"><div data-typedoc-h="5"><span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-parameter">key</span>: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Inherited from Notification.params</p></aside></section>
284 | 
285 | ## `notifications/message`
286 | 
287 | ### `LoggingMessageNotification`
288 | 
289 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">LoggingMessageNotification</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;notifications/message&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#loggingmessagenotification-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">data</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">level</span><span class="tsd-signature-symbol">:</span> <a href="#logginglevel" class="tsd-signature-type tsd-kind-type-alias">LoggingLevel</a><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">logger</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Notification of a log message passed from server to client. If no logging/setLevel request has been sent from the client, the server MAY decide which messages to send automatically.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="loggingmessagenotification-params"><span>params</span><a href="#loggingmessagenotification-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">data</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">level</span><span class="tsd-signature-symbol">:</span> <a href="#logginglevel" class="tsd-signature-type tsd-kind-type-alias">LoggingLevel</a><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">logger</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">data</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">unknown</span></div><div class="tsd-comment tsd-typography"><p>The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">level</span><span class="tsd-signature-symbol">: </span><a href="#logginglevel" class="tsd-signature-type tsd-kind-type-alias">LoggingLevel</a></div><div class="tsd-comment tsd-typography"><p>The severity of this log message.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">logger</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An optional name of the logger issuing this message.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Overrides Notification.params</p></aside></section>
290 | 
291 | ## `notifications/progress`
292 | 
293 | ### `ProgressNotification`
294 | 
295 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ProgressNotification</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;notifications/progress&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#progressnotification-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">message</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">progress</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">total</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>An out-of-band notification used to inform the receiver of a progress update for a long-running request.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="progressnotification-params"><span>params</span><a href="#progressnotification-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">message</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">progress</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">total</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">message</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An optional message describing the current progress.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">progress</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>The progress thus far. This should increase every time progress is made, even if the total is unknown.</p> </div><div class="tsd-comment tsd-typography"><div class="tsd-tag-TJS-type"><div data-typedoc-h="4" class="tsd-anchor-link" id="tjs-type">TJS-type<a href="#tjs-type" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><p>number</p> </div></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">: </span><a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a></div><div class="tsd-comment tsd-typography"><p>The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">total</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>Total number of items to process (or total progress required), if known.</p> </div><div class="tsd-comment tsd-typography"><div class="tsd-tag-TJS-type"><div data-typedoc-h="4" class="tsd-anchor-link" id="tjs-type-1">TJS-type<a href="#tjs-type-1" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><p>number</p> </div></div></li></ul></div><aside class="tsd-sources"><p>Overrides Notification.params</p></aside></section>
296 | 
297 | ## `notifications/prompts/list_changed`
298 | 
299 | ### `PromptListChangedNotification`
300 | 
301 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">PromptListChangedNotification</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;notifications/prompts/list&#x5F;changed&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#promptlistchangednotification-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>An optional notification from the server to the client, informing it that the list of prompts it offers has changed. This may be issued by servers without any previous subscription from the client.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="promptlistchangednotification-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#promptlistchangednotification-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter-index-signature"><div data-typedoc-h="5"><span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-parameter">key</span>: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Inherited from Notification.params</p></aside></section>
302 | 
303 | ## `notifications/resources/list_changed`
304 | 
305 | ### `ResourceListChangedNotification`
306 | 
307 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ResourceListChangedNotification</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;notifications/resources/list&#x5F;changed&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcelistchangednotification-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>An optional notification from the server to the client, informing it that the list of resources it can read from has changed. This may be issued by servers without any previous subscription from the client.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcelistchangednotification-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#resourcelistchangednotification-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter-index-signature"><div data-typedoc-h="5"><span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-parameter">key</span>: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Inherited from Notification.params</p></aside></section>
308 | 
309 | ## `notifications/resources/updated`
310 | 
311 | ### `ResourceUpdatedNotification`
312 | 
313 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ResourceUpdatedNotification</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;notifications/resources/updated&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourceupdatednotification-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A notification from the server to the client, informing it that a resource has changed and may need to be read again. This should only be sent if the client previously sent a resources/subscribe request.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourceupdatednotification-params"><span>params</span><a href="#resourceupdatednotification-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Overrides Notification.params</p></aside></section>
314 | 
315 | ## `notifications/roots/list_changed`
316 | 
317 | ### `RootsListChangedNotification`
318 | 
319 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">RootsListChangedNotification</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;notifications/roots/list&#x5F;changed&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#rootslistchangednotification-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A notification from the client to the server, informing it that the list of roots has changed.
320 | This notification should be sent whenever the client adds, removes, or modifies any root.
321 | The server should then request an updated list of roots using the ListRootsRequest.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="rootslistchangednotification-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#rootslistchangednotification-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter-index-signature"><div data-typedoc-h="5"><span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-parameter">key</span>: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Inherited from Notification.params</p></aside></section>
322 | 
323 | ## `notifications/tools/list_changed`
324 | 
325 | ### `ToolListChangedNotification`
326 | 
327 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ToolListChangedNotification</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;notifications/tools/list&#x5F;changed&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#toollistchangednotification-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>An optional notification from the server to the client, informing it that the list of tools it offers has changed. This may be issued by servers without any previous subscription from the client.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="toollistchangednotification-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#toollistchangednotification-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter-index-signature"><div data-typedoc-h="5"><span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-parameter">key</span>: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Inherited from Notification.params</p></aside></section>
328 | 
329 | ## `ping`
330 | 
331 | ### `PingRequest`
332 | 
333 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">PingRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;ping&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#pingrequest-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A ping, issued by either the server or the client, to check that the other party is still alive. The receiver must promptly respond, or else may be disconnected.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="pingrequest-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#pingrequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter-index-signature"><div data-typedoc-h="5"><span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-parameter">key</span>: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?: </span><a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a></div><div class="tsd-comment tsd-typography"><p>If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></li></ul></div><aside class="tsd-sources"><p>Inherited from Request.params</p></aside></section>
334 | 
335 | ## `prompts/get`
336 | 
337 | ### `GetPromptRequest`
338 | 
339 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">GetPromptRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;prompts/get&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#getpromptrequest-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">arguments</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Used by the client to get a prompt provided by the server.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="getpromptrequest-params"><span>params</span><a href="#getpromptrequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">arguments</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">arguments</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Arguments to use for templating the prompt.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The name of the prompt or prompt template.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Overrides Request.params</p></aside></section>
340 | 
341 | ### `GetPromptResult`
342 | 
343 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">GetPromptResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#getpromptresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#getpromptresult-description">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">messages</a><span class="tsd-signature-symbol">:</span> <a href="#promptmessage" class="tsd-signature-type tsd-kind-interface">PromptMessage</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The server's response to a prompts/get request from the client.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="getpromptresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#getpromptresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#result">Result</a>.<a href="#result-&#x5F;meta">&#x5F;meta</a></p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="getpromptresult-description"><code class="tsd-tag">Optional</code><span>description</span><a href="#getpromptresult-description" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">description</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An optional description for the prompt.</p> </div><div class="tsd-comment tsd-typography"></div></section>
344 | 
345 | ## `prompts/list`
346 | 
347 | ### `ListPromptsRequest`
348 | 
349 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ListPromptsRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;prompts/list&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listpromptsrequest-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Sent from the client to request a list of prompts and prompt templates the server has.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listpromptsrequest-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#listpromptsrequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An opaque token representing the current pagination position.
350 | If provided, the server should return results starting after this cursor.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Inherited from PaginatedRequest.params</p></aside></section>
351 | 
352 | ### `ListPromptsResult`
353 | 
354 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ListPromptsResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listpromptsresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listpromptsresult-nextcursor">nextCursor</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">prompts</a><span class="tsd-signature-symbol">:</span> <a href="#prompt" class="tsd-signature-type tsd-kind-interface">Prompt</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The server's response to a prompts/list request from the client.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listpromptsresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#listpromptsresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from PaginatedResult.&#x5F;meta</p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listpromptsresult-nextcursor"><code class="tsd-tag">Optional</code><span>next<wbr/>Cursor</span><a href="#listpromptsresult-nextcursor" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">nextCursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An opaque token representing the pagination position after the last returned result.
355 | If present, there may be more results available.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from PaginatedResult.nextCursor</p></aside></section>
356 | 
357 | ## `resources/list`
358 | 
359 | ### `ListResourcesRequest`
360 | 
361 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ListResourcesRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;resources/list&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listresourcesrequest-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Sent from the client to request a list of resources the server has.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listresourcesrequest-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#listresourcesrequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An opaque token representing the current pagination position.
362 | If provided, the server should return results starting after this cursor.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Inherited from PaginatedRequest.params</p></aside></section>
363 | 
364 | ### `ListResourcesResult`
365 | 
366 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ListResourcesResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listresourcesresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listresourcesresult-nextcursor">nextCursor</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">resources</a><span class="tsd-signature-symbol">:</span> <a href="#resource" class="tsd-signature-type tsd-kind-interface">Resource</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The server's response to a resources/list request from the client.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listresourcesresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#listresourcesresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from PaginatedResult.&#x5F;meta</p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listresourcesresult-nextcursor"><code class="tsd-tag">Optional</code><span>next<wbr/>Cursor</span><a href="#listresourcesresult-nextcursor" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">nextCursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An opaque token representing the pagination position after the last returned result.
367 | If present, there may be more results available.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from PaginatedResult.nextCursor</p></aside></section>
368 | 
369 | ## `resources/read`
370 | 
371 | ### `ReadResourceRequest`
372 | 
373 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ReadResourceRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;resources/read&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#readresourcerequest-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Sent from the client to the server, to read a specific resource URI.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="readresourcerequest-params"><span>params</span><a href="#readresourcerequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Overrides Request.params</p></aside></section>
374 | 
375 | ### `ReadResourceResult`
376 | 
377 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ReadResourceResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#readresourceresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">contents</a><span class="tsd-signature-symbol">:</span> (<a href="#textresourcecontents" class="tsd-signature-type tsd-kind-interface">TextResourceContents</a> <span class="tsd-signature-symbol">|</span> <a href="#blobresourcecontents" class="tsd-signature-type tsd-kind-interface">BlobResourceContents</a>)<span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The server's response to a resources/read request from the client.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="readresourceresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#readresourceresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#result">Result</a>.<a href="#result-&#x5F;meta">&#x5F;meta</a></p></aside></section>
378 | 
379 | ## `resources/subscribe`
380 | 
381 | ### `SubscribeRequest`
382 | 
383 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">SubscribeRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;resources/subscribe&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#subscriberequest-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="subscriberequest-params"><span>params</span><a href="#subscriberequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Overrides Request.params</p></aside></section>
384 | 
385 | ## `resources/templates/list`
386 | 
387 | ### `ListResourceTemplatesRequest`
388 | 
389 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ListResourceTemplatesRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;resources/templates/list&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listresourcetemplatesrequest-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Sent from the client to request a list of resource templates the server has.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listresourcetemplatesrequest-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#listresourcetemplatesrequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An opaque token representing the current pagination position.
390 | If provided, the server should return results starting after this cursor.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Inherited from PaginatedRequest.params</p></aside></section>
391 | 
392 | ### `ListResourceTemplatesResult`
393 | 
394 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ListResourceTemplatesResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listresourcetemplatesresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listresourcetemplatesresult-nextcursor">nextCursor</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">resourceTemplates</a><span class="tsd-signature-symbol">:</span> <a href="#resourcetemplate" class="tsd-signature-type tsd-kind-interface">ResourceTemplate</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The server's response to a resources/templates/list request from the client.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listresourcetemplatesresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#listresourcetemplatesresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from PaginatedResult.&#x5F;meta</p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listresourcetemplatesresult-nextcursor"><code class="tsd-tag">Optional</code><span>next<wbr/>Cursor</span><a href="#listresourcetemplatesresult-nextcursor" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">nextCursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An opaque token representing the pagination position after the last returned result.
395 | If present, there may be more results available.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from PaginatedResult.nextCursor</p></aside></section>
396 | 
397 | ## `resources/unsubscribe`
398 | 
399 | ### `UnsubscribeRequest`
400 | 
401 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">UnsubscribeRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;resources/unsubscribe&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#unsubscriberequest-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="unsubscriberequest-params"><span>params</span><a href="#unsubscriberequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI of the resource to unsubscribe from.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Overrides Request.params</p></aside></section>
402 | 
403 | ## `roots/list`
404 | 
405 | ### `ListRootsRequest`
406 | 
407 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ListRootsRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;roots/list&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listrootsrequest-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Sent from the server to request a list of root URIs from the client. Roots allow
408 | servers to ask for specific directories or files to operate on. A common example
409 | for roots is providing a set of repositories or directories a server should operate
410 | on.</p> <p>This request is typically used when the server needs to understand the file system
411 | structure or access specific locations that the client has permission to read from.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listrootsrequest-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#listrootsrequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter-index-signature"><div data-typedoc-h="5"><span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-parameter">key</span>: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?: </span><a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a></div><div class="tsd-comment tsd-typography"><p>If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></li></ul></div><aside class="tsd-sources"><p>Inherited from Request.params</p></aside></section>
412 | 
413 | ### `ListRootsResult`
414 | 
415 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ListRootsResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listrootsresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">roots</a><span class="tsd-signature-symbol">:</span> <a href="#root" class="tsd-signature-type tsd-kind-interface">Root</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The client's response to a roots/list request from the server.
416 | This result contains an array of Root objects, each representing a root directory
417 | or file that the server can operate on.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listrootsresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#listrootsresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#result">Result</a>.<a href="#result-&#x5F;meta">&#x5F;meta</a></p></aside></section>
418 | 
419 | ## `sampling/createMessage`
420 | 
421 | ### `CreateMessageRequest`
422 | 
423 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">CreateMessageRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;sampling/createMessage&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#createmessagerequest-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">includeContext</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">&quot;none&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;thisServer&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;allServers&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">maxTokens</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">messages</span><span class="tsd-signature-symbol">:</span> <a href="#samplingmessage" class="tsd-signature-type tsd-kind-interface">SamplingMessage</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">metadata</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">modelPreferences</span><span class="tsd-signature-symbol">?:</span> <a href="#modelpreferences" class="tsd-signature-type tsd-kind-interface">ModelPreferences</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">stopSequences</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">systemPrompt</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">temperature</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A request from the server to sample an LLM via the client. The client has full discretion over which model to select. The client should also inform the user before beginning sampling, to allow them to inspect the request (human in the loop) and decide whether to approve it.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="createmessagerequest-params"><span>params</span><a href="#createmessagerequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">includeContext</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">&quot;none&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;thisServer&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;allServers&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">maxTokens</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">messages</span><span class="tsd-signature-symbol">:</span> <a href="#samplingmessage" class="tsd-signature-type tsd-kind-interface">SamplingMessage</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">metadata</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">modelPreferences</span><span class="tsd-signature-symbol">?:</span> <a href="#modelpreferences" class="tsd-signature-type tsd-kind-interface">ModelPreferences</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">stopSequences</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">systemPrompt</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">temperature</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">includeContext</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">&quot;none&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;thisServer&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;allServers&quot;</span></div><div class="tsd-comment tsd-typography"><p>A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">maxTokens</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">messages</span><span class="tsd-signature-symbol">: </span><a href="#samplingmessage" class="tsd-signature-type tsd-kind-interface">SamplingMessage</a><span class="tsd-signature-symbol">&#x5B;]</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">metadata</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">object</span></div><div class="tsd-comment tsd-typography"><p>Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">modelPreferences</span><span class="tsd-signature-symbol">?: </span><a href="#modelpreferences" class="tsd-signature-type tsd-kind-interface">ModelPreferences</a></div><div class="tsd-comment tsd-typography"><p>The server's preferences for which model to select. The client MAY ignore these preferences.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">stopSequences</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">systemPrompt</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">temperature</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><div class="tsd-tag-TJS-type"><div data-typedoc-h="4" class="tsd-anchor-link" id="tjs-type">TJS-type<a href="#tjs-type" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><p>number</p> </div></div></li></ul></div><aside class="tsd-sources"><p>Overrides Request.params</p></aside></section>
424 | 
425 | ### `CreateMessageResult`
426 | 
427 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">CreateMessageResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#createmessageresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">content</a><span class="tsd-signature-symbol">:</span> <a href="#textcontent" class="tsd-signature-type tsd-kind-interface">TextContent</a> <span class="tsd-signature-symbol">|</span> <a href="#imagecontent" class="tsd-signature-type tsd-kind-interface">ImageContent</a> <span class="tsd-signature-symbol">|</span> <a href="#audiocontent" class="tsd-signature-type tsd-kind-interface">AudioContent</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#createmessageresult-model">model</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">role</a><span class="tsd-signature-symbol">:</span> <a href="#role" class="tsd-signature-type tsd-kind-type-alias">Role</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#createmessageresult-stopreason">stopReason</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The client's response to a sampling/create&#x5F;message request from the server. The client should inform the user before returning the sampled message, to allow them to inspect the response (human in the loop) and decide whether to allow the server to see it.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="createmessageresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#createmessageresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#result">Result</a>.<a href="#result-&#x5F;meta">&#x5F;meta</a></p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="createmessageresult-model"><span>model</span><a href="#createmessageresult-model" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">model</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The name of the model that generated the message.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="createmessageresult-stopreason"><code class="tsd-tag">Optional</code><span>stop<wbr/>Reason</span><a href="#createmessageresult-stopreason" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">stopReason</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The reason why sampling stopped, if known.</p> </div><div class="tsd-comment tsd-typography"></div></section>
428 | 
429 | ## `tools/call`
430 | 
431 | ### `CallToolRequest`
432 | 
433 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">CallToolRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;tools/call&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">arguments</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Used by the client to invoke a tool provided by the server.</p> </div>
434 | 
435 | ### `CallToolResult`
436 | 
437 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">CallToolResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#calltoolresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#calltoolresult-content">content</a><span class="tsd-signature-symbol">:</span> <a href="#contentblock" class="tsd-signature-type tsd-kind-type-alias">ContentBlock</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#calltoolresult-iserror">isError</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#calltoolresult-structuredcontent">structuredContent</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The server's response to a tool call.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="calltoolresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#calltoolresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#result">Result</a>.<a href="#result-&#x5F;meta">&#x5F;meta</a></p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="calltoolresult-content"><span>content</span><a href="#calltoolresult-content" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">content</span><span class="tsd-signature-symbol">:</span> <a href="#contentblock" class="tsd-signature-type tsd-kind-type-alias">ContentBlock</a><span class="tsd-signature-symbol">&#x5B;]</span></div><div class="tsd-comment tsd-typography"><p>A list of content objects that represent the unstructured result of the tool call.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="calltoolresult-iserror"><code class="tsd-tag">Optional</code><span>is<wbr/>Error</span><a href="#calltoolresult-iserror" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">isError</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>Whether the tool call ended in an error.</p> <p>If not set, this is assumed to be false (the call was successful).</p> <p>Any errors that originate from the tool SHOULD be reported inside the result
438 | object, with <code>isError</code> set to true, <em>not</em> as an MCP protocol-level error
439 | response. Otherwise, the LLM would not be able to see that an error occurred
440 | and self-correct.</p> <p>However, any errors in <em>finding</em> the tool, an error indicating that the
441 | server does not support tool calls, or any other exceptional conditions,
442 | should be reported as an MCP error response.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="calltoolresult-structuredcontent"><code class="tsd-tag">Optional</code><span>structured<wbr/>Content</span><a href="#calltoolresult-structuredcontent" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">structuredContent</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>An optional JSON object that represents the structured result of the tool call.</p> </div><div class="tsd-comment tsd-typography"></div></section>
443 | 
444 | ## `tools/list`
445 | 
446 | ### `ListToolsRequest`
447 | 
448 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ListToolsRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;tools/list&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listtoolsrequest-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Sent from the client to request a list of tools the server has.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listtoolsrequest-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#listtoolsrequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An opaque token representing the current pagination position.
449 | If provided, the server should return results starting after this cursor.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Inherited from PaginatedRequest.params</p></aside></section>
450 | 
451 | ### `ListToolsResult`
452 | 
453 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ListToolsResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listtoolsresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listtoolsresult-nextcursor">nextCursor</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">tools</a><span class="tsd-signature-symbol">:</span> <a href="#tool" class="tsd-signature-type tsd-kind-interface">Tool</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The server's response to a tools/list request from the client.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listtoolsresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#listtoolsresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/2025-06-18/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from PaginatedResult.&#x5F;meta</p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listtoolsresult-nextcursor"><code class="tsd-tag">Optional</code><span>next<wbr/>Cursor</span><a href="#listtoolsresult-nextcursor" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">nextCursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An opaque token representing the pagination position after the last returned result.
454 | If present, there may be more results available.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from PaginatedResult.nextCursor</p></aside></section>
455 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/server/index.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Overview
 3 | ---
 4 | 
 5 | <Info>**Protocol Revision**: 2025-06-18</Info>
 6 | 
 7 | Servers provide the fundamental building blocks for adding context to language models via
 8 | MCP. These primitives enable rich interactions between clients, servers, and language
 9 | models:
10 | 
11 | - **Prompts**: Pre-defined templates or instructions that guide language model
12 |   interactions
13 | - **Resources**: Structured data or content that provides additional context to the model
14 | - **Tools**: Executable functions that allow models to perform actions or retrieve
15 |   information
16 | 
17 | Each primitive can be summarized in the following control hierarchy:
18 | 
19 | | Primitive | Control                | Description                                        | Example                         |
20 | | --------- | ---------------------- | -------------------------------------------------- | ------------------------------- |
21 | | Prompts   | User-controlled        | Interactive templates invoked by user choice       | Slash commands, menu options    |
22 | | Resources | Application-controlled | Contextual data attached and managed by the client | File contents, git history      |
23 | | Tools     | Model-controlled       | Functions exposed to the LLM to take actions       | API POST requests, file writing |
24 | 
25 | Explore these key primitives in more detail below:
26 | 
27 | <CardGroup cols={3}>
28 |   <Card
29 |     title="Prompts"
30 |     icon="message"
31 |     href="/specification/2025-06-18/server/prompts"
32 |   />
33 |   <Card
34 |     title="Resources"
35 |     icon="file-lines"
36 |     href="/specification/2025-06-18/server/resources"
37 |   />
38 |   <Card
39 |     title="Tools"
40 |     icon="wrench"
41 |     href="/specification/2025-06-18/server/tools"
42 |   />
43 | </CardGroup>
44 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/server/prompts.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Prompts
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: 2025-06-18</Info>
  8 | 
  9 | The Model Context Protocol (MCP) provides a standardized way for servers to expose prompt
 10 | templates to clients. Prompts allow servers to provide structured messages and
 11 | instructions for interacting with language models. Clients can discover available
 12 | prompts, retrieve their contents, and provide arguments to customize them.
 13 | 
 14 | ## User Interaction Model
 15 | 
 16 | Prompts are designed to be **user-controlled**, meaning they are exposed from servers to
 17 | clients with the intention of the user being able to explicitly select them for use.
 18 | 
 19 | Typically, prompts would be triggered through user-initiated commands in the user
 20 | interface, which allows users to naturally discover and invoke available prompts.
 21 | 
 22 | For example, as slash commands:
 23 | 
 24 | ![Example of prompt exposed as slash command](/specification/2025-06-18/server/slash-command.png)
 25 | 
 26 | However, implementors are free to expose prompts through any interface pattern that suits
 27 | their needs&mdash;the protocol itself does not mandate any specific user interaction
 28 | model.
 29 | 
 30 | ## Capabilities
 31 | 
 32 | Servers that support prompts **MUST** declare the `prompts` capability during
 33 | [initialization](/specification/2025-06-18/basic/lifecycle#initialization):
 34 | 
 35 | ```json
 36 | {
 37 |   "capabilities": {
 38 |     "prompts": {
 39 |       "listChanged": true
 40 |     }
 41 |   }
 42 | }
 43 | ```
 44 | 
 45 | `listChanged` indicates whether the server will emit notifications when the list of
 46 | available prompts changes.
 47 | 
 48 | ## Protocol Messages
 49 | 
 50 | ### Listing Prompts
 51 | 
 52 | To retrieve available prompts, clients send a `prompts/list` request. This operation
 53 | supports [pagination](/specification/2025-06-18/server/utilities/pagination).
 54 | 
 55 | **Request:**
 56 | 
 57 | ```json
 58 | {
 59 |   "jsonrpc": "2.0",
 60 |   "id": 1,
 61 |   "method": "prompts/list",
 62 |   "params": {
 63 |     "cursor": "optional-cursor-value"
 64 |   }
 65 | }
 66 | ```
 67 | 
 68 | **Response:**
 69 | 
 70 | ```json
 71 | {
 72 |   "jsonrpc": "2.0",
 73 |   "id": 1,
 74 |   "result": {
 75 |     "prompts": [
 76 |       {
 77 |         "name": "code_review",
 78 |         "title": "Request Code Review",
 79 |         "description": "Asks the LLM to analyze code quality and suggest improvements",
 80 |         "arguments": [
 81 |           {
 82 |             "name": "code",
 83 |             "description": "The code to review",
 84 |             "required": true
 85 |           }
 86 |         ]
 87 |       }
 88 |     ],
 89 |     "nextCursor": "next-page-cursor"
 90 |   }
 91 | }
 92 | ```
 93 | 
 94 | ### Getting a Prompt
 95 | 
 96 | To retrieve a specific prompt, clients send a `prompts/get` request. Arguments may be
 97 | auto-completed through [the completion API](/specification/2025-06-18/server/utilities/completion).
 98 | 
 99 | **Request:**
100 | 
101 | ```json
102 | {
103 |   "jsonrpc": "2.0",
104 |   "id": 2,
105 |   "method": "prompts/get",
106 |   "params": {
107 |     "name": "code_review",
108 |     "arguments": {
109 |       "code": "def hello():\n    print('world')"
110 |     }
111 |   }
112 | }
113 | ```
114 | 
115 | **Response:**
116 | 
117 | ```json
118 | {
119 |   "jsonrpc": "2.0",
120 |   "id": 2,
121 |   "result": {
122 |     "description": "Code review prompt",
123 |     "messages": [
124 |       {
125 |         "role": "user",
126 |         "content": {
127 |           "type": "text",
128 |           "text": "Please review this Python code:\ndef hello():\n    print('world')"
129 |         }
130 |       }
131 |     ]
132 |   }
133 | }
134 | ```
135 | 
136 | ### List Changed Notification
137 | 
138 | When the list of available prompts changes, servers that declared the `listChanged`
139 | capability **SHOULD** send a notification:
140 | 
141 | ```json
142 | {
143 |   "jsonrpc": "2.0",
144 |   "method": "notifications/prompts/list_changed"
145 | }
146 | ```
147 | 
148 | ## Message Flow
149 | 
150 | ```mermaid
151 | sequenceDiagram
152 |     participant Client
153 |     participant Server
154 | 
155 |     Note over Client,Server: Discovery
156 |     Client->>Server: prompts/list
157 |     Server-->>Client: List of prompts
158 | 
159 |     Note over Client,Server: Usage
160 |     Client->>Server: prompts/get
161 |     Server-->>Client: Prompt content
162 | 
163 |     opt listChanged
164 |       Note over Client,Server: Changes
165 |       Server--)Client: prompts/list_changed
166 |       Client->>Server: prompts/list
167 |       Server-->>Client: Updated prompts
168 |     end
169 | ```
170 | 
171 | ## Data Types
172 | 
173 | ### Prompt
174 | 
175 | A prompt definition includes:
176 | 
177 | - `name`: Unique identifier for the prompt
178 | - `title`: Optional human-readable name of the prompt for display purposes.
179 | - `description`: Optional human-readable description
180 | - `arguments`: Optional list of arguments for customization
181 | 
182 | ### PromptMessage
183 | 
184 | Messages in a prompt can contain:
185 | 
186 | - `role`: Either "user" or "assistant" to indicate the speaker
187 | - `content`: One of the following content types:
188 | 
189 | <Note>
190 |   All content types in prompt messages support optional
191 |   [annotations](/specification/2025-06-18/server/resources#annotations) for
192 |   metadata about audience, priority, and modification times.
193 | </Note>
194 | 
195 | #### Text Content
196 | 
197 | Text content represents plain text messages:
198 | 
199 | ```json
200 | {
201 |   "type": "text",
202 |   "text": "The text content of the message"
203 | }
204 | ```
205 | 
206 | This is the most common content type used for natural language interactions.
207 | 
208 | #### Image Content
209 | 
210 | Image content allows including visual information in messages:
211 | 
212 | ```json
213 | {
214 |   "type": "image",
215 |   "data": "base64-encoded-image-data",
216 |   "mimeType": "image/png"
217 | }
218 | ```
219 | 
220 | The image data **MUST** be base64-encoded and include a valid MIME type. This enables
221 | multi-modal interactions where visual context is important.
222 | 
223 | #### Audio Content
224 | 
225 | Audio content allows including audio information in messages:
226 | 
227 | ```json
228 | {
229 |   "type": "audio",
230 |   "data": "base64-encoded-audio-data",
231 |   "mimeType": "audio/wav"
232 | }
233 | ```
234 | 
235 | The audio data MUST be base64-encoded and include a valid MIME type. This enables
236 | multi-modal interactions where audio context is important.
237 | 
238 | #### Embedded Resources
239 | 
240 | Embedded resources allow referencing server-side resources directly in messages:
241 | 
242 | ```json
243 | {
244 |   "type": "resource",
245 |   "resource": {
246 |     "uri": "resource://example",
247 |     "name": "example",
248 |     "title": "My Example Resource",
249 |     "mimeType": "text/plain",
250 |     "text": "Resource content"
251 |   }
252 | }
253 | ```
254 | 
255 | Resources can contain either text or binary (blob) data and **MUST** include:
256 | 
257 | - A valid resource URI
258 | - The appropriate MIME type
259 | - Either text content or base64-encoded blob data
260 | 
261 | Embedded resources enable prompts to seamlessly incorporate server-managed content like
262 | documentation, code samples, or other reference materials directly into the conversation
263 | flow.
264 | 
265 | ## Error Handling
266 | 
267 | Servers **SHOULD** return standard JSON-RPC errors for common failure cases:
268 | 
269 | - Invalid prompt name: `-32602` (Invalid params)
270 | - Missing required arguments: `-32602` (Invalid params)
271 | - Internal errors: `-32603` (Internal error)
272 | 
273 | ## Implementation Considerations
274 | 
275 | 1. Servers **SHOULD** validate prompt arguments before processing
276 | 2. Clients **SHOULD** handle pagination for large prompt lists
277 | 3. Both parties **SHOULD** respect capability negotiation
278 | 
279 | ## Security
280 | 
281 | Implementations **MUST** carefully validate all prompt inputs and outputs to prevent
282 | injection attacks or unauthorized access to resources.
283 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/server/resource-picker.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/specification/2025-06-18/server/resource-picker.png


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/server/resources.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Resources
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: 2025-06-18</Info>
  8 | 
  9 | The Model Context Protocol (MCP) provides a standardized way for servers to expose
 10 | resources to clients. Resources allow servers to share data that provides context to
 11 | language models, such as files, database schemas, or application-specific information.
 12 | Each resource is uniquely identified by a
 13 | [URI](https://datatracker.ietf.org/doc/html/rfc3986).
 14 | 
 15 | ## User Interaction Model
 16 | 
 17 | Resources in MCP are designed to be **application-driven**, with host applications
 18 | determining how to incorporate context based on their needs.
 19 | 
 20 | For example, applications could:
 21 | 
 22 | - Expose resources through UI elements for explicit selection, in a tree or list view
 23 | - Allow the user to search through and filter available resources
 24 | - Implement automatic context inclusion, based on heuristics or the AI model's selection
 25 | 
 26 | ![Example of resource context picker](/specification/2025-06-18/server/resource-picker.png)
 27 | 
 28 | However, implementations are free to expose resources through any interface pattern that
 29 | suits their needs&mdash;the protocol itself does not mandate any specific user
 30 | interaction model.
 31 | 
 32 | ## Capabilities
 33 | 
 34 | Servers that support resources **MUST** declare the `resources` capability:
 35 | 
 36 | ```json
 37 | {
 38 |   "capabilities": {
 39 |     "resources": {
 40 |       "subscribe": true,
 41 |       "listChanged": true
 42 |     }
 43 |   }
 44 | }
 45 | ```
 46 | 
 47 | The capability supports two optional features:
 48 | 
 49 | - `subscribe`: whether the client can subscribe to be notified of changes to individual
 50 |   resources.
 51 | - `listChanged`: whether the server will emit notifications when the list of available
 52 |   resources changes.
 53 | 
 54 | Both `subscribe` and `listChanged` are optional&mdash;servers can support neither,
 55 | either, or both:
 56 | 
 57 | ```json
 58 | {
 59 |   "capabilities": {
 60 |     "resources": {} // Neither feature supported
 61 |   }
 62 | }
 63 | ```
 64 | 
 65 | ```json
 66 | {
 67 |   "capabilities": {
 68 |     "resources": {
 69 |       "subscribe": true // Only subscriptions supported
 70 |     }
 71 |   }
 72 | }
 73 | ```
 74 | 
 75 | ```json
 76 | {
 77 |   "capabilities": {
 78 |     "resources": {
 79 |       "listChanged": true // Only list change notifications supported
 80 |     }
 81 |   }
 82 | }
 83 | ```
 84 | 
 85 | ## Protocol Messages
 86 | 
 87 | ### Listing Resources
 88 | 
 89 | To discover available resources, clients send a `resources/list` request. This operation
 90 | supports [pagination](/specification/2025-06-18/server/utilities/pagination).
 91 | 
 92 | **Request:**
 93 | 
 94 | ```json
 95 | {
 96 |   "jsonrpc": "2.0",
 97 |   "id": 1,
 98 |   "method": "resources/list",
 99 |   "params": {
100 |     "cursor": "optional-cursor-value"
101 |   }
102 | }
103 | ```
104 | 
105 | **Response:**
106 | 
107 | ```json
108 | {
109 |   "jsonrpc": "2.0",
110 |   "id": 1,
111 |   "result": {
112 |     "resources": [
113 |       {
114 |         "uri": "file:///project/src/main.rs",
115 |         "name": "main.rs",
116 |         "title": "Rust Software Application Main File",
117 |         "description": "Primary application entry point",
118 |         "mimeType": "text/x-rust"
119 |       }
120 |     ],
121 |     "nextCursor": "next-page-cursor"
122 |   }
123 | }
124 | ```
125 | 
126 | ### Reading Resources
127 | 
128 | To retrieve resource contents, clients send a `resources/read` request:
129 | 
130 | **Request:**
131 | 
132 | ```json
133 | {
134 |   "jsonrpc": "2.0",
135 |   "id": 2,
136 |   "method": "resources/read",
137 |   "params": {
138 |     "uri": "file:///project/src/main.rs"
139 |   }
140 | }
141 | ```
142 | 
143 | **Response:**
144 | 
145 | ```json
146 | {
147 |   "jsonrpc": "2.0",
148 |   "id": 2,
149 |   "result": {
150 |     "contents": [
151 |       {
152 |         "uri": "file:///project/src/main.rs",
153 |         "name": "main.rs",
154 |         "title": "Rust Software Application Main File",
155 |         "mimeType": "text/x-rust",
156 |         "text": "fn main() {\n    println!(\"Hello world!\");\n}"
157 |       }
158 |     ]
159 |   }
160 | }
161 | ```
162 | 
163 | ### Resource Templates
164 | 
165 | Resource templates allow servers to expose parameterized resources using
166 | [URI templates](https://datatracker.ietf.org/doc/html/rfc6570). Arguments may be
167 | auto-completed through [the completion API](/specification/2025-06-18/server/utilities/completion).
168 | 
169 | **Request:**
170 | 
171 | ```json
172 | {
173 |   "jsonrpc": "2.0",
174 |   "id": 3,
175 |   "method": "resources/templates/list"
176 | }
177 | ```
178 | 
179 | **Response:**
180 | 
181 | ```json
182 | {
183 |   "jsonrpc": "2.0",
184 |   "id": 3,
185 |   "result": {
186 |     "resourceTemplates": [
187 |       {
188 |         "uriTemplate": "file:///{path}",
189 |         "name": "Project Files",
190 |         "title": "📁 Project Files",
191 |         "description": "Access files in the project directory",
192 |         "mimeType": "application/octet-stream"
193 |       }
194 |     ]
195 |   }
196 | }
197 | ```
198 | 
199 | ### List Changed Notification
200 | 
201 | When the list of available resources changes, servers that declared the `listChanged`
202 | capability **SHOULD** send a notification:
203 | 
204 | ```json
205 | {
206 |   "jsonrpc": "2.0",
207 |   "method": "notifications/resources/list_changed"
208 | }
209 | ```
210 | 
211 | ### Subscriptions
212 | 
213 | The protocol supports optional subscriptions to resource changes. Clients can subscribe
214 | to specific resources and receive notifications when they change:
215 | 
216 | **Subscribe Request:**
217 | 
218 | ```json
219 | {
220 |   "jsonrpc": "2.0",
221 |   "id": 4,
222 |   "method": "resources/subscribe",
223 |   "params": {
224 |     "uri": "file:///project/src/main.rs"
225 |   }
226 | }
227 | ```
228 | 
229 | **Update Notification:**
230 | 
231 | ```json
232 | {
233 |   "jsonrpc": "2.0",
234 |   "method": "notifications/resources/updated",
235 |   "params": {
236 |     "uri": "file:///project/src/main.rs",
237 |     "title": "Rust Software Application Main File"
238 |   }
239 | }
240 | ```
241 | 
242 | ## Message Flow
243 | 
244 | ```mermaid
245 | sequenceDiagram
246 |     participant Client
247 |     participant Server
248 | 
249 |     Note over Client,Server: Resource Discovery
250 |     Client->>Server: resources/list
251 |     Server-->>Client: List of resources
252 | 
253 |     Note over Client,Server: Resource Access
254 |     Client->>Server: resources/read
255 |     Server-->>Client: Resource contents
256 | 
257 |     Note over Client,Server: Subscriptions
258 |     Client->>Server: resources/subscribe
259 |     Server-->>Client: Subscription confirmed
260 | 
261 |     Note over Client,Server: Updates
262 |     Server--)Client: notifications/resources/updated
263 |     Client->>Server: resources/read
264 |     Server-->>Client: Updated contents
265 | ```
266 | 
267 | ## Data Types
268 | 
269 | ### Resource
270 | 
271 | A resource definition includes:
272 | 
273 | - `uri`: Unique identifier for the resource
274 | - `name`: The name of the resource.
275 | - `title`: Optional human-readable name of the resource for display purposes.
276 | - `description`: Optional description
277 | - `mimeType`: Optional MIME type
278 | - `size`: Optional size in bytes
279 | 
280 | ### Resource Contents
281 | 
282 | Resources can contain either text or binary data:
283 | 
284 | #### Text Content
285 | 
286 | ```json
287 | {
288 |   "uri": "file:///example.txt",
289 |   "name": "example.txt",
290 |   "title": "Example Text File",
291 |   "mimeType": "text/plain",
292 |   "text": "Resource content"
293 | }
294 | ```
295 | 
296 | #### Binary Content
297 | 
298 | ```json
299 | {
300 |   "uri": "file:///example.png",
301 |   "name": "example.png",
302 |   "title": "Example Image",
303 |   "mimeType": "image/png",
304 |   "blob": "base64-encoded-data"
305 | }
306 | ```
307 | 
308 | ### Annotations
309 | 
310 | Resources, resource templates and content blocks support optional annotations that provide hints to clients about how to use or display the resource:
311 | 
312 | - **`audience`**: An array indicating the intended audience(s) for this resource. Valid values are `"user"` and `"assistant"`. For example, `["user", "assistant"]` indicates content useful for both.
313 | - **`priority`**: A number from 0.0 to 1.0 indicating the importance of this resource. A value of 1 means "most important" (effectively required), while 0 means "least important" (entirely optional).
314 | - **`lastModified`**: An ISO 8601 formatted timestamp indicating when the resource was last modified (e.g., `"2025-01-12T15:00:58Z"`).
315 | 
316 | Example resource with annotations:
317 | 
318 | ```json
319 | {
320 |   "uri": "file:///project/README.md",
321 |   "name": "README.md",
322 |   "title": "Project Documentation",
323 |   "mimeType": "text/markdown",
324 |   "annotations": {
325 |     "audience": ["user"],
326 |     "priority": 0.8,
327 |     "lastModified": "2025-01-12T15:00:58Z"
328 |   }
329 | }
330 | ```
331 | 
332 | Clients can use these annotations to:
333 | 
334 | - Filter resources based on their intended audience
335 | - Prioritize which resources to include in context
336 | - Display modification times or sort by recency
337 | 
338 | ## Common URI Schemes
339 | 
340 | The protocol defines several standard URI schemes. This list not
341 | exhaustive&mdash;implementations are always free to use additional, custom URI schemes.
342 | 
343 | ### https://
344 | 
345 | Used to represent a resource available on the web.
346 | 
347 | Servers **SHOULD** use this scheme only when the client is able to fetch and load the
348 | resource directly from the web on its own—that is, it doesn’t need to read the resource
349 | via the MCP server.
350 | 
351 | For other use cases, servers **SHOULD** prefer to use another URI scheme, or define a
352 | custom one, even if the server will itself be downloading resource contents over the
353 | internet.
354 | 
355 | ### file://
356 | 
357 | Used to identify resources that behave like a filesystem. However, the resources do not
358 | need to map to an actual physical filesystem.
359 | 
360 | MCP servers **MAY** identify file:// resources with an
361 | [XDG MIME type](https://specifications.freedesktop.org/shared-mime-info-spec/0.14/ar01s02.html#id-1.3.14),
362 | like `inode/directory`, to represent non-regular files (such as directories) that don’t
363 | otherwise have a standard MIME type.
364 | 
365 | ### git://
366 | 
367 | Git version control integration.
368 | 
369 | ### Custom URI Schemes
370 | 
371 | Custom URI schemes **MUST** be in accordance with [RFC3986](https://datatracker.ietf.org/doc/html/rfc3986),
372 | taking the above guidance in to account.
373 | 
374 | ## Error Handling
375 | 
376 | Servers **SHOULD** return standard JSON-RPC errors for common failure cases:
377 | 
378 | - Resource not found: `-32002`
379 | - Internal errors: `-32603`
380 | 
381 | Example error:
382 | 
383 | ```json
384 | {
385 |   "jsonrpc": "2.0",
386 |   "id": 5,
387 |   "error": {
388 |     "code": -32002,
389 |     "message": "Resource not found",
390 |     "data": {
391 |       "uri": "file:///nonexistent.txt"
392 |     }
393 |   }
394 | }
395 | ```
396 | 
397 | ## Security Considerations
398 | 
399 | 1. Servers **MUST** validate all resource URIs
400 | 2. Access controls **SHOULD** be implemented for sensitive resources
401 | 3. Binary data **MUST** be properly encoded
402 | 4. Resource permissions **SHOULD** be checked before operations
403 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/server/slash-command.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/specification/2025-06-18/server/slash-command.png


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/server/tools.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Tools
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: 2025-06-18</Info>
  8 | 
  9 | The Model Context Protocol (MCP) allows servers to expose tools that can be invoked by
 10 | language models. Tools enable models to interact with external systems, such as querying
 11 | databases, calling APIs, or performing computations. Each tool is uniquely identified by
 12 | a name and includes metadata describing its schema.
 13 | 
 14 | ## User Interaction Model
 15 | 
 16 | Tools in MCP are designed to be **model-controlled**, meaning that the language model can
 17 | discover and invoke tools automatically based on its contextual understanding and the
 18 | user's prompts.
 19 | 
 20 | However, implementations are free to expose tools through any interface pattern that
 21 | suits their needs&mdash;the protocol itself does not mandate any specific user
 22 | interaction model.
 23 | 
 24 | <Warning>
 25 | 
 26 | For trust & safety and security, there **SHOULD** always
 27 | be a human in the loop with the ability to deny tool invocations.
 28 | 
 29 | Applications **SHOULD**:
 30 | 
 31 | - Provide UI that makes clear which tools are being exposed to the AI model
 32 | - Insert clear visual indicators when tools are invoked
 33 | - Present confirmation prompts to the user for operations, to ensure a human is in the
 34 |   loop
 35 | 
 36 | </Warning>
 37 | 
 38 | ## Capabilities
 39 | 
 40 | Servers that support tools **MUST** declare the `tools` capability:
 41 | 
 42 | ```json
 43 | {
 44 |   "capabilities": {
 45 |     "tools": {
 46 |       "listChanged": true
 47 |     }
 48 |   }
 49 | }
 50 | ```
 51 | 
 52 | `listChanged` indicates whether the server will emit notifications when the list of
 53 | available tools changes.
 54 | 
 55 | ## Protocol Messages
 56 | 
 57 | ### Listing Tools
 58 | 
 59 | To discover available tools, clients send a `tools/list` request. This operation supports
 60 | [pagination](/specification/2025-06-18/server/utilities/pagination).
 61 | 
 62 | **Request:**
 63 | 
 64 | ```json
 65 | {
 66 |   "jsonrpc": "2.0",
 67 |   "id": 1,
 68 |   "method": "tools/list",
 69 |   "params": {
 70 |     "cursor": "optional-cursor-value"
 71 |   }
 72 | }
 73 | ```
 74 | 
 75 | **Response:**
 76 | 
 77 | ```json
 78 | {
 79 |   "jsonrpc": "2.0",
 80 |   "id": 1,
 81 |   "result": {
 82 |     "tools": [
 83 |       {
 84 |         "name": "get_weather",
 85 |         "title": "Weather Information Provider",
 86 |         "description": "Get current weather information for a location",
 87 |         "inputSchema": {
 88 |           "type": "object",
 89 |           "properties": {
 90 |             "location": {
 91 |               "type": "string",
 92 |               "description": "City name or zip code"
 93 |             }
 94 |           },
 95 |           "required": ["location"]
 96 |         }
 97 |       }
 98 |     ],
 99 |     "nextCursor": "next-page-cursor"
100 |   }
101 | }
102 | ```
103 | 
104 | ### Calling Tools
105 | 
106 | To invoke a tool, clients send a `tools/call` request:
107 | 
108 | **Request:**
109 | 
110 | ```json
111 | {
112 |   "jsonrpc": "2.0",
113 |   "id": 2,
114 |   "method": "tools/call",
115 |   "params": {
116 |     "name": "get_weather",
117 |     "arguments": {
118 |       "location": "New York"
119 |     }
120 |   }
121 | }
122 | ```
123 | 
124 | **Response:**
125 | 
126 | ```json
127 | {
128 |   "jsonrpc": "2.0",
129 |   "id": 2,
130 |   "result": {
131 |     "content": [
132 |       {
133 |         "type": "text",
134 |         "text": "Current weather in New York:\nTemperature: 72°F\nConditions: Partly cloudy"
135 |       }
136 |     ],
137 |     "isError": false
138 |   }
139 | }
140 | ```
141 | 
142 | ### List Changed Notification
143 | 
144 | When the list of available tools changes, servers that declared the `listChanged`
145 | capability **SHOULD** send a notification:
146 | 
147 | ```json
148 | {
149 |   "jsonrpc": "2.0",
150 |   "method": "notifications/tools/list_changed"
151 | }
152 | ```
153 | 
154 | ## Message Flow
155 | 
156 | ```mermaid
157 | sequenceDiagram
158 |     participant LLM
159 |     participant Client
160 |     participant Server
161 | 
162 |     Note over Client,Server: Discovery
163 |     Client->>Server: tools/list
164 |     Server-->>Client: List of tools
165 | 
166 |     Note over Client,LLM: Tool Selection
167 |     LLM->>Client: Select tool to use
168 | 
169 |     Note over Client,Server: Invocation
170 |     Client->>Server: tools/call
171 |     Server-->>Client: Tool result
172 |     Client->>LLM: Process result
173 | 
174 |     Note over Client,Server: Updates
175 |     Server--)Client: tools/list_changed
176 |     Client->>Server: tools/list
177 |     Server-->>Client: Updated tools
178 | ```
179 | 
180 | ## Data Types
181 | 
182 | ### Tool
183 | 
184 | A tool definition includes:
185 | 
186 | - `name`: Unique identifier for the tool
187 | - `title`: Optional human-readable name of the tool for display purposes.
188 | - `description`: Human-readable description of functionality
189 | - `inputSchema`: JSON Schema defining expected parameters
190 | - `outputSchema`: Optional JSON Schema defining expected output structure
191 | - `annotations`: optional properties describing tool behavior
192 | 
193 | <Warning>
194 | 
195 | For trust & safety and security, clients **MUST** consider
196 | tool annotations to be untrusted unless they come from trusted servers.
197 | 
198 | </Warning>
199 | 
200 | ### Tool Result
201 | 
202 | Tool results may contain [**structured**](#structured-content) or **unstructured** content.
203 | 
204 | **Unstructured** content is returned in the `content` field of a result, and can contain multiple content items of different types:
205 | 
206 | <Note>
207 |   All content types (text, image, audio, resource links, and embedded resources)
208 |   support optional
209 |   [annotations](/specification/2025-06-18/server/resources#annotations) that
210 |   provide metadata about audience, priority, and modification times. This is the
211 |   same annotation format used by resources and prompts.
212 | </Note>
213 | 
214 | #### Text Content
215 | 
216 | ```json
217 | {
218 |   "type": "text",
219 |   "text": "Tool result text"
220 | }
221 | ```
222 | 
223 | #### Image Content
224 | 
225 | ```json
226 | {
227 |   "type": "image",
228 |   "data": "base64-encoded-data",
229 |   "mimeType": "image/png"
230 |   "annotations": {
231 |     "audience": ["user"],
232 |     "priority": 0.9
233 |   }
234 | 
235 | }
236 | ```
237 | 
238 | This example demonstrates the use of an optional Annotation.
239 | 
240 | #### Audio Content
241 | 
242 | ```json
243 | {
244 |   "type": "audio",
245 |   "data": "base64-encoded-audio-data",
246 |   "mimeType": "audio/wav"
247 | }
248 | ```
249 | 
250 | #### Resource Links
251 | 
252 | A tool **MAY** return links to [Resources](/specification/2025-06-18/server/resources), to provide additional context
253 | or data. In this case, the tool will return a URI that can be subscribed to or fetched by the client:
254 | 
255 | ```json
256 | {
257 |   "type": "resource_link",
258 |   "uri": "file:///project/src/main.rs",
259 |   "name": "main.rs",
260 |   "description": "Primary application entry point",
261 |   "mimeType": "text/x-rust",
262 |   "annotations": {
263 |     "audience": ["assistant"],
264 |     "priority": 0.9
265 |   }
266 | }
267 | ```
268 | 
269 | Resource links support the same [Resource annotations](/specification/2025-06-18/server/resources#annotations) as regular resources to help clients understand how to use them.
270 | 
271 | <Info>
272 |   Resource links returned by tools are not guaranteed to appear in the results
273 |   of a `resources/list` request.
274 | </Info>
275 | 
276 | #### Embedded Resources
277 | 
278 | [Resources](/specification/2025-06-18/server/resources) **MAY** be embedded to provide additional context
279 | or data using a suitable [URI scheme](./resources#common-uri-schemes). Servers that use embedded resources **SHOULD** implement the `resources` capability:
280 | 
281 | ```json
282 | {
283 |   "type": "resource",
284 |   "resource": {
285 |     "uri": "file:///project/src/main.rs",
286 |     "title": "Project Rust Main File",
287 |     "mimeType": "text/x-rust",
288 |     "text": "fn main() {\n    println!(\"Hello world!\");\n}",
289 |     "annotations": {
290 |       "audience": ["user", "assistant"],
291 |       "priority": 0.7,
292 |       "lastModified": "2025-05-03T14:30:00Z"
293 |     }
294 |   }
295 | }
296 | ```
297 | 
298 | Embedded resources support the same [Resource annotations](/specification/2025-06-18/server/resources#annotations) as regular resources to help clients understand how to use them.
299 | 
300 | #### Structured Content
301 | 
302 | **Structured** content is returned as a JSON object in the `structuredContent` field of a result.
303 | 
304 | For backwards compatibility, a tool that returns structured content SHOULD also return the serialized JSON in a TextContent block.
305 | 
306 | #### Output Schema
307 | 
308 | Tools may also provide an output schema for validation of structured results.
309 | If an output schema is provided:
310 | 
311 | - Servers **MUST** provide structured results that conform to this schema.
312 | - Clients **SHOULD** validate structured results against this schema.
313 | 
314 | Example tool with output schema:
315 | 
316 | ```json
317 | {
318 |   "name": "get_weather_data",
319 |   "title": "Weather Data Retriever",
320 |   "description": "Get current weather data for a location",
321 |   "inputSchema": {
322 |     "type": "object",
323 |     "properties": {
324 |       "location": {
325 |         "type": "string",
326 |         "description": "City name or zip code"
327 |       }
328 |     },
329 |     "required": ["location"]
330 |   },
331 |   "outputSchema": {
332 |     "type": "object",
333 |     "properties": {
334 |       "temperature": {
335 |         "type": "number",
336 |         "description": "Temperature in celsius"
337 |       },
338 |       "conditions": {
339 |         "type": "string",
340 |         "description": "Weather conditions description"
341 |       },
342 |       "humidity": {
343 |         "type": "number",
344 |         "description": "Humidity percentage"
345 |       }
346 |     },
347 |     "required": ["temperature", "conditions", "humidity"]
348 |   }
349 | }
350 | ```
351 | 
352 | Example valid response for this tool:
353 | 
354 | ```json
355 | {
356 |   "jsonrpc": "2.0",
357 |   "id": 5,
358 |   "result": {
359 |     "content": [
360 |       {
361 |         "type": "text",
362 |         "text": "{\"temperature\": 22.5, \"conditions\": \"Partly cloudy\", \"humidity\": 65}"
363 |       }
364 |     ],
365 |     "structuredContent": {
366 |       "temperature": 22.5,
367 |       "conditions": "Partly cloudy",
368 |       "humidity": 65
369 |     }
370 |   }
371 | }
372 | ```
373 | 
374 | Providing an output schema helps clients and LLMs understand and properly handle structured tool outputs by:
375 | 
376 | - Enabling strict schema validation of responses
377 | - Providing type information for better integration with programming languages
378 | - Guiding clients and LLMs to properly parse and utilize the returned data
379 | - Supporting better documentation and developer experience
380 | 
381 | ## Error Handling
382 | 
383 | Tools use two error reporting mechanisms:
384 | 
385 | 1. **Protocol Errors**: Standard JSON-RPC errors for issues like:
386 |    - Unknown tools
387 |    - Invalid arguments
388 |    - Server errors
389 | 
390 | 2. **Tool Execution Errors**: Reported in tool results with `isError: true`:
391 |    - API failures
392 |    - Invalid input data
393 |    - Business logic errors
394 | 
395 | Example protocol error:
396 | 
397 | ```json
398 | {
399 |   "jsonrpc": "2.0",
400 |   "id": 3,
401 |   "error": {
402 |     "code": -32602,
403 |     "message": "Unknown tool: invalid_tool_name"
404 |   }
405 | }
406 | ```
407 | 
408 | Example tool execution error:
409 | 
410 | ```json
411 | {
412 |   "jsonrpc": "2.0",
413 |   "id": 4,
414 |   "result": {
415 |     "content": [
416 |       {
417 |         "type": "text",
418 |         "text": "Failed to fetch weather data: API rate limit exceeded"
419 |       }
420 |     ],
421 |     "isError": true
422 |   }
423 | }
424 | ```
425 | 
426 | ## Security Considerations
427 | 
428 | 1. Servers **MUST**:
429 |    - Validate all tool inputs
430 |    - Implement proper access controls
431 |    - Rate limit tool invocations
432 |    - Sanitize tool outputs
433 | 
434 | 2. Clients **SHOULD**:
435 |    - Prompt for user confirmation on sensitive operations
436 |    - Show tool inputs to the user before calling the server, to avoid malicious or
437 |      accidental data exfiltration
438 |    - Validate tool results before passing to LLM
439 |    - Implement timeouts for tool calls
440 |    - Log tool usage for audit purposes
441 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/server/utilities/completion.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Completion
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: 2025-06-18</Info>
  8 | 
  9 | The Model Context Protocol (MCP) provides a standardized way for servers to offer
 10 | argument autocompletion suggestions for prompts and resource URIs. This enables rich,
 11 | IDE-like experiences where users receive contextual suggestions while entering argument
 12 | values.
 13 | 
 14 | ## User Interaction Model
 15 | 
 16 | Completion in MCP is designed to support interactive user experiences similar to IDE code
 17 | completion.
 18 | 
 19 | For example, applications may show completion suggestions in a dropdown or popup menu as
 20 | users type, with the ability to filter and select from available options.
 21 | 
 22 | However, implementations are free to expose completion through any interface pattern that
 23 | suits their needs&mdash;the protocol itself does not mandate any specific user
 24 | interaction model.
 25 | 
 26 | ## Capabilities
 27 | 
 28 | Servers that support completions **MUST** declare the `completions` capability:
 29 | 
 30 | ```json
 31 | {
 32 |   "capabilities": {
 33 |     "completions": {}
 34 |   }
 35 | }
 36 | ```
 37 | 
 38 | ## Protocol Messages
 39 | 
 40 | ### Requesting Completions
 41 | 
 42 | To get completion suggestions, clients send a `completion/complete` request specifying
 43 | what is being completed through a reference type:
 44 | 
 45 | **Request:**
 46 | 
 47 | ```json
 48 | {
 49 |   "jsonrpc": "2.0",
 50 |   "id": 1,
 51 |   "method": "completion/complete",
 52 |   "params": {
 53 |     "ref": {
 54 |       "type": "ref/prompt",
 55 |       "name": "code_review"
 56 |     },
 57 |     "argument": {
 58 |       "name": "language",
 59 |       "value": "py"
 60 |     }
 61 |   }
 62 | }
 63 | ```
 64 | 
 65 | **Response:**
 66 | 
 67 | ```json
 68 | {
 69 |   "jsonrpc": "2.0",
 70 |   "id": 1,
 71 |   "result": {
 72 |     "completion": {
 73 |       "values": ["python", "pytorch", "pyside"],
 74 |       "total": 10,
 75 |       "hasMore": true
 76 |     }
 77 |   }
 78 | }
 79 | ```
 80 | 
 81 | For prompts or URI templates with multiple arguments, clients should include previous completions in the `context.arguments` object to provide context for subsequent requests.
 82 | 
 83 | **Request:**
 84 | 
 85 | ```json
 86 | {
 87 |   "jsonrpc": "2.0",
 88 |   "id": 1,
 89 |   "method": "completion/complete",
 90 |   "params": {
 91 |     "ref": {
 92 |       "type": "ref/prompt",
 93 |       "name": "code_review"
 94 |     },
 95 |     "argument": {
 96 |       "name": "framework",
 97 |       "value": "fla"
 98 |     },
 99 |     "context": {
100 |       "arguments": {
101 |         "language": "python"
102 |       }
103 |     }
104 |   }
105 | }
106 | ```
107 | 
108 | **Response:**
109 | 
110 | ```json
111 | {
112 |   "jsonrpc": "2.0",
113 |   "id": 1,
114 |   "result": {
115 |     "completion": {
116 |       "values": ["flask"],
117 |       "total": 1,
118 |       "hasMore": false
119 |     }
120 |   }
121 | }
122 | ```
123 | 
124 | ### Reference Types
125 | 
126 | The protocol supports two types of completion references:
127 | 
128 | | Type           | Description                 | Example                                             |
129 | | -------------- | --------------------------- | --------------------------------------------------- |
130 | | `ref/prompt`   | References a prompt by name | `{"type": "ref/prompt", "name": "code_review"}`     |
131 | | `ref/resource` | References a resource URI   | `{"type": "ref/resource", "uri": "file:///{path}"}` |
132 | 
133 | ### Completion Results
134 | 
135 | Servers return an array of completion values ranked by relevance, with:
136 | 
137 | - Maximum 100 items per response
138 | - Optional total number of available matches
139 | - Boolean indicating if additional results exist
140 | 
141 | ## Message Flow
142 | 
143 | ```mermaid
144 | sequenceDiagram
145 |     participant Client
146 |     participant Server
147 | 
148 |     Note over Client: User types argument
149 |     Client->>Server: completion/complete
150 |     Server-->>Client: Completion suggestions
151 | 
152 |     Note over Client: User continues typing
153 |     Client->>Server: completion/complete
154 |     Server-->>Client: Refined suggestions
155 | ```
156 | 
157 | ## Data Types
158 | 
159 | ### CompleteRequest
160 | 
161 | - `ref`: A `PromptReference` or `ResourceReference`
162 | - `argument`: Object containing:
163 |   - `name`: Argument name
164 |   - `value`: Current value
165 | - `context`: Object containing:
166 |   - `arguments`: A mapping of already-resolved argument names to their values.
167 | 
168 | ### CompleteResult
169 | 
170 | - `completion`: Object containing:
171 |   - `values`: Array of suggestions (max 100)
172 |   - `total`: Optional total matches
173 |   - `hasMore`: Additional results flag
174 | 
175 | ## Error Handling
176 | 
177 | Servers **SHOULD** return standard JSON-RPC errors for common failure cases:
178 | 
179 | - Method not found: `-32601` (Capability not supported)
180 | - Invalid prompt name: `-32602` (Invalid params)
181 | - Missing required arguments: `-32602` (Invalid params)
182 | - Internal errors: `-32603` (Internal error)
183 | 
184 | ## Implementation Considerations
185 | 
186 | 1. Servers **SHOULD**:
187 |    - Return suggestions sorted by relevance
188 |    - Implement fuzzy matching where appropriate
189 |    - Rate limit completion requests
190 |    - Validate all inputs
191 | 
192 | 2. Clients **SHOULD**:
193 |    - Debounce rapid completion requests
194 |    - Cache completion results where appropriate
195 |    - Handle missing or partial results gracefully
196 | 
197 | ## Security
198 | 
199 | Implementations **MUST**:
200 | 
201 | - Validate all completion inputs
202 | - Implement appropriate rate limiting
203 | - Control access to sensitive suggestions
204 | - Prevent completion-based information disclosure
205 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/server/utilities/logging.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Logging
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: 2025-06-18</Info>
  8 | 
  9 | The Model Context Protocol (MCP) provides a standardized way for servers to send
 10 | structured log messages to clients. Clients can control logging verbosity by setting
 11 | minimum log levels, with servers sending notifications containing severity levels,
 12 | optional logger names, and arbitrary JSON-serializable data.
 13 | 
 14 | ## User Interaction Model
 15 | 
 16 | Implementations are free to expose logging through any interface pattern that suits their
 17 | needs&mdash;the protocol itself does not mandate any specific user interaction model.
 18 | 
 19 | ## Capabilities
 20 | 
 21 | Servers that emit log message notifications **MUST** declare the `logging` capability:
 22 | 
 23 | ```json
 24 | {
 25 |   "capabilities": {
 26 |     "logging": {}
 27 |   }
 28 | }
 29 | ```
 30 | 
 31 | ## Log Levels
 32 | 
 33 | The protocol follows the standard syslog severity levels specified in
 34 | [RFC 5424](https://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1):
 35 | 
 36 | | Level     | Description                      | Example Use Case           |
 37 | | --------- | -------------------------------- | -------------------------- |
 38 | | debug     | Detailed debugging information   | Function entry/exit points |
 39 | | info      | General informational messages   | Operation progress updates |
 40 | | notice    | Normal but significant events    | Configuration changes      |
 41 | | warning   | Warning conditions               | Deprecated feature usage   |
 42 | | error     | Error conditions                 | Operation failures         |
 43 | | critical  | Critical conditions              | System component failures  |
 44 | | alert     | Action must be taken immediately | Data corruption detected   |
 45 | | emergency | System is unusable               | Complete system failure    |
 46 | 
 47 | ## Protocol Messages
 48 | 
 49 | ### Setting Log Level
 50 | 
 51 | To configure the minimum log level, clients **MAY** send a `logging/setLevel` request:
 52 | 
 53 | **Request:**
 54 | 
 55 | ```json
 56 | {
 57 |   "jsonrpc": "2.0",
 58 |   "id": 1,
 59 |   "method": "logging/setLevel",
 60 |   "params": {
 61 |     "level": "info"
 62 |   }
 63 | }
 64 | ```
 65 | 
 66 | ### Log Message Notifications
 67 | 
 68 | Servers send log messages using `notifications/message` notifications:
 69 | 
 70 | ```json
 71 | {
 72 |   "jsonrpc": "2.0",
 73 |   "method": "notifications/message",
 74 |   "params": {
 75 |     "level": "error",
 76 |     "logger": "database",
 77 |     "data": {
 78 |       "error": "Connection failed",
 79 |       "details": {
 80 |         "host": "localhost",
 81 |         "port": 5432
 82 |       }
 83 |     }
 84 |   }
 85 | }
 86 | ```
 87 | 
 88 | ## Message Flow
 89 | 
 90 | ```mermaid
 91 | sequenceDiagram
 92 |     participant Client
 93 |     participant Server
 94 | 
 95 |     Note over Client,Server: Configure Logging
 96 |     Client->>Server: logging/setLevel (info)
 97 |     Server-->>Client: Empty Result
 98 | 
 99 |     Note over Client,Server: Server Activity
100 |     Server--)Client: notifications/message (info)
101 |     Server--)Client: notifications/message (warning)
102 |     Server--)Client: notifications/message (error)
103 | 
104 |     Note over Client,Server: Level Change
105 |     Client->>Server: logging/setLevel (error)
106 |     Server-->>Client: Empty Result
107 |     Note over Server: Only sends error level<br/>and above
108 | ```
109 | 
110 | ## Error Handling
111 | 
112 | Servers **SHOULD** return standard JSON-RPC errors for common failure cases:
113 | 
114 | - Invalid log level: `-32602` (Invalid params)
115 | - Configuration errors: `-32603` (Internal error)
116 | 
117 | ## Implementation Considerations
118 | 
119 | 1. Servers **SHOULD**:
120 |    - Rate limit log messages
121 |    - Include relevant context in data field
122 |    - Use consistent logger names
123 |    - Remove sensitive information
124 | 
125 | 2. Clients **MAY**:
126 |    - Present log messages in the UI
127 |    - Implement log filtering/search
128 |    - Display severity visually
129 |    - Persist log messages
130 | 
131 | ## Security
132 | 
133 | 1. Log messages **MUST NOT** contain:
134 |    - Credentials or secrets
135 |    - Personal identifying information
136 |    - Internal system details that could aid attacks
137 | 
138 | 2. Implementations **SHOULD**:
139 |    - Rate limit messages
140 |    - Validate all data fields
141 |    - Control log access
142 |    - Monitor for sensitive content
143 | 


--------------------------------------------------------------------------------
/docs/specification/2025-06-18/server/utilities/pagination.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Pagination
 3 | ---
 4 | 
 5 | <div id="enable-section-numbers" />
 6 | 
 7 | <Info>**Protocol Revision**: 2025-06-18</Info>
 8 | 
 9 | The Model Context Protocol (MCP) supports paginating list operations that may return
10 | large result sets. Pagination allows servers to yield results in smaller chunks rather
11 | than all at once.
12 | 
13 | Pagination is especially important when connecting to external services over the
14 | internet, but also useful for local integrations to avoid performance issues with large
15 | data sets.
16 | 
17 | ## Pagination Model
18 | 
19 | Pagination in MCP uses an opaque cursor-based approach, instead of numbered pages.
20 | 
21 | - The **cursor** is an opaque string token, representing a position in the result set
22 | - **Page size** is determined by the server, and clients **MUST NOT** assume a fixed page
23 |   size
24 | 
25 | ## Response Format
26 | 
27 | Pagination starts when the server sends a **response** that includes:
28 | 
29 | - The current page of results
30 | - An optional `nextCursor` field if more results exist
31 | 
32 | ```json
33 | {
34 |   "jsonrpc": "2.0",
35 |   "id": "123",
36 |   "result": {
37 |     "resources": [...],
38 |     "nextCursor": "eyJwYWdlIjogM30="
39 |   }
40 | }
41 | ```
42 | 
43 | ## Request Format
44 | 
45 | After receiving a cursor, the client can _continue_ paginating by issuing a request
46 | including that cursor:
47 | 
48 | ```json
49 | {
50 |   "jsonrpc": "2.0",
51 |   "method": "resources/list",
52 |   "params": {
53 |     "cursor": "eyJwYWdlIjogMn0="
54 |   }
55 | }
56 | ```
57 | 
58 | ## Pagination Flow
59 | 
60 | ```mermaid
61 | sequenceDiagram
62 |     participant Client
63 |     participant Server
64 | 
65 |     Client->>Server: List Request (no cursor)
66 |     loop Pagination Loop
67 |       Server-->>Client: Page of results + nextCursor
68 |       Client->>Server: List Request (with cursor)
69 |     end
70 | ```
71 | 
72 | ## Operations Supporting Pagination
73 | 
74 | The following MCP operations support pagination:
75 | 
76 | - `resources/list` - List available resources
77 | - `resources/templates/list` - List resource templates
78 | - `prompts/list` - List available prompts
79 | - `tools/list` - List available tools
80 | 
81 | ## Implementation Guidelines
82 | 
83 | 1. Servers **SHOULD**:
84 |    - Provide stable cursors
85 |    - Handle invalid cursors gracefully
86 | 
87 | 2. Clients **SHOULD**:
88 |    - Treat a missing `nextCursor` as the end of results
89 |    - Support both paginated and non-paginated flows
90 | 
91 | 3. Clients **MUST** treat cursors as opaque tokens:
92 |    - Don't make assumptions about cursor format
93 |    - Don't attempt to parse or modify cursors
94 |    - Don't persist cursors across sessions
95 | 
96 | ## Error Handling
97 | 
98 | Invalid cursors **SHOULD** result in an error with code -32602 (Invalid params).
99 | 


--------------------------------------------------------------------------------
/docs/specification/draft/architecture/index.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Architecture
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | The Model Context Protocol (MCP) follows a client-host-server architecture where each
  8 | host can run multiple client instances. This architecture enables users to integrate AI
  9 | capabilities across applications while maintaining clear security boundaries and
 10 | isolating concerns. Built on JSON-RPC, MCP provides a stateful session protocol focused
 11 | on context exchange and sampling coordination between clients and servers.
 12 | 
 13 | ## Core Components
 14 | 
 15 | ```mermaid
 16 | graph LR
 17 |     subgraph "Application Host Process"
 18 |         H[Host]
 19 |         C1[Client 1]
 20 |         C2[Client 2]
 21 |         C3[Client 3]
 22 |         H --> C1
 23 |         H --> C2
 24 |         H --> C3
 25 |     end
 26 | 
 27 |     subgraph "Local machine"
 28 |         S1[Server 1<br>Files & Git]
 29 |         S2[Server 2<br>Database]
 30 |         R1[("Local<br>Resource A")]
 31 |         R2[("Local<br>Resource B")]
 32 | 
 33 |         C1 --> S1
 34 |         C2 --> S2
 35 |         S1 <--> R1
 36 |         S2 <--> R2
 37 |     end
 38 | 
 39 |     subgraph "Internet"
 40 |         S3[Server 3<br>External APIs]
 41 |         R3[("Remote<br>Resource C")]
 42 | 
 43 |         C3 --> S3
 44 |         S3 <--> R3
 45 |     end
 46 | ```
 47 | 
 48 | ### Host
 49 | 
 50 | The host process acts as the container and coordinator:
 51 | 
 52 | - Creates and manages multiple client instances
 53 | - Controls client connection permissions and lifecycle
 54 | - Enforces security policies and consent requirements
 55 | - Handles user authorization decisions
 56 | - Coordinates AI/LLM integration and sampling
 57 | - Manages context aggregation across clients
 58 | 
 59 | ### Clients
 60 | 
 61 | Each client is created by the host and maintains an isolated server connection:
 62 | 
 63 | - Establishes one stateful session per server
 64 | - Handles protocol negotiation and capability exchange
 65 | - Routes protocol messages bidirectionally
 66 | - Manages subscriptions and notifications
 67 | - Maintains security boundaries between servers
 68 | 
 69 | A host application creates and manages multiple clients, with each client having a 1:1
 70 | relationship with a particular server.
 71 | 
 72 | ### Servers
 73 | 
 74 | Servers provide specialized context and capabilities:
 75 | 
 76 | - Expose resources, tools and prompts via MCP primitives
 77 | - Operate independently with focused responsibilities
 78 | - Request sampling through client interfaces
 79 | - Must respect security constraints
 80 | - Can be local processes or remote services
 81 | 
 82 | ## Design Principles
 83 | 
 84 | MCP is built on several key design principles that inform its architecture and
 85 | implementation:
 86 | 
 87 | 1. **Servers should be extremely easy to build**
 88 |    - Host applications handle complex orchestration responsibilities
 89 |    - Servers focus on specific, well-defined capabilities
 90 |    - Simple interfaces minimize implementation overhead
 91 |    - Clear separation enables maintainable code
 92 | 
 93 | 2. **Servers should be highly composable**
 94 |    - Each server provides focused functionality in isolation
 95 |    - Multiple servers can be combined seamlessly
 96 |    - Shared protocol enables interoperability
 97 |    - Modular design supports extensibility
 98 | 
 99 | 3. **Servers should not be able to read the whole conversation, nor "see into" other
100 |    servers**
101 |    - Servers receive only necessary contextual information
102 |    - Full conversation history stays with the host
103 |    - Each server connection maintains isolation
104 |    - Cross-server interactions are controlled by the host
105 |    - Host process enforces security boundaries
106 | 
107 | 4. **Features can be added to servers and clients progressively**
108 |    - Core protocol provides minimal required functionality
109 |    - Additional capabilities can be negotiated as needed
110 |    - Servers and clients evolve independently
111 |    - Protocol designed for future extensibility
112 |    - Backwards compatibility is maintained
113 | 
114 | ## Capability Negotiation
115 | 
116 | The Model Context Protocol uses a capability-based negotiation system where clients and
117 | servers explicitly declare their supported features during initialization. Capabilities
118 | determine which protocol features and primitives are available during a session.
119 | 
120 | - Servers declare capabilities like resource subscriptions, tool support, and prompt
121 |   templates
122 | - Clients declare capabilities like sampling support and notification handling
123 | - Both parties must respect declared capabilities throughout the session
124 | - Additional capabilities can be negotiated through extensions to the protocol
125 | 
126 | ```mermaid
127 | sequenceDiagram
128 |     participant Host
129 |     participant Client
130 |     participant Server
131 | 
132 |     Host->>+Client: Initialize client
133 |     Client->>+Server: Initialize session with capabilities
134 |     Server-->>Client: Respond with supported capabilities
135 | 
136 |     Note over Host,Server: Active Session with Negotiated Features
137 | 
138 |     loop Client Requests
139 |         Host->>Client: User- or model-initiated action
140 |         Client->>Server: Request (tools/resources)
141 |         Server-->>Client: Response
142 |         Client-->>Host: Update UI or respond to model
143 |     end
144 | 
145 |     loop Server Requests
146 |         Server->>Client: Request (sampling)
147 |         Client->>Host: Forward to AI
148 |         Host-->>Client: AI response
149 |         Client-->>Server: Response
150 |     end
151 | 
152 |     loop Notifications
153 |         Server--)Client: Resource updates
154 |         Client--)Server: Status changes
155 |     end
156 | 
157 |     Host->>Client: Terminate
158 |     Client->>-Server: End session
159 |     deactivate Server
160 | ```
161 | 
162 | Each capability unlocks specific protocol features for use during the session. For
163 | example:
164 | 
165 | - Implemented [server features](/specification/draft/server) must be advertised in the
166 |   server's capabilities
167 | - Emitting resource subscription notifications requires the server to declare
168 |   subscription support
169 | - Tool invocation requires the server to declare tool capabilities
170 | - [Sampling](/specification/draft/client) requires the client to declare support in its
171 |   capabilities
172 | 
173 | This capability negotiation ensures clients and servers have a clear understanding of
174 | supported functionality while maintaining protocol extensibility.
175 | 


--------------------------------------------------------------------------------
/docs/specification/draft/basic/authorization.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Authorization
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: draft</Info>
  8 | 
  9 | ## Introduction
 10 | 
 11 | ### Purpose and Scope
 12 | 
 13 | The Model Context Protocol provides authorization capabilities at the transport level,
 14 | enabling MCP clients to make requests to restricted MCP servers on behalf of resource
 15 | owners. This specification defines the authorization flow for HTTP-based transports.
 16 | 
 17 | ### Protocol Requirements
 18 | 
 19 | Authorization is **OPTIONAL** for MCP implementations. When supported:
 20 | 
 21 | - Implementations using an HTTP-based transport **SHOULD** conform to this specification.
 22 | - Implementations using an STDIO transport **SHOULD NOT** follow this specification, and
 23 |   instead retrieve credentials from the environment.
 24 | - Implementations using alternative transports **MUST** follow established security best
 25 |   practices for their protocol.
 26 | 
 27 | ### Standards Compliance
 28 | 
 29 | This authorization mechanism is based on established specifications listed below, but
 30 | implements a selected subset of their features to ensure security and interoperability
 31 | while maintaining simplicity:
 32 | 
 33 | - OAuth 2.1 IETF DRAFT ([draft-ietf-oauth-v2-1-13](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13))
 34 | - OAuth 2.0 Authorization Server Metadata
 35 |   ([RFC8414](https://datatracker.ietf.org/doc/html/rfc8414))
 36 | - OAuth 2.0 Dynamic Client Registration Protocol
 37 |   ([RFC7591](https://datatracker.ietf.org/doc/html/rfc7591))
 38 | - OAuth 2.0 Protected Resource Metadata ([RFC9728](https://datatracker.ietf.org/doc/html/rfc9728))
 39 | 
 40 | ## Authorization Flow
 41 | 
 42 | ### Roles
 43 | 
 44 | A protected _MCP server_ acts as an [OAuth 2.1 resource server](https://www.ietf.org/archive/id/draft-ietf-oauth-v2-1-13.html#name-roles),
 45 | capable of accepting and responding to protected resource requests using access tokens.
 46 | 
 47 | An _MCP client_ acts as an [OAuth 2.1 client](https://www.ietf.org/archive/id/draft-ietf-oauth-v2-1-13.html#name-roles),
 48 | making protected resource requests on behalf of a resource owner.
 49 | 
 50 | The _authorization server_ is responsible for interacting with the user (if necessary) and issuing access tokens for use at the MCP server.
 51 | The implementation details of the authorization server are beyond the scope of this specification. It may be hosted with the
 52 | resource server or a separate entity. The [Authorization Server Discovery section](#authorization-server-discovery)
 53 | specifies how an MCP server indicates the location of its corresponding authorization server to a client.
 54 | 
 55 | ### Overview
 56 | 
 57 | 1. Authorization servers **MUST** implement OAuth 2.1 with appropriate security
 58 |    measures for both confidential and public clients.
 59 | 
 60 | 1. Authorization servers and MCP clients **SHOULD** support the OAuth 2.0 Dynamic Client Registration
 61 |    Protocol ([RFC7591](https://datatracker.ietf.org/doc/html/rfc7591)).
 62 | 
 63 | 1. MCP servers **MUST** implement OAuth 2.0 Protected Resource Metadata ([RFC9728](https://datatracker.ietf.org/doc/html/rfc9728)).
 64 |    MCP clients **MUST** use OAuth 2.0 Protected Resource Metadata for authorization server discovery.
 65 | 
 66 | 1. MCP authorization servers **MUST** provide at least one of the following discovery mechanisms:
 67 |    - OAuth 2.0 Authorization Server Metadata ([RFC8414](https://datatracker.ietf.org/doc/html/rfc8414))
 68 |    - [OpenID Connect Discovery 1.0](https://openid.net/specs/openid-connect-discovery-1_0.html)
 69 | 
 70 |    MCP clients **MUST** support both discovery mechanisms to obtain the information required to interact with the authorization server.
 71 | 
 72 | ### Authorization Server Discovery
 73 | 
 74 | This section describes the mechanisms by which MCP servers advertise their associated
 75 | authorization servers to MCP clients, as well as the discovery process through which MCP
 76 | clients can determine authorization server endpoints and supported capabilities.
 77 | 
 78 | #### Authorization Server Location
 79 | 
 80 | MCP servers **MUST** implement the OAuth 2.0 Protected Resource Metadata ([RFC9728](https://datatracker.ietf.org/doc/html/rfc9728))
 81 | specification to indicate the locations of authorization servers. The Protected Resource Metadata document returned by the MCP server **MUST** include
 82 | the `authorization_servers` field containing at least one authorization server.
 83 | 
 84 | The specific use of `authorization_servers` is beyond the scope of this specification; implementers should consult
 85 | OAuth 2.0 Protected Resource Metadata ([RFC9728](https://datatracker.ietf.org/doc/html/rfc9728)) for
 86 | guidance on implementation details.
 87 | 
 88 | Implementors should note that Protected Resource Metadata documents can define multiple authorization servers. The responsibility for selecting which authorization server to use lies with the MCP client, following the guidelines specified in
 89 | [RFC9728 Section 7.6 "Authorization Servers"](https://datatracker.ietf.org/doc/html/rfc9728#name-authorization-servers).
 90 | 
 91 | MCP servers **MUST** use the HTTP header `WWW-Authenticate` when returning a _401 Unauthorized_ to indicate the location of the resource server metadata URL
 92 | as described in [RFC9728 Section 5.1 "WWW-Authenticate Response"](https://datatracker.ietf.org/doc/html/rfc9728#name-www-authenticate-response).
 93 | 
 94 | MCP clients **MUST** be able to parse `WWW-Authenticate` headers and respond appropriately to `HTTP 401 Unauthorized` responses from the MCP server.
 95 | 
 96 | #### Server Metadata Discovery
 97 | 
 98 | To handle different issuer URL formats and ensure interoperability with both OAuth 2.0 Authorization Server Metadata and OpenID Connect Discovery 1.0 specifications, MCP clients **MUST** attempt multiple well-known endpoints when discovering authorization server metadata.
 99 | 
100 | The discovery approach is based on [RFC8414 Section 3.1 "Authorization Server Metadata Request"](https://datatracker.ietf.org/doc/html/rfc8414#section-3.1) for OAuth 2.0 Authorization Server Metadata discovery and [RFC8414 Section 5 "Compatibility Notes"](https://datatracker.ietf.org/doc/html/rfc8414#section-5) for OpenID Connect Discovery 1.0 interoperability.
101 | 
102 | For issuer URLs with path components (e.g., `https://auth.example.com/tenant1`), clients **MUST** try endpoints in the following priority order:
103 | 
104 | 1. OAuth 2.0 Authorization Server Metadata with path insertion: `https://auth.example.com/.well-known/oauth-authorization-server/tenant1`
105 | 2. OpenID Connect Discovery 1.0 with path insertion: `https://auth.example.com/.well-known/openid-configuration/tenant1`
106 | 3. OpenID Connect Discovery 1.0 path appending: `https://auth.example.com/tenant1/.well-known/openid-configuration`
107 | 
108 | For issuer URLs without path components (e.g., `https://auth.example.com`), clients **MUST** try:
109 | 
110 | 1. OAuth 2.0 Authorization Server Metadata: `https://auth.example.com/.well-known/oauth-authorization-server`
111 | 2. OpenID Connect Discovery 1.0: `https://auth.example.com/.well-known/openid-configuration`
112 | 
113 | #### Sequence Diagram
114 | 
115 | The following diagram outlines an example flow:
116 | 
117 | ```mermaid
118 | sequenceDiagram
119 |     participant C as Client
120 |     participant M as MCP Server (Resource Server)
121 |     participant A as Authorization Server
122 | 
123 |     C->>M: MCP request without token
124 |     M-->>C: HTTP 401 Unauthorized with WWW-Authenticate header
125 |     Note over C: Extract resource_metadata<br />from WWW-Authenticate
126 | 
127 |     C->>M: GET /.well-known/oauth-protected-resource
128 |     M-->>C: Resource metadata with authorization server URL
129 |     Note over C: Validate RS metadata,<br />build AS metadata URL
130 | 
131 |     C->>A: GET Authorization server metadata endpoint
132 |     Note over C,A: Try OAuth 2.0 and OpenID Connect<br/>discovery endpoints in priority order
133 |     A-->>C: Authorization server metadata
134 | 
135 |     Note over C,A: OAuth 2.1 authorization flow happens here
136 | 
137 |     C->>A: Token request
138 |     A-->>C: Access token
139 | 
140 |     C->>M: MCP request with access token
141 |     M-->>C: MCP response
142 |     Note over C,M: MCP communication continues with valid token
143 | ```
144 | 
145 | ### Dynamic Client Registration
146 | 
147 | MCP clients and authorization servers **SHOULD** support the
148 | OAuth 2.0 Dynamic Client Registration Protocol [RFC7591](https://datatracker.ietf.org/doc/html/rfc7591)
149 | to allow MCP clients to obtain OAuth client IDs without user interaction. This provides a
150 | standardized way for clients to automatically register with new authorization servers, which is crucial
151 | for MCP because:
152 | 
153 | - Clients may not know all possible MCP servers and their authorization servers in advance.
154 | - Manual registration would create friction for users.
155 | - It enables seamless connection to new MCP servers and their authorization servers.
156 | - Authorization servers can implement their own registration policies.
157 | 
158 | Any authorization servers that _do not_ support Dynamic Client Registration need to provide
159 | alternative ways to obtain a client ID (and, if applicable, client credentials). For one of
160 | these authorization servers, MCP clients will have to either:
161 | 
162 | 1. Hardcode a client ID (and, if applicable, client credentials) specifically for the MCP client to use when
163 |    interacting with that authorization server, or
164 | 2. Present a UI to users that allows them to enter these details, after registering an
165 |    OAuth client themselves (e.g., through a configuration interface hosted by the
166 |    server).
167 | 
168 | ### Authorization Flow Steps
169 | 
170 | The complete Authorization flow proceeds as follows:
171 | 
172 | ```mermaid
173 | sequenceDiagram
174 |     participant B as User-Agent (Browser)
175 |     participant C as Client
176 |     participant M as MCP Server (Resource Server)
177 |     participant A as Authorization Server
178 | 
179 |     C->>M: MCP request without token
180 |     M->>C: HTTP 401 Unauthorized with WWW-Authenticate header
181 |     Note over C: Extract resource_metadata URL from WWW-Authenticate
182 | 
183 |     C->>M: Request Protected Resource Metadata
184 |     M->>C: Return metadata
185 | 
186 |     Note over C: Parse metadata and extract authorization server(s)<br/>Client determines AS to use
187 | 
188 |     C->>A: GET Authorization server metadata endpoint
189 |     Note over C,A: Try OAuth 2.0 and OpenID Connect<br/>discovery endpoints in priority order
190 |     A-->>C: Authorization server metadata
191 | 
192 |     alt Dynamic client registration
193 |         C->>A: POST /register
194 |         A->>C: Client Credentials
195 |     end
196 | 
197 |     Note over C: Generate PKCE parameters<br/>Include resource parameter
198 |     C->>B: Open browser with authorization URL + code_challenge + resource
199 |     B->>A: Authorization request with resource parameter
200 |     Note over A: User authorizes
201 |     A->>B: Redirect to callback with authorization code
202 |     B->>C: Authorization code callback
203 |     C->>A: Token request + code_verifier + resource
204 |     A->>C: Access token (+ refresh token)
205 |     C->>M: MCP request with access token
206 |     M-->>C: MCP response
207 |     Note over C,M: MCP communication continues with valid token
208 | ```
209 | 
210 | #### Resource Parameter Implementation
211 | 
212 | MCP clients **MUST** implement Resource Indicators for OAuth 2.0 as defined in [RFC 8707](https://www.rfc-editor.org/rfc/rfc8707.html)
213 | to explicitly specify the target resource for which the token is being requested. The `resource` parameter:
214 | 
215 | 1. **MUST** be included in both authorization requests and token requests.
216 | 2. **MUST** identify the MCP server that the client intends to use the token with.
217 | 3. **MUST** use the canonical URI of the MCP server as defined in [RFC 8707 Section 2](https://www.rfc-editor.org/rfc/rfc8707.html#name-access-token-request).
218 | 
219 | ##### Canonical Server URI
220 | 
221 | For the purposes of this specification, the canonical URI of an MCP server is defined as the resource identifier as specified in
222 | [RFC 8707 Section 2](https://www.rfc-editor.org/rfc/rfc8707.html#section-2) and aligns with the `resource` parameter in
223 | [RFC 9728](https://datatracker.ietf.org/doc/html/rfc9728).
224 | 
225 | MCP clients **SHOULD** provide the most specific URI that they can for the MCP server they intend to access, following the guidance in [RFC 8707](https://www.rfc-editor.org/rfc/rfc8707). While the canonical form uses lowercase scheme and host components, implementations **SHOULD** accept uppercase scheme and host components for robustness and interoperability.
226 | 
227 | Examples of valid canonical URIs:
228 | 
229 | - `https://mcp.example.com/mcp`
230 | - `https://mcp.example.com`
231 | - `https://mcp.example.com:8443`
232 | - `https://mcp.example.com/server/mcp` (when path component is necessary to identify individual MCP server)
233 | 
234 | Examples of invalid canonical URIs:
235 | 
236 | - `mcp.example.com` (missing scheme)
237 | - `https://mcp.example.com#fragment` (contains fragment)
238 | 
239 | > **Note:** While both `https://mcp.example.com/` (with trailing slash) and `https://mcp.example.com` (without trailing slash) are technically valid absolute URIs according to [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986), implementations **SHOULD** consistently use the form without the trailing slash for better interoperability unless the trailing slash is semantically significant for the specific resource.
240 | 
241 | For example, if accessing an MCP server at `https://mcp.example.com`, the authorization request would include:
242 | 
243 | ```
244 | &resource=https%3A%2F%2Fmcp.example.com
245 | ```
246 | 
247 | MCP clients **MUST** send this parameter regardless of whether authorization servers support it.
248 | 
249 | ### Access Token Usage
250 | 
251 | #### Token Requirements
252 | 
253 | Access token handling when making requests to MCP servers **MUST** conform to the requirements defined in
254 | [OAuth 2.1 Section 5 "Resource Requests"](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-5).
255 | Specifically:
256 | 
257 | 1. MCP client **MUST** use the Authorization request header field defined in
258 |    [OAuth 2.1 Section 5.1.1](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-5.1.1):
259 | 
260 | ```
261 | Authorization: Bearer <access-token>
262 | ```
263 | 
264 | Note that authorization **MUST** be included in every HTTP request from client to server,
265 | even if they are part of the same logical session.
266 | 
267 | 2. Access tokens **MUST NOT** be included in the URI query string
268 | 
269 | Example request:
270 | 
271 | ```http
272 | GET /mcp HTTP/1.1
273 | Host: mcp.example.com
274 | Authorization: Bearer eyJhbGciOiJIUzI1NiIs...
275 | ```
276 | 
277 | #### Token Handling
278 | 
279 | MCP servers, acting in their role as an OAuth 2.1 resource server, **MUST** validate access tokens as described in
280 | [OAuth 2.1 Section 5.2](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-5.2).
281 | MCP servers **MUST** validate that access tokens were issued specifically for them as the intended audience,
282 | according to [RFC 8707 Section 2](https://www.rfc-editor.org/rfc/rfc8707.html#section-2).
283 | If validation fails, servers **MUST** respond according to
284 | [OAuth 2.1 Section 5.3](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-5.3)
285 | error handling requirements. Invalid or expired tokens **MUST** receive a HTTP 401
286 | response.
287 | 
288 | MCP clients **MUST NOT** send tokens to the MCP server other than ones issued by the MCP server's authorization server.
289 | 
290 | Authorization servers **MUST** only accept tokens that are valid for use with their
291 | own resources.
292 | 
293 | MCP servers **MUST NOT** accept or transit any other tokens.
294 | 
295 | ### Error Handling
296 | 
297 | Servers **MUST** return appropriate HTTP status codes for authorization errors:
298 | 
299 | | Status Code | Description  | Usage                                      |
300 | | ----------- | ------------ | ------------------------------------------ |
301 | | 401         | Unauthorized | Authorization required or token invalid    |
302 | | 403         | Forbidden    | Invalid scopes or insufficient permissions |
303 | | 400         | Bad Request  | Malformed authorization request            |
304 | 
305 | ## Security Considerations
306 | 
307 | Implementations **MUST** follow OAuth 2.1 security best practices as laid out in [OAuth 2.1 Section 7. "Security Considerations"](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#name-security-considerations).
308 | 
309 | ### Token Audience Binding and Validation
310 | 
311 | [RFC 8707](https://www.rfc-editor.org/rfc/rfc8707.html) Resource Indicators provide critical security benefits by binding tokens to their intended
312 | audiences **when the Authorization Server supports the capability**. To enable current and future adoption:
313 | 
314 | - MCP clients **MUST** include the `resource` parameter in authorization and token requests as specified in the [Resource Parameter Implementation](#resource-parameter-implementation) section
315 | - MCP servers **MUST** validate that tokens presented to them were specifically issued for their use
316 | 
317 | The [Security Best Practices document](/specification/draft/basic/security_best_practices#token-passthrough)
318 | outlines why token audience validation is crucial and why token passthrough is explicitly forbidden.
319 | 
320 | ### Token Theft
321 | 
322 | Attackers who obtain tokens stored by the client, or tokens cached or logged on the server can access protected resources with
323 | requests that appear legitimate to resource servers.
324 | 
325 | Clients and servers **MUST** implement secure token storage and follow OAuth best practices,
326 | as outlined in [OAuth 2.1, Section 7.1](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-7.1).
327 | 
328 | Authorization servers **SHOULD** issue short-lived access tokens to reduce the impact of leaked tokens.
329 | For public clients, authorization servers **MUST** rotate refresh tokens as described in [OAuth 2.1 Section 4.3.1 "Token Endpoint Extension"](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-4.3.1).
330 | 
331 | ### Communication Security
332 | 
333 | Implementations **MUST** follow [OAuth 2.1 Section 1.5 "Communication Security"](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-1.5).
334 | 
335 | Specifically:
336 | 
337 | 1. All authorization server endpoints **MUST** be served over HTTPS.
338 | 1. All redirect URIs **MUST** be either `localhost` or use HTTPS.
339 | 
340 | ### Authorization Code Protection
341 | 
342 | An attacker who has gained access to an authorization code contained in an authorization response can try to redeem the authorization code for an access token or otherwise make use of the authorization code.
343 | (Further described in [OAuth 2.1 Section 7.5](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-7.5))
344 | 
345 | To mitigate this, MCP clients **MUST** implement PKCE according to [OAuth 2.1 Section 7.5.2](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-7.5.2) and **MUST** verify PKCE support before proceeding with authorization.
346 | PKCE helps prevent authorization code interception and injection attacks by requiring clients to create a secret verifier-challenge pair, ensuring that only the original requestor can exchange an authorization code for tokens.
347 | 
348 | MCP clients **MUST** use the `S256` code challenge method when technically capable, as required by [OAuth 2.1 Section 4.1.1](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-4.1.1).
349 | 
350 | Since OAuth 2.1 and PKCE specifications do not define a mechanism for clients to discover PKCE support, MCP clients **MUST** rely on authorization server metadata to verify this capability:
351 | 
352 | - **OAuth 2.0 Authorization Server Metadata**: If `code_challenge_methods_supported` is absent, the authorization server does not support PKCE and MCP clients **MUST** refuse to proceed.
353 | 
354 | - **OpenID Connect Discovery 1.0**: While the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata) does not define `code_challenge_methods_supported`, this field is commonly included by OpenID providers. MCP clients **MUST** verify the presence of `code_challenge_methods_supported` in the provider metadata response. If the field is absent, MCP clients **MUST** refuse to proceed.
355 | 
356 | Authorization servers providing OpenID Connect Discovery 1.0 **MUST** include `code_challenge_methods_supported` in their metadata to ensure MCP compatibility.
357 | 
358 | ### Open Redirection
359 | 
360 | An attacker may craft malicious redirect URIs to direct users to phishing sites.
361 | 
362 | MCP clients **MUST** have redirect URIs registered with the authorization server.
363 | 
364 | Authorization servers **MUST** validate exact redirect URIs against pre-registered values to prevent redirection attacks.
365 | 
366 | MCP clients **SHOULD** use and verify state parameters in the authorization code flow
367 | and discard any results that do not include or have a mismatch with the original state.
368 | 
369 | Authorization servers **MUST** take precautions to prevent redirecting user agents to untrusted URI's, following suggestions laid out in [OAuth 2.1 Section 7.12.2](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-13#section-7.12.2)
370 | 
371 | Authorization servers **SHOULD** only automatically redirect the user agent if it trusts the redirection URI. If the URI is not trusted, the authorization server MAY inform the user and rely on the user to make the correct decision.
372 | 
373 | ### Confused Deputy Problem
374 | 
375 | Attackers can exploit MCP servers acting as intermediaries to third-party APIs, leading to [confused deputy vulnerabilities](/specification/draft/basic/security_best_practices#confused-deputy-problem).
376 | By using stolen authorization codes, they can obtain access tokens without user consent.
377 | 
378 | MCP proxy servers using static client IDs **MUST** obtain user consent for each dynamically
379 | registered client before forwarding to third-party authorization servers (which may require additional consent).
380 | 
381 | ### Access Token Privilege Restriction
382 | 
383 | An attacker can gain unauthorized access or otherwise compromise an MCP server if the server accepts tokens issued for other resources.
384 | 
385 | This vulnerability has two critical dimensions:
386 | 
387 | 1. **Audience validation failures.** When an MCP server doesn't verify that tokens were specifically intended for it (for example, via the audience claim, as mentioned in [RFC9068](https://www.rfc-editor.org/rfc/rfc9068.html)), it may accept tokens originally issued for other services. This breaks a fundamental OAuth security boundary, allowing attackers to reuse legitimate tokens across different services than intended.
388 | 2. **Token passthrough.** If the MCP server not only accepts tokens with incorrect audiences but also forwards these unmodified tokens to downstream services, it can potentially cause the ["confused deputy" problem](#confused-deputy-problem), where the downstream API may incorrectly trust the token as if it came from the MCP server or assume the token was validated by the upstream API. See the [Token Passthrough section](/specification/draft/basic/security_best_practices#token-passthrough) of the Security Best Practices guide for additional details.
389 | 
390 | MCP servers **MUST** validate access tokens before processing the request, ensuring the access token is issued specifically for the MCP server, and take all necessary steps to ensure no data is returned to unauthorized parties.
391 | 
392 | A MCP server **MUST** follow the guidelines in [OAuth 2.1 - Section 5.2](https://www.ietf.org/archive/id/draft-ietf-oauth-v2-1-13.html#section-5.2) to validate inbound tokens.
393 | 
394 | MCP servers **MUST** only accept tokens specifically intended for themselves and **MUST** reject tokens that do not include them in the audience claim or otherwise verify that they are the intended recipient of the token. See the [Security Best Practices Token Passthrough section](/specification/draft/basic/security_best_practices#token-passthrough) for details.
395 | 
396 | If the MCP server makes requests to upstream APIs, it may act as an OAuth client to them. The access token used at the upstream API is a separate token, issued by the upstream authorization server. The MCP server **MUST NOT** pass through the token it received from the MCP client.
397 | 
398 | MCP clients **MUST** implement and use the `resource` parameter as defined in [RFC 8707 - Resource Indicators for OAuth 2.0](https://www.rfc-editor.org/rfc/rfc8707.html)
399 | to explicitly specify the target resource for which the token is being requested. This requirement aligns with the recommendation in
400 | [RFC 9728 Section 7.4](https://datatracker.ietf.org/doc/html/rfc9728#section-7.4). This ensures that access tokens are bound to their intended resources and
401 | cannot be misused across different services.
402 | 


--------------------------------------------------------------------------------
/docs/specification/draft/basic/index.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Overview
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: draft</Info>
  8 | 
  9 | The Model Context Protocol consists of several key components that work together:
 10 | 
 11 | - **Base Protocol**: Core JSON-RPC message types
 12 | - **Lifecycle Management**: Connection initialization, capability negotiation, and
 13 |   session control
 14 | - **Authorization**: Authentication and authorization framework for HTTP-based transports
 15 | - **Server Features**: Resources, prompts, and tools exposed by servers
 16 | - **Client Features**: Sampling and root directory lists provided by clients
 17 | - **Utilities**: Cross-cutting concerns like logging and argument completion
 18 | 
 19 | All implementations **MUST** support the base protocol and lifecycle management
 20 | components. Other components **MAY** be implemented based on the specific needs of the
 21 | application.
 22 | 
 23 | These protocol layers establish clear separation of concerns while enabling rich
 24 | interactions between clients and servers. The modular design allows implementations to
 25 | support exactly the features they need.
 26 | 
 27 | ## Messages
 28 | 
 29 | All messages between MCP clients and servers **MUST** follow the
 30 | [JSON-RPC 2.0](https://www.jsonrpc.org/specification) specification. The protocol defines
 31 | these types of messages:
 32 | 
 33 | ### Requests
 34 | 
 35 | Requests are sent from the client to the server or vice versa, to initiate an operation.
 36 | 
 37 | ```typescript
 38 | {
 39 |   jsonrpc: "2.0";
 40 |   id: string | number;
 41 |   method: string;
 42 |   params?: {
 43 |     [key: string]: unknown;
 44 |   };
 45 | }
 46 | ```
 47 | 
 48 | - Requests **MUST** include a string or integer ID.
 49 | - Unlike base JSON-RPC, the ID **MUST NOT** be `null`.
 50 | - The request ID **MUST NOT** have been previously used by the requestor within the same
 51 |   session.
 52 | 
 53 | ### Responses
 54 | 
 55 | Responses are sent in reply to requests, containing the result or error of the operation.
 56 | 
 57 | ```typescript
 58 | {
 59 |   jsonrpc: "2.0";
 60 |   id: string | number;
 61 |   result?: {
 62 |     [key: string]: unknown;
 63 |   }
 64 |   error?: {
 65 |     code: number;
 66 |     message: string;
 67 |     data?: unknown;
 68 |   }
 69 | }
 70 | ```
 71 | 
 72 | - Responses **MUST** include the same ID as the request they correspond to.
 73 | - **Responses** are further sub-categorized as either **successful results** or
 74 |   **errors**. Either a `result` or an `error` **MUST** be set. A response **MUST NOT**
 75 |   set both.
 76 | - Results **MAY** follow any JSON object structure, while errors **MUST** include an
 77 |   error code and message at minimum.
 78 | - Error codes **MUST** be integers.
 79 | 
 80 | ### Notifications
 81 | 
 82 | Notifications are sent from the client to the server or vice versa, as a one-way message.
 83 | The receiver **MUST NOT** send a response.
 84 | 
 85 | ```typescript
 86 | {
 87 |   jsonrpc: "2.0";
 88 |   method: string;
 89 |   params?: {
 90 |     [key: string]: unknown;
 91 |   };
 92 | }
 93 | ```
 94 | 
 95 | - Notifications **MUST NOT** include an ID.
 96 | 
 97 | ## Auth
 98 | 
 99 | MCP provides an [Authorization](/specification/draft/basic/authorization) framework for use with HTTP.
100 | Implementations using an HTTP-based transport **SHOULD** conform to this specification,
101 | whereas implementations using STDIO transport **SHOULD NOT** follow this specification,
102 | and instead retrieve credentials from the environment.
103 | 
104 | Additionally, clients and servers **MAY** negotiate their own custom authentication and
105 | authorization strategies.
106 | 
107 | For further discussions and contributions to the evolution of MCP’s auth mechanisms, join
108 | us in
109 | [GitHub Discussions](https://github.com/modelcontextprotocol/specification/discussions)
110 | to help shape the future of the protocol!
111 | 
112 | ## Schema
113 | 
114 | The full specification of the protocol is defined as a
115 | [TypeScript schema](https://github.com/modelcontextprotocol/specification/blob/main/schema/draft/schema.ts).
116 | This is the source of truth for all protocol messages and structures.
117 | 
118 | There is also a
119 | [JSON Schema](https://github.com/modelcontextprotocol/specification/blob/main/schema/draft/schema.json),
120 | which is automatically generated from the TypeScript source of truth, for use with
121 | various automated tooling.
122 | 
123 | ### General fields
124 | 
125 | #### `_meta`
126 | 
127 | The `_meta` property/parameter is reserved by MCP to allow clients and servers
128 | to attach additional metadata to their interactions.
129 | 
130 | Certain key names are reserved by MCP for protocol-level metadata, as specified below;
131 | implementations MUST NOT make assumptions about values at these keys.
132 | 
133 | Additionally, definitions in the [schema](https://github.com/modelcontextprotocol/specification/blob/main/schema/draft/schema.ts)
134 | may reserve particular names for purpose-specific metadata, as declared in those definitions.
135 | 
136 | **Key name format:** valid `_meta` key names have two segments: an optional **prefix**, and a **name**.
137 | 
138 | **Prefix:**
139 | 
140 | - If specified, MUST be a series of labels separated by dots (`.`), followed by a slash (`/`).
141 |   - Labels MUST start with a letter and end with a letter or digit; interior characters can be letters, digits, or hyphens (`-`).
142 | - Any prefix beginning with zero or more valid labels, followed by `modelcontextprotocol` or `mcp`, followed by any valid label,
143 |   is **reserved** for MCP use.
144 |   - For example: `modelcontextprotocol.io/`, `mcp.dev/`, `api.modelcontextprotocol.org/`, and `tools.mcp.com/` are all reserved.
145 | 
146 | **Name:**
147 | 
148 | - Unless empty, MUST begin and end with an alphanumeric character (`[a-z0-9A-Z]`).
149 | - MAY contain hyphens (`-`), underscores (`_`), dots (`.`), and alphanumerics in between.
150 | 


--------------------------------------------------------------------------------
/docs/specification/draft/basic/lifecycle.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Lifecycle
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: draft</Info>
  8 | 
  9 | The Model Context Protocol (MCP) defines a rigorous lifecycle for client-server
 10 | connections that ensures proper capability negotiation and state management.
 11 | 
 12 | 1. **Initialization**: Capability negotiation and protocol version agreement
 13 | 2. **Operation**: Normal protocol communication
 14 | 3. **Shutdown**: Graceful termination of the connection
 15 | 
 16 | ```mermaid
 17 | sequenceDiagram
 18 |     participant Client
 19 |     participant Server
 20 | 
 21 |     Note over Client,Server: Initialization Phase
 22 |     activate Client
 23 |     Client->>+Server: initialize request
 24 |     Server-->>Client: initialize response
 25 |     Client--)Server: initialized notification
 26 | 
 27 |     Note over Client,Server: Operation Phase
 28 |     rect rgb(200, 220, 250)
 29 |         note over Client,Server: Normal protocol operations
 30 |     end
 31 | 
 32 |     Note over Client,Server: Shutdown
 33 |     Client--)-Server: Disconnect
 34 |     deactivate Server
 35 |     Note over Client,Server: Connection closed
 36 | ```
 37 | 
 38 | ## Lifecycle Phases
 39 | 
 40 | ### Initialization
 41 | 
 42 | The initialization phase **MUST** be the first interaction between client and server.
 43 | During this phase, the client and server:
 44 | 
 45 | - Establish protocol version compatibility
 46 | - Exchange and negotiate capabilities
 47 | - Share implementation details
 48 | 
 49 | The client **MUST** initiate this phase by sending an `initialize` request containing:
 50 | 
 51 | - Protocol version supported
 52 | - Client capabilities
 53 | - Client implementation information
 54 | 
 55 | ```json
 56 | {
 57 |   "jsonrpc": "2.0",
 58 |   "id": 1,
 59 |   "method": "initialize",
 60 |   "params": {
 61 |     "protocolVersion": "2024-11-05",
 62 |     "capabilities": {
 63 |       "roots": {
 64 |         "listChanged": true
 65 |       },
 66 |       "sampling": {},
 67 |       "elicitation": {}
 68 |     },
 69 |     "clientInfo": {
 70 |       "name": "ExampleClient",
 71 |       "title": "Example Client Display Name",
 72 |       "version": "1.0.0"
 73 |     }
 74 |   }
 75 | }
 76 | ```
 77 | 
 78 | The server **MUST** respond with its own capabilities and information:
 79 | 
 80 | ```json
 81 | {
 82 |   "jsonrpc": "2.0",
 83 |   "id": 1,
 84 |   "result": {
 85 |     "protocolVersion": "2024-11-05",
 86 |     "capabilities": {
 87 |       "logging": {},
 88 |       "prompts": {
 89 |         "listChanged": true
 90 |       },
 91 |       "resources": {
 92 |         "subscribe": true,
 93 |         "listChanged": true
 94 |       },
 95 |       "tools": {
 96 |         "listChanged": true
 97 |       }
 98 |     },
 99 |     "serverInfo": {
100 |       "name": "ExampleServer",
101 |       "title": "Example Server Display Name",
102 |       "version": "1.0.0"
103 |     },
104 |     "instructions": "Optional instructions for the client"
105 |   }
106 | }
107 | ```
108 | 
109 | After successful initialization, the client **MUST** send an `initialized` notification
110 | to indicate it is ready to begin normal operations:
111 | 
112 | ```json
113 | {
114 |   "jsonrpc": "2.0",
115 |   "method": "notifications/initialized"
116 | }
117 | ```
118 | 
119 | - The client **SHOULD NOT** send requests other than
120 |   [pings](/specification/draft/basic/utilities/ping) before the server has responded to the
121 |   `initialize` request.
122 | - The server **SHOULD NOT** send requests other than
123 |   [pings](/specification/draft/basic/utilities/ping) and
124 |   [logging](/specification/draft/server/utilities/logging) before receiving the `initialized`
125 |   notification.
126 | 
127 | #### Version Negotiation
128 | 
129 | In the `initialize` request, the client **MUST** send a protocol version it supports.
130 | This **SHOULD** be the _latest_ version supported by the client.
131 | 
132 | If the server supports the requested protocol version, it **MUST** respond with the same
133 | version. Otherwise, the server **MUST** respond with another protocol version it
134 | supports. This **SHOULD** be the _latest_ version supported by the server.
135 | 
136 | If the client does not support the version in the server's response, it **SHOULD**
137 | disconnect.
138 | 
139 | <Note>
140 | If using HTTP, the client **MUST** include the `MCP-Protocol-Version:
141 | <protocol-version>` HTTP header on all subsequent requests to the MCP
142 | server.
143 | For details, see [the Protocol Version Header section in Transports](/specification/draft/basic/transports#protocol-version-header).
144 | </Note>
145 | 
146 | #### Capability Negotiation
147 | 
148 | Client and server capabilities establish which optional protocol features will be
149 | available during the session.
150 | 
151 | Key capabilities include:
152 | 
153 | | Category | Capability     | Description                                                                          |
154 | | -------- | -------------- | ------------------------------------------------------------------------------------ |
155 | | Client   | `roots`        | Ability to provide filesystem [roots](/specification/draft/client/roots)             |
156 | | Client   | `sampling`     | Support for LLM [sampling](/specification/draft/client/sampling) requests            |
157 | | Client   | `elicitation`  | Support for server [elicitation](/specification/draft/client/elicitation) requests   |
158 | | Client   | `experimental` | Describes support for non-standard experimental features                             |
159 | | Server   | `prompts`      | Offers [prompt templates](/specification/draft/server/prompts)                       |
160 | | Server   | `resources`    | Provides readable [resources](/specification/draft/server/resources)                 |
161 | | Server   | `tools`        | Exposes callable [tools](/specification/draft/server/tools)                          |
162 | | Server   | `logging`      | Emits structured [log messages](/specification/draft/server/utilities/logging)       |
163 | | Server   | `completions`  | Supports argument [autocompletion](/specification/draft/server/utilities/completion) |
164 | | Server   | `experimental` | Describes support for non-standard experimental features                             |
165 | 
166 | Capability objects can describe sub-capabilities like:
167 | 
168 | - `listChanged`: Support for list change notifications (for prompts, resources, and
169 |   tools)
170 | - `subscribe`: Support for subscribing to individual items' changes (resources only)
171 | 
172 | ### Operation
173 | 
174 | During the operation phase, the client and server exchange messages according to the
175 | negotiated capabilities.
176 | 
177 | Both parties **MUST**:
178 | 
179 | - Respect the negotiated protocol version
180 | - Only use capabilities that were successfully negotiated
181 | 
182 | ### Shutdown
183 | 
184 | During the shutdown phase, one side (usually the client) cleanly terminates the protocol
185 | connection. No specific shutdown messages are defined—instead, the underlying transport
186 | mechanism should be used to signal connection termination:
187 | 
188 | #### stdio
189 | 
190 | For the stdio [transport](/specification/draft/basic/transports), the client **SHOULD** initiate
191 | shutdown by:
192 | 
193 | 1. First, closing the input stream to the child process (the server)
194 | 2. Waiting for the server to exit, or sending `SIGTERM` if the server does not exit
195 |    within a reasonable time
196 | 3. Sending `SIGKILL` if the server does not exit within a reasonable time after `SIGTERM`
197 | 
198 | The server **MAY** initiate shutdown by closing its output stream to the client and
199 | exiting.
200 | 
201 | #### HTTP
202 | 
203 | For HTTP [transports](/specification/draft/basic/transports), shutdown is indicated by closing the
204 | associated HTTP connection(s).
205 | 
206 | ## Timeouts
207 | 
208 | Implementations **SHOULD** establish timeouts for all sent requests, to prevent hung
209 | connections and resource exhaustion. When the request has not received a success or error
210 | response within the timeout period, the sender **SHOULD** issue a [cancellation
211 | notification](/specification/draft/basic/utilities/cancellation) for that request and stop waiting for
212 | a response.
213 | 
214 | SDKs and other middleware **SHOULD** allow these timeouts to be configured on a
215 | per-request basis.
216 | 
217 | Implementations **MAY** choose to reset the timeout clock when receiving a [progress
218 | notification](/specification/draft/basic/utilities/progress) corresponding to the request, as this
219 | implies that work is actually happening. However, implementations **SHOULD** always
220 | enforce a maximum timeout, regardless of progress notifications, to limit the impact of a
221 | misbehaving client or server.
222 | 
223 | ## Error Handling
224 | 
225 | Implementations **SHOULD** be prepared to handle these error cases:
226 | 
227 | - Protocol version mismatch
228 | - Failure to negotiate required capabilities
229 | - Request [timeouts](#timeouts)
230 | 
231 | Example initialization error:
232 | 
233 | ```json
234 | {
235 |   "jsonrpc": "2.0",
236 |   "id": 1,
237 |   "error": {
238 |     "code": -32602,
239 |     "message": "Unsupported protocol version",
240 |     "data": {
241 |       "supported": ["2024-11-05"],
242 |       "requested": "1.0.0"
243 |     }
244 |   }
245 | }
246 | ```
247 | 


--------------------------------------------------------------------------------
/docs/specification/draft/basic/security_best_practices.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Security Best Practices
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | ## Introduction
  8 | 
  9 | ### Purpose and Scope
 10 | 
 11 | This document provides security considerations for the Model Context Protocol (MCP), complementing the [MCP Authorization](../basic/authorization.mdx) specification. This document identifies security risks, attack vectors, and best practices specific to MCP implementations.
 12 | 
 13 | The primary audience for this document includes developers implementing MCP authorization flows, MCP server operators, and security professionals evaluating MCP-based systems. This document should be read alongside the MCP Authorization specification and [OAuth 2.0 security best practices](https://datatracker.ietf.org/doc/html/rfc9700).
 14 | 
 15 | ## Attacks and Mitigations
 16 | 
 17 | This section gives a detailed description of attacks on MCP implementations, along with potential countermeasures.
 18 | 
 19 | ### Confused Deputy Problem
 20 | 
 21 | Attackers can exploit MCP servers proxying other resource servers, creating "[confused deputy](https://en.wikipedia.org/wiki/Confused_deputy_problem)" vulnerabilities.
 22 | 
 23 | #### Terminology
 24 | 
 25 | **MCP Proxy Server**
 26 | : An MCP server that connects MCP clients to third-party APIs, offering MCP features while delegating operations and acting as a single OAuth client to the third-party API server.
 27 | 
 28 | **Third-Party Authorization Server**
 29 | : Authorization server that protects the third-party API. It may lack dynamic client registration support, requiring the MCP proxy to use a static client ID for all requests.
 30 | 
 31 | **Third-Party API**
 32 | : The protected resource server that provides the actual API functionality. Access to this
 33 | API requires tokens issued by the third-party authorization server.
 34 | 
 35 | **Static Client ID**
 36 | : A fixed OAuth 2.0 client identifier used by the MCP proxy server when communicating with
 37 | the third-party authorization server. This Client ID refers to the MCP server acting as a client
 38 | to the Third-Party API. It is the same value for all MCP server to Third-Party API interactions regardless of
 39 | which MCP client initiated the request.
 40 | 
 41 | #### Architecture and Attack Flows
 42 | 
 43 | ##### Normal OAuth proxy usage (preserves user consent)
 44 | 
 45 | ```mermaid
 46 | sequenceDiagram
 47 |     participant UA as User-Agent (Browser)
 48 |     participant MC as MCP Client
 49 |     participant M as MCP Proxy Server
 50 |     participant TAS as Third-Party Authorization Server
 51 | 
 52 |     Note over UA,M: Initial Auth flow completed
 53 | 
 54 |     Note over UA,TAS: Step 1: Legitimate user consent for Third Party Server
 55 | 
 56 |     M->>UA: Redirect to third party authorization server
 57 |     UA->>TAS: Authorization request (client_id: mcp-proxy)
 58 |     TAS->>UA: Authorization consent screen
 59 |     Note over UA: Review consent screen
 60 |     UA->>TAS: Approve
 61 |     TAS->>UA: Set consent cookie for client ID: mcp-proxy
 62 |     TAS->>UA: 3P Authorization code + redirect to mcp-proxy-server.com
 63 |     UA->>M: 3P Authorization code
 64 |     Note over M,TAS: Exchange 3P code for 3P token
 65 |     Note over M: Generate MCP authorization code
 66 |     M->>UA: Redirect to MCP Client with MCP authorization code
 67 | 
 68 |     Note over M,UA: Exchange code for token, etc.
 69 | ```
 70 | 
 71 | ##### Malicious OAuth proxy usage (skips user consent)
 72 | 
 73 | ```mermaid
 74 | sequenceDiagram
 75 |     participant UA as User-Agent (Browser)
 76 |     participant M as MCP Proxy Server
 77 |     participant TAS as Third-Party Authorization Server
 78 |     participant A as Attacker
 79 | 
 80 | 
 81 |     Note over UA,A: Step 2: Attack (leveraging existing cookie, skipping consent)
 82 |     A->>M: Dynamically register malicious client, redirect_uri: attacker.com
 83 |     A->>UA: Sends malicious link
 84 |     UA->>TAS: Authorization request (client_id: mcp-proxy) + consent cookie
 85 |     rect rgba(255, 17, 0, 0.67)
 86 |     TAS->>TAS: Cookie present, consent skipped
 87 |     end
 88 | 
 89 |    TAS->>UA: 3P Authorization code + redirect to mcp-proxy-server.com
 90 |    UA->>M: 3P Authorization code
 91 |    Note over M,TAS: Exchange 3P code for 3P token
 92 |    Note over M: Generate MCP authorization code
 93 |    M->>UA: Redirect to attacker.com with MCP Authorization code
 94 |    UA->>A: MCP Authorization code delivered to attacker.com
 95 |    Note over M,A: Attacker exchanges MCP code for MCP token
 96 |    A->>M: Attacker impersonates user to MCP server
 97 | ```
 98 | 
 99 | #### Attack Description
100 | 
101 | When an MCP proxy server uses a static client ID to authenticate with a third-party
102 | authorization server that does not support dynamic client registration, the following
103 | attack becomes possible:
104 | 
105 | 1. A user authenticates normally through the MCP proxy server to access the third-party API
106 | 2. During this flow, the third-party authorization server sets a cookie on the user agent
107 |    indicating consent for the static client ID
108 | 3. An attacker later sends the user a malicious link containing a crafted authorization request which contains a malicious redirect URI along with a new dynamically registered client ID
109 | 4. When the user clicks the link, their browser still has the consent cookie from the previous legitimate request
110 | 5. The third-party authorization server detects the cookie and skips the consent screen
111 | 6. The MCP authorization code is redirected to the attacker's server (specified in the malicious `redirect_uri` parameter during [dynamic client registration](/specification/draft/basic/authorization#dynamic-client-registration))
112 | 7. The attacker exchanges the stolen authorization code for access tokens for the MCP server without the user's explicit approval
113 | 8. The attacker now has access to the third-party API as the compromised user
114 | 
115 | #### Mitigation
116 | 
117 | MCP proxy servers using static client IDs **MUST** obtain user consent for each dynamically
118 | registered client before forwarding to third-party authorization servers (which may require additional consent).
119 | 
120 | ### Token Passthrough
121 | 
122 | "Token passthrough" is an anti-pattern where an MCP server accepts tokens from an MCP client without validating that the tokens were properly issued _to the MCP server_ and passes them through to the downstream API.
123 | 
124 | #### Risks
125 | 
126 | Token passthrough is explicitly forbidden in the [authorization specification](/specification/draft/basic/authorization) as it introduces a number of security risks, that include:
127 | 
128 | - **Security Control Circumvention**
129 |   - The MCP Server or downstream APIs might implement important security controls like rate limiting, request validation, or traffic monitoring, that depend on the token audience or other credential constraints. If clients can obtain and use tokens directly with the downstream APIs without the MCP server validating them properly or ensuring that the tokens are issued for the right service, they bypass these controls.
130 | - **Accountability and Audit Trail Issues**
131 |   - The MCP Server will be unable to identify or distinguish between MCP Clients when clients are calling with an upstream-issued access token which may be opaque to the MCP Server.
132 |   - The downstream Resource Server’s logs may show requests that appear to come from a different source with a different identity, rather than the MCP server that is actually forwarding the tokens.
133 |   - Both factors make incident investigation, controls, and auditing more difficult.
134 |   - If the MCP Server passes tokens without validating their claims (e.g., roles, privileges, or audience) or other metadata, a malicious actor in possession of a stolen token can use the server as a proxy for data exfiltration.
135 | - **Trust Boundary Issues**
136 |   - The downstream Resource Server grants trust to specific entities. This trust might include assumptions about origin or client behavior patterns. Breaking this trust boundary could lead to unexpected issues.
137 |   - If the token is accepted by multiple services without proper validation, an attacker compromising one service can use the token to access other connected services.
138 | - **Future Compatibility Risk**
139 |   - Even if an MCP Server starts as a "pure proxy" today, it might need to add security controls later. Starting with proper token audience separation makes it easier to evolve the security model.
140 | 
141 | #### Mitigation
142 | 
143 | MCP servers **MUST NOT** accept any tokens that were not explicitly issued for the MCP server.
144 | 
145 | ### Session Hijacking
146 | 
147 | Session hijacking is an attack vector where a client is provided a session ID by the server, and an unauthorized party is able to obtain and use that same session ID to impersonate the original client and perform unauthorized actions on their behalf.
148 | 
149 | #### Session Hijack Prompt Injection
150 | 
151 | ```mermaid
152 | sequenceDiagram
153 |     participant Client
154 |     participant ServerA
155 |     participant Queue
156 |     participant ServerB
157 |     participant Attacker
158 | 
159 |     Client->>ServerA: Initialize (connect to streamable HTTP server)
160 |     ServerA-->>Client: Respond with session ID
161 | 
162 |     Attacker->>ServerB: Access/guess session ID
163 |     Note right of Attacker: Attacker knows/guesses session ID
164 | 
165 |     Attacker->>ServerB: Trigger event (malicious payload, using session ID)
166 |     ServerB->>Queue: Enqueue event (keyed by session ID)
167 | 
168 |     ServerA->>Queue: Poll for events (using session ID)
169 |     Queue-->>ServerA: Event data (malicious payload)
170 | 
171 |     ServerA-->>Client: Async response (malicious payload)
172 |     Client->>Client: Acts based on malicious payload
173 | ```
174 | 
175 | #### Session Hijack Impersonation
176 | 
177 | ```mermaid
178 | sequenceDiagram
179 |     participant Client
180 |     participant Server
181 |     participant Attacker
182 | 
183 |     Client->>Server: Initialize (login/authenticate)
184 |     Server-->>Client: Respond with session ID (persistent session created)
185 | 
186 |     Attacker->>Server: Access/guess session ID
187 |     Note right of Attacker: Attacker knows/guesses session ID
188 | 
189 |     Attacker->>Server: Make API call (using session ID, no re-auth)
190 |     Server-->>Attacker: Respond as if Attacker is Client (session hijack)
191 | ```
192 | 
193 | #### Attack Description
194 | 
195 | When you have multiple stateful HTTP servers that handle MCP requests, the following attack vectors are possible:
196 | 
197 | **Session Hijack Prompt Injection**
198 | 
199 | 1. The client connects to **Server A** and receives a session ID.
200 | 1. The attacker obtains an existing session ID and sends a malicious event to **Server B** with said session ID.
201 |    - When a server supports [redelivery/resumable streams](/specification/draft/basic/transports#resumability-and-redelivery), deliberately terminating the request before receiving the response could lead to it being resumed by the original client via the GET request for server sent events.
202 |    - If a particular server initiates server sent events as a consequence of a tool call such as a `notifications/tools/list_changed`, where it is possible to affect the tools that are offered by the server, a client could end up with tools that they were not aware were enabled.
203 | 
204 | 1. **Server B** enqueues the event (associated with session ID) into a shared queue.
205 | 1. **Server A** polls the queue for events using the session ID and retrieves the malicious payload.
206 | 1. **Server A** sends the malicious payload to the client as an asynchronous or resumed response.
207 | 1. The client receives and acts on the malicious payload, leading to potential compromise.
208 | 
209 | **Session Hijack Impersonation**
210 | 
211 | 1. The MCP client authenticates with the MCP server, creating a persistent session ID.
212 | 2. The attacker obtains the session ID.
213 | 3. The attacker makes calls to the MCP server using the session ID.
214 | 4. MCP server does not check for additional authorization and treats the attacker as a legitimate user, allowing unauthorized access or actions.
215 | 
216 | #### Mitigation
217 | 
218 | To prevent session hijacking and event injection attacks, the following mitigations should be implemented:
219 | 
220 | MCP servers that implement authorization **MUST** verify all inbound requests.
221 | MCP Servers **MUST NOT** use sessions for authentication.
222 | 
223 | MCP servers **MUST** use secure, non-deterministic session IDs.
224 | Generated session IDs (e.g., UUIDs) **SHOULD** use secure random number generators. Avoid predictable or sequential session identifiers that could be guessed by an attacker. Rotating or expiring session IDs can also reduce the risk.
225 | 
226 | MCP servers **SHOULD** bind session IDs to user-specific information.
227 | When storing or transmitting session-related data (e.g., in a queue), combine the session ID with information unique to the authorized user, such as their internal user ID. Use a key format like `<user_id>:<session_id>`. This ensures that even if an attacker guesses a session ID, they cannot impersonate another user as the user ID is derived from the user token and not provided by the client.
228 | 
229 | MCP servers can optionally leverage additional unique identifiers.
230 | 


--------------------------------------------------------------------------------
/docs/specification/draft/basic/transports.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Transports
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: draft</Info>
  8 | 
  9 | MCP uses JSON-RPC to encode messages. JSON-RPC messages **MUST** be UTF-8 encoded.
 10 | 
 11 | The protocol currently defines two standard transport mechanisms for client-server
 12 | communication:
 13 | 
 14 | 1. [stdio](#stdio), communication over standard in and standard out
 15 | 2. [Streamable HTTP](#streamable-http)
 16 | 
 17 | Clients **SHOULD** support stdio whenever possible.
 18 | 
 19 | It is also possible for clients and servers to implement
 20 | [custom transports](#custom-transports) in a pluggable fashion.
 21 | 
 22 | ## stdio
 23 | 
 24 | In the **stdio** transport:
 25 | 
 26 | - The client launches the MCP server as a subprocess.
 27 | - The server reads JSON-RPC messages from its standard input (`stdin`) and sends messages
 28 |   to its standard output (`stdout`).
 29 | - Messages are individual JSON-RPC requests, notifications, or responses.
 30 | - Messages are delimited by newlines, and **MUST NOT** contain embedded newlines.
 31 | - The server **MAY** write UTF-8 strings to its standard error (`stderr`) for logging
 32 |   purposes. Clients **MAY** capture, forward, or ignore this logging.
 33 | - The server **MUST NOT** write anything to its `stdout` that is not a valid MCP message.
 34 | - The client **MUST NOT** write anything to the server's `stdin` that is not a valid MCP
 35 |   message.
 36 | 
 37 | ```mermaid
 38 | sequenceDiagram
 39 |     participant Client
 40 |     participant Server Process
 41 | 
 42 |     Client->>+Server Process: Launch subprocess
 43 |     loop Message Exchange
 44 |         Client->>Server Process: Write to stdin
 45 |         Server Process->>Client: Write to stdout
 46 |         Server Process--)Client: Optional logs on stderr
 47 |     end
 48 |     Client->>Server Process: Close stdin, terminate subprocess
 49 |     deactivate Server Process
 50 | ```
 51 | 
 52 | ## Streamable HTTP
 53 | 
 54 | <Info>
 55 | 
 56 | This replaces the [HTTP+SSE
 57 | transport](/specification/2024-11-05/basic/transports#http-with-sse) from
 58 | protocol version 2024-11-05. See the [backwards compatibility](#backwards-compatibility)
 59 | guide below.
 60 | 
 61 | </Info>
 62 | 
 63 | In the **Streamable HTTP** transport, the server operates as an independent process that
 64 | can handle multiple client connections. This transport uses HTTP POST and GET requests.
 65 | Server can optionally make use of
 66 | [Server-Sent Events](https://en.wikipedia.org/wiki/Server-sent_events) (SSE) to stream
 67 | multiple server messages. This permits basic MCP servers, as well as more feature-rich
 68 | servers supporting streaming and server-to-client notifications and requests.
 69 | 
 70 | The server **MUST** provide a single HTTP endpoint path (hereafter referred to as the
 71 | **MCP endpoint**) that supports both POST and GET methods. For example, this could be a
 72 | URL like `https://example.com/mcp`.
 73 | 
 74 | #### Security Warning
 75 | 
 76 | When implementing Streamable HTTP transport:
 77 | 
 78 | 1. Servers **MUST** validate the `Origin` header on all incoming connections to prevent DNS rebinding attacks
 79 | 2. When running locally, servers **SHOULD** bind only to localhost (127.0.0.1) rather than all network interfaces (0.0.0.0)
 80 | 3. Servers **SHOULD** implement proper authentication for all connections
 81 | 
 82 | Without these protections, attackers could use DNS rebinding to interact with local MCP servers from remote websites.
 83 | 
 84 | ### Sending Messages to the Server
 85 | 
 86 | Every JSON-RPC message sent from the client **MUST** be a new HTTP POST request to the
 87 | MCP endpoint.
 88 | 
 89 | 1. The client **MUST** use HTTP POST to send JSON-RPC messages to the MCP endpoint.
 90 | 2. The client **MUST** include an `Accept` header, listing both `application/json` and
 91 |    `text/event-stream` as supported content types.
 92 | 3. The body of the POST request **MUST** be a single JSON-RPC _request_, _notification_, or _response_.
 93 | 4. If the input is a JSON-RPC _response_ or _notification_:
 94 |    - If the server accepts the input, the server **MUST** return HTTP status code 202
 95 |      Accepted with no body.
 96 |    - If the server cannot accept the input, it **MUST** return an HTTP error status code
 97 |      (e.g., 400 Bad Request). The HTTP response body **MAY** comprise a JSON-RPC _error
 98 |      response_ that has no `id`.
 99 | 5. If the input is a JSON-RPC _request_, the server **MUST** either
100 |    return `Content-Type: text/event-stream`, to initiate an SSE stream, or
101 |    `Content-Type: application/json`, to return one JSON object. The client **MUST**
102 |    support both these cases.
103 | 6. If the server initiates an SSE stream:
104 |    - The SSE stream **SHOULD** eventually include JSON-RPC _response_ for the
105 |      JSON-RPC _request_ sent in the POST body.
106 |    - The server **MAY** send JSON-RPC _requests_ and _notifications_ before sending the
107 |      JSON-RPC _response_. These messages **SHOULD** relate to the originating client
108 |      _request_.
109 |    - The server **SHOULD NOT** close the SSE stream before sending the JSON-RPC _response_
110 |      for the received JSON-RPC _request_, unless the [session](#session-management)
111 |      expires.
112 |    - After the JSON-RPC _response_ has been sent, the server **SHOULD** close the SSE
113 |      stream.
114 |    - Disconnection **MAY** occur at any time (e.g., due to network conditions).
115 |      Therefore:
116 |      - Disconnection **SHOULD NOT** be interpreted as the client cancelling its request.
117 |      - To cancel, the client **SHOULD** explicitly send an MCP `CancelledNotification`.
118 |      - To avoid message loss due to disconnection, the server **MAY** make the stream
119 |        [resumable](#resumability-and-redelivery).
120 | 
121 | ### Listening for Messages from the Server
122 | 
123 | 1. The client **MAY** issue an HTTP GET to the MCP endpoint. This can be used to open an
124 |    SSE stream, allowing the server to communicate to the client, without the client first
125 |    sending data via HTTP POST.
126 | 2. The client **MUST** include an `Accept` header, listing `text/event-stream` as a
127 |    supported content type.
128 | 3. The server **MUST** either return `Content-Type: text/event-stream` in response to
129 |    this HTTP GET, or else return HTTP 405 Method Not Allowed, indicating that the server
130 |    does not offer an SSE stream at this endpoint.
131 | 4. If the server initiates an SSE stream:
132 |    - The server **MAY** send JSON-RPC _requests_ and _notifications_ on the stream.
133 |    - These messages **SHOULD** be unrelated to any concurrently-running JSON-RPC
134 |      _request_ from the client.
135 |    - The server **MUST NOT** send a JSON-RPC _response_ on the stream **unless**
136 |      [resuming](#resumability-and-redelivery) a stream associated with a previous client
137 |      request.
138 |    - The server **MAY** close the SSE stream at any time.
139 |    - The client **MAY** close the SSE stream at any time.
140 | 
141 | ### Multiple Connections
142 | 
143 | 1. The client **MAY** remain connected to multiple SSE streams simultaneously.
144 | 2. The server **MUST** send each of its JSON-RPC messages on only one of the connected
145 |    streams; that is, it **MUST NOT** broadcast the same message across multiple streams.
146 |    - The risk of message loss **MAY** be mitigated by making the stream
147 |      [resumable](#resumability-and-redelivery).
148 | 
149 | ### Resumability and Redelivery
150 | 
151 | To support resuming broken connections, and redelivering messages that might otherwise be
152 | lost:
153 | 
154 | 1. Servers **MAY** attach an `id` field to their SSE events, as described in the
155 |    [SSE standard](https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation).
156 |    - If present, the ID **MUST** be globally unique across all streams within that
157 |      [session](#session-management)—or all streams with that specific client, if session
158 |      management is not in use.
159 | 2. If the client wishes to resume after a broken connection, it **SHOULD** issue an HTTP
160 |    GET to the MCP endpoint, and include the
161 |    [`Last-Event-ID`](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-last-event-id-header)
162 |    header to indicate the last event ID it received.
163 |    - The server **MAY** use this header to replay messages that would have been sent
164 |      after the last event ID, _on the stream that was disconnected_, and to resume the
165 |      stream from that point.
166 |    - The server **MUST NOT** replay messages that would have been delivered on a
167 |      different stream.
168 | 
169 | In other words, these event IDs should be assigned by servers on a _per-stream_ basis, to
170 | act as a cursor within that particular stream.
171 | 
172 | ### Session Management
173 | 
174 | An MCP "session" consists of logically related interactions between a client and a
175 | server, beginning with the [initialization phase](/specification/draft/basic/lifecycle). To support
176 | servers which want to establish stateful sessions:
177 | 
178 | 1. A server using the Streamable HTTP transport **MAY** assign a session ID at
179 |    initialization time, by including it in an `Mcp-Session-Id` header on the HTTP
180 |    response containing the `InitializeResult`.
181 |    - The session ID **SHOULD** be globally unique and cryptographically secure (e.g., a
182 |      securely generated UUID, a JWT, or a cryptographic hash).
183 |    - The session ID **MUST** only contain visible ASCII characters (ranging from 0x21 to
184 |      0x7E).
185 | 2. If an `Mcp-Session-Id` is returned by the server during initialization, clients using
186 |    the Streamable HTTP transport **MUST** include it in the `Mcp-Session-Id` header on
187 |    all of their subsequent HTTP requests.
188 |    - Servers that require a session ID **SHOULD** respond to requests without an
189 |      `Mcp-Session-Id` header (other than initialization) with HTTP 400 Bad Request.
190 | 3. The server **MAY** terminate the session at any time, after which it **MUST** respond
191 |    to requests containing that session ID with HTTP 404 Not Found.
192 | 4. When a client receives HTTP 404 in response to a request containing an
193 |    `Mcp-Session-Id`, it **MUST** start a new session by sending a new `InitializeRequest`
194 |    without a session ID attached.
195 | 5. Clients that no longer need a particular session (e.g., because the user is leaving
196 |    the client application) **SHOULD** send an HTTP DELETE to the MCP endpoint with the
197 |    `Mcp-Session-Id` header, to explicitly terminate the session.
198 |    - The server **MAY** respond to this request with HTTP 405 Method Not Allowed,
199 |      indicating that the server does not allow clients to terminate sessions.
200 | 
201 | ### Sequence Diagram
202 | 
203 | ```mermaid
204 | sequenceDiagram
205 |     participant Client
206 |     participant Server
207 | 
208 |     note over Client, Server: initialization
209 | 
210 |     Client->>+Server: POST InitializeRequest
211 |     Server->>-Client: InitializeResponse<br>Mcp-Session-Id: 1868a90c...
212 | 
213 |     Client->>+Server: POST InitializedNotification<br>Mcp-Session-Id: 1868a90c...
214 |     Server->>-Client: 202 Accepted
215 | 
216 |     note over Client, Server: client requests
217 |     Client->>+Server: POST ... request ...<br>Mcp-Session-Id: 1868a90c...
218 | 
219 |     alt single HTTP response
220 |       Server->>Client: ... response ...
221 |     else server opens SSE stream
222 |       loop while connection remains open
223 |           Server-)Client: ... SSE messages from server ...
224 |       end
225 |       Server-)Client: SSE event: ... response ...
226 |     end
227 |     deactivate Server
228 | 
229 |     note over Client, Server: client notifications/responses
230 |     Client->>+Server: POST ... notification/response ...<br>Mcp-Session-Id: 1868a90c...
231 |     Server->>-Client: 202 Accepted
232 | 
233 |     note over Client, Server: server requests
234 |     Client->>+Server: GET<br>Mcp-Session-Id: 1868a90c...
235 |     loop while connection remains open
236 |         Server-)Client: ... SSE messages from server ...
237 |     end
238 |     deactivate Server
239 | 
240 | ```
241 | 
242 | ### Protocol Version Header
243 | 
244 | If using HTTP, the client **MUST** include the `MCP-Protocol-Version:
245 | <protocol-version>` HTTP header on all subsequent requests to the MCP
246 | server, allowing the MCP server to respond based on the MCP protocol version.
247 | 
248 | For example: `MCP-Protocol-Version: 2025-06-18`
249 | 
250 | The protocol version sent by the client **SHOULD** be the one [negotiated during
251 | initialization](/specification/draft/basic/lifecycle#version-negotiation).
252 | 
253 | For backwards compatibility, if the server does _not_ receive an `MCP-Protocol-Version`
254 | header, and has no other way to identify the version - for example, by relying on the
255 | protocol version negotiated during initialization - the server **SHOULD** assume protocol
256 | version `2025-03-26`.
257 | 
258 | If the server receives a request with an invalid or unsupported
259 | `MCP-Protocol-Version`, it **MUST** respond with `400 Bad Request`.
260 | 
261 | ### Backwards Compatibility
262 | 
263 | Clients and servers can maintain backwards compatibility with the deprecated [HTTP+SSE
264 | transport](/specification/2024-11-05/basic/transports#http-with-sse) (from
265 | protocol version 2024-11-05) as follows:
266 | 
267 | **Servers** wanting to support older clients should:
268 | 
269 | - Continue to host both the SSE and POST endpoints of the old transport, alongside the
270 |   new "MCP endpoint" defined for the Streamable HTTP transport.
271 |   - It is also possible to combine the old POST endpoint and the new MCP endpoint, but
272 |     this may introduce unneeded complexity.
273 | 
274 | **Clients** wanting to support older servers should:
275 | 
276 | 1. Accept an MCP server URL from the user, which may point to either a server using the
277 |    old transport or the new transport.
278 | 2. Attempt to POST an `InitializeRequest` to the server URL, with an `Accept` header as
279 |    defined above:
280 |    - If it succeeds, the client can assume this is a server supporting the new Streamable
281 |      HTTP transport.
282 |    - If it fails with an HTTP 4xx status code (e.g., 405 Method Not Allowed or 404 Not
283 |      Found):
284 |      - Issue a GET request to the server URL, expecting that this will open an SSE stream
285 |        and return an `endpoint` event as the first event.
286 |      - When the `endpoint` event arrives, the client can assume this is a server running
287 |        the old HTTP+SSE transport, and should use that transport for all subsequent
288 |        communication.
289 | 
290 | ## Custom Transports
291 | 
292 | Clients and servers **MAY** implement additional custom transport mechanisms to suit
293 | their specific needs. The protocol is transport-agnostic and can be implemented over any
294 | communication channel that supports bidirectional message exchange.
295 | 
296 | Implementers who choose to support custom transports **MUST** ensure they preserve the
297 | JSON-RPC message format and lifecycle requirements defined by MCP. Custom transports
298 | **SHOULD** document their specific connection establishment and message exchange patterns
299 | to aid interoperability.
300 | 


--------------------------------------------------------------------------------
/docs/specification/draft/basic/utilities/cancellation.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Cancellation
 3 | ---
 4 | 
 5 | <div id="enable-section-numbers" />
 6 | 
 7 | <Info>**Protocol Revision**: draft</Info>
 8 | 
 9 | The Model Context Protocol (MCP) supports optional cancellation of in-progress requests
10 | through notification messages. Either side can send a cancellation notification to
11 | indicate that a previously-issued request should be terminated.
12 | 
13 | ## Cancellation Flow
14 | 
15 | When a party wants to cancel an in-progress request, it sends a `notifications/cancelled`
16 | notification containing:
17 | 
18 | - The ID of the request to cancel
19 | - An optional reason string that can be logged or displayed
20 | 
21 | ```json
22 | {
23 |   "jsonrpc": "2.0",
24 |   "method": "notifications/cancelled",
25 |   "params": {
26 |     "requestId": "123",
27 |     "reason": "User requested cancellation"
28 |   }
29 | }
30 | ```
31 | 
32 | ## Behavior Requirements
33 | 
34 | 1. Cancellation notifications **MUST** only reference requests that:
35 |    - Were previously issued in the same direction
36 |    - Are believed to still be in-progress
37 | 2. The `initialize` request **MUST NOT** be cancelled by clients
38 | 3. Receivers of cancellation notifications **SHOULD**:
39 |    - Stop processing the cancelled request
40 |    - Free associated resources
41 |    - Not send a response for the cancelled request
42 | 4. Receivers **MAY** ignore cancellation notifications if:
43 |    - The referenced request is unknown
44 |    - Processing has already completed
45 |    - The request cannot be cancelled
46 | 5. The sender of the cancellation notification **SHOULD** ignore any response to the
47 |    request that arrives afterward
48 | 
49 | ## Timing Considerations
50 | 
51 | Due to network latency, cancellation notifications may arrive after request processing
52 | has completed, and potentially after a response has already been sent.
53 | 
54 | Both parties **MUST** handle these race conditions gracefully:
55 | 
56 | ```mermaid
57 | sequenceDiagram
58 |    participant Client
59 |    participant Server
60 | 
61 |    Client->>Server: Request (ID: 123)
62 |    Note over Server: Processing starts
63 |    Client--)Server: notifications/cancelled (ID: 123)
64 |    alt
65 |       Note over Server: Processing may have<br/>completed before<br/>cancellation arrives
66 |    else If not completed
67 |       Note over Server: Stop processing
68 |    end
69 | ```
70 | 
71 | ## Implementation Notes
72 | 
73 | - Both parties **SHOULD** log cancellation reasons for debugging
74 | - Application UIs **SHOULD** indicate when cancellation is requested
75 | 
76 | ## Error Handling
77 | 
78 | Invalid cancellation notifications **SHOULD** be ignored:
79 | 
80 | - Unknown request IDs
81 | - Already completed requests
82 | - Malformed notifications
83 | 
84 | This maintains the "fire and forget" nature of notifications while allowing for race
85 | conditions in asynchronous communication.
86 | 


--------------------------------------------------------------------------------
/docs/specification/draft/basic/utilities/ping.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Ping
 3 | ---
 4 | 
 5 | <div id="enable-section-numbers" />
 6 | 
 7 | <Info>**Protocol Revision**: draft</Info>
 8 | 
 9 | The Model Context Protocol includes an optional ping mechanism that allows either party
10 | to verify that their counterpart is still responsive and the connection is alive.
11 | 
12 | ## Overview
13 | 
14 | The ping functionality is implemented through a simple request/response pattern. Either
15 | the client or server can initiate a ping by sending a `ping` request.
16 | 
17 | ## Message Format
18 | 
19 | A ping request is a standard JSON-RPC request with no parameters:
20 | 
21 | ```json
22 | {
23 |   "jsonrpc": "2.0",
24 |   "id": "123",
25 |   "method": "ping"
26 | }
27 | ```
28 | 
29 | ## Behavior Requirements
30 | 
31 | 1. The receiver **MUST** respond promptly with an empty response:
32 | 
33 | ```json
34 | {
35 |   "jsonrpc": "2.0",
36 |   "id": "123",
37 |   "result": {}
38 | }
39 | ```
40 | 
41 | 2. If no response is received within a reasonable timeout period, the sender **MAY**:
42 |    - Consider the connection stale
43 |    - Terminate the connection
44 |    - Attempt reconnection procedures
45 | 
46 | ## Usage Patterns
47 | 
48 | ```mermaid
49 | sequenceDiagram
50 |     participant Sender
51 |     participant Receiver
52 | 
53 |     Sender->>Receiver: ping request
54 |     Receiver->>Sender: empty response
55 | ```
56 | 
57 | ## Implementation Considerations
58 | 
59 | - Implementations **SHOULD** periodically issue pings to detect connection health
60 | - The frequency of pings **SHOULD** be configurable
61 | - Timeouts **SHOULD** be appropriate for the network environment
62 | - Excessive pinging **SHOULD** be avoided to reduce network overhead
63 | 
64 | ## Error Handling
65 | 
66 | - Timeouts **SHOULD** be treated as connection failures
67 | - Multiple failed pings **MAY** trigger connection reset
68 | - Implementations **SHOULD** log ping failures for diagnostics
69 | 


--------------------------------------------------------------------------------
/docs/specification/draft/basic/utilities/progress.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Progress
 3 | ---
 4 | 
 5 | <div id="enable-section-numbers" />
 6 | 
 7 | <Info>**Protocol Revision**: draft</Info>
 8 | 
 9 | The Model Context Protocol (MCP) supports optional progress tracking for long-running
10 | operations through notification messages. Either side can send progress notifications to
11 | provide updates about operation status.
12 | 
13 | ## Progress Flow
14 | 
15 | When a party wants to _receive_ progress updates for a request, it includes a
16 | `progressToken` in the request metadata.
17 | 
18 | - Progress tokens **MUST** be a string or integer value
19 | - Progress tokens can be chosen by the sender using any means, but **MUST** be unique
20 |   across all active requests.
21 | 
22 | ```json
23 | {
24 |   "jsonrpc": "2.0",
25 |   "id": 1,
26 |   "method": "some_method",
27 |   "params": {
28 |     "_meta": {
29 |       "progressToken": "abc123"
30 |     }
31 |   }
32 | }
33 | ```
34 | 
35 | The receiver **MAY** then send progress notifications containing:
36 | 
37 | - The original progress token
38 | - The current progress value so far
39 | - An optional "total" value
40 | - An optional "message" value
41 | 
42 | ```json
43 | {
44 |   "jsonrpc": "2.0",
45 |   "method": "notifications/progress",
46 |   "params": {
47 |     "progressToken": "abc123",
48 |     "progress": 50,
49 |     "total": 100,
50 |     "message": "Reticulating splines..."
51 |   }
52 | }
53 | ```
54 | 
55 | - The `progress` value **MUST** increase with each notification, even if the total is
56 |   unknown.
57 | - The `progress` and the `total` values **MAY** be floating point.
58 | - The `message` field **SHOULD** provide relevant human readable progress information.
59 | 
60 | ## Behavior Requirements
61 | 
62 | 1. Progress notifications **MUST** only reference tokens that:
63 |    - Were provided in an active request
64 |    - Are associated with an in-progress operation
65 | 
66 | 2. Receivers of progress requests **MAY**:
67 |    - Choose not to send any progress notifications
68 |    - Send notifications at whatever frequency they deem appropriate
69 |    - Omit the total value if unknown
70 | 
71 | ```mermaid
72 | sequenceDiagram
73 |     participant Sender
74 |     participant Receiver
75 | 
76 |     Note over Sender,Receiver: Request with progress token
77 |     Sender->>Receiver: Method request with progressToken
78 | 
79 |     Note over Sender,Receiver: Progress updates
80 |     Receiver-->>Sender: Progress notification (0.2/1.0)
81 |     Receiver-->>Sender: Progress notification (0.6/1.0)
82 |     Receiver-->>Sender: Progress notification (1.0/1.0)
83 | 
84 |     Note over Sender,Receiver: Operation complete
85 |     Receiver->>Sender: Method response
86 | ```
87 | 
88 | ## Implementation Notes
89 | 
90 | - Senders and receivers **SHOULD** track active progress tokens
91 | - Both parties **SHOULD** implement rate limiting to prevent flooding
92 | - Progress notifications **MUST** stop after completion
93 | 


--------------------------------------------------------------------------------
/docs/specification/draft/changelog.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Key Changes
 3 | ---
 4 | 
 5 | <div id="enable-section-numbers" />
 6 | 
 7 | This document lists changes made to the Model Context Protocol (MCP) specification since
 8 | the previous revision, [2025-06-18](/specification/2025-06-18).
 9 | 
10 | ## Major changes
11 | 
12 | 1. Enhance authorization server discovery with support for [OpenID Connect Discovery 1.0](https://openid.net/specs/openid-connect-discovery-1_0.html). (PR [#797](https://github.com/modelcontextprotocol/modelcontextprotocol/pull/797))
13 | 
14 | ## Other schema changes
15 | 
16 | ## Full changelog
17 | 
18 | For a complete list of all changes that have been made since the last protocol revision,
19 | [see GitHub](https://github.com/modelcontextprotocol/specification/compare/2025-06-18...draft).
20 | 


--------------------------------------------------------------------------------
/docs/specification/draft/client/elicitation.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Elicitation
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: draft</Info>
  8 | 
  9 | <Note>
 10 | 
 11 | Elicitation is newly introduced in this version of the MCP specification and its design may evolve in future protocol versions.
 12 | 
 13 | </Note>
 14 | 
 15 | The Model Context Protocol (MCP) provides a standardized way for servers to request additional
 16 | information from users through the client during interactions. This flow allows clients to
 17 | maintain control over user interactions and data sharing while enabling servers to gather
 18 | necessary information dynamically.
 19 | Servers request structured data from users with JSON schemas to validate responses.
 20 | 
 21 | ## User Interaction Model
 22 | 
 23 | Elicitation in MCP allows servers to implement interactive workflows by enabling user input
 24 | requests to occur _nested_ inside other MCP server features.
 25 | 
 26 | Implementations are free to expose elicitation through any interface pattern that suits
 27 | their needs&mdash;the protocol itself does not mandate any specific user interaction
 28 | model.
 29 | 
 30 | <Warning>
 31 | 
 32 | For trust & safety and security:
 33 | 
 34 | - Servers **MUST NOT** use elicitation to request sensitive information.
 35 | 
 36 | Applications **SHOULD**:
 37 | 
 38 | - Provide UI that makes it clear which server is requesting information
 39 | - Allow users to review and modify their responses before sending
 40 | - Respect user privacy and provide clear decline and cancel options
 41 | 
 42 | </Warning>
 43 | 
 44 | ## Capabilities
 45 | 
 46 | Clients that support elicitation **MUST** declare the `elicitation` capability during
 47 | [initialization](/specification/draft/basic/lifecycle#initialization):
 48 | 
 49 | ```json
 50 | {
 51 |   "capabilities": {
 52 |     "elicitation": {}
 53 |   }
 54 | }
 55 | ```
 56 | 
 57 | ## Protocol Messages
 58 | 
 59 | ### Creating Elicitation Requests
 60 | 
 61 | To request information from a user, servers send an `elicitation/create` request:
 62 | 
 63 | #### Simple Text Request
 64 | 
 65 | **Request:**
 66 | 
 67 | ```json
 68 | {
 69 |   "jsonrpc": "2.0",
 70 |   "id": 1,
 71 |   "method": "elicitation/create",
 72 |   "params": {
 73 |     "message": "Please provide your GitHub username",
 74 |     "requestedSchema": {
 75 |       "type": "object",
 76 |       "properties": {
 77 |         "name": {
 78 |           "type": "string"
 79 |         }
 80 |       },
 81 |       "required": ["name"]
 82 |     }
 83 |   }
 84 | }
 85 | ```
 86 | 
 87 | **Response:**
 88 | 
 89 | ```json
 90 | {
 91 |   "jsonrpc": "2.0",
 92 |   "id": 1,
 93 |   "result": {
 94 |     "action": "accept",
 95 |     "content": {
 96 |       "name": "octocat"
 97 |     }
 98 |   }
 99 | }
100 | ```
101 | 
102 | #### Structured Data Request
103 | 
104 | **Request:**
105 | 
106 | ```json
107 | {
108 |   "jsonrpc": "2.0",
109 |   "id": 2,
110 |   "method": "elicitation/create",
111 |   "params": {
112 |     "message": "Please provide your contact information",
113 |     "requestedSchema": {
114 |       "type": "object",
115 |       "properties": {
116 |         "name": {
117 |           "type": "string",
118 |           "description": "Your full name"
119 |         },
120 |         "email": {
121 |           "type": "string",
122 |           "format": "email",
123 |           "description": "Your email address"
124 |         },
125 |         "age": {
126 |           "type": "number",
127 |           "minimum": 18,
128 |           "description": "Your age"
129 |         }
130 |       },
131 |       "required": ["name", "email"]
132 |     }
133 |   }
134 | }
135 | ```
136 | 
137 | **Response:**
138 | 
139 | ```json
140 | {
141 |   "jsonrpc": "2.0",
142 |   "id": 2,
143 |   "result": {
144 |     "action": "accept",
145 |     "content": {
146 |       "name": "Monalisa Octocat",
147 |       "email": "octocat@github.com",
148 |       "age": 30
149 |     }
150 |   }
151 | }
152 | ```
153 | 
154 | **Reject Response Example:**
155 | 
156 | ```json
157 | {
158 |   "jsonrpc": "2.0",
159 |   "id": 2,
160 |   "result": {
161 |     "action": "decline"
162 |   }
163 | }
164 | ```
165 | 
166 | **Cancel Response Example:**
167 | 
168 | ```json
169 | {
170 |   "jsonrpc": "2.0",
171 |   "id": 2,
172 |   "result": {
173 |     "action": "cancel"
174 |   }
175 | }
176 | ```
177 | 
178 | ## Message Flow
179 | 
180 | ```mermaid
181 | sequenceDiagram
182 |     participant User
183 |     participant Client
184 |     participant Server
185 | 
186 |     Note over Server,Client: Server initiates elicitation
187 |     Server->>Client: elicitation/create
188 | 
189 |     Note over Client,User: Human interaction
190 |     Client->>User: Present elicitation UI
191 |     User-->>Client: Provide requested information
192 | 
193 |     Note over Server,Client: Complete request
194 |     Client-->>Server: Return user response
195 | 
196 |     Note over Server: Continue processing with new information
197 | ```
198 | 
199 | ## Request Schema
200 | 
201 | The `requestedSchema` field allows servers to define the structure of the expected response using a restricted subset of JSON Schema. To simplify client user experience, elicitation schemas are limited to flat objects with primitive properties only:
202 | 
203 | ```json
204 | "requestedSchema": {
205 |   "type": "object",
206 |   "properties": {
207 |     "propertyName": {
208 |       "type": "string",
209 |       "title": "Display Name",
210 |       "description": "Description of the property"
211 |     },
212 |     "anotherProperty": {
213 |       "type": "number",
214 |       "minimum": 0,
215 |       "maximum": 100
216 |     }
217 |   },
218 |   "required": ["propertyName"]
219 | }
220 | ```
221 | 
222 | ### Supported Schema Types
223 | 
224 | The schema is restricted to these primitive types:
225 | 
226 | 1. **String Schema**
227 | 
228 |    ```json
229 |    {
230 |      "type": "string",
231 |      "title": "Display Name",
232 |      "description": "Description text",
233 |      "minLength": 3,
234 |      "maxLength": 50,
235 |      "pattern": "^[A-Za-z]+
quot;,
236 |      "format": "email"
237 |    }
238 |    ```
239 | 
240 |    Supported formats: `email`, `uri`, `date`, `date-time`
241 | 
242 | 2. **Number Schema**
243 | 
244 |    ```json
245 |    {
246 |      "type": "number", // or "integer"
247 |      "title": "Display Name",
248 |      "description": "Description text",
249 |      "minimum": 0,
250 |      "maximum": 100
251 |    }
252 |    ```
253 | 
254 | 3. **Boolean Schema**
255 | 
256 |    ```json
257 |    {
258 |      "type": "boolean",
259 |      "title": "Display Name",
260 |      "description": "Description text",
261 |      "default": false
262 |    }
263 |    ```
264 | 
265 | 4. **Enum Schema**
266 |    ```json
267 |    {
268 |      "type": "string",
269 |      "title": "Display Name",
270 |      "description": "Description text",
271 |      "enum": ["option1", "option2", "option3"],
272 |      "enumNames": ["Option 1", "Option 2", "Option 3"]
273 |    }
274 |    ```
275 | 
276 | Clients can use this schema to:
277 | 
278 | 1. Generate appropriate input forms
279 | 2. Validate user input before sending
280 | 3. Provide better guidance to users
281 | 
282 | Note that complex nested structures, arrays of objects, and other advanced JSON Schema features are intentionally not supported to simplify client user experience.
283 | 
284 | ## Response Actions
285 | 
286 | Elicitation responses use a three-action model to clearly distinguish between different user actions:
287 | 
288 | ```json
289 | {
290 |   "jsonrpc": "2.0",
291 |   "id": 1,
292 |   "result": {
293 |     "action": "accept", // or "decline" or "cancel"
294 |     "content": {
295 |       "propertyName": "value",
296 |       "anotherProperty": 42
297 |     }
298 |   }
299 | }
300 | ```
301 | 
302 | The three response actions are:
303 | 
304 | 1. **Accept** (`action: "accept"`): User explicitly approved and submitted with data
305 |    - The `content` field contains the submitted data matching the requested schema
306 |    - Example: User clicked "Submit", "OK", "Confirm", etc.
307 | 
308 | 2. **Decline** (`action: "decline"`): User explicitly declined the request
309 |    - The `content` field is typically omitted
310 |    - Example: User clicked "Reject", "Decline", "No", etc.
311 | 
312 | 3. **Cancel** (`action: "cancel"`): User dismissed without making an explicit choice
313 |    - The `content` field is typically omitted
314 |    - Example: User closed the dialog, clicked outside, pressed Escape, etc.
315 | 
316 | Servers should handle each state appropriately:
317 | 
318 | - **Accept**: Process the submitted data
319 | - **Decline**: Handle explicit decline (e.g., offer alternatives)
320 | - **Cancel**: Handle dismissal (e.g., prompt again later)
321 | 
322 | ## Security Considerations
323 | 
324 | 1. Servers **MUST NOT** request sensitive information through elicitation
325 | 2. Clients **SHOULD** implement user approval controls
326 | 3. Both parties **SHOULD** validate elicitation content against the provided schema
327 | 4. Clients **SHOULD** provide clear indication of which server is requesting information
328 | 5. Clients **SHOULD** allow users to decline elicitation requests at any time
329 | 6. Clients **SHOULD** implement rate limiting
330 | 7. Clients **SHOULD** present elicitation requests in a way that makes it clear what information is being requested and why
331 | 


--------------------------------------------------------------------------------
/docs/specification/draft/client/roots.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Roots
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: draft</Info>
  8 | 
  9 | The Model Context Protocol (MCP) provides a standardized way for clients to expose
 10 | filesystem "roots" to servers. Roots define the boundaries of where servers can operate
 11 | within the filesystem, allowing them to understand which directories and files they have
 12 | access to. Servers can request the list of roots from supporting clients and receive
 13 | notifications when that list changes.
 14 | 
 15 | ## User Interaction Model
 16 | 
 17 | Roots in MCP are typically exposed through workspace or project configuration interfaces.
 18 | 
 19 | For example, implementations could offer a workspace/project picker that allows users to
 20 | select directories and files the server should have access to. This can be combined with
 21 | automatic workspace detection from version control systems or project files.
 22 | 
 23 | However, implementations are free to expose roots through any interface pattern that
 24 | suits their needs&mdash;the protocol itself does not mandate any specific user
 25 | interaction model.
 26 | 
 27 | ## Capabilities
 28 | 
 29 | Clients that support roots **MUST** declare the `roots` capability during
 30 | [initialization](/specification/draft/basic/lifecycle#initialization):
 31 | 
 32 | ```json
 33 | {
 34 |   "capabilities": {
 35 |     "roots": {
 36 |       "listChanged": true
 37 |     }
 38 |   }
 39 | }
 40 | ```
 41 | 
 42 | `listChanged` indicates whether the client will emit notifications when the list of roots
 43 | changes.
 44 | 
 45 | ## Protocol Messages
 46 | 
 47 | ### Listing Roots
 48 | 
 49 | To retrieve roots, servers send a `roots/list` request:
 50 | 
 51 | **Request:**
 52 | 
 53 | ```json
 54 | {
 55 |   "jsonrpc": "2.0",
 56 |   "id": 1,
 57 |   "method": "roots/list"
 58 | }
 59 | ```
 60 | 
 61 | **Response:**
 62 | 
 63 | ```json
 64 | {
 65 |   "jsonrpc": "2.0",
 66 |   "id": 1,
 67 |   "result": {
 68 |     "roots": [
 69 |       {
 70 |         "uri": "file:///home/user/projects/myproject",
 71 |         "name": "My Project"
 72 |       }
 73 |     ]
 74 |   }
 75 | }
 76 | ```
 77 | 
 78 | ### Root List Changes
 79 | 
 80 | When roots change, clients that support `listChanged` **MUST** send a notification:
 81 | 
 82 | ```json
 83 | {
 84 |   "jsonrpc": "2.0",
 85 |   "method": "notifications/roots/list_changed"
 86 | }
 87 | ```
 88 | 
 89 | ## Message Flow
 90 | 
 91 | ```mermaid
 92 | sequenceDiagram
 93 |     participant Server
 94 |     participant Client
 95 | 
 96 |     Note over Server,Client: Discovery
 97 |     Server->>Client: roots/list
 98 |     Client-->>Server: Available roots
 99 | 
100 |     Note over Server,Client: Changes
101 |     Client--)Server: notifications/roots/list_changed
102 |     Server->>Client: roots/list
103 |     Client-->>Server: Updated roots
104 | ```
105 | 
106 | ## Data Types
107 | 
108 | ### Root
109 | 
110 | A root definition includes:
111 | 
112 | - `uri`: Unique identifier for the root. This **MUST** be a `file://` URI in the current
113 |   specification.
114 | - `name`: Optional human-readable name for display purposes.
115 | 
116 | Example roots for different use cases:
117 | 
118 | #### Project Directory
119 | 
120 | ```json
121 | {
122 |   "uri": "file:///home/user/projects/myproject",
123 |   "name": "My Project"
124 | }
125 | ```
126 | 
127 | #### Multiple Repositories
128 | 
129 | ```json
130 | [
131 |   {
132 |     "uri": "file:///home/user/repos/frontend",
133 |     "name": "Frontend Repository"
134 |   },
135 |   {
136 |     "uri": "file:///home/user/repos/backend",
137 |     "name": "Backend Repository"
138 |   }
139 | ]
140 | ```
141 | 
142 | ## Error Handling
143 | 
144 | Clients **SHOULD** return standard JSON-RPC errors for common failure cases:
145 | 
146 | - Client does not support roots: `-32601` (Method not found)
147 | - Internal errors: `-32603`
148 | 
149 | Example error:
150 | 
151 | ```json
152 | {
153 |   "jsonrpc": "2.0",
154 |   "id": 1,
155 |   "error": {
156 |     "code": -32601,
157 |     "message": "Roots not supported",
158 |     "data": {
159 |       "reason": "Client does not have roots capability"
160 |     }
161 |   }
162 | }
163 | ```
164 | 
165 | ## Security Considerations
166 | 
167 | 1. Clients **MUST**:
168 |    - Only expose roots with appropriate permissions
169 |    - Validate all root URIs to prevent path traversal
170 |    - Implement proper access controls
171 |    - Monitor root accessibility
172 | 
173 | 2. Servers **SHOULD**:
174 |    - Handle cases where roots become unavailable
175 |    - Respect root boundaries during operations
176 |    - Validate all paths against provided roots
177 | 
178 | ## Implementation Guidelines
179 | 
180 | 1. Clients **SHOULD**:
181 |    - Prompt users for consent before exposing roots to servers
182 |    - Provide clear user interfaces for root management
183 |    - Validate root accessibility before exposing
184 |    - Monitor for root changes
185 | 
186 | 2. Servers **SHOULD**:
187 |    - Check for roots capability before usage
188 |    - Handle root list changes gracefully
189 |    - Respect root boundaries in operations
190 |    - Cache root information appropriately
191 | 


--------------------------------------------------------------------------------
/docs/specification/draft/client/sampling.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Sampling
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: draft</Info>
  8 | 
  9 | The Model Context Protocol (MCP) provides a standardized way for servers to request LLM
 10 | sampling ("completions" or "generations") from language models via clients. This flow
 11 | allows clients to maintain control over model access, selection, and permissions while
 12 | enabling servers to leverage AI capabilities&mdash;with no server API keys necessary.
 13 | Servers can request text, audio, or image-based interactions and optionally include
 14 | context from MCP servers in their prompts.
 15 | 
 16 | ## User Interaction Model
 17 | 
 18 | Sampling in MCP allows servers to implement agentic behaviors, by enabling LLM calls to
 19 | occur _nested_ inside other MCP server features.
 20 | 
 21 | Implementations are free to expose sampling through any interface pattern that suits
 22 | their needs&mdash;the protocol itself does not mandate any specific user interaction
 23 | model.
 24 | 
 25 | <Warning>
 26 | 
 27 | For trust & safety and security, there **SHOULD** always
 28 | be a human in the loop with the ability to deny sampling requests.
 29 | 
 30 | Applications **SHOULD**:
 31 | 
 32 | - Provide UI that makes it easy and intuitive to review sampling requests
 33 | - Allow users to view and edit prompts before sending
 34 | - Present generated responses for review before delivery
 35 | 
 36 | </Warning>
 37 | 
 38 | ## Capabilities
 39 | 
 40 | Clients that support sampling **MUST** declare the `sampling` capability during
 41 | [initialization](/specification/draft/basic/lifecycle#initialization):
 42 | 
 43 | ```json
 44 | {
 45 |   "capabilities": {
 46 |     "sampling": {}
 47 |   }
 48 | }
 49 | ```
 50 | 
 51 | ## Protocol Messages
 52 | 
 53 | ### Creating Messages
 54 | 
 55 | To request a language model generation, servers send a `sampling/createMessage` request:
 56 | 
 57 | **Request:**
 58 | 
 59 | ```json
 60 | {
 61 |   "jsonrpc": "2.0",
 62 |   "id": 1,
 63 |   "method": "sampling/createMessage",
 64 |   "params": {
 65 |     "messages": [
 66 |       {
 67 |         "role": "user",
 68 |         "content": {
 69 |           "type": "text",
 70 |           "text": "What is the capital of France?"
 71 |         }
 72 |       }
 73 |     ],
 74 |     "modelPreferences": {
 75 |       "hints": [
 76 |         {
 77 |           "name": "claude-3-sonnet"
 78 |         }
 79 |       ],
 80 |       "intelligencePriority": 0.8,
 81 |       "speedPriority": 0.5
 82 |     },
 83 |     "systemPrompt": "You are a helpful assistant.",
 84 |     "maxTokens": 100
 85 |   }
 86 | }
 87 | ```
 88 | 
 89 | **Response:**
 90 | 
 91 | ```json
 92 | {
 93 |   "jsonrpc": "2.0",
 94 |   "id": 1,
 95 |   "result": {
 96 |     "role": "assistant",
 97 |     "content": {
 98 |       "type": "text",
 99 |       "text": "The capital of France is Paris."
100 |     },
101 |     "model": "claude-3-sonnet-20240307",
102 |     "stopReason": "endTurn"
103 |   }
104 | }
105 | ```
106 | 
107 | ## Message Flow
108 | 
109 | ```mermaid
110 | sequenceDiagram
111 |     participant Server
112 |     participant Client
113 |     participant User
114 |     participant LLM
115 | 
116 |     Note over Server,Client: Server initiates sampling
117 |     Server->>Client: sampling/createMessage
118 | 
119 |     Note over Client,User: Human-in-the-loop review
120 |     Client->>User: Present request for approval
121 |     User-->>Client: Review and approve/modify
122 | 
123 |     Note over Client,LLM: Model interaction
124 |     Client->>LLM: Forward approved request
125 |     LLM-->>Client: Return generation
126 | 
127 |     Note over Client,User: Response review
128 |     Client->>User: Present response for approval
129 |     User-->>Client: Review and approve/modify
130 | 
131 |     Note over Server,Client: Complete request
132 |     Client-->>Server: Return approved response
133 | ```
134 | 
135 | ## Data Types
136 | 
137 | ### Messages
138 | 
139 | Sampling messages can contain:
140 | 
141 | #### Text Content
142 | 
143 | ```json
144 | {
145 |   "type": "text",
146 |   "text": "The message content"
147 | }
148 | ```
149 | 
150 | #### Image Content
151 | 
152 | ```json
153 | {
154 |   "type": "image",
155 |   "data": "base64-encoded-image-data",
156 |   "mimeType": "image/jpeg"
157 | }
158 | ```
159 | 
160 | #### Audio Content
161 | 
162 | ```json
163 | {
164 |   "type": "audio",
165 |   "data": "base64-encoded-audio-data",
166 |   "mimeType": "audio/wav"
167 | }
168 | ```
169 | 
170 | ### Model Preferences
171 | 
172 | Model selection in MCP requires careful abstraction since servers and clients may use
173 | different AI providers with distinct model offerings. A server cannot simply request a
174 | specific model by name since the client may not have access to that exact model or may
175 | prefer to use a different provider's equivalent model.
176 | 
177 | To solve this, MCP implements a preference system that combines abstract capability
178 | priorities with optional model hints:
179 | 
180 | #### Capability Priorities
181 | 
182 | Servers express their needs through three normalized priority values (0-1):
183 | 
184 | - `costPriority`: How important is minimizing costs? Higher values prefer cheaper models.
185 | - `speedPriority`: How important is low latency? Higher values prefer faster models.
186 | - `intelligencePriority`: How important are advanced capabilities? Higher values prefer
187 |   more capable models.
188 | 
189 | #### Model Hints
190 | 
191 | While priorities help select models based on characteristics, `hints` allow servers to
192 | suggest specific models or model families:
193 | 
194 | - Hints are treated as substrings that can match model names flexibly
195 | - Multiple hints are evaluated in order of preference
196 | - Clients **MAY** map hints to equivalent models from different providers
197 | - Hints are advisory&mdash;clients make final model selection
198 | 
199 | For example:
200 | 
201 | ```json
202 | {
203 |   "hints": [
204 |     { "name": "claude-3-sonnet" }, // Prefer Sonnet-class models
205 |     { "name": "claude" } // Fall back to any Claude model
206 |   ],
207 |   "costPriority": 0.3, // Cost is less important
208 |   "speedPriority": 0.8, // Speed is very important
209 |   "intelligencePriority": 0.5 // Moderate capability needs
210 | }
211 | ```
212 | 
213 | The client processes these preferences to select an appropriate model from its available
214 | options. For instance, if the client doesn't have access to Claude models but has Gemini,
215 | it might map the sonnet hint to `gemini-1.5-pro` based on similar capabilities.
216 | 
217 | ## Error Handling
218 | 
219 | Clients **SHOULD** return errors for common failure cases:
220 | 
221 | Example error:
222 | 
223 | ```json
224 | {
225 |   "jsonrpc": "2.0",
226 |   "id": 1,
227 |   "error": {
228 |     "code": -1,
229 |     "message": "User rejected sampling request"
230 |   }
231 | }
232 | ```
233 | 
234 | ## Security Considerations
235 | 
236 | 1. Clients **SHOULD** implement user approval controls
237 | 2. Both parties **SHOULD** validate message content
238 | 3. Clients **SHOULD** respect model preference hints
239 | 4. Clients **SHOULD** implement rate limiting
240 | 5. Both parties **MUST** handle sensitive data appropriately
241 | 


--------------------------------------------------------------------------------
/docs/specification/draft/index.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Specification
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | [Model Context Protocol](https://modelcontextprotocol.io) (MCP) is an open protocol that
  8 | enables seamless integration between LLM applications and external data sources and
  9 | tools. Whether you're building an AI-powered IDE, enhancing a chat interface, or creating
 10 | custom AI workflows, MCP provides a standardized way to connect LLMs with the context
 11 | they need.
 12 | 
 13 | This specification defines the authoritative protocol requirements, based on the
 14 | TypeScript schema in
 15 | [schema.ts](https://github.com/modelcontextprotocol/specification/blob/main/schema/draft/schema.ts).
 16 | 
 17 | For implementation guides and examples, visit
 18 | [modelcontextprotocol.io](https://modelcontextprotocol.io).
 19 | 
 20 | The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD
 21 | NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
 22 | interpreted as described in [BCP 14](https://datatracker.ietf.org/doc/html/bcp14)
 23 | [[RFC2119](https://datatracker.ietf.org/doc/html/rfc2119)]
 24 | [[RFC8174](https://datatracker.ietf.org/doc/html/rfc8174)] when, and only when, they
 25 | appear in all capitals, as shown here.
 26 | 
 27 | ## Overview
 28 | 
 29 | MCP provides a standardized way for applications to:
 30 | 
 31 | - Share contextual information with language models
 32 | - Expose tools and capabilities to AI systems
 33 | - Build composable integrations and workflows
 34 | 
 35 | The protocol uses [JSON-RPC](https://www.jsonrpc.org/) 2.0 messages to establish
 36 | communication between:
 37 | 
 38 | - **Hosts**: LLM applications that initiate connections
 39 | - **Clients**: Connectors within the host application
 40 | - **Servers**: Services that provide context and capabilities
 41 | 
 42 | MCP takes some inspiration from the
 43 | [Language Server Protocol](https://microsoft.github.io/language-server-protocol/), which
 44 | standardizes how to add support for programming languages across a whole ecosystem of
 45 | development tools. In a similar way, MCP standardizes how to integrate additional context
 46 | and tools into the ecosystem of AI applications.
 47 | 
 48 | ## Key Details
 49 | 
 50 | ### Base Protocol
 51 | 
 52 | - [JSON-RPC](https://www.jsonrpc.org/) message format
 53 | - Stateful connections
 54 | - Server and client capability negotiation
 55 | 
 56 | ### Features
 57 | 
 58 | Servers offer any of the following features to clients:
 59 | 
 60 | - **Resources**: Context and data, for the user or the AI model to use
 61 | - **Prompts**: Templated messages and workflows for users
 62 | - **Tools**: Functions for the AI model to execute
 63 | 
 64 | Clients may offer the following features to servers:
 65 | 
 66 | - **Sampling**: Server-initiated agentic behaviors and recursive LLM interactions
 67 | - **Roots**: Server-initiated inquiries into URI or filesystem boundaries to operate in
 68 | - **Elicitation**: Server-initiated requests for additional information from users
 69 | 
 70 | ### Additional Utilities
 71 | 
 72 | - Configuration
 73 | - Progress tracking
 74 | - Cancellation
 75 | - Error reporting
 76 | - Logging
 77 | 
 78 | ## Security and Trust & Safety
 79 | 
 80 | The Model Context Protocol enables powerful capabilities through arbitrary data access
 81 | and code execution paths. With this power comes important security and trust
 82 | considerations that all implementors must carefully address.
 83 | 
 84 | ### Key Principles
 85 | 
 86 | 1. **User Consent and Control**
 87 |    - Users must explicitly consent to and understand all data access and operations
 88 |    - Users must retain control over what data is shared and what actions are taken
 89 |    - Implementors should provide clear UIs for reviewing and authorizing activities
 90 | 
 91 | 2. **Data Privacy**
 92 |    - Hosts must obtain explicit user consent before exposing user data to servers
 93 |    - Hosts must not transmit resource data elsewhere without user consent
 94 |    - User data should be protected with appropriate access controls
 95 | 
 96 | 3. **Tool Safety**
 97 |    - Tools represent arbitrary code execution and must be treated with appropriate
 98 |      caution.
 99 |      - In particular, descriptions of tool behavior such as annotations should be
100 |        considered untrusted, unless obtained from a trusted server.
101 |    - Hosts must obtain explicit user consent before invoking any tool
102 |    - Users should understand what each tool does before authorizing its use
103 | 
104 | 4. **LLM Sampling Controls**
105 |    - Users must explicitly approve any LLM sampling requests
106 |    - Users should control:
107 |      - Whether sampling occurs at all
108 |      - The actual prompt that will be sent
109 |      - What results the server can see
110 |    - The protocol intentionally limits server visibility into prompts
111 | 
112 | ### Implementation Guidelines
113 | 
114 | While MCP itself cannot enforce these security principles at the protocol level,
115 | implementors **SHOULD**:
116 | 
117 | 1. Build robust consent and authorization flows into their applications
118 | 2. Provide clear documentation of security implications
119 | 3. Implement appropriate access controls and data protections
120 | 4. Follow security best practices in their integrations
121 | 5. Consider privacy implications in their feature designs
122 | 
123 | ## Learn More
124 | 
125 | Explore the detailed specification for each protocol component:
126 | 
127 | <CardGroup cols={5}>
128 |   <Card
129 |     title="Architecture"
130 |     icon="sitemap"
131 |     href="/specification/draft/architecture"
132 |   />
133 |   <Card title="Base Protocol" icon="code" href="/specification/draft/basic" />
134 |   <Card
135 |     title="Server Features"
136 |     icon="server"
137 |     href="/specification/draft/server"
138 |   />
139 |   <Card
140 |     title="Client Features"
141 |     icon="user"
142 |     href="/specification/draft/client"
143 |   />
144 |   <Card title="Contributing" icon="pencil" href="/development/contributing" />
145 | </CardGroup>
146 | 


--------------------------------------------------------------------------------
/docs/specification/draft/schema.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Schema Reference
  3 | ---
  4 | 
  5 | <div id="schema-reference" />
  6 | 
  7 | ## Common Types
  8 | 
  9 | ### `Annotations`
 10 | 
 11 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">Annotations</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#annotations-audience">audience</a><span class="tsd-signature-symbol">?:</span> <a href="#role" class="tsd-signature-type tsd-kind-type-alias">Role</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#annotations-lastmodified">lastModified</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#annotations-priority">priority</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Optional annotations for the client. The client can use annotations to inform how objects are used or displayed</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="annotations-audience"><code class="tsd-tag">Optional</code><span>audience</span><a href="#annotations-audience" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">audience</span><span class="tsd-signature-symbol">?:</span> <a href="#role" class="tsd-signature-type tsd-kind-type-alias">Role</a><span class="tsd-signature-symbol">&#x5B;]</span></div><div class="tsd-comment tsd-typography"><p>Describes who the intended customer of this object or data is.</p> <p>It can include multiple entries to indicate content useful for multiple audiences (e.g., <code>&#x5B;&quot;user&quot;, &quot;assistant&quot;]</code>).</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="annotations-lastmodified"><code class="tsd-tag">Optional</code><span>last<wbr/>Modified</span><a href="#annotations-lastmodified" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">lastModified</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The moment the resource was last modified, as an ISO 8601 formatted string.</p> <p>Should be an ISO 8601 formatted string (e.g., &quot;2025-01-12T15:00:58Z&quot;).</p> <p>Examples: last activity timestamp in an open file, timestamp when the resource
 12 | was attached, etc.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="annotations-priority"><code class="tsd-tag">Optional</code><span>priority</span><a href="#annotations-priority" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">priority</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>Describes how important this data is for operating the server.</p> <p>A value of 1 means &quot;most important,&quot; and indicates that the data is
 13 | effectively required, while 0 means &quot;least important,&quot; and indicates that
 14 | the data is entirely optional.</p> </div><div class="tsd-comment tsd-typography"><div class="tsd-tag-TJS-type"><div data-typedoc-h="4" class="tsd-anchor-link" id="tjs-type">TJS-type<a href="#tjs-type" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><p>number</p> </div></div></section>
 15 | 
 16 | ### `AudioContent`
 17 | 
 18 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">AudioContent</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#audiocontent-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#audiocontent-annotations">annotations</a><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#audiocontent-data">data</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#audiocontent-mimetype">mimeType</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;audio&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Audio provided to or from an LLM.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="audiocontent-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#audiocontent-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="audiocontent-annotations"><code class="tsd-tag">Optional</code><span>annotations</span><a href="#audiocontent-annotations" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">annotations</span><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a></div><div class="tsd-comment tsd-typography"><p>Optional annotations for the client.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="audiocontent-data"><span>data</span><a href="#audiocontent-data" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">data</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The base64-encoded audio data.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="audiocontent-mimetype"><span>mime<wbr/>Type</span><a href="#audiocontent-mimetype" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">mimeType</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The MIME type of the audio. Different providers may support different audio types.</p> </div><div class="tsd-comment tsd-typography"></div></section>
 19 | 
 20 | ### `BlobResourceContents`
 21 | 
 22 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">BlobResourceContents</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#blobresourcecontents-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#blobresourcecontents-blob">blob</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#blobresourcecontents-mimetype">mimeType</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#blobresourcecontents-uri">uri</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The contents of a specific resource or sub-resource.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="blobresourcecontents-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#blobresourcecontents-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resourcecontents">ResourceContents</a>.<a href="#resourcecontents-&#x5F;meta">&#x5F;meta</a></p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="blobresourcecontents-blob"><span>blob</span><a href="#blobresourcecontents-blob" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">blob</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>A base64-encoded string representing the binary data of the item.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="blobresourcecontents-mimetype"><code class="tsd-tag">Optional</code><span>mime<wbr/>Type</span><a href="#blobresourcecontents-mimetype" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">mimeType</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The MIME type of this resource, if known.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resourcecontents">ResourceContents</a>.<a href="#resourcecontents-mimetype">mimeType</a></p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="blobresourcecontents-uri"><span>uri</span><a href="#blobresourcecontents-uri" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI of this resource.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resourcecontents">ResourceContents</a>.<a href="#resourcecontents-uri">uri</a></p></aside></section>
 23 | 
 24 | ### `BooleanSchema`
 25 | 
 26 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">BooleanSchema</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">default</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;boolean&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div>
 27 | 
 28 | ### `ClientCapabilities`
 29 | 
 30 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ClientCapabilities</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#clientcapabilities-elicitation">elicitation</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#clientcapabilities-experimental">experimental</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">object</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#clientcapabilities-roots">roots</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#clientcapabilities-sampling">sampling</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Capabilities a client may support. Known capabilities are defined here, in this schema, but this is not a closed set: any client can define its own, additional capabilities.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="clientcapabilities-elicitation"><code class="tsd-tag">Optional</code><span>elicitation</span><a href="#clientcapabilities-elicitation" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">elicitation</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">object</span></div><div class="tsd-comment tsd-typography"><p>Present if the client supports elicitation from the server.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="clientcapabilities-experimental"><code class="tsd-tag">Optional</code><span>experimental</span><a href="#clientcapabilities-experimental" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">experimental</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">object</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Experimental, non-standard capabilities that the client supports.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="clientcapabilities-roots"><code class="tsd-tag">Optional</code><span>roots</span><a href="#clientcapabilities-roots" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">roots</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Present if the client supports listing roots.</p> </div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>Whether the client supports notifications for changes to the roots list.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="clientcapabilities-sampling"><code class="tsd-tag">Optional</code><span>sampling</span><a href="#clientcapabilities-sampling" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">sampling</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">object</span></div><div class="tsd-comment tsd-typography"><p>Present if the client supports sampling from an LLM.</p> </div><div class="tsd-comment tsd-typography"></div></section>
 31 | 
 32 | ### `ContentBlock`
 33 | 
 34 | <div class="tsd-signature"><span class="tsd-kind-type-alias">ContentBlock</span><span class="tsd-signature-symbol">:</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <a href="#textcontent" class="tsd-signature-type tsd-kind-interface">TextContent</a><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <a href="#imagecontent" class="tsd-signature-type tsd-kind-interface">ImageContent</a><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <a href="#audiocontent" class="tsd-signature-type tsd-kind-interface">AudioContent</a><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <a href="#resourcelink" class="tsd-signature-type tsd-kind-interface">ResourceLink</a><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <a href="#embeddedresource" class="tsd-signature-type tsd-kind-interface">EmbeddedResource</a></div>
 35 | 
 36 | ### `Cursor`
 37 | 
 38 | <div class="tsd-signature"><span class="tsd-kind-type-alias">Cursor</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An opaque token used to represent a cursor for pagination.</p> </div><div class="tsd-comment tsd-typography"></div>
 39 | 
 40 | ### `EmbeddedResource`
 41 | 
 42 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">EmbeddedResource</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#embeddedresource-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#embeddedresource-annotations">annotations</a><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">resource</a><span class="tsd-signature-symbol">:</span> <a href="#textresourcecontents" class="tsd-signature-type tsd-kind-interface">TextResourceContents</a> <span class="tsd-signature-symbol">|</span> <a href="#blobresourcecontents" class="tsd-signature-type tsd-kind-interface">BlobResourceContents</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;resource&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The contents of a resource, embedded into a prompt or tool call result.</p> <p>It is up to the client how best to render embedded resources for the benefit
 43 | of the LLM and/or the user.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="embeddedresource-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#embeddedresource-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="embeddedresource-annotations"><code class="tsd-tag">Optional</code><span>annotations</span><a href="#embeddedresource-annotations" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">annotations</span><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a></div><div class="tsd-comment tsd-typography"><p>Optional annotations for the client.</p> </div><div class="tsd-comment tsd-typography"></div></section>
 44 | 
 45 | ### `EmptyResult`
 46 | 
 47 | <div class="tsd-signature"><span class="tsd-kind-type-alias">EmptyResult</span><span class="tsd-signature-symbol">:</span> <a href="#result" class="tsd-signature-type tsd-kind-interface">Result</a></div><div class="tsd-comment tsd-typography"><p>A response that indicates success but carries no data.</p> </div><div class="tsd-comment tsd-typography"></div>
 48 | 
 49 | ### `EnumSchema`
 50 | 
 51 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">EnumSchema</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">enum</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">enumNames</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;string&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div>
 52 | 
 53 | ### `ImageContent`
 54 | 
 55 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ImageContent</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#imagecontent-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#imagecontent-annotations">annotations</a><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#imagecontent-data">data</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#imagecontent-mimetype">mimeType</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;image&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>An image provided to or from an LLM.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="imagecontent-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#imagecontent-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="imagecontent-annotations"><code class="tsd-tag">Optional</code><span>annotations</span><a href="#imagecontent-annotations" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">annotations</span><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a></div><div class="tsd-comment tsd-typography"><p>Optional annotations for the client.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="imagecontent-data"><span>data</span><a href="#imagecontent-data" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">data</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The base64-encoded image data.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="imagecontent-mimetype"><span>mime<wbr/>Type</span><a href="#imagecontent-mimetype" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">mimeType</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The MIME type of the image. Different providers may support different image types.</p> </div><div class="tsd-comment tsd-typography"></div></section>
 56 | 
 57 | ### `Implementation`
 58 | 
 59 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">Implementation</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#implementation-name">name</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#implementation-title">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">version</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Describes the name and version of an MCP implementation, with an optional title for UI representation.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="implementation-name"><span>name</span><a href="#implementation-name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.name</p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="implementation-title"><code class="tsd-tag">Optional</code><span>title</span><a href="#implementation-title" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">title</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
 60 | even by those unfamiliar with domain-specific terminology.</p> <p>If not provided, the name should be used for display (except for Tool,
 61 | where <code>annotations.title</code> should be given precedence over using <code>name</code>,
 62 | if present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.title</p></aside></section>
 63 | 
 64 | ### `JSONRPCError`
 65 | 
 66 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">JSONRPCError</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#jsonrpcerror-error">error</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">code</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">data</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">message</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">id</a><span class="tsd-signature-symbol">:</span> <a href="#requestid" class="tsd-signature-type tsd-kind-type-alias">RequestId</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">jsonrpc</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;2.0&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A response to a request that indicates an error occurred.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="jsonrpcerror-error"><span>error</span><a href="#jsonrpcerror-error" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">error</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">code</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">data</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">message</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">code</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>The error type that occurred.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">data</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">unknown</span></div><div class="tsd-comment tsd-typography"><p>Additional information about the error. The value of this member is defined by the sender (e.g. detailed error information, nested errors etc.).</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">message</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>A short description of the error. The message SHOULD be limited to a concise single sentence.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div></section>
 67 | 
 68 | ### `JSONRPCNotification`
 69 | 
 70 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">JSONRPCNotification</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">jsonrpc</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;2.0&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#jsonrpcnotification-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A notification which does not expect a response.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="jsonrpcnotification-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#jsonrpcnotification-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter-index-signature"><div data-typedoc-h="5"><span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-parameter">key</span>: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Inherited from Notification.params</p></aside></section>
 71 | 
 72 | ### `JSONRPCRequest`
 73 | 
 74 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">JSONRPCRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">id</a><span class="tsd-signature-symbol">:</span> <a href="#requestid" class="tsd-signature-type tsd-kind-type-alias">RequestId</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">jsonrpc</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;2.0&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#jsonrpcrequest-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A request that expects a response.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="jsonrpcrequest-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#jsonrpcrequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter-index-signature"><div data-typedoc-h="5"><span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-parameter">key</span>: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?: </span><a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a></div><div class="tsd-comment tsd-typography"><p>If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></li></ul></div><aside class="tsd-sources"><p>Inherited from Request.params</p></aside></section>
 75 | 
 76 | ### `JSONRPCResponse`
 77 | 
 78 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">JSONRPCResponse</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">id</a><span class="tsd-signature-symbol">:</span> <a href="#requestid" class="tsd-signature-type tsd-kind-type-alias">RequestId</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">jsonrpc</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;2.0&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">result</a><span class="tsd-signature-symbol">:</span> <a href="#result" class="tsd-signature-type tsd-kind-interface">Result</a><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A successful (non-error) response to a request.</p> </div>
 79 | 
 80 | ### `LoggingLevel`
 81 | 
 82 | <div class="tsd-signature"><span class="tsd-kind-type-alias">LoggingLevel</span><span class="tsd-signature-symbol">:</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;debug&quot;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;info&quot;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;notice&quot;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;warning&quot;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;error&quot;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;critical&quot;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;alert&quot;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;emergency&quot;</span></div><div class="tsd-comment tsd-typography"><p>The severity of a log message.</p> <p>These map to syslog message severities, as specified in RFC-5424: <a href="https://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1">https://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1</a></p> </div><div class="tsd-comment tsd-typography"></div>
 83 | 
 84 | ### `ModelHint`
 85 | 
 86 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ModelHint</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#modelhint-name">name</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Hints to use for model selection.</p> <p>Keys not declared here are currently left unspecified by the spec and are up
 87 | to the client to interpret.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="modelhint-name"><code class="tsd-tag">Optional</code><span>name</span><a href="#modelhint-name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>A hint for a model name.</p> <p>The client SHOULD treat this as a substring of a model name; for example:</p> <ul> <li><code>claude-3-5-sonnet</code> should match <code>claude-3-5-sonnet-20241022</code></li> <li><code>sonnet</code> should match <code>claude-3-5-sonnet-20241022</code>, <code>claude-3-sonnet-20240229</code>, etc.</li> <li><code>claude</code> should match any Claude model</li> </ul> <p>The client MAY also map the string to a different provider's model name or a different model family, as long as it fills a similar niche; for example:</p> <ul> <li><code>gemini-1.5-flash</code> could match <code>claude-3-haiku-20240307</code></li> </ul> </div><div class="tsd-comment tsd-typography"></div></section>
 88 | 
 89 | ### `ModelPreferences`
 90 | 
 91 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ModelPreferences</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#modelpreferences-costpriority">costPriority</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#modelpreferences-hints">hints</a><span class="tsd-signature-symbol">?:</span> <a href="#modelhint" class="tsd-signature-type tsd-kind-interface">ModelHint</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#modelpreferences-intelligencepriority">intelligencePriority</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#modelpreferences-speedpriority">speedPriority</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The server's preferences for model selection, requested of the client during sampling.</p> <p>Because LLMs can vary along multiple dimensions, choosing the &quot;best&quot; model is
 92 | rarely straightforward.  Different models excel in different areas—some are
 93 | faster but less capable, others are more capable but more expensive, and so
 94 | on. This interface allows servers to express their priorities across multiple
 95 | dimensions to help clients make an appropriate selection for their use case.</p> <p>These preferences are always advisory. The client MAY ignore them. It is also
 96 | up to the client to decide how to interpret these preferences and how to
 97 | balance them against other considerations.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="modelpreferences-costpriority"><code class="tsd-tag">Optional</code><span>cost<wbr/>Priority</span><a href="#modelpreferences-costpriority" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">costPriority</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>How much to prioritize cost when selecting a model. A value of 0 means cost
 98 | is not important, while a value of 1 means cost is the most important
 99 | factor.</p> </div><div class="tsd-comment tsd-typography"><div class="tsd-tag-TJS-type"><div data-typedoc-h="4" class="tsd-anchor-link" id="tjs-type">TJS-type<a href="#tjs-type" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><p>number</p> </div></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="modelpreferences-hints"><code class="tsd-tag">Optional</code><span>hints</span><a href="#modelpreferences-hints" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">hints</span><span class="tsd-signature-symbol">?:</span> <a href="#modelhint" class="tsd-signature-type tsd-kind-interface">ModelHint</a><span class="tsd-signature-symbol">&#x5B;]</span></div><div class="tsd-comment tsd-typography"><p>Optional hints to use for model selection.</p> <p>If multiple hints are specified, the client MUST evaluate them in order
100 | (such that the first match is taken).</p> <p>The client SHOULD prioritize these hints over the numeric priorities, but
101 | MAY still use the priorities to select from ambiguous matches.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="modelpreferences-intelligencepriority"><code class="tsd-tag">Optional</code><span>intelligence<wbr/>Priority</span><a href="#modelpreferences-intelligencepriority" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">intelligencePriority</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>How much to prioritize intelligence and capabilities when selecting a
102 | model. A value of 0 means intelligence is not important, while a value of 1
103 | means intelligence is the most important factor.</p> </div><div class="tsd-comment tsd-typography"><div class="tsd-tag-TJS-type"><div data-typedoc-h="4" class="tsd-anchor-link" id="tjs-type-1">TJS-type<a href="#tjs-type-1" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><p>number</p> </div></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="modelpreferences-speedpriority"><code class="tsd-tag">Optional</code><span>speed<wbr/>Priority</span><a href="#modelpreferences-speedpriority" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">speedPriority</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>How much to prioritize sampling speed (latency) when selecting a model. A
104 | value of 0 means speed is not important, while a value of 1 means speed is
105 | the most important factor.</p> </div><div class="tsd-comment tsd-typography"><div class="tsd-tag-TJS-type"><div data-typedoc-h="4" class="tsd-anchor-link" id="tjs-type-2">TJS-type<a href="#tjs-type-2" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><p>number</p> </div></div></section>
106 | 
107 | ### `NumberSchema`
108 | 
109 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">NumberSchema</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">maximum</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">minimum</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;number&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;integer&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div>
110 | 
111 | ### `PrimitiveSchemaDefinition`
112 | 
113 | <div class="tsd-signature"><span class="tsd-kind-type-alias">PrimitiveSchemaDefinition</span><span class="tsd-signature-symbol">:</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <a href="#stringschema" class="tsd-signature-type tsd-kind-interface">StringSchema</a><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <a href="#numberschema" class="tsd-signature-type tsd-kind-interface">NumberSchema</a><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <a href="#booleanschema" class="tsd-signature-type tsd-kind-interface">BooleanSchema</a><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">|</span> <a href="#enumschema" class="tsd-signature-type tsd-kind-interface">EnumSchema</a></div><div class="tsd-comment tsd-typography"><p>Restricted schema definitions that only allow primitive types
114 | without nested objects or arrays.</p> </div><div class="tsd-comment tsd-typography"></div>
115 | 
116 | ### `ProgressToken`
117 | 
118 | <div class="tsd-signature"><span class="tsd-kind-type-alias">ProgressToken</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>A progress token, used to associate progress notifications with the original request.</p> </div><div class="tsd-comment tsd-typography"></div>
119 | 
120 | ### `Prompt`
121 | 
122 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">Prompt</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#prompt-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#prompt-arguments">arguments</a><span class="tsd-signature-symbol">?:</span> <a href="#promptargument" class="tsd-signature-type tsd-kind-interface">PromptArgument</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#prompt-description">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#prompt-name">name</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#prompt-title">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A prompt or prompt template that the server offers.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="prompt-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#prompt-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="prompt-arguments"><code class="tsd-tag">Optional</code><span>arguments</span><a href="#prompt-arguments" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">arguments</span><span class="tsd-signature-symbol">?:</span> <a href="#promptargument" class="tsd-signature-type tsd-kind-interface">PromptArgument</a><span class="tsd-signature-symbol">&#x5B;]</span></div><div class="tsd-comment tsd-typography"><p>A list of arguments to use for templating the prompt.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="prompt-description"><code class="tsd-tag">Optional</code><span>description</span><a href="#prompt-description" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">description</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An optional description of what this prompt provides</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="prompt-name"><span>name</span><a href="#prompt-name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.name</p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="prompt-title"><code class="tsd-tag">Optional</code><span>title</span><a href="#prompt-title" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">title</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
123 | even by those unfamiliar with domain-specific terminology.</p> <p>If not provided, the name should be used for display (except for Tool,
124 | where <code>annotations.title</code> should be given precedence over using <code>name</code>,
125 | if present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.title</p></aside></section>
126 | 
127 | ### `PromptArgument`
128 | 
129 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">PromptArgument</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#promptargument-description">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#promptargument-name">name</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#promptargument-required">required</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#promptargument-title">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Describes an argument that a prompt can accept.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="promptargument-description"><code class="tsd-tag">Optional</code><span>description</span><a href="#promptargument-description" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">description</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>A human-readable description of the argument.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="promptargument-name"><span>name</span><a href="#promptargument-name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.name</p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="promptargument-required"><code class="tsd-tag">Optional</code><span>required</span><a href="#promptargument-required" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">required</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>Whether this argument must be provided.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="promptargument-title"><code class="tsd-tag">Optional</code><span>title</span><a href="#promptargument-title" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">title</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
130 | even by those unfamiliar with domain-specific terminology.</p> <p>If not provided, the name should be used for display (except for Tool,
131 | where <code>annotations.title</code> should be given precedence over using <code>name</code>,
132 | if present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.title</p></aside></section>
133 | 
134 | ### `PromptMessage`
135 | 
136 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">PromptMessage</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">content</a><span class="tsd-signature-symbol">:</span> <a href="#contentblock" class="tsd-signature-type tsd-kind-type-alias">ContentBlock</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">role</a><span class="tsd-signature-symbol">:</span> <a href="#role" class="tsd-signature-type tsd-kind-type-alias">Role</a><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Describes a message returned as part of a prompt.</p> <p>This is similar to <code>SamplingMessage</code>, but also supports the embedding of
137 | resources from the MCP server.</p> </div>
138 | 
139 | ### `PromptReference`
140 | 
141 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">PromptReference</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#promptreference-name">name</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#promptreference-title">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;ref/prompt&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Identifies a prompt.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="promptreference-name"><span>name</span><a href="#promptreference-name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.name</p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="promptreference-title"><code class="tsd-tag">Optional</code><span>title</span><a href="#promptreference-title" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">title</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
142 | even by those unfamiliar with domain-specific terminology.</p> <p>If not provided, the name should be used for display (except for Tool,
143 | where <code>annotations.title</code> should be given precedence over using <code>name</code>,
144 | if present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.title</p></aside></section>
145 | 
146 | ### `RequestId`
147 | 
148 | <div class="tsd-signature"><span class="tsd-kind-type-alias">RequestId</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>A uniquely identifying ID for a request in JSON-RPC.</p> </div><div class="tsd-comment tsd-typography"></div>
149 | 
150 | ### `Resource`
151 | 
152 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">Resource</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resource-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resource-annotations">annotations</a><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resource-description">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resource-mimetype">mimeType</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resource-name">name</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resource-size">size</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resource-title">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resource-uri">uri</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A known resource that the server is capable of reading.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resource-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#resource-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resource-annotations"><code class="tsd-tag">Optional</code><span>annotations</span><a href="#resource-annotations" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">annotations</span><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a></div><div class="tsd-comment tsd-typography"><p>Optional annotations for the client.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resource-description"><code class="tsd-tag">Optional</code><span>description</span><a href="#resource-description" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">description</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>A description of what this resource represents.</p> <p>This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a &quot;hint&quot; to the model.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resource-mimetype"><code class="tsd-tag">Optional</code><span>mime<wbr/>Type</span><a href="#resource-mimetype" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">mimeType</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The MIME type of this resource, if known.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resource-name"><span>name</span><a href="#resource-name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.name</p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resource-size"><code class="tsd-tag">Optional</code><span>size</span><a href="#resource-size" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">size</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>The size of the raw resource content, in bytes (i.e., before base64 encoding or any tokenization), if known.</p> <p>This can be used by Hosts to display file sizes and estimate context window usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resource-title"><code class="tsd-tag">Optional</code><span>title</span><a href="#resource-title" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">title</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
153 | even by those unfamiliar with domain-specific terminology.</p> <p>If not provided, the name should be used for display (except for Tool,
154 | where <code>annotations.title</code> should be given precedence over using <code>name</code>,
155 | if present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.title</p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resource-uri"><span>uri</span><a href="#resource-uri" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI of this resource.</p> </div><div class="tsd-comment tsd-typography"></div></section>
156 | 
157 | ### `ResourceContents`
158 | 
159 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ResourceContents</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcecontents-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcecontents-mimetype">mimeType</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcecontents-uri">uri</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The contents of a specific resource or sub-resource.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcecontents-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#resourcecontents-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcecontents-mimetype"><code class="tsd-tag">Optional</code><span>mime<wbr/>Type</span><a href="#resourcecontents-mimetype" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">mimeType</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The MIME type of this resource, if known.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcecontents-uri"><span>uri</span><a href="#resourcecontents-uri" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI of this resource.</p> </div><div class="tsd-comment tsd-typography"></div></section>
160 | 
161 | ### `ResourceLink`
162 | 
163 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ResourceLink</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcelink-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcelink-annotations">annotations</a><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcelink-description">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcelink-mimetype">mimeType</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcelink-name">name</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcelink-size">size</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcelink-title">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;resource&#x5F;link&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcelink-uri">uri</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A resource that the server is capable of reading, included in a prompt or tool call result.</p> <p>Note: resource links returned by tools are not guaranteed to appear in the results of <code>resources/list</code> requests.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcelink-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#resourcelink-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resource">Resource</a>.<a href="#resource-&#x5F;meta">&#x5F;meta</a></p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcelink-annotations"><code class="tsd-tag">Optional</code><span>annotations</span><a href="#resourcelink-annotations" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">annotations</span><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a></div><div class="tsd-comment tsd-typography"><p>Optional annotations for the client.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resource">Resource</a>.<a href="#resource-annotations">annotations</a></p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcelink-description"><code class="tsd-tag">Optional</code><span>description</span><a href="#resourcelink-description" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">description</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>A description of what this resource represents.</p> <p>This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a &quot;hint&quot; to the model.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resource">Resource</a>.<a href="#resource-description">description</a></p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcelink-mimetype"><code class="tsd-tag">Optional</code><span>mime<wbr/>Type</span><a href="#resourcelink-mimetype" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">mimeType</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The MIME type of this resource, if known.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resource">Resource</a>.<a href="#resource-mimetype">mimeType</a></p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcelink-name"><span>name</span><a href="#resourcelink-name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resource">Resource</a>.<a href="#resource-name">name</a></p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcelink-size"><code class="tsd-tag">Optional</code><span>size</span><a href="#resourcelink-size" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">size</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>The size of the raw resource content, in bytes (i.e., before base64 encoding or any tokenization), if known.</p> <p>This can be used by Hosts to display file sizes and estimate context window usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resource">Resource</a>.<a href="#resource-size">size</a></p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcelink-title"><code class="tsd-tag">Optional</code><span>title</span><a href="#resourcelink-title" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">title</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
164 | even by those unfamiliar with domain-specific terminology.</p> <p>If not provided, the name should be used for display (except for Tool,
165 | where <code>annotations.title</code> should be given precedence over using <code>name</code>,
166 | if present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resource">Resource</a>.<a href="#resource-title">title</a></p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcelink-uri"><span>uri</span><a href="#resourcelink-uri" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI of this resource.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resource">Resource</a>.<a href="#resource-uri">uri</a></p></aside></section>
167 | 
168 | ### `ResourceTemplate`
169 | 
170 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ResourceTemplate</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcetemplate-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcetemplate-annotations">annotations</a><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcetemplate-description">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcetemplate-mimetype">mimeType</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcetemplate-name">name</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcetemplate-title">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcetemplate-uritemplate">uriTemplate</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A template description for resources available on the server.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcetemplate-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#resourcetemplate-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcetemplate-annotations"><code class="tsd-tag">Optional</code><span>annotations</span><a href="#resourcetemplate-annotations" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">annotations</span><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a></div><div class="tsd-comment tsd-typography"><p>Optional annotations for the client.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcetemplate-description"><code class="tsd-tag">Optional</code><span>description</span><a href="#resourcetemplate-description" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">description</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>A description of what this template is for.</p> <p>This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a &quot;hint&quot; to the model.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcetemplate-mimetype"><code class="tsd-tag">Optional</code><span>mime<wbr/>Type</span><a href="#resourcetemplate-mimetype" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">mimeType</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcetemplate-name"><span>name</span><a href="#resourcetemplate-name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.name</p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcetemplate-title"><code class="tsd-tag">Optional</code><span>title</span><a href="#resourcetemplate-title" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">title</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
171 | even by those unfamiliar with domain-specific terminology.</p> <p>If not provided, the name should be used for display (except for Tool,
172 | where <code>annotations.title</code> should be given precedence over using <code>name</code>,
173 | if present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.title</p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcetemplate-uritemplate"><span>uri<wbr/>Template</span><a href="#resourcetemplate-uritemplate" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">uriTemplate</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>A URI template (according to RFC 6570) that can be used to construct resource URIs.</p> </div><div class="tsd-comment tsd-typography"></div></section>
174 | 
175 | ### `ResourceTemplateReference`
176 | 
177 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ResourceTemplateReference</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;ref/resource&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcetemplatereference-uri">uri</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A reference to a resource or resource template definition.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcetemplatereference-uri"><span>uri</span><a href="#resourcetemplatereference-uri" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI or URI template of the resource.</p> </div><div class="tsd-comment tsd-typography"></div></section>
178 | 
179 | ### `Result`
180 | 
181 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">Result</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#result-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="result-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#result-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section>
182 | 
183 | ### `Role`
184 | 
185 | <div class="tsd-signature"><span class="tsd-kind-type-alias">Role</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;user&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;assistant&quot;</span></div><div class="tsd-comment tsd-typography"><p>The sender or recipient of messages and data in a conversation.</p> </div><div class="tsd-comment tsd-typography"></div>
186 | 
187 | ### `Root`
188 | 
189 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">Root</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#root-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#root-name">name</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#root-uri">uri</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Represents a root directory or file that the server can operate on.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="root-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#root-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="root-name"><code class="tsd-tag">Optional</code><span>name</span><a href="#root-name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An optional name for the root. This can be used to provide a human-readable
190 | identifier for the root, which may be useful for display purposes or for
191 | referencing the root in other parts of the application.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="root-uri"><span>uri</span><a href="#root-uri" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI identifying the root. This <em>must</em> start with file:// for now.
192 | This restriction may be relaxed in future versions of the protocol to allow
193 | other URI schemes.</p> </div><div class="tsd-comment tsd-typography"></div></section>
194 | 
195 | ### `SamplingMessage`
196 | 
197 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">SamplingMessage</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">content</a><span class="tsd-signature-symbol">:</span> <a href="#textcontent" class="tsd-signature-type tsd-kind-interface">TextContent</a> <span class="tsd-signature-symbol">|</span> <a href="#imagecontent" class="tsd-signature-type tsd-kind-interface">ImageContent</a> <span class="tsd-signature-symbol">|</span> <a href="#audiocontent" class="tsd-signature-type tsd-kind-interface">AudioContent</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">role</a><span class="tsd-signature-symbol">:</span> <a href="#role" class="tsd-signature-type tsd-kind-type-alias">Role</a><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Describes a message issued to or received from an LLM API.</p> </div>
198 | 
199 | ### `ServerCapabilities`
200 | 
201 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ServerCapabilities</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#servercapabilities-completions">completions</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#servercapabilities-experimental">experimental</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">object</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#servercapabilities-logging">logging</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#servercapabilities-prompts">prompts</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#servercapabilities-resources">resources</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">subscribe</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#servercapabilities-tools">tools</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Capabilities that a server may support. Known capabilities are defined here, in this schema, but this is not a closed set: any server can define its own, additional capabilities.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="servercapabilities-completions"><code class="tsd-tag">Optional</code><span>completions</span><a href="#servercapabilities-completions" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">completions</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">object</span></div><div class="tsd-comment tsd-typography"><p>Present if the server supports argument autocompletion suggestions.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="servercapabilities-experimental"><code class="tsd-tag">Optional</code><span>experimental</span><a href="#servercapabilities-experimental" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">experimental</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">object</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Experimental, non-standard capabilities that the server supports.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="servercapabilities-logging"><code class="tsd-tag">Optional</code><span>logging</span><a href="#servercapabilities-logging" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">logging</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">object</span></div><div class="tsd-comment tsd-typography"><p>Present if the server supports sending log messages to the client.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="servercapabilities-prompts"><code class="tsd-tag">Optional</code><span>prompts</span><a href="#servercapabilities-prompts" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">prompts</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Present if the server offers any prompt templates.</p> </div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>Whether this server supports notifications for changes to the prompt list.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="servercapabilities-resources"><code class="tsd-tag">Optional</code><span>resources</span><a href="#servercapabilities-resources" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">resources</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">subscribe</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Present if the server offers any resources to read.</p> </div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>Whether this server supports notifications for changes to the resource list.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">subscribe</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>Whether this server supports subscribing to resource updates.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="servercapabilities-tools"><code class="tsd-tag">Optional</code><span>tools</span><a href="#servercapabilities-tools" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">tools</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Present if the server offers any tools to call.</p> </div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">listChanged</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>Whether this server supports notifications for changes to the tool list.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><div class="tsd-comment tsd-typography"></div></section>
202 | 
203 | ### `StringSchema`
204 | 
205 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">StringSchema</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">format</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">&quot;uri&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;email&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;date&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;date-time&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">maxLength</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">minLength</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;string&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div>
206 | 
207 | ### `TextContent`
208 | 
209 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">TextContent</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#textcontent-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#textcontent-annotations">annotations</a><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#textcontent-text">text</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">type</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;text&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Text provided to or from an LLM.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="textcontent-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#textcontent-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="textcontent-annotations"><code class="tsd-tag">Optional</code><span>annotations</span><a href="#textcontent-annotations" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">annotations</span><span class="tsd-signature-symbol">?:</span> <a href="#annotations" class="tsd-signature-type tsd-kind-interface">Annotations</a></div><div class="tsd-comment tsd-typography"><p>Optional annotations for the client.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="textcontent-text"><span>text</span><a href="#textcontent-text" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">text</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The text content of the message.</p> </div><div class="tsd-comment tsd-typography"></div></section>
210 | 
211 | ### `TextResourceContents`
212 | 
213 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">TextResourceContents</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#textresourcecontents-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#textresourcecontents-mimetype">mimeType</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#textresourcecontents-text">text</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#textresourcecontents-uri">uri</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The contents of a specific resource or sub-resource.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="textresourcecontents-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#textresourcecontents-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resourcecontents">ResourceContents</a>.<a href="#resourcecontents-&#x5F;meta">&#x5F;meta</a></p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="textresourcecontents-mimetype"><code class="tsd-tag">Optional</code><span>mime<wbr/>Type</span><a href="#textresourcecontents-mimetype" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">mimeType</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The MIME type of this resource, if known.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resourcecontents">ResourceContents</a>.<a href="#resourcecontents-mimetype">mimeType</a></p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="textresourcecontents-text"><span>text</span><a href="#textresourcecontents-text" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">text</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The text of the item. This must only be set if the item can actually be represented as text (not binary data).</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="textresourcecontents-uri"><span>uri</span><a href="#textresourcecontents-uri" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI of this resource.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#resourcecontents">ResourceContents</a>.<a href="#resourcecontents-uri">uri</a></p></aside></section>
214 | 
215 | ### `Tool`
216 | 
217 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">Tool</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#tool-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#tool-annotations">annotations</a><span class="tsd-signature-symbol">?:</span> <a href="#toolannotations" class="tsd-signature-type tsd-kind-interface">ToolAnnotations</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#tool-description">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#tool-inputschema">inputSchema</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">properties</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">object</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">required</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">type</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;object&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#tool-name">name</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#tool-outputschema">outputSchema</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">properties</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">object</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">required</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">type</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;object&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#tool-title">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Definition for a tool the client can call.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="tool-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#tool-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="tool-annotations"><code class="tsd-tag">Optional</code><span>annotations</span><a href="#tool-annotations" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">annotations</span><span class="tsd-signature-symbol">?:</span> <a href="#toolannotations" class="tsd-signature-type tsd-kind-interface">ToolAnnotations</a></div><div class="tsd-comment tsd-typography"><p>Optional additional tool information.</p> <p>Display name precedence order is: title, annotations.title, then name.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="tool-description"><code class="tsd-tag">Optional</code><span>description</span><a href="#tool-description" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">description</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>A human-readable description of the tool.</p> <p>This can be used by clients to improve the LLM's understanding of available tools. It can be thought of like a &quot;hint&quot; to the model.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="tool-inputschema"><span>input<wbr/>Schema</span><a href="#tool-inputschema" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">inputSchema</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">properties</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">object</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">required</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">type</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;object&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A JSON Schema object defining the expected parameters for the tool.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="tool-name"><span>name</span><a href="#tool-name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.name</p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="tool-outputschema"><code class="tsd-tag">Optional</code><span>output<wbr/>Schema</span><a href="#tool-outputschema" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">outputSchema</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">properties</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">object</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">required</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">type</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;object&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>An optional JSON Schema object defining the structure of the tool's output returned in
218 | the structuredContent field of a CallToolResult.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="tool-title"><code class="tsd-tag">Optional</code><span>title</span><a href="#tool-title" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">title</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
219 | even by those unfamiliar with domain-specific terminology.</p> <p>If not provided, the name should be used for display (except for Tool,
220 | where <code>annotations.title</code> should be given precedence over using <code>name</code>,
221 | if present).</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from BaseMetadata.title</p></aside></section>
222 | 
223 | ### `ToolAnnotations`
224 | 
225 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ToolAnnotations</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#toolannotations-destructivehint">destructiveHint</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#toolannotations-idempotenthint">idempotentHint</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#toolannotations-openworldhint">openWorldHint</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#toolannotations-readonlyhint">readOnlyHint</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#toolannotations-title">title</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Additional properties describing a Tool to clients.</p> <p>NOTE: all properties in ToolAnnotations are <strong>hints</strong>.
226 | They are not guaranteed to provide a faithful description of
227 | tool behavior (including descriptive properties like <code>title</code>).</p> <p>Clients should never make tool use decisions based on ToolAnnotations
228 | received from untrusted servers.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="toolannotations-destructivehint"><code class="tsd-tag">Optional</code><span>destructive<wbr/>Hint</span><a href="#toolannotations-destructivehint" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">destructiveHint</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>If true, the tool may perform destructive updates to its environment.
229 | If false, the tool performs only additive updates.</p> <p>(This property is meaningful only when <code>readOnlyHint == false</code>)</p> <p>Default: true</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="toolannotations-idempotenthint"><code class="tsd-tag">Optional</code><span>idempotent<wbr/>Hint</span><a href="#toolannotations-idempotenthint" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">idempotentHint</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>If true, calling the tool repeatedly with the same arguments
230 | will have no additional effect on the its environment.</p> <p>(This property is meaningful only when <code>readOnlyHint == false</code>)</p> <p>Default: false</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="toolannotations-openworldhint"><code class="tsd-tag">Optional</code><span>open<wbr/>World<wbr/>Hint</span><a href="#toolannotations-openworldhint" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">openWorldHint</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>If true, this tool may interact with an &quot;open world&quot; of external
231 | entities. If false, the tool's domain of interaction is closed.
232 | For example, the world of a web search tool is open, whereas that
233 | of a memory tool is not.</p> <p>Default: true</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="toolannotations-readonlyhint"><code class="tsd-tag">Optional</code><span>read<wbr/>Only<wbr/>Hint</span><a href="#toolannotations-readonlyhint" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">readOnlyHint</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>If true, the tool does not modify its environment.</p> <p>Default: false</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="toolannotations-title"><code class="tsd-tag">Optional</code><span>title</span><a href="#toolannotations-title" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">title</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>A human-readable title for the tool.</p> </div><div class="tsd-comment tsd-typography"></div></section>
234 | 
235 | ## `completion/complete`
236 | 
237 | ### `CompleteRequest`
238 | 
239 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">CompleteRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;completion/complete&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#completerequest-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">argument</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">value</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">context</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">arguments</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">ref</span><span class="tsd-signature-symbol">:</span> <a href="#promptreference" class="tsd-signature-type tsd-kind-interface">PromptReference</a> <span class="tsd-signature-symbol">|</span> <a href="#resourcetemplatereference" class="tsd-signature-type tsd-kind-interface">ResourceTemplateReference</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A request from the client to the server, to ask for completion options.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="completerequest-params"><span>params</span><a href="#completerequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">argument</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">value</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">context</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">arguments</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">ref</span><span class="tsd-signature-symbol">:</span> <a href="#promptreference" class="tsd-signature-type tsd-kind-interface">PromptReference</a> <span class="tsd-signature-symbol">|</span> <a href="#resourcetemplatereference" class="tsd-signature-type tsd-kind-interface">ResourceTemplateReference</a><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">argument</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">value</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The argument's information</p> </div><div class="tsd-comment tsd-typography"></div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The name of the argument</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">value</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The value of the argument to use for completion matching.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">context</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">arguments</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Additional, optional context for completions</p> </div><div class="tsd-comment tsd-typography"></div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">arguments</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Previously-resolved variables in a URI template or prompt.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">ref</span><span class="tsd-signature-symbol">: </span><a href="#promptreference" class="tsd-signature-type tsd-kind-interface">PromptReference</a> <span class="tsd-signature-symbol">|</span> <a href="#resourcetemplatereference" class="tsd-signature-type tsd-kind-interface">ResourceTemplateReference</a></div></li></ul></div><aside class="tsd-sources"><p>Overrides Request.params</p></aside></section>
240 | 
241 | ### `CompleteResult`
242 | 
243 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">CompleteResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#completeresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#completeresult-completion">completion</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">hasMore</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">total</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">values</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The server's response to a completion/complete request</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="completeresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#completeresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#result">Result</a>.<a href="#result-&#x5F;meta">&#x5F;meta</a></p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="completeresult-completion"><span>completion</span><a href="#completeresult-completion" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">completion</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">hasMore</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">total</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">values</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">hasMore</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">total</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>The total number of completion options available. This can exceed the number of values actually sent in the response.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">values</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span></div><div class="tsd-comment tsd-typography"><p>An array of completion values. Must not exceed 100 items.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div></section>
244 | 
245 | ## `elicitation/create`
246 | 
247 | ### `ElicitRequest`
248 | 
249 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ElicitRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;elicitation/create&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#elicitrequest-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">message</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">requestedSchema</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">properties</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <a href="#primitiveschemadefinition" class="tsd-signature-type tsd-kind-type-alias">PrimitiveSchemaDefinition</a> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">required</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">type</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;object&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A request from the server to elicit additional information from the user via the client.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="elicitrequest-params"><span>params</span><a href="#elicitrequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">message</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">requestedSchema</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">properties</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <a href="#primitiveschemadefinition" class="tsd-signature-type tsd-kind-type-alias">PrimitiveSchemaDefinition</a> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">required</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">type</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;object&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">message</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The message to present to the user.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">requestedSchema</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">properties</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <a href="#primitiveschemadefinition" class="tsd-signature-type tsd-kind-type-alias">PrimitiveSchemaDefinition</a> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">required</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">type</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;object&quot;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A restricted subset of JSON Schema.
250 | Only top-level properties are allowed, without nesting.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Overrides Request.params</p></aside></section>
251 | 
252 | ### `ElicitResult`
253 | 
254 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ElicitResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#elicitresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#elicitresult-action">action</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;accept&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;decline&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;cancel&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#elicitresult-content">content</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">number</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">boolean</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The client's response to an elicitation request.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="elicitresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#elicitresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#result">Result</a>.<a href="#result-&#x5F;meta">&#x5F;meta</a></p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="elicitresult-action"><span>action</span><a href="#elicitresult-action" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">action</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;accept&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;decline&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;cancel&quot;</span></div><div class="tsd-comment tsd-typography"><p>The user action in response to the elicitation.</p> <ul> <li>&quot;accept&quot;: User submitted the form/confirmed the action</li> <li>&quot;decline&quot;: User explicitly decline the action</li> <li>&quot;cancel&quot;: User dismissed without making an explicit choice</li> </ul> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="elicitresult-content"><code class="tsd-tag">Optional</code><span>content</span><a href="#elicitresult-content" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">content</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">number</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">boolean</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The submitted form data, only present when action is &quot;accept&quot;.
255 | Contains values matching the requested schema.</p> </div><div class="tsd-comment tsd-typography"></div></section>
256 | 
257 | ## `initialize`
258 | 
259 | ### `InitializeRequest`
260 | 
261 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">InitializeRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;initialize&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#initializerequest-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">capabilities</span><span class="tsd-signature-symbol">:</span> <a href="#clientcapabilities" class="tsd-signature-type tsd-kind-interface">ClientCapabilities</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">clientInfo</span><span class="tsd-signature-symbol">:</span> <a href="#implementation" class="tsd-signature-type tsd-kind-interface">Implementation</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">protocolVersion</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>This request is sent from the client to the server when it first connects, asking it to begin initialization.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="initializerequest-params"><span>params</span><a href="#initializerequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">capabilities</span><span class="tsd-signature-symbol">:</span> <a href="#clientcapabilities" class="tsd-signature-type tsd-kind-interface">ClientCapabilities</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">clientInfo</span><span class="tsd-signature-symbol">:</span> <a href="#implementation" class="tsd-signature-type tsd-kind-interface">Implementation</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">protocolVersion</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">capabilities</span><span class="tsd-signature-symbol">: </span><a href="#clientcapabilities" class="tsd-signature-type tsd-kind-interface">ClientCapabilities</a></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">clientInfo</span><span class="tsd-signature-symbol">: </span><a href="#implementation" class="tsd-signature-type tsd-kind-interface">Implementation</a></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">protocolVersion</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Overrides Request.params</p></aside></section>
262 | 
263 | ### `InitializeResult`
264 | 
265 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">InitializeResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#initializeresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">capabilities</a><span class="tsd-signature-symbol">:</span> <a href="#servercapabilities" class="tsd-signature-type tsd-kind-interface">ServerCapabilities</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#initializeresult-instructions">instructions</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#initializeresult-protocolversion">protocolVersion</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">serverInfo</a><span class="tsd-signature-symbol">:</span> <a href="#implementation" class="tsd-signature-type tsd-kind-interface">Implementation</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>After receiving an initialize request from the client, the server sends this response.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="initializeresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#initializeresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#result">Result</a>.<a href="#result-&#x5F;meta">&#x5F;meta</a></p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="initializeresult-instructions"><code class="tsd-tag">Optional</code><span>instructions</span><a href="#initializeresult-instructions" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">instructions</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Instructions describing how to use the server and its features.</p> <p>This can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a &quot;hint&quot; to the model. For example, this information MAY be added to the system prompt.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="initializeresult-protocolversion"><span>protocol<wbr/>Version</span><a href="#initializeresult-protocolversion" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">protocolVersion</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.</p> </div><div class="tsd-comment tsd-typography"></div></section>
266 | 
267 | ## `logging/setLevel`
268 | 
269 | ### `SetLevelRequest`
270 | 
271 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">SetLevelRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;logging/setLevel&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#setlevelrequest-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">level</span><span class="tsd-signature-symbol">:</span> <a href="#logginglevel" class="tsd-signature-type tsd-kind-type-alias">LoggingLevel</a> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A request from the client to the server, to enable or adjust logging.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="setlevelrequest-params"><span>params</span><a href="#setlevelrequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">level</span><span class="tsd-signature-symbol">:</span> <a href="#logginglevel" class="tsd-signature-type tsd-kind-type-alias">LoggingLevel</a> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">level</span><span class="tsd-signature-symbol">: </span><a href="#logginglevel" class="tsd-signature-type tsd-kind-type-alias">LoggingLevel</a></div><div class="tsd-comment tsd-typography"><p>The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/message.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Overrides Request.params</p></aside></section>
272 | 
273 | ## `notifications/cancelled`
274 | 
275 | ### `CancelledNotification`
276 | 
277 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">CancelledNotification</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;notifications/cancelled&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#cancellednotification-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">reason</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">requestId</span><span class="tsd-signature-symbol">:</span> <a href="#requestid" class="tsd-signature-type tsd-kind-type-alias">RequestId</a> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>This notification can be sent by either side to indicate that it is cancelling a previously-issued request.</p> <p>The request SHOULD still be in-flight, but due to communication latency, it is always possible that this notification MAY arrive after the request has already finished.</p> <p>This notification indicates that the result will be unused, so any associated processing SHOULD cease.</p> <p>A client MUST NOT attempt to cancel its <code>initialize</code> request.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="cancellednotification-params"><span>params</span><a href="#cancellednotification-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">reason</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">requestId</span><span class="tsd-signature-symbol">:</span> <a href="#requestid" class="tsd-signature-type tsd-kind-type-alias">RequestId</a> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">reason</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">requestId</span><span class="tsd-signature-symbol">: </span><a href="#requestid" class="tsd-signature-type tsd-kind-type-alias">RequestId</a></div><div class="tsd-comment tsd-typography"><p>The ID of the request to cancel.</p> <p>This MUST correspond to the ID of a request previously issued in the same direction.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Overrides Notification.params</p></aside></section>
278 | 
279 | ## `notifications/initialized`
280 | 
281 | ### `InitializedNotification`
282 | 
283 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">InitializedNotification</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;notifications/initialized&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#initializednotification-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>This notification is sent from the client to the server after initialization has finished.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="initializednotification-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#initializednotification-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter-index-signature"><div data-typedoc-h="5"><span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-parameter">key</span>: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Inherited from Notification.params</p></aside></section>
284 | 
285 | ## `notifications/message`
286 | 
287 | ### `LoggingMessageNotification`
288 | 
289 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">LoggingMessageNotification</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;notifications/message&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#loggingmessagenotification-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">data</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">level</span><span class="tsd-signature-symbol">:</span> <a href="#logginglevel" class="tsd-signature-type tsd-kind-type-alias">LoggingLevel</a><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">logger</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Notification of a log message passed from server to client. If no logging/setLevel request has been sent from the client, the server MAY decide which messages to send automatically.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="loggingmessagenotification-params"><span>params</span><a href="#loggingmessagenotification-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">data</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">level</span><span class="tsd-signature-symbol">:</span> <a href="#logginglevel" class="tsd-signature-type tsd-kind-type-alias">LoggingLevel</a><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">logger</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">data</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">unknown</span></div><div class="tsd-comment tsd-typography"><p>The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">level</span><span class="tsd-signature-symbol">: </span><a href="#logginglevel" class="tsd-signature-type tsd-kind-type-alias">LoggingLevel</a></div><div class="tsd-comment tsd-typography"><p>The severity of this log message.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">logger</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An optional name of the logger issuing this message.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Overrides Notification.params</p></aside></section>
290 | 
291 | ## `notifications/progress`
292 | 
293 | ### `ProgressNotification`
294 | 
295 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ProgressNotification</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;notifications/progress&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#progressnotification-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">message</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">progress</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">total</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>An out-of-band notification used to inform the receiver of a progress update for a long-running request.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="progressnotification-params"><span>params</span><a href="#progressnotification-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">message</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">progress</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">total</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">message</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An optional message describing the current progress.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">progress</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>The progress thus far. This should increase every time progress is made, even if the total is unknown.</p> </div><div class="tsd-comment tsd-typography"><div class="tsd-tag-TJS-type"><div data-typedoc-h="4" class="tsd-anchor-link" id="tjs-type">TJS-type<a href="#tjs-type" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><p>number</p> </div></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">: </span><a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a></div><div class="tsd-comment tsd-typography"><p>The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">total</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>Total number of items to process (or total progress required), if known.</p> </div><div class="tsd-comment tsd-typography"><div class="tsd-tag-TJS-type"><div data-typedoc-h="4" class="tsd-anchor-link" id="tjs-type-1">TJS-type<a href="#tjs-type-1" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><p>number</p> </div></div></li></ul></div><aside class="tsd-sources"><p>Overrides Notification.params</p></aside></section>
296 | 
297 | ## `notifications/prompts/list_changed`
298 | 
299 | ### `PromptListChangedNotification`
300 | 
301 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">PromptListChangedNotification</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;notifications/prompts/list&#x5F;changed&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#promptlistchangednotification-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>An optional notification from the server to the client, informing it that the list of prompts it offers has changed. This may be issued by servers without any previous subscription from the client.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="promptlistchangednotification-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#promptlistchangednotification-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter-index-signature"><div data-typedoc-h="5"><span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-parameter">key</span>: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Inherited from Notification.params</p></aside></section>
302 | 
303 | ## `notifications/resources/list_changed`
304 | 
305 | ### `ResourceListChangedNotification`
306 | 
307 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ResourceListChangedNotification</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;notifications/resources/list&#x5F;changed&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourcelistchangednotification-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>An optional notification from the server to the client, informing it that the list of resources it can read from has changed. This may be issued by servers without any previous subscription from the client.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourcelistchangednotification-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#resourcelistchangednotification-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter-index-signature"><div data-typedoc-h="5"><span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-parameter">key</span>: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Inherited from Notification.params</p></aside></section>
308 | 
309 | ## `notifications/resources/updated`
310 | 
311 | ### `ResourceUpdatedNotification`
312 | 
313 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ResourceUpdatedNotification</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;notifications/resources/updated&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#resourceupdatednotification-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A notification from the server to the client, informing it that a resource has changed and may need to be read again. This should only be sent if the client previously sent a resources/subscribe request.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="resourceupdatednotification-params"><span>params</span><a href="#resourceupdatednotification-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Overrides Notification.params</p></aside></section>
314 | 
315 | ## `notifications/roots/list_changed`
316 | 
317 | ### `RootsListChangedNotification`
318 | 
319 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">RootsListChangedNotification</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;notifications/roots/list&#x5F;changed&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#rootslistchangednotification-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A notification from the client to the server, informing it that the list of roots has changed.
320 | This notification should be sent whenever the client adds, removes, or modifies any root.
321 | The server should then request an updated list of roots using the ListRootsRequest.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="rootslistchangednotification-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#rootslistchangednotification-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter-index-signature"><div data-typedoc-h="5"><span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-parameter">key</span>: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Inherited from Notification.params</p></aside></section>
322 | 
323 | ## `notifications/tools/list_changed`
324 | 
325 | ### `ToolListChangedNotification`
326 | 
327 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ToolListChangedNotification</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;notifications/tools/list&#x5F;changed&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#toollistchangednotification-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>An optional notification from the server to the client, informing it that the list of tools it offers has changed. This may be issued by servers without any previous subscription from the client.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="toollistchangednotification-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#toollistchangednotification-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter-index-signature"><div data-typedoc-h="5"><span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-parameter">key</span>: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Inherited from Notification.params</p></aside></section>
328 | 
329 | ## `ping`
330 | 
331 | ### `PingRequest`
332 | 
333 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">PingRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;ping&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#pingrequest-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A ping, issued by either the server or the client, to check that the other party is still alive. The receiver must promptly respond, or else may be disconnected.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="pingrequest-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#pingrequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter-index-signature"><div data-typedoc-h="5"><span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-parameter">key</span>: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?: </span><a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a></div><div class="tsd-comment tsd-typography"><p>If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></li></ul></div><aside class="tsd-sources"><p>Inherited from Request.params</p></aside></section>
334 | 
335 | ## `prompts/get`
336 | 
337 | ### `GetPromptRequest`
338 | 
339 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">GetPromptRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;prompts/get&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#getpromptrequest-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">arguments</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Used by the client to get a prompt provided by the server.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="getpromptrequest-params"><span>params</span><a href="#getpromptrequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">arguments</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">arguments</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Arguments to use for templating the prompt.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The name of the prompt or prompt template.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Overrides Request.params</p></aside></section>
340 | 
341 | ### `GetPromptResult`
342 | 
343 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">GetPromptResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#getpromptresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#getpromptresult-description">description</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">messages</a><span class="tsd-signature-symbol">:</span> <a href="#promptmessage" class="tsd-signature-type tsd-kind-interface">PromptMessage</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The server's response to a prompts/get request from the client.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="getpromptresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#getpromptresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#result">Result</a>.<a href="#result-&#x5F;meta">&#x5F;meta</a></p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="getpromptresult-description"><code class="tsd-tag">Optional</code><span>description</span><a href="#getpromptresult-description" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">description</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An optional description for the prompt.</p> </div><div class="tsd-comment tsd-typography"></div></section>
344 | 
345 | ## `prompts/list`
346 | 
347 | ### `ListPromptsRequest`
348 | 
349 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ListPromptsRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;prompts/list&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listpromptsrequest-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Sent from the client to request a list of prompts and prompt templates the server has.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listpromptsrequest-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#listpromptsrequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An opaque token representing the current pagination position.
350 | If provided, the server should return results starting after this cursor.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Inherited from PaginatedRequest.params</p></aside></section>
351 | 
352 | ### `ListPromptsResult`
353 | 
354 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ListPromptsResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listpromptsresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listpromptsresult-nextcursor">nextCursor</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">prompts</a><span class="tsd-signature-symbol">:</span> <a href="#prompt" class="tsd-signature-type tsd-kind-interface">Prompt</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The server's response to a prompts/list request from the client.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listpromptsresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#listpromptsresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from PaginatedResult.&#x5F;meta</p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listpromptsresult-nextcursor"><code class="tsd-tag">Optional</code><span>next<wbr/>Cursor</span><a href="#listpromptsresult-nextcursor" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">nextCursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An opaque token representing the pagination position after the last returned result.
355 | If present, there may be more results available.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from PaginatedResult.nextCursor</p></aside></section>
356 | 
357 | ## `resources/list`
358 | 
359 | ### `ListResourcesRequest`
360 | 
361 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ListResourcesRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;resources/list&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listresourcesrequest-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Sent from the client to request a list of resources the server has.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listresourcesrequest-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#listresourcesrequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An opaque token representing the current pagination position.
362 | If provided, the server should return results starting after this cursor.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Inherited from PaginatedRequest.params</p></aside></section>
363 | 
364 | ### `ListResourcesResult`
365 | 
366 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ListResourcesResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listresourcesresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listresourcesresult-nextcursor">nextCursor</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">resources</a><span class="tsd-signature-symbol">:</span> <a href="#resource" class="tsd-signature-type tsd-kind-interface">Resource</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The server's response to a resources/list request from the client.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listresourcesresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#listresourcesresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from PaginatedResult.&#x5F;meta</p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listresourcesresult-nextcursor"><code class="tsd-tag">Optional</code><span>next<wbr/>Cursor</span><a href="#listresourcesresult-nextcursor" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">nextCursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An opaque token representing the pagination position after the last returned result.
367 | If present, there may be more results available.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from PaginatedResult.nextCursor</p></aside></section>
368 | 
369 | ## `resources/read`
370 | 
371 | ### `ReadResourceRequest`
372 | 
373 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ReadResourceRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;resources/read&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#readresourcerequest-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Sent from the client to the server, to read a specific resource URI.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="readresourcerequest-params"><span>params</span><a href="#readresourcerequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Overrides Request.params</p></aside></section>
374 | 
375 | ### `ReadResourceResult`
376 | 
377 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ReadResourceResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#readresourceresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">contents</a><span class="tsd-signature-symbol">:</span> (<a href="#textresourcecontents" class="tsd-signature-type tsd-kind-interface">TextResourceContents</a> <span class="tsd-signature-symbol">|</span> <a href="#blobresourcecontents" class="tsd-signature-type tsd-kind-interface">BlobResourceContents</a>)<span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The server's response to a resources/read request from the client.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="readresourceresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#readresourceresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#result">Result</a>.<a href="#result-&#x5F;meta">&#x5F;meta</a></p></aside></section>
378 | 
379 | ## `resources/subscribe`
380 | 
381 | ### `SubscribeRequest`
382 | 
383 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">SubscribeRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;resources/subscribe&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#subscriberequest-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="subscriberequest-params"><span>params</span><a href="#subscriberequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Overrides Request.params</p></aside></section>
384 | 
385 | ## `resources/templates/list`
386 | 
387 | ### `ListResourceTemplatesRequest`
388 | 
389 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ListResourceTemplatesRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;resources/templates/list&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listresourcetemplatesrequest-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Sent from the client to request a list of resource templates the server has.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listresourcetemplatesrequest-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#listresourcetemplatesrequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An opaque token representing the current pagination position.
390 | If provided, the server should return results starting after this cursor.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Inherited from PaginatedRequest.params</p></aside></section>
391 | 
392 | ### `ListResourceTemplatesResult`
393 | 
394 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ListResourceTemplatesResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listresourcetemplatesresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listresourcetemplatesresult-nextcursor">nextCursor</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">resourceTemplates</a><span class="tsd-signature-symbol">:</span> <a href="#resourcetemplate" class="tsd-signature-type tsd-kind-interface">ResourceTemplate</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The server's response to a resources/templates/list request from the client.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listresourcetemplatesresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#listresourcetemplatesresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from PaginatedResult.&#x5F;meta</p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listresourcetemplatesresult-nextcursor"><code class="tsd-tag">Optional</code><span>next<wbr/>Cursor</span><a href="#listresourcetemplatesresult-nextcursor" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">nextCursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An opaque token representing the pagination position after the last returned result.
395 | If present, there may be more results available.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from PaginatedResult.nextCursor</p></aside></section>
396 | 
397 | ## `resources/unsubscribe`
398 | 
399 | ### `UnsubscribeRequest`
400 | 
401 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">UnsubscribeRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;resources/unsubscribe&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#unsubscriberequest-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="unsubscriberequest-params"><span>params</span><a href="#unsubscriberequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The URI of the resource to unsubscribe from.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Overrides Request.params</p></aside></section>
402 | 
403 | ## `roots/list`
404 | 
405 | ### `ListRootsRequest`
406 | 
407 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ListRootsRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;roots/list&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listrootsrequest-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Sent from the server to request a list of root URIs from the client. Roots allow
408 | servers to ask for specific directories or files to operate on. A common example
409 | for roots is providing a set of repositories or directories a server should operate
410 | on.</p> <p>This request is typically used when the server needs to understand the file system
411 | structure or access specific locations that the client has permission to read from.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listrootsrequest-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#listrootsrequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter-index-signature"><div data-typedoc-h="5"><span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-parameter">key</span>: <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?:</span> <a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a><span class="tsd-signature-symbol">;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">progressToken</span><span class="tsd-signature-symbol">?: </span><a href="#progresstoken" class="tsd-signature-type tsd-kind-type-alias">ProgressToken</a></div><div class="tsd-comment tsd-typography"><p>If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></li></ul></div><aside class="tsd-sources"><p>Inherited from Request.params</p></aside></section>
412 | 
413 | ### `ListRootsResult`
414 | 
415 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ListRootsResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listrootsresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">roots</a><span class="tsd-signature-symbol">:</span> <a href="#root" class="tsd-signature-type tsd-kind-interface">Root</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The client's response to a roots/list request from the server.
416 | This result contains an array of Root objects, each representing a root directory
417 | or file that the server can operate on.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listrootsresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#listrootsresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#result">Result</a>.<a href="#result-&#x5F;meta">&#x5F;meta</a></p></aside></section>
418 | 
419 | ## `sampling/createMessage`
420 | 
421 | ### `CreateMessageRequest`
422 | 
423 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">CreateMessageRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;sampling/createMessage&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#createmessagerequest-params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">includeContext</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">&quot;none&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;thisServer&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;allServers&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">maxTokens</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">messages</span><span class="tsd-signature-symbol">:</span> <a href="#samplingmessage" class="tsd-signature-type tsd-kind-interface">SamplingMessage</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">metadata</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">modelPreferences</span><span class="tsd-signature-symbol">?:</span> <a href="#modelpreferences" class="tsd-signature-type tsd-kind-interface">ModelPreferences</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">stopSequences</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">systemPrompt</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tsd-kind-property">temperature</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>A request from the server to sample an LLM via the client. The client has full discretion over which model to select. The client should also inform the user before beginning sampling, to allow them to inspect the request (human in the loop) and decide whether to approve it.</p> </div><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="createmessagerequest-params"><span>params</span><a href="#createmessagerequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">includeContext</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">&quot;none&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;thisServer&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;allServers&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">maxTokens</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">messages</span><span class="tsd-signature-symbol">:</span> <a href="#samplingmessage" class="tsd-signature-type tsd-kind-interface">SamplingMessage</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">metadata</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">object</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">modelPreferences</span><span class="tsd-signature-symbol">?:</span> <a href="#modelpreferences" class="tsd-signature-type tsd-kind-interface">ModelPreferences</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">stopSequences</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">systemPrompt</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-kind-property">temperature</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">includeContext</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">&quot;none&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;thisServer&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;allServers&quot;</span></div><div class="tsd-comment tsd-typography"><p>A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">maxTokens</span><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><p>The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><span class="tsd-kind-property">messages</span><span class="tsd-signature-symbol">: </span><a href="#samplingmessage" class="tsd-signature-type tsd-kind-interface">SamplingMessage</a><span class="tsd-signature-symbol">&#x5B;]</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">metadata</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">object</span></div><div class="tsd-comment tsd-typography"><p>Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">modelPreferences</span><span class="tsd-signature-symbol">?: </span><a href="#modelpreferences" class="tsd-signature-type tsd-kind-interface">ModelPreferences</a></div><div class="tsd-comment tsd-typography"><p>The server's preferences for which model to select. The client MAY ignore these preferences.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">stopSequences</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">&#x5B;]</span></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">systemPrompt</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.</p> </div><div class="tsd-comment tsd-typography"></div></li><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">temperature</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">number</span></div><div class="tsd-comment tsd-typography"><div class="tsd-tag-TJS-type"><div data-typedoc-h="4" class="tsd-anchor-link" id="tjs-type">TJS-type<a href="#tjs-type" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><p>number</p> </div></div></li></ul></div><aside class="tsd-sources"><p>Overrides Request.params</p></aside></section>
424 | 
425 | ### `CreateMessageResult`
426 | 
427 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">CreateMessageResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#createmessageresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">content</a><span class="tsd-signature-symbol">:</span> <a href="#textcontent" class="tsd-signature-type tsd-kind-interface">TextContent</a> <span class="tsd-signature-symbol">|</span> <a href="#imagecontent" class="tsd-signature-type tsd-kind-interface">ImageContent</a> <span class="tsd-signature-symbol">|</span> <a href="#audiocontent" class="tsd-signature-type tsd-kind-interface">AudioContent</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#createmessageresult-model">model</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">role</a><span class="tsd-signature-symbol">:</span> <a href="#role" class="tsd-signature-type tsd-kind-type-alias">Role</a><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#createmessageresult-stopreason">stopReason</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The client's response to a sampling/create&#x5F;message request from the server. The client should inform the user before returning the sampled message, to allow them to inspect the response (human in the loop) and decide whether to allow the server to see it.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="createmessageresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#createmessageresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#result">Result</a>.<a href="#result-&#x5F;meta">&#x5F;meta</a></p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="createmessageresult-model"><span>model</span><a href="#createmessageresult-model" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">model</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The name of the model that generated the message.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="createmessageresult-stopreason"><code class="tsd-tag">Optional</code><span>stop<wbr/>Reason</span><a href="#createmessageresult-stopreason" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">stopReason</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>The reason why sampling stopped, if known.</p> </div><div class="tsd-comment tsd-typography"></div></section>
428 | 
429 | ## `tools/call`
430 | 
431 | ### `CallToolRequest`
432 | 
433 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">CallToolRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;tools/call&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">arguments</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Used by the client to invoke a tool provided by the server.</p> </div>
434 | 
435 | ### `CallToolResult`
436 | 
437 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">CallToolResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#calltoolresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#calltoolresult-content">content</a><span class="tsd-signature-symbol">:</span> <a href="#contentblock" class="tsd-signature-type tsd-kind-type-alias">ContentBlock</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#calltoolresult-iserror">isError</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#calltoolresult-structuredcontent">structuredContent</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The server's response to a tool call.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="calltoolresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#calltoolresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from <a href="#result">Result</a>.<a href="#result-&#x5F;meta">&#x5F;meta</a></p></aside></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="calltoolresult-content"><span>content</span><a href="#calltoolresult-content" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">content</span><span class="tsd-signature-symbol">:</span> <a href="#contentblock" class="tsd-signature-type tsd-kind-type-alias">ContentBlock</a><span class="tsd-signature-symbol">&#x5B;]</span></div><div class="tsd-comment tsd-typography"><p>A list of content objects that represent the unstructured result of the tool call.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="calltoolresult-iserror"><code class="tsd-tag">Optional</code><span>is<wbr/>Error</span><a href="#calltoolresult-iserror" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">isError</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">boolean</span></div><div class="tsd-comment tsd-typography"><p>Whether the tool call ended in an error.</p> <p>If not set, this is assumed to be false (the call was successful).</p> <p>Any errors that originate from the tool SHOULD be reported inside the result
438 | object, with <code>isError</code> set to true, <em>not</em> as an MCP protocol-level error
439 | response. Otherwise, the LLM would not be able to see that an error occurred
440 | and self-correct.</p> <p>However, any errors in <em>finding</em> the tool, an error indicating that the
441 | server does not support tool calls, or any other exceptional conditions,
442 | should be reported as an MCP error response.</p> </div><div class="tsd-comment tsd-typography"></div></section><section class="tsd-panel tsd-member"><div data-typedoc-h="3" class="tsd-anchor-link" id="calltoolresult-structuredcontent"><code class="tsd-tag">Optional</code><span>structured<wbr/>Content</span><a href="#calltoolresult-structuredcontent" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">structuredContent</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>An optional JSON object that represents the structured result of the tool call.</p> </div><div class="tsd-comment tsd-typography"></div></section>
443 | 
444 | ## `tools/list`
445 | 
446 | ### `ListToolsRequest`
447 | 
448 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ListToolsRequest</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;tools/list&quot;</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listtoolsrequest-params">params</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>Sent from the client to request a list of tools the server has.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listtoolsrequest-params"><code class="tsd-tag">Optional</code><span>params</span><a href="#listtoolsrequest-params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-type-declaration"><div data-typedoc-h="4">Type declaration</div><ul class="tsd-parameters"><li class="tsd-parameter"><div data-typedoc-h="5"><code class="tsd-tag">Optional</code><span class="tsd-kind-property">cursor</span><span class="tsd-signature-symbol">?: </span><span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An opaque token representing the current pagination position.
449 | If provided, the server should return results starting after this cursor.</p> </div><div class="tsd-comment tsd-typography"></div></li></ul></div><aside class="tsd-sources"><p>Inherited from PaginatedRequest.params</p></aside></section>
450 | 
451 | ### `ListToolsResult`
452 | 
453 | <div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ListToolsResult</span> <span class="tsd-signature-symbol">&#x7B;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listtoolsresult-&#x5F;meta">&#x5F;meta</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#listtoolsresult-nextcursor">nextCursor</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<a class="tsd-kind-property" href="#">tools</a><span class="tsd-signature-symbol">:</span> <a href="#tool" class="tsd-signature-type tsd-kind-interface">Tool</a><span class="tsd-signature-symbol">&#x5B;]</span><span class="tsd-signature-symbol">;</span><br/>&nbsp;&nbsp;<span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>The server's response to a tools/list request from the client.</p> </div><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listtoolsresult-&#x5F;meta"><code class="tsd-tag">Optional</code><span>&#x5F;<wbr/>meta</span><a href="#listtoolsresult-&#x5F;meta" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">&#x5F;meta</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">&#x7B;</span> <span class="tsd-signature-symbol">&#x5B;</span><span class="tsd-kind-index-signature">key</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">]:</span> <span class="tsd-signature-type">unknown</span> <span class="tsd-signature-symbol">}</span></div><div class="tsd-comment tsd-typography"><p>See <a href="/specification/draft/basic/index#meta">General fields: <code>&#x5F;meta</code></a> for notes on <code>&#x5F;meta</code> usage.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from PaginatedResult.&#x5F;meta</p></aside></section><section class="tsd-panel tsd-member tsd-is-inherited"><div data-typedoc-h="3" class="tsd-anchor-link" id="listtoolsresult-nextcursor"><code class="tsd-tag">Optional</code><span>next<wbr/>Cursor</span><a href="#listtoolsresult-nextcursor" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24" aria-hidden="true"><use href="assets/icons.svg#icon-anchor"></use></svg></a></div><div class="tsd-signature"><span class="tsd-kind-property">nextCursor</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>An opaque token representing the pagination position after the last returned result.
454 | If present, there may be more results available.</p> </div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><p>Inherited from PaginatedResult.nextCursor</p></aside></section>
455 | 


--------------------------------------------------------------------------------
/docs/specification/draft/server/index.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Overview
 3 | ---
 4 | 
 5 | <Info>**Protocol Revision**: draft</Info>
 6 | 
 7 | Servers provide the fundamental building blocks for adding context to language models via
 8 | MCP. These primitives enable rich interactions between clients, servers, and language
 9 | models:
10 | 
11 | - **Prompts**: Pre-defined templates or instructions that guide language model
12 |   interactions
13 | - **Resources**: Structured data or content that provides additional context to the model
14 | - **Tools**: Executable functions that allow models to perform actions or retrieve
15 |   information
16 | 
17 | Each primitive can be summarized in the following control hierarchy:
18 | 
19 | | Primitive | Control                | Description                                        | Example                         |
20 | | --------- | ---------------------- | -------------------------------------------------- | ------------------------------- |
21 | | Prompts   | User-controlled        | Interactive templates invoked by user choice       | Slash commands, menu options    |
22 | | Resources | Application-controlled | Contextual data attached and managed by the client | File contents, git history      |
23 | | Tools     | Model-controlled       | Functions exposed to the LLM to take actions       | API POST requests, file writing |
24 | 
25 | Explore these key primitives in more detail below:
26 | 
27 | <CardGroup cols={3}>
28 |   <Card
29 |     title="Prompts"
30 |     icon="message"
31 |     href="/specification/draft/server/prompts"
32 |   />
33 |   <Card
34 |     title="Resources"
35 |     icon="file-lines"
36 |     href="/specification/draft/server/resources"
37 |   />
38 |   <Card title="Tools" icon="wrench" href="/specification/draft/server/tools" />
39 | </CardGroup>
40 | 


--------------------------------------------------------------------------------
/docs/specification/draft/server/prompts.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Prompts
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: draft</Info>
  8 | 
  9 | The Model Context Protocol (MCP) provides a standardized way for servers to expose prompt
 10 | templates to clients. Prompts allow servers to provide structured messages and
 11 | instructions for interacting with language models. Clients can discover available
 12 | prompts, retrieve their contents, and provide arguments to customize them.
 13 | 
 14 | ## User Interaction Model
 15 | 
 16 | Prompts are designed to be **user-controlled**, meaning they are exposed from servers to
 17 | clients with the intention of the user being able to explicitly select them for use.
 18 | 
 19 | Typically, prompts would be triggered through user-initiated commands in the user
 20 | interface, which allows users to naturally discover and invoke available prompts.
 21 | 
 22 | For example, as slash commands:
 23 | 
 24 | ![Example of prompt exposed as slash command](/specification/draft/server/slash-command.png)
 25 | 
 26 | However, implementors are free to expose prompts through any interface pattern that suits
 27 | their needs&mdash;the protocol itself does not mandate any specific user interaction
 28 | model.
 29 | 
 30 | ## Capabilities
 31 | 
 32 | Servers that support prompts **MUST** declare the `prompts` capability during
 33 | [initialization](/specification/draft/basic/lifecycle#initialization):
 34 | 
 35 | ```json
 36 | {
 37 |   "capabilities": {
 38 |     "prompts": {
 39 |       "listChanged": true
 40 |     }
 41 |   }
 42 | }
 43 | ```
 44 | 
 45 | `listChanged` indicates whether the server will emit notifications when the list of
 46 | available prompts changes.
 47 | 
 48 | ## Protocol Messages
 49 | 
 50 | ### Listing Prompts
 51 | 
 52 | To retrieve available prompts, clients send a `prompts/list` request. This operation
 53 | supports [pagination](/specification/draft/server/utilities/pagination).
 54 | 
 55 | **Request:**
 56 | 
 57 | ```json
 58 | {
 59 |   "jsonrpc": "2.0",
 60 |   "id": 1,
 61 |   "method": "prompts/list",
 62 |   "params": {
 63 |     "cursor": "optional-cursor-value"
 64 |   }
 65 | }
 66 | ```
 67 | 
 68 | **Response:**
 69 | 
 70 | ```json
 71 | {
 72 |   "jsonrpc": "2.0",
 73 |   "id": 1,
 74 |   "result": {
 75 |     "prompts": [
 76 |       {
 77 |         "name": "code_review",
 78 |         "title": "Request Code Review",
 79 |         "description": "Asks the LLM to analyze code quality and suggest improvements",
 80 |         "arguments": [
 81 |           {
 82 |             "name": "code",
 83 |             "description": "The code to review",
 84 |             "required": true
 85 |           }
 86 |         ]
 87 |       }
 88 |     ],
 89 |     "nextCursor": "next-page-cursor"
 90 |   }
 91 | }
 92 | ```
 93 | 
 94 | ### Getting a Prompt
 95 | 
 96 | To retrieve a specific prompt, clients send a `prompts/get` request. Arguments may be
 97 | auto-completed through [the completion API](/specification/draft/server/utilities/completion).
 98 | 
 99 | **Request:**
100 | 
101 | ```json
102 | {
103 |   "jsonrpc": "2.0",
104 |   "id": 2,
105 |   "method": "prompts/get",
106 |   "params": {
107 |     "name": "code_review",
108 |     "arguments": {
109 |       "code": "def hello():\n    print('world')"
110 |     }
111 |   }
112 | }
113 | ```
114 | 
115 | **Response:**
116 | 
117 | ```json
118 | {
119 |   "jsonrpc": "2.0",
120 |   "id": 2,
121 |   "result": {
122 |     "description": "Code review prompt",
123 |     "messages": [
124 |       {
125 |         "role": "user",
126 |         "content": {
127 |           "type": "text",
128 |           "text": "Please review this Python code:\ndef hello():\n    print('world')"
129 |         }
130 |       }
131 |     ]
132 |   }
133 | }
134 | ```
135 | 
136 | ### List Changed Notification
137 | 
138 | When the list of available prompts changes, servers that declared the `listChanged`
139 | capability **SHOULD** send a notification:
140 | 
141 | ```json
142 | {
143 |   "jsonrpc": "2.0",
144 |   "method": "notifications/prompts/list_changed"
145 | }
146 | ```
147 | 
148 | ## Message Flow
149 | 
150 | ```mermaid
151 | sequenceDiagram
152 |     participant Client
153 |     participant Server
154 | 
155 |     Note over Client,Server: Discovery
156 |     Client->>Server: prompts/list
157 |     Server-->>Client: List of prompts
158 | 
159 |     Note over Client,Server: Usage
160 |     Client->>Server: prompts/get
161 |     Server-->>Client: Prompt content
162 | 
163 |     opt listChanged
164 |       Note over Client,Server: Changes
165 |       Server--)Client: prompts/list_changed
166 |       Client->>Server: prompts/list
167 |       Server-->>Client: Updated prompts
168 |     end
169 | ```
170 | 
171 | ## Data Types
172 | 
173 | ### Prompt
174 | 
175 | A prompt definition includes:
176 | 
177 | - `name`: Unique identifier for the prompt
178 | - `title`: Optional human-readable name of the prompt for display purposes.
179 | - `description`: Optional human-readable description
180 | - `arguments`: Optional list of arguments for customization
181 | 
182 | ### PromptMessage
183 | 
184 | Messages in a prompt can contain:
185 | 
186 | - `role`: Either "user" or "assistant" to indicate the speaker
187 | - `content`: One of the following content types:
188 | 
189 | <Note>
190 |   All content types in prompt messages support optional
191 |   [annotations](/specification/2025-06-18/server/resources#annotations) for
192 |   metadata about audience, priority, and modification times.
193 | </Note>
194 | 
195 | #### Text Content
196 | 
197 | Text content represents plain text messages:
198 | 
199 | ```json
200 | {
201 |   "type": "text",
202 |   "text": "The text content of the message"
203 | }
204 | ```
205 | 
206 | This is the most common content type used for natural language interactions.
207 | 
208 | #### Image Content
209 | 
210 | Image content allows including visual information in messages:
211 | 
212 | ```json
213 | {
214 |   "type": "image",
215 |   "data": "base64-encoded-image-data",
216 |   "mimeType": "image/png"
217 | }
218 | ```
219 | 
220 | The image data **MUST** be base64-encoded and include a valid MIME type. This enables
221 | multi-modal interactions where visual context is important.
222 | 
223 | #### Audio Content
224 | 
225 | Audio content allows including audio information in messages:
226 | 
227 | ```json
228 | {
229 |   "type": "audio",
230 |   "data": "base64-encoded-audio-data",
231 |   "mimeType": "audio/wav"
232 | }
233 | ```
234 | 
235 | The audio data MUST be base64-encoded and include a valid MIME type. This enables
236 | multi-modal interactions where audio context is important.
237 | 
238 | #### Embedded Resources
239 | 
240 | Embedded resources allow referencing server-side resources directly in messages:
241 | 
242 | ```json
243 | {
244 |   "type": "resource",
245 |   "resource": {
246 |     "uri": "resource://example",
247 |     "name": "example",
248 |     "title": "My Example Resource",
249 |     "mimeType": "text/plain",
250 |     "text": "Resource content"
251 |   }
252 | }
253 | ```
254 | 
255 | Resources can contain either text or binary (blob) data and **MUST** include:
256 | 
257 | - A valid resource URI
258 | - The appropriate MIME type
259 | - Either text content or base64-encoded blob data
260 | 
261 | Embedded resources enable prompts to seamlessly incorporate server-managed content like
262 | documentation, code samples, or other reference materials directly into the conversation
263 | flow.
264 | 
265 | ## Error Handling
266 | 
267 | Servers **SHOULD** return standard JSON-RPC errors for common failure cases:
268 | 
269 | - Invalid prompt name: `-32602` (Invalid params)
270 | - Missing required arguments: `-32602` (Invalid params)
271 | - Internal errors: `-32603` (Internal error)
272 | 
273 | ## Implementation Considerations
274 | 
275 | 1. Servers **SHOULD** validate prompt arguments before processing
276 | 2. Clients **SHOULD** handle pagination for large prompt lists
277 | 3. Both parties **SHOULD** respect capability negotiation
278 | 
279 | ## Security
280 | 
281 | Implementations **MUST** carefully validate all prompt inputs and outputs to prevent
282 | injection attacks or unauthorized access to resources.
283 | 


--------------------------------------------------------------------------------
/docs/specification/draft/server/resource-picker.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/specification/draft/server/resource-picker.png


--------------------------------------------------------------------------------
/docs/specification/draft/server/resources.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Resources
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: draft</Info>
  8 | 
  9 | The Model Context Protocol (MCP) provides a standardized way for servers to expose
 10 | resources to clients. Resources allow servers to share data that provides context to
 11 | language models, such as files, database schemas, or application-specific information.
 12 | Each resource is uniquely identified by a
 13 | [URI](https://datatracker.ietf.org/doc/html/rfc3986).
 14 | 
 15 | ## User Interaction Model
 16 | 
 17 | Resources in MCP are designed to be **application-driven**, with host applications
 18 | determining how to incorporate context based on their needs.
 19 | 
 20 | For example, applications could:
 21 | 
 22 | - Expose resources through UI elements for explicit selection, in a tree or list view
 23 | - Allow the user to search through and filter available resources
 24 | - Implement automatic context inclusion, based on heuristics or the AI model's selection
 25 | 
 26 | ![Example of resource context picker](/specification/draft/server/resource-picker.png)
 27 | 
 28 | However, implementations are free to expose resources through any interface pattern that
 29 | suits their needs&mdash;the protocol itself does not mandate any specific user
 30 | interaction model.
 31 | 
 32 | ## Capabilities
 33 | 
 34 | Servers that support resources **MUST** declare the `resources` capability:
 35 | 
 36 | ```json
 37 | {
 38 |   "capabilities": {
 39 |     "resources": {
 40 |       "subscribe": true,
 41 |       "listChanged": true
 42 |     }
 43 |   }
 44 | }
 45 | ```
 46 | 
 47 | The capability supports two optional features:
 48 | 
 49 | - `subscribe`: whether the client can subscribe to be notified of changes to individual
 50 |   resources.
 51 | - `listChanged`: whether the server will emit notifications when the list of available
 52 |   resources changes.
 53 | 
 54 | Both `subscribe` and `listChanged` are optional&mdash;servers can support neither,
 55 | either, or both:
 56 | 
 57 | ```json
 58 | {
 59 |   "capabilities": {
 60 |     "resources": {} // Neither feature supported
 61 |   }
 62 | }
 63 | ```
 64 | 
 65 | ```json
 66 | {
 67 |   "capabilities": {
 68 |     "resources": {
 69 |       "subscribe": true // Only subscriptions supported
 70 |     }
 71 |   }
 72 | }
 73 | ```
 74 | 
 75 | ```json
 76 | {
 77 |   "capabilities": {
 78 |     "resources": {
 79 |       "listChanged": true // Only list change notifications supported
 80 |     }
 81 |   }
 82 | }
 83 | ```
 84 | 
 85 | ## Protocol Messages
 86 | 
 87 | ### Listing Resources
 88 | 
 89 | To discover available resources, clients send a `resources/list` request. This operation
 90 | supports [pagination](/specification/draft/server/utilities/pagination).
 91 | 
 92 | **Request:**
 93 | 
 94 | ```json
 95 | {
 96 |   "jsonrpc": "2.0",
 97 |   "id": 1,
 98 |   "method": "resources/list",
 99 |   "params": {
100 |     "cursor": "optional-cursor-value"
101 |   }
102 | }
103 | ```
104 | 
105 | **Response:**
106 | 
107 | ```json
108 | {
109 |   "jsonrpc": "2.0",
110 |   "id": 1,
111 |   "result": {
112 |     "resources": [
113 |       {
114 |         "uri": "file:///project/src/main.rs",
115 |         "name": "main.rs",
116 |         "title": "Rust Software Application Main File",
117 |         "description": "Primary application entry point",
118 |         "mimeType": "text/x-rust"
119 |       }
120 |     ],
121 |     "nextCursor": "next-page-cursor"
122 |   }
123 | }
124 | ```
125 | 
126 | ### Reading Resources
127 | 
128 | To retrieve resource contents, clients send a `resources/read` request:
129 | 
130 | **Request:**
131 | 
132 | ```json
133 | {
134 |   "jsonrpc": "2.0",
135 |   "id": 2,
136 |   "method": "resources/read",
137 |   "params": {
138 |     "uri": "file:///project/src/main.rs"
139 |   }
140 | }
141 | ```
142 | 
143 | **Response:**
144 | 
145 | ```json
146 | {
147 |   "jsonrpc": "2.0",
148 |   "id": 2,
149 |   "result": {
150 |     "contents": [
151 |       {
152 |         "uri": "file:///project/src/main.rs",
153 |         "name": "main.rs",
154 |         "title": "Rust Software Application Main File",
155 |         "mimeType": "text/x-rust",
156 |         "text": "fn main() {\n    println!(\"Hello world!\");\n}"
157 |       }
158 |     ]
159 |   }
160 | }
161 | ```
162 | 
163 | ### Resource Templates
164 | 
165 | Resource templates allow servers to expose parameterized resources using
166 | [URI templates](https://datatracker.ietf.org/doc/html/rfc6570). Arguments may be
167 | auto-completed through [the completion API](/specification/draft/server/utilities/completion).
168 | 
169 | **Request:**
170 | 
171 | ```json
172 | {
173 |   "jsonrpc": "2.0",
174 |   "id": 3,
175 |   "method": "resources/templates/list"
176 | }
177 | ```
178 | 
179 | **Response:**
180 | 
181 | ```json
182 | {
183 |   "jsonrpc": "2.0",
184 |   "id": 3,
185 |   "result": {
186 |     "resourceTemplates": [
187 |       {
188 |         "uriTemplate": "file:///{path}",
189 |         "name": "Project Files",
190 |         "title": "📁 Project Files",
191 |         "description": "Access files in the project directory",
192 |         "mimeType": "application/octet-stream"
193 |       }
194 |     ]
195 |   }
196 | }
197 | ```
198 | 
199 | ### List Changed Notification
200 | 
201 | When the list of available resources changes, servers that declared the `listChanged`
202 | capability **SHOULD** send a notification:
203 | 
204 | ```json
205 | {
206 |   "jsonrpc": "2.0",
207 |   "method": "notifications/resources/list_changed"
208 | }
209 | ```
210 | 
211 | ### Subscriptions
212 | 
213 | The protocol supports optional subscriptions to resource changes. Clients can subscribe
214 | to specific resources and receive notifications when they change:
215 | 
216 | **Subscribe Request:**
217 | 
218 | ```json
219 | {
220 |   "jsonrpc": "2.0",
221 |   "id": 4,
222 |   "method": "resources/subscribe",
223 |   "params": {
224 |     "uri": "file:///project/src/main.rs"
225 |   }
226 | }
227 | ```
228 | 
229 | **Update Notification:**
230 | 
231 | ```json
232 | {
233 |   "jsonrpc": "2.0",
234 |   "method": "notifications/resources/updated",
235 |   "params": {
236 |     "uri": "file:///project/src/main.rs",
237 |     "title": "Rust Software Application Main File"
238 |   }
239 | }
240 | ```
241 | 
242 | ## Message Flow
243 | 
244 | ```mermaid
245 | sequenceDiagram
246 |     participant Client
247 |     participant Server
248 | 
249 |     Note over Client,Server: Resource Discovery
250 |     Client->>Server: resources/list
251 |     Server-->>Client: List of resources
252 | 
253 |     Note over Client,Server: Resource Access
254 |     Client->>Server: resources/read
255 |     Server-->>Client: Resource contents
256 | 
257 |     Note over Client,Server: Subscriptions
258 |     Client->>Server: resources/subscribe
259 |     Server-->>Client: Subscription confirmed
260 | 
261 |     Note over Client,Server: Updates
262 |     Server--)Client: notifications/resources/updated
263 |     Client->>Server: resources/read
264 |     Server-->>Client: Updated contents
265 | ```
266 | 
267 | ## Data Types
268 | 
269 | ### Resource
270 | 
271 | A resource definition includes:
272 | 
273 | - `uri`: Unique identifier for the resource
274 | - `name`: The name of the resource.
275 | - `title`: Optional human-readable name of the resource for display purposes.
276 | - `description`: Optional description
277 | - `mimeType`: Optional MIME type
278 | - `size`: Optional size in bytes
279 | 
280 | ### Resource Contents
281 | 
282 | Resources can contain either text or binary data:
283 | 
284 | #### Text Content
285 | 
286 | ```json
287 | {
288 |   "uri": "file:///example.txt",
289 |   "name": "example.txt",
290 |   "title": "Example Text File",
291 |   "mimeType": "text/plain",
292 |   "text": "Resource content"
293 | }
294 | ```
295 | 
296 | #### Binary Content
297 | 
298 | ```json
299 | {
300 |   "uri": "file:///example.png",
301 |   "name": "example.png",
302 |   "title": "Example Image",
303 |   "mimeType": "image/png",
304 |   "blob": "base64-encoded-data"
305 | }
306 | ```
307 | 
308 | ### Annotations
309 | 
310 | Resources, resource templates and content blocks support optional annotations that provide hints to clients about how to use or display the resource:
311 | 
312 | - **`audience`**: An array indicating the intended audience(s) for this resource. Valid values are `"user"` and `"assistant"`. For example, `["user", "assistant"]` indicates content useful for both.
313 | - **`priority`**: A number from 0.0 to 1.0 indicating the importance of this resource. A value of 1 means "most important" (effectively required), while 0 means "least important" (entirely optional).
314 | - **`lastModified`**: An ISO 8601 formatted timestamp indicating when the resource was last modified (e.g., `"2025-01-12T15:00:58Z"`).
315 | 
316 | Example resource with annotations:
317 | 
318 | ```json
319 | {
320 |   "uri": "file:///project/README.md",
321 |   "name": "README.md",
322 |   "title": "Project Documentation",
323 |   "mimeType": "text/markdown",
324 |   "annotations": {
325 |     "audience": ["user"],
326 |     "priority": 0.8,
327 |     "lastModified": "2025-01-12T15:00:58Z"
328 |   }
329 | }
330 | ```
331 | 
332 | Clients can use these annotations to:
333 | 
334 | - Filter resources based on their intended audience
335 | - Prioritize which resources to include in context
336 | - Display modification times or sort by recency
337 | 
338 | ## Common URI Schemes
339 | 
340 | The protocol defines several standard URI schemes. This list not
341 | exhaustive&mdash;implementations are always free to use additional, custom URI schemes.
342 | 
343 | ### https://
344 | 
345 | Used to represent a resource available on the web.
346 | 
347 | Servers **SHOULD** use this scheme only when the client is able to fetch and load the
348 | resource directly from the web on its own—that is, it doesn’t need to read the resource
349 | via the MCP server.
350 | 
351 | For other use cases, servers **SHOULD** prefer to use another URI scheme, or define a
352 | custom one, even if the server will itself be downloading resource contents over the
353 | internet.
354 | 
355 | ### file://
356 | 
357 | Used to identify resources that behave like a filesystem. However, the resources do not
358 | need to map to an actual physical filesystem.
359 | 
360 | MCP servers **MAY** identify file:// resources with an
361 | [XDG MIME type](https://specifications.freedesktop.org/shared-mime-info-spec/0.14/ar01s02.html#id-1.3.14),
362 | like `inode/directory`, to represent non-regular files (such as directories) that don’t
363 | otherwise have a standard MIME type.
364 | 
365 | ### git://
366 | 
367 | Git version control integration.
368 | 
369 | ### Custom URI Schemes
370 | 
371 | Custom URI schemes **MUST** be in accordance with [RFC3986](https://datatracker.ietf.org/doc/html/rfc3986),
372 | taking the above guidance in to account.
373 | 
374 | ## Error Handling
375 | 
376 | Servers **SHOULD** return standard JSON-RPC errors for common failure cases:
377 | 
378 | - Resource not found: `-32002`
379 | - Internal errors: `-32603`
380 | 
381 | Example error:
382 | 
383 | ```json
384 | {
385 |   "jsonrpc": "2.0",
386 |   "id": 5,
387 |   "error": {
388 |     "code": -32002,
389 |     "message": "Resource not found",
390 |     "data": {
391 |       "uri": "file:///nonexistent.txt"
392 |     }
393 |   }
394 | }
395 | ```
396 | 
397 | ## Security Considerations
398 | 
399 | 1. Servers **MUST** validate all resource URIs
400 | 2. Access controls **SHOULD** be implemented for sensitive resources
401 | 3. Binary data **MUST** be properly encoded
402 | 4. Resource permissions **SHOULD** be checked before operations
403 | 


--------------------------------------------------------------------------------
/docs/specification/draft/server/slash-command.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/09998fe1ad2e48349682af8c92e0ed25c90e87c0/docs/specification/draft/server/slash-command.png


--------------------------------------------------------------------------------
/docs/specification/draft/server/tools.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Tools
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: draft</Info>
  8 | 
  9 | The Model Context Protocol (MCP) allows servers to expose tools that can be invoked by
 10 | language models. Tools enable models to interact with external systems, such as querying
 11 | databases, calling APIs, or performing computations. Each tool is uniquely identified by
 12 | a name and includes metadata describing its schema.
 13 | 
 14 | ## User Interaction Model
 15 | 
 16 | Tools in MCP are designed to be **model-controlled**, meaning that the language model can
 17 | discover and invoke tools automatically based on its contextual understanding and the
 18 | user's prompts.
 19 | 
 20 | However, implementations are free to expose tools through any interface pattern that
 21 | suits their needs&mdash;the protocol itself does not mandate any specific user
 22 | interaction model.
 23 | 
 24 | <Warning>
 25 | 
 26 | For trust & safety and security, there **SHOULD** always
 27 | be a human in the loop with the ability to deny tool invocations.
 28 | 
 29 | Applications **SHOULD**:
 30 | 
 31 | - Provide UI that makes clear which tools are being exposed to the AI model
 32 | - Insert clear visual indicators when tools are invoked
 33 | - Present confirmation prompts to the user for operations, to ensure a human is in the
 34 |   loop
 35 | 
 36 | </Warning>
 37 | 
 38 | ## Capabilities
 39 | 
 40 | Servers that support tools **MUST** declare the `tools` capability:
 41 | 
 42 | ```json
 43 | {
 44 |   "capabilities": {
 45 |     "tools": {
 46 |       "listChanged": true
 47 |     }
 48 |   }
 49 | }
 50 | ```
 51 | 
 52 | `listChanged` indicates whether the server will emit notifications when the list of
 53 | available tools changes.
 54 | 
 55 | ## Protocol Messages
 56 | 
 57 | ### Listing Tools
 58 | 
 59 | To discover available tools, clients send a `tools/list` request. This operation supports
 60 | [pagination](/specification/draft/server/utilities/pagination).
 61 | 
 62 | **Request:**
 63 | 
 64 | ```json
 65 | {
 66 |   "jsonrpc": "2.0",
 67 |   "id": 1,
 68 |   "method": "tools/list",
 69 |   "params": {
 70 |     "cursor": "optional-cursor-value"
 71 |   }
 72 | }
 73 | ```
 74 | 
 75 | **Response:**
 76 | 
 77 | ```json
 78 | {
 79 |   "jsonrpc": "2.0",
 80 |   "id": 1,
 81 |   "result": {
 82 |     "tools": [
 83 |       {
 84 |         "name": "get_weather",
 85 |         "title": "Weather Information Provider",
 86 |         "description": "Get current weather information for a location",
 87 |         "inputSchema": {
 88 |           "type": "object",
 89 |           "properties": {
 90 |             "location": {
 91 |               "type": "string",
 92 |               "description": "City name or zip code"
 93 |             }
 94 |           },
 95 |           "required": ["location"]
 96 |         }
 97 |       }
 98 |     ],
 99 |     "nextCursor": "next-page-cursor"
100 |   }
101 | }
102 | ```
103 | 
104 | ### Calling Tools
105 | 
106 | To invoke a tool, clients send a `tools/call` request:
107 | 
108 | **Request:**
109 | 
110 | ```json
111 | {
112 |   "jsonrpc": "2.0",
113 |   "id": 2,
114 |   "method": "tools/call",
115 |   "params": {
116 |     "name": "get_weather",
117 |     "arguments": {
118 |       "location": "New York"
119 |     }
120 |   }
121 | }
122 | ```
123 | 
124 | **Response:**
125 | 
126 | ```json
127 | {
128 |   "jsonrpc": "2.0",
129 |   "id": 2,
130 |   "result": {
131 |     "content": [
132 |       {
133 |         "type": "text",
134 |         "text": "Current weather in New York:\nTemperature: 72°F\nConditions: Partly cloudy"
135 |       }
136 |     ],
137 |     "isError": false
138 |   }
139 | }
140 | ```
141 | 
142 | ### List Changed Notification
143 | 
144 | When the list of available tools changes, servers that declared the `listChanged`
145 | capability **SHOULD** send a notification:
146 | 
147 | ```json
148 | {
149 |   "jsonrpc": "2.0",
150 |   "method": "notifications/tools/list_changed"
151 | }
152 | ```
153 | 
154 | ## Message Flow
155 | 
156 | ```mermaid
157 | sequenceDiagram
158 |     participant LLM
159 |     participant Client
160 |     participant Server
161 | 
162 |     Note over Client,Server: Discovery
163 |     Client->>Server: tools/list
164 |     Server-->>Client: List of tools
165 | 
166 |     Note over Client,LLM: Tool Selection
167 |     LLM->>Client: Select tool to use
168 | 
169 |     Note over Client,Server: Invocation
170 |     Client->>Server: tools/call
171 |     Server-->>Client: Tool result
172 |     Client->>LLM: Process result
173 | 
174 |     Note over Client,Server: Updates
175 |     Server--)Client: tools/list_changed
176 |     Client->>Server: tools/list
177 |     Server-->>Client: Updated tools
178 | ```
179 | 
180 | ## Data Types
181 | 
182 | ### Tool
183 | 
184 | A tool definition includes:
185 | 
186 | - `name`: Unique identifier for the tool
187 | - `title`: Optional human-readable name of the tool for display purposes.
188 | - `description`: Human-readable description of functionality
189 | - `inputSchema`: JSON Schema defining expected parameters
190 | - `outputSchema`: Optional JSON Schema defining expected output structure
191 | - `annotations`: optional properties describing tool behavior
192 | 
193 | <Warning>
194 | 
195 | For trust & safety and security, clients **MUST** consider
196 | tool annotations to be untrusted unless they come from trusted servers.
197 | 
198 | </Warning>
199 | 
200 | ### Tool Result
201 | 
202 | Tool results may contain [**structured**](#structured-content) or **unstructured** content.
203 | 
204 | **Unstructured** content is returned in the `content` field of a result, and can contain multiple content items of different types:
205 | 
206 | <Note>
207 |   All content types (text, image, audio, resource links, and embedded resources)
208 |   support optional
209 |   [annotations](/specification/draft/server/resources#annotations) that provide
210 |   metadata about audience, priority, and modification times. This is the same
211 |   annotation format used by resources and prompts.
212 | </Note>
213 | 
214 | #### Text Content
215 | 
216 | ```json
217 | {
218 |   "type": "text",
219 |   "text": "Tool result text"
220 | }
221 | ```
222 | 
223 | #### Image Content
224 | 
225 | ```json
226 | {
227 |   "type": "image",
228 |   "data": "base64-encoded-data",
229 |   "mimeType": "image/png",
230 |   "annotations": {
231 |     "audience": ["user"],
232 |     "priority": 0.9
233 |   }
234 | }
235 | ```
236 | 
237 | #### Audio Content
238 | 
239 | ```json
240 | {
241 |   "type": "audio",
242 |   "data": "base64-encoded-audio-data",
243 |   "mimeType": "audio/wav"
244 | }
245 | ```
246 | 
247 | #### Resource Links
248 | 
249 | A tool **MAY** return links to [Resources](/specification/draft/server/resources), to provide additional context
250 | or data. In this case, the tool will return a URI that can be subscribed to or fetched by the client:
251 | 
252 | ```json
253 | {
254 |   "type": "resource_link",
255 |   "uri": "file:///project/src/main.rs",
256 |   "name": "main.rs",
257 |   "description": "Primary application entry point",
258 |   "mimeType": "text/x-rust"
259 | }
260 | ```
261 | 
262 | Resource links support the same [Resource annotations](/specification/draft/server/resources#annotations) as regular resources to help clients understand how to use them.
263 | 
264 | <Info>
265 |   Resource links returned by tools are not guaranteed to appear in the results
266 |   of a `resources/list` request.
267 | </Info>
268 | 
269 | #### Embedded Resources
270 | 
271 | [Resources](/specification/draft/server/resources) **MAY** be embedded to provide additional context
272 | or data using a suitable [URI scheme](./resources#common-uri-schemes). Servers that use embedded resources **SHOULD** implement the `resources` capability:
273 | 
274 | ```json
275 | {
276 |   "type": "resource",
277 |   "resource": {
278 |     "uri": "file:///project/src/main.rs",
279 |     "title": "Project Rust Main File",
280 |     "mimeType": "text/x-rust",
281 |     "text": "fn main() {\n    println!(\"Hello world!\");\n}",
282 |     "annotations": {
283 |       "audience": ["user", "assistant"],
284 |       "priority": 0.7,
285 |       "lastModified": "2025-05-03T14:30:00Z"
286 |     }
287 |   }
288 | }
289 | ```
290 | 
291 | Embedded resources support the same [Resource annotations](/specification/draft/server/resources#annotations) as regular resources to help clients understand how to use them.
292 | 
293 | #### Structured Content
294 | 
295 | **Structured** content is returned as a JSON object in the `structuredContent` field of a result.
296 | 
297 | For backwards compatibility, a tool that returns structured content SHOULD also return the serialized JSON in a TextContent block.
298 | 
299 | #### Output Schema
300 | 
301 | Tools may also provide an output schema for validation of structured results.
302 | If an output schema is provided:
303 | 
304 | - Servers **MUST** provide structured results that conform to this schema.
305 | - Clients **SHOULD** validate structured results against this schema.
306 | 
307 | Example tool with output schema:
308 | 
309 | ```json
310 | {
311 |   "name": "get_weather_data",
312 |   "title": "Weather Data Retriever",
313 |   "description": "Get current weather data for a location",
314 |   "inputSchema": {
315 |     "type": "object",
316 |     "properties": {
317 |       "location": {
318 |         "type": "string",
319 |         "description": "City name or zip code"
320 |       }
321 |     },
322 |     "required": ["location"]
323 |   },
324 |   "outputSchema": {
325 |     "type": "object",
326 |     "properties": {
327 |       "temperature": {
328 |         "type": "number",
329 |         "description": "Temperature in celsius"
330 |       },
331 |       "conditions": {
332 |         "type": "string",
333 |         "description": "Weather conditions description"
334 |       },
335 |       "humidity": {
336 |         "type": "number",
337 |         "description": "Humidity percentage"
338 |       }
339 |     },
340 |     "required": ["temperature", "conditions", "humidity"]
341 |   }
342 | }
343 | ```
344 | 
345 | Example valid response for this tool:
346 | 
347 | ```json
348 | {
349 |   "jsonrpc": "2.0",
350 |   "id": 5,
351 |   "result": {
352 |     "content": [
353 |       {
354 |         "type": "text",
355 |         "text": "{\"temperature\": 22.5, \"conditions\": \"Partly cloudy\", \"humidity\": 65}"
356 |       }
357 |     ],
358 |     "structuredContent": {
359 |       "temperature": 22.5,
360 |       "conditions": "Partly cloudy",
361 |       "humidity": 65
362 |     }
363 |   }
364 | }
365 | ```
366 | 
367 | Providing an output schema helps clients and LLMs understand and properly handle structured tool outputs by:
368 | 
369 | - Enabling strict schema validation of responses
370 | - Providing type information for better integration with programming languages
371 | - Guiding clients and LLMs to properly parse and utilize the returned data
372 | - Supporting better documentation and developer experience
373 | 
374 | ## Error Handling
375 | 
376 | Tools use two error reporting mechanisms:
377 | 
378 | 1. **Protocol Errors**: Standard JSON-RPC errors for issues like:
379 |    - Unknown tools
380 |    - Invalid arguments
381 |    - Server errors
382 | 
383 | 2. **Tool Execution Errors**: Reported in tool results with `isError: true`:
384 |    - API failures
385 |    - Invalid input data
386 |    - Business logic errors
387 | 
388 | Example protocol error:
389 | 
390 | ```json
391 | {
392 |   "jsonrpc": "2.0",
393 |   "id": 3,
394 |   "error": {
395 |     "code": -32602,
396 |     "message": "Unknown tool: invalid_tool_name"
397 |   }
398 | }
399 | ```
400 | 
401 | Example tool execution error:
402 | 
403 | ```json
404 | {
405 |   "jsonrpc": "2.0",
406 |   "id": 4,
407 |   "result": {
408 |     "content": [
409 |       {
410 |         "type": "text",
411 |         "text": "Failed to fetch weather data: API rate limit exceeded"
412 |       }
413 |     ],
414 |     "isError": true
415 |   }
416 | }
417 | ```
418 | 
419 | ## Security Considerations
420 | 
421 | 1. Servers **MUST**:
422 |    - Validate all tool inputs
423 |    - Implement proper access controls
424 |    - Rate limit tool invocations
425 |    - Sanitize tool outputs
426 | 
427 | 2. Clients **SHOULD**:
428 |    - Prompt for user confirmation on sensitive operations
429 |    - Show tool inputs to the user before calling the server, to avoid malicious or
430 |      accidental data exfiltration
431 |    - Validate tool results before passing to LLM
432 |    - Implement timeouts for tool calls
433 |    - Log tool usage for audit purposes
434 | 


--------------------------------------------------------------------------------
/docs/specification/draft/server/utilities/completion.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Completion
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: draft</Info>
  8 | 
  9 | The Model Context Protocol (MCP) provides a standardized way for servers to offer
 10 | argument autocompletion suggestions for prompts and resource URIs. This enables rich,
 11 | IDE-like experiences where users receive contextual suggestions while entering argument
 12 | values.
 13 | 
 14 | ## User Interaction Model
 15 | 
 16 | Completion in MCP is designed to support interactive user experiences similar to IDE code
 17 | completion.
 18 | 
 19 | For example, applications may show completion suggestions in a dropdown or popup menu as
 20 | users type, with the ability to filter and select from available options.
 21 | 
 22 | However, implementations are free to expose completion through any interface pattern that
 23 | suits their needs&mdash;the protocol itself does not mandate any specific user
 24 | interaction model.
 25 | 
 26 | ## Capabilities
 27 | 
 28 | Servers that support completions **MUST** declare the `completions` capability:
 29 | 
 30 | ```json
 31 | {
 32 |   "capabilities": {
 33 |     "completions": {}
 34 |   }
 35 | }
 36 | ```
 37 | 
 38 | ## Protocol Messages
 39 | 
 40 | ### Requesting Completions
 41 | 
 42 | To get completion suggestions, clients send a `completion/complete` request specifying
 43 | what is being completed through a reference type:
 44 | 
 45 | **Request:**
 46 | 
 47 | ```json
 48 | {
 49 |   "jsonrpc": "2.0",
 50 |   "id": 1,
 51 |   "method": "completion/complete",
 52 |   "params": {
 53 |     "ref": {
 54 |       "type": "ref/prompt",
 55 |       "name": "code_review"
 56 |     },
 57 |     "argument": {
 58 |       "name": "language",
 59 |       "value": "py"
 60 |     }
 61 |   }
 62 | }
 63 | ```
 64 | 
 65 | **Response:**
 66 | 
 67 | ```json
 68 | {
 69 |   "jsonrpc": "2.0",
 70 |   "id": 1,
 71 |   "result": {
 72 |     "completion": {
 73 |       "values": ["python", "pytorch", "pyside"],
 74 |       "total": 10,
 75 |       "hasMore": true
 76 |     }
 77 |   }
 78 | }
 79 | ```
 80 | 
 81 | For prompts or URI templates with multiple arguments, clients should include previous completions in the `context.arguments` object to provide context for subsequent requests.
 82 | 
 83 | **Request:**
 84 | 
 85 | ```json
 86 | {
 87 |   "jsonrpc": "2.0",
 88 |   "id": 1,
 89 |   "method": "completion/complete",
 90 |   "params": {
 91 |     "ref": {
 92 |       "type": "ref/prompt",
 93 |       "name": "code_review"
 94 |     },
 95 |     "argument": {
 96 |       "name": "framework",
 97 |       "value": "fla"
 98 |     },
 99 |     "context": {
100 |       "arguments": {
101 |         "language": "python"
102 |       }
103 |     }
104 |   }
105 | }
106 | ```
107 | 
108 | **Response:**
109 | 
110 | ```json
111 | {
112 |   "jsonrpc": "2.0",
113 |   "id": 1,
114 |   "result": {
115 |     "completion": {
116 |       "values": ["flask"],
117 |       "total": 1,
118 |       "hasMore": false
119 |     }
120 |   }
121 | }
122 | ```
123 | 
124 | ### Reference Types
125 | 
126 | The protocol supports two types of completion references:
127 | 
128 | | Type           | Description                 | Example                                             |
129 | | -------------- | --------------------------- | --------------------------------------------------- |
130 | | `ref/prompt`   | References a prompt by name | `{"type": "ref/prompt", "name": "code_review"}`     |
131 | | `ref/resource` | References a resource URI   | `{"type": "ref/resource", "uri": "file:///{path}"}` |
132 | 
133 | ### Completion Results
134 | 
135 | Servers return an array of completion values ranked by relevance, with:
136 | 
137 | - Maximum 100 items per response
138 | - Optional total number of available matches
139 | - Boolean indicating if additional results exist
140 | 
141 | ## Message Flow
142 | 
143 | ```mermaid
144 | sequenceDiagram
145 |     participant Client
146 |     participant Server
147 | 
148 |     Note over Client: User types argument
149 |     Client->>Server: completion/complete
150 |     Server-->>Client: Completion suggestions
151 | 
152 |     Note over Client: User continues typing
153 |     Client->>Server: completion/complete
154 |     Server-->>Client: Refined suggestions
155 | ```
156 | 
157 | ## Data Types
158 | 
159 | ### CompleteRequest
160 | 
161 | - `ref`: A `PromptReference` or `ResourceReference`
162 | - `argument`: Object containing:
163 |   - `name`: Argument name
164 |   - `value`: Current value
165 | - `context`: Object containing:
166 |   - `arguments`: A mapping of already-resolved argument names to their values.
167 | 
168 | ### CompleteResult
169 | 
170 | - `completion`: Object containing:
171 |   - `values`: Array of suggestions (max 100)
172 |   - `total`: Optional total matches
173 |   - `hasMore`: Additional results flag
174 | 
175 | ## Error Handling
176 | 
177 | Servers **SHOULD** return standard JSON-RPC errors for common failure cases:
178 | 
179 | - Method not found: `-32601` (Capability not supported)
180 | - Invalid prompt name: `-32602` (Invalid params)
181 | - Missing required arguments: `-32602` (Invalid params)
182 | - Internal errors: `-32603` (Internal error)
183 | 
184 | ## Implementation Considerations
185 | 
186 | 1. Servers **SHOULD**:
187 |    - Return suggestions sorted by relevance
188 |    - Implement fuzzy matching where appropriate
189 |    - Rate limit completion requests
190 |    - Validate all inputs
191 | 
192 | 2. Clients **SHOULD**:
193 |    - Debounce rapid completion requests
194 |    - Cache completion results where appropriate
195 |    - Handle missing or partial results gracefully
196 | 
197 | ## Security
198 | 
199 | Implementations **MUST**:
200 | 
201 | - Validate all completion inputs
202 | - Implement appropriate rate limiting
203 | - Control access to sensitive suggestions
204 | - Prevent completion-based information disclosure
205 | 


--------------------------------------------------------------------------------
/docs/specification/draft/server/utilities/logging.mdx:
--------------------------------------------------------------------------------
  1 | ---
  2 | title: Logging
  3 | ---
  4 | 
  5 | <div id="enable-section-numbers" />
  6 | 
  7 | <Info>**Protocol Revision**: draft</Info>
  8 | 
  9 | The Model Context Protocol (MCP) provides a standardized way for servers to send
 10 | structured log messages to clients. Clients can control logging verbosity by setting
 11 | minimum log levels, with servers sending notifications containing severity levels,
 12 | optional logger names, and arbitrary JSON-serializable data.
 13 | 
 14 | ## User Interaction Model
 15 | 
 16 | Implementations are free to expose logging through any interface pattern that suits their
 17 | needs&mdash;the protocol itself does not mandate any specific user interaction model.
 18 | 
 19 | ## Capabilities
 20 | 
 21 | Servers that emit log message notifications **MUST** declare the `logging` capability:
 22 | 
 23 | ```json
 24 | {
 25 |   "capabilities": {
 26 |     "logging": {}
 27 |   }
 28 | }
 29 | ```
 30 | 
 31 | ## Log Levels
 32 | 
 33 | The protocol follows the standard syslog severity levels specified in
 34 | [RFC 5424](https://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1):
 35 | 
 36 | | Level     | Description                      | Example Use Case           |
 37 | | --------- | -------------------------------- | -------------------------- |
 38 | | debug     | Detailed debugging information   | Function entry/exit points |
 39 | | info      | General informational messages   | Operation progress updates |
 40 | | notice    | Normal but significant events    | Configuration changes      |
 41 | | warning   | Warning conditions               | Deprecated feature usage   |
 42 | | error     | Error conditions                 | Operation failures         |
 43 | | critical  | Critical conditions              | System component failures  |
 44 | | alert     | Action must be taken immediately | Data corruption detected   |
 45 | | emergency | System is unusable               | Complete system failure    |
 46 | 
 47 | ## Protocol Messages
 48 | 
 49 | ### Setting Log Level
 50 | 
 51 | To configure the minimum log level, clients **MAY** send a `logging/setLevel` request:
 52 | 
 53 | **Request:**
 54 | 
 55 | ```json
 56 | {
 57 |   "jsonrpc": "2.0",
 58 |   "id": 1,
 59 |   "method": "logging/setLevel",
 60 |   "params": {
 61 |     "level": "info"
 62 |   }
 63 | }
 64 | ```
 65 | 
 66 | ### Log Message Notifications
 67 | 
 68 | Servers send log messages using `notifications/message` notifications:
 69 | 
 70 | ```json
 71 | {
 72 |   "jsonrpc": "2.0",
 73 |   "method": "notifications/message",
 74 |   "params": {
 75 |     "level": "error",
 76 |     "logger": "database",
 77 |     "data": {
 78 |       "error": "Connection failed",
 79 |       "details": {
 80 |         "host": "localhost",
 81 |         "port": 5432
 82 |       }
 83 |     }
 84 |   }
 85 | }
 86 | ```
 87 | 
 88 | ## Message Flow
 89 | 
 90 | ```mermaid
 91 | sequenceDiagram
 92 |     participant Client
 93 |     participant Server
 94 | 
 95 |     Note over Client,Server: Configure Logging
 96 |     Client->>Server: logging/setLevel (info)
 97 |     Server-->>Client: Empty Result
 98 | 
 99 |     Note over Client,Server: Server Activity
100 |     Server--)Client: notifications/message (info)
101 |     Server--)Client: notifications/message (warning)
102 |     Server--)Client: notifications/message (error)
103 | 
104 |     Note over Client,Server: Level Change
105 |     Client->>Server: logging/setLevel (error)
106 |     Server-->>Client: Empty Result
107 |     Note over Server: Only sends error level<br/>and above
108 | ```
109 | 
110 | ## Error Handling
111 | 
112 | Servers **SHOULD** return standard JSON-RPC errors for common failure cases:
113 | 
114 | - Invalid log level: `-32602` (Invalid params)
115 | - Configuration errors: `-32603` (Internal error)
116 | 
117 | ## Implementation Considerations
118 | 
119 | 1. Servers **SHOULD**:
120 |    - Rate limit log messages
121 |    - Include relevant context in data field
122 |    - Use consistent logger names
123 |    - Remove sensitive information
124 | 
125 | 2. Clients **MAY**:
126 |    - Present log messages in the UI
127 |    - Implement log filtering/search
128 |    - Display severity visually
129 |    - Persist log messages
130 | 
131 | ## Security
132 | 
133 | 1. Log messages **MUST NOT** contain:
134 |    - Credentials or secrets
135 |    - Personal identifying information
136 |    - Internal system details that could aid attacks
137 | 
138 | 2. Implementations **SHOULD**:
139 |    - Rate limit messages
140 |    - Validate all data fields
141 |    - Control log access
142 |    - Monitor for sensitive content
143 | 


--------------------------------------------------------------------------------
/docs/specification/draft/server/utilities/pagination.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Pagination
 3 | ---
 4 | 
 5 | <div id="enable-section-numbers" />
 6 | 
 7 | <Info>**Protocol Revision**: draft</Info>
 8 | 
 9 | The Model Context Protocol (MCP) supports paginating list operations that may return
10 | large result sets. Pagination allows servers to yield results in smaller chunks rather
11 | than all at once.
12 | 
13 | Pagination is especially important when connecting to external services over the
14 | internet, but also useful for local integrations to avoid performance issues with large
15 | data sets.
16 | 
17 | ## Pagination Model
18 | 
19 | Pagination in MCP uses an opaque cursor-based approach, instead of numbered pages.
20 | 
21 | - The **cursor** is an opaque string token, representing a position in the result set
22 | - **Page size** is determined by the server, and clients **MUST NOT** assume a fixed page
23 |   size
24 | 
25 | ## Response Format
26 | 
27 | Pagination starts when the server sends a **response** that includes:
28 | 
29 | - The current page of results
30 | - An optional `nextCursor` field if more results exist
31 | 
32 | ```json
33 | {
34 |   "jsonrpc": "2.0",
35 |   "id": "123",
36 |   "result": {
37 |     "resources": [...],
38 |     "nextCursor": "eyJwYWdlIjogM30="
39 |   }
40 | }
41 | ```
42 | 
43 | ## Request Format
44 | 
45 | After receiving a cursor, the client can _continue_ paginating by issuing a request
46 | including that cursor:
47 | 
48 | ```json
49 | {
50 |   "jsonrpc": "2.0",
51 |   "method": "resources/list",
52 |   "params": {
53 |     "cursor": "eyJwYWdlIjogMn0="
54 |   }
55 | }
56 | ```
57 | 
58 | ## Pagination Flow
59 | 
60 | ```mermaid
61 | sequenceDiagram
62 |     participant Client
63 |     participant Server
64 | 
65 |     Client->>Server: List Request (no cursor)
66 |     loop Pagination Loop
67 |       Server-->>Client: Page of results + nextCursor
68 |       Client->>Server: List Request (with cursor)
69 |     end
70 | ```
71 | 
72 | ## Operations Supporting Pagination
73 | 
74 | The following MCP operations support pagination:
75 | 
76 | - `resources/list` - List available resources
77 | - `resources/templates/list` - List resource templates
78 | - `prompts/list` - List available prompts
79 | - `tools/list` - List available tools
80 | 
81 | ## Implementation Guidelines
82 | 
83 | 1. Servers **SHOULD**:
84 |    - Provide stable cursors
85 |    - Handle invalid cursors gracefully
86 | 
87 | 2. Clients **SHOULD**:
88 |    - Treat a missing `nextCursor` as the end of results
89 |    - Support both paginated and non-paginated flows
90 | 
91 | 3. Clients **MUST** treat cursors as opaque tokens:
92 |    - Don't make assumptions about cursor format
93 |    - Don't attempt to parse or modify cursors
94 |    - Don't persist cursors across sessions
95 | 
96 | ## Error Handling
97 | 
98 | Invalid cursors **SHOULD** result in an error with code -32602 (Invalid params).
99 | 


--------------------------------------------------------------------------------
/docs/specification/versioning.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: Versioning
 3 | type: docs
 4 | weight: 10
 5 | ---
 6 | 
 7 | The Model Context Protocol uses string-based version identifiers following the format
 8 | `YYYY-MM-DD`, to indicate the last date backwards incompatible changes were made.
 9 | 
10 | <Info>
11 | 
12 | The protocol version will _not_ be incremented when the
13 | protocol is updated, as long as the changes maintain backwards compatibility. This allows
14 | for incremental improvements while preserving interoperability.
15 | 
16 | </Info>
17 | 
18 | ## Revisions
19 | 
20 | Revisions may be marked as:
21 | 
22 | - **Draft**: in-progress specifications, not yet ready for consumption.
23 | - **Current**: the current protocol version, which is ready for use and may continue to
24 |   receive backwards compatible changes.
25 | - **Final**: past, complete specifications that will not be changed.
26 | 
27 | The **current** protocol version is [**2025-06-18**](/specification/2025-06-18/).
28 | 
29 | ## Negotiation
30 | 
31 | Version negotiation happens during
32 | [initialization](/specification/2025-06-18/basic/lifecycle#initialization). Clients and
33 | servers **MAY** support multiple protocol versions simultaneously, but they **MUST**
34 | agree on a single version to use for the session.
35 | 
36 | The protocol provides appropriate error handling if version negotiation fails, allowing
37 | clients to gracefully terminate connections when they cannot find a version compatible
38 | with the server.
39 | 


--------------------------------------------------------------------------------
/docs/style.css:
--------------------------------------------------------------------------------
  1 | #content-area {
  2 |   --font-mono: var(--font-jetbrains-mono), ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; /* via Mintlify theme */
  3 | 
  4 |   h5 {
  5 |     font-weight: 500;
  6 |   }
  7 | 
  8 |   h6 {
  9 |     font-weight: 400;
 10 |   }
 11 | }
 12 | 
 13 | #feature-support-matrix-wrapper table {
 14 |   width: 100%;
 15 |   table-layout: fixed;
 16 |   font-size: 0.75rem;
 17 | }
 18 | 
 19 | #feature-support-matrix-wrapper td,
 20 | #feature-support-matrix-wrapper th {
 21 |   padding: 0.25rem;
 22 |   text-align: center;
 23 | }
 24 | 
 25 | /* Left align Client column */
 26 | #feature-support-matrix-wrapper td:first-child,
 27 | #feature-support-matrix-wrapper th:first-child {
 28 |   text-align: left;
 29 | }
 30 | 
 31 | 
 32 | 
 33 | /*** Add automatic section numbers to headings and table of contents items ***/
 34 | 
 35 | #enable-section-numbers {
 36 |   display: none;
 37 | }
 38 | 
 39 | body:has(#enable-section-numbers) {
 40 |   #content-area,
 41 |   #table-of-contents {
 42 |     counter-reset: h2-counter h3-counter h4-counter h5-counter h6-counter;
 43 |   }
 44 | 
 45 |   #content-area h2[id],
 46 |   #table-of-contents li[data-depth="0"] {
 47 |     counter-set: h3-counter h4-counter h5-counter h6-counter;
 48 |   }
 49 | 
 50 |   #content-area h3[id],
 51 |   #table-of-contents li[data-depth="1"] {
 52 |     counter-set: h4-counter h5-counter h6-counter;
 53 |   }
 54 | 
 55 |   #content-area h4[id],
 56 |   #table-of-contents li[data-depth="2"] {
 57 |     counter-set: h5-counter h6-counter;
 58 |   }
 59 | 
 60 |   #content-area h5[id],
 61 |   #content-area h5,
 62 |   #table-of-contents li[data-depth="3"] {
 63 |     counter-set: h6-counter;
 64 |   }
 65 | 
 66 |   #content-area h2[id]::before,
 67 |   #table-of-contents li[data-depth="0"] a::before {
 68 |     counter-increment: h2-counter;
 69 |     content: counter(h2-counter) ". ";
 70 |   }
 71 | 
 72 |   #content-area h3[id]::before,
 73 |   #table-of-contents li[data-depth="1"] a::before {
 74 |     counter-increment: h3-counter;
 75 |     content: counter(h2-counter) "." counter(h3-counter) " ";
 76 |   }
 77 | 
 78 |   #content-area h4[id]::before,
 79 |   #table-of-contents li[data-depth="2"] a::before {
 80 |     counter-increment: h4-counter;
 81 |     content: counter(h2-counter) "." counter(h3-counter) "." counter(h4-counter)
 82 |       " ";
 83 |   }
 84 | 
 85 |   #content-area h5[id]::before,
 86 |   #content-area h5::before,
 87 |   #table-of-contents li[data-depth="3"] a::before {
 88 |     counter-increment: h5-counter;
 89 |     content: counter(h2-counter) "." counter(h3-counter) "." counter(h4-counter)
 90 |       "." counter(h5-counter) " ";
 91 |   }
 92 | 
 93 |   #content-area h6[id]::before,
 94 |   #content-area h6::before,
 95 |   #table-of-contents li[data-depth="4"] a::before {
 96 |     counter-increment: h6-counter;
 97 |     content: counter(h2-counter) "." counter(h3-counter) "." counter(h4-counter)
 98 |       "." counter(h5-counter) "." counter(h6-counter) " ";
 99 |   }
100 | }
101 | 
102 | 
103 | 
104 | /*** Page: schema reference ***/
105 | 
106 | #schema-reference {
107 |   display: none;
108 | }
109 | 
110 | body:has(#schema-reference) {
111 |   .tsd-comment {
112 |     :is(p, ul, ol):first-child {
113 |       margin-top: 0;
114 |     }
115 | 
116 |     :is(p, ul, ol):last-child {
117 |       margin-bottom: 0;
118 |     }
119 |   }
120 | 
121 |   .tsd-signature {
122 |     font-family: var(--font-mono);
123 |     font-size: 0.875rem;
124 |     line-height: 1.5rem;
125 | 
126 |     /* Based on code blocks rendered by Mintlify **on the production site**. */
127 |     margin: 1.25rem 0;
128 |     border: 1px solid;
129 |     border-color: light-dark(rgb(var(--gray-950)/.1), rgba(255, 255, 255, 0.1));
130 |     border-radius: 1rem;
131 |     padding: 1rem 0.875rem;
132 | 
133 |     a {
134 |       font-weight: normal;
135 |       border-bottom: none;
136 |       text-decoration: underline;
137 | 
138 |       &:hover {
139 |         text-decoration-thickness: 2px;
140 |       }
141 |     }
142 | 
143 |     a[href="#"] {
144 |       pointer-events: none;
145 |       color: inherit;
146 |       text-decoration: none;
147 |     }
148 | 
149 |     .tsd-signature-keyword {
150 |       color: light-dark(rgb(207, 34, 46), #9CDCFE);
151 |     }
152 | 
153 |     :is(.tsd-kind-interface, .tsd-kind-type-alias):not(.tsd-signature-type) {
154 |       color: light-dark(rgb(149, 56, 0), #4EC9B0);
155 |     }
156 | 
157 |     .tsd-signature-type:not(.tsd-kind-interface, .tsd-kind-type-alias) {
158 |       color: light-dark(rgb(5, 80, 174), #DCDCAA);
159 |     }
160 |   }
161 | 
162 |   .tsd-member {
163 |     margin: 1.25rem 0;
164 | 
165 |     [data-typedoc-h="3"] {
166 |       margin: 0.5rem 0;
167 | 
168 |       font-family: var(--font-mono);
169 |       font-weight: 700;
170 | 
171 |       scroll-margin-top: 5rem;
172 |     }
173 | 
174 |     & > .tsd-comment,
175 |     & > .tsd-type-declaration {
176 |       margin-left: 1.25rem;
177 |     }
178 | 
179 |     .tsd-type-declaration {
180 |       [data-typedoc-h="4"] {
181 |         display: none;
182 |       }
183 | 
184 |       [data-typedoc-h="4"] + ul {
185 |         margin-top: 0;
186 |       }
187 | 
188 |       [data-typedoc-h="5"] {
189 |         font-family: var(--font-mono);
190 |         font-size: 0.875rem;
191 |         font-weight: 500;
192 | 
193 |         width: fit-content;
194 |         padding: 0.125em 0.5em;
195 |         background-color: light-dark(rgb(var(--gray-100)/.5), rgb(255 255 255/.05));
196 |       }
197 |     }
198 | 
199 |     .tsd-anchor-icon,
200 |     .tsd-tag,
201 |     .tsd-signature,
202 |     .tsd-sources {
203 |       display: none;
204 |     }
205 |   }
206 | }
207 | 
208 | 
209 | 
210 | /* Custom landing page styles */
211 | .landing-page {
212 |   min-height: 100vh;
213 |   background: #ffffff;
214 |   color: #111827;
215 |   overflow-x: hidden;
216 |   position: relative;
217 | }
218 | 
219 | .hero-section {
220 |   position: relative;
221 |   z-index: 1;
222 |   display: flex;
223 |   flex-direction: column;
224 |   align-items: center;
225 |   padding: 6rem 2rem;
226 |   text-align: center;
227 | }
228 | 
229 | .hero-title {
230 |   margin-bottom: 2rem;
231 |   display: flex;
232 |   align-items: center;
233 |   justify-content: center;
234 | }
235 | 
236 | .hero-logo {
237 |   height: 8rem;
238 |   width: auto;
239 | }
240 | 
241 | .hero-subtitle {
242 |   font-size: 1.5rem;
243 |   color: #6b7280;
244 |   margin-bottom: 4rem;
245 |   max-width: 700px;
246 |   line-height: 1.7;
247 | }
248 | 
249 | 
250 | .play-button {
251 |   width: 100px;
252 |   height: 100px;
253 |   background: rgba(255,255,255,0.9);
254 |   backdrop-filter: blur(10px);
255 |   border: 2px solid rgba(0,0,0,0.1);
256 |   border-radius: 50%;
257 |   display: flex;
258 |   align-items: center;
259 |   justify-content: center;
260 |   cursor: pointer;
261 |   transition: all 0.3s;
262 |   z-index: 2;
263 |   position: relative;
264 |   box-shadow: 0 4px 20px rgba(0,0,0,0.1);
265 | }
266 | 
267 | .play-button:hover {
268 |   transform: scale(1.1);
269 |   background: rgba(255,255,255,1);
270 |   box-shadow: 0 8px 30px rgba(0,0,0,0.15);
271 | }
272 | 
273 | .play-icon {
274 |   width: 0;
275 |   height: 0;
276 |   border-left: 35px solid #111827;
277 |   border-top: 20px solid transparent;
278 |   border-bottom: 20px solid transparent;
279 |   margin-left: 8px;
280 | }
281 | 
282 | .cta-buttons {
283 |   display: flex;
284 |   gap: 1.5rem;
285 |   justify-content: center;
286 |   margin-bottom: 6rem;
287 |   flex-wrap: wrap;
288 | }
289 | 
290 | .cta-primary {
291 |   background: #111827;
292 |   color: white;
293 |   padding: 1rem 2.5rem;
294 |   border-radius: 9999px;
295 |   text-decoration: none;
296 |   font-weight: 600;
297 |   font-size: 1.1rem;
298 |   transition: all 0.3s;
299 |   box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
300 | }
301 | 
302 | .cta-primary:hover {
303 |   transform: translateY(-2px);
304 |   background: #1f2937;
305 |   box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
306 | }
307 | 
308 | .cta-secondary {
309 |   background: #ffffff;
310 |   color: #111827;
311 |   padding: 1rem 2.5rem;
312 |   border-radius: 9999px;
313 |   text-decoration: none;
314 |   font-weight: 600;
315 |   font-size: 1.1rem;
316 |   border: 2px solid #111827;
317 |   transition: all 0.3s;
318 | }
319 | 
320 | .cta-secondary:hover {
321 |   background: #f9fafb;
322 |   transform: translateY(-2px);
323 |   box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
324 | }
325 | 
326 | .quick-links {
327 |   display: flex;
328 |   gap: 1rem;
329 |   justify-content: center;
330 |   align-items: center;
331 |   margin-top: 1rem;
332 |   font-size: 1rem;
333 | }
334 | 
335 | .quick-links a {
336 |   color: #6b7280;
337 |   text-decoration: none;
338 |   transition: color 0.2s;
339 | }
340 | 
341 | .quick-links a:hover {
342 |   color: #111827;
343 |   text-decoration: underline;
344 | }
345 | 
346 | 
347 | .quick-links .separator {
348 |   color: #d1d5db;
349 | }
350 | 
351 | .features-grid {
352 |   display: grid;
353 |   grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
354 |   gap: 2rem;
355 |   max-width: 1200px;
356 |   margin: 0 auto;
357 |   padding: 0 2rem;
358 | }
359 | 
360 | .feature-card {
361 |   background: #f9fafb;
362 |   backdrop-filter: blur(10px);
363 |   padding: 3rem;
364 |   border-radius: 20px;
365 |   border: 1px solid #e5e7eb;
366 |   transition: all 0.3s;
367 |   position: relative;
368 |   overflow: hidden;
369 |   box-shadow: 0 1px 3px rgba(0,0,0,0.1);
370 | }
371 | 
372 | .feature-card::before {
373 |   content: '';
374 |   position: absolute;
375 |   top: 0;
376 |   left: 0;
377 |   right: 0;
378 |   height: 1px;
379 |   background: linear-gradient(90deg, transparent, rgba(139, 92, 246, 0.3), transparent);
380 |   opacity: 0;
381 |   transition: opacity 0.3s;
382 | }
383 | 
384 | .feature-card:hover {
385 |   transform: translateY(-5px);
386 |   background: #ffffff;
387 |   border-color: #d1d5db;
388 |   box-shadow: 0 10px 40px rgba(0,0,0,0.1);
389 | }
390 | 
391 | .feature-card:hover::before {
392 |   opacity: 1;
393 | }
394 | 
395 | .feature-icon {
396 |   font-size: 3.5rem;
397 |   margin-bottom: 1.5rem;
398 |   display: block;
399 | }
400 | 
401 | .feature-title {
402 |   font-size: 1.8rem;
403 |   font-weight: 700;
404 |   margin-bottom: 1rem;
405 |   color: #111827;
406 | }
407 | 
408 | .feature-description {
409 |   color: #6b7280;
410 |   line-height: 1.7;
411 |   font-size: 1.1rem;
412 | }
413 | 
414 | /* Section styles */
415 | .section-title {
416 |   font-size: 2.5rem;
417 |   font-weight: 700;
418 |   margin-bottom: 1.5rem;
419 |   text-align: center;
420 |   color: #111827;
421 | }
422 | 
423 | .section-description {
424 |   font-size: 1.125rem;
425 |   color: #6b7280;
426 |   line-height: 1.8;
427 |   max-width: 800px;
428 |   margin: 0 auto 1.5rem;
429 |   text-align: center;
430 | }
431 | 
432 | /* Intro video section */
433 | .intro-video-section {
434 |   display: flex;
435 |   flex-direction: column;
436 |   align-items: center;
437 |   max-width: 1200px;
438 |   margin: 0 auto;
439 |   padding: 4rem 2rem 6rem;
440 |   width: 100%;
441 | }
442 | 
443 | .intro-content-wrapper {
444 |   display: flex;
445 |   align-items: center;
446 |   gap: 4rem;
447 |   width: 100%;
448 | }
449 | 
450 | .intro-content {
451 |   flex: 1;
452 |   text-align: center;
453 | }
454 | 
455 | .intro-content.left-aligned {
456 |   text-align: left;
457 | }
458 | 
459 | .intro-logo {
460 |   flex: 0 0 auto;
461 |   display: flex;
462 |   align-items: center;
463 |   justify-content: center;
464 | }
465 | 
466 | .intro-logo img {
467 |   width: 300px;
468 |   height: auto;
469 |   display: block;
470 | }
471 | 
472 | .intro-title {
473 |   font-size: 2.5rem;
474 |   font-weight: 700;
475 |   margin-bottom: 1.5rem;
476 |   color: #111827;
477 |   line-height: 1.2;
478 | }
479 | 
480 | .intro-description {
481 |   font-size: 1.125rem;
482 |   color: #6b7280;
483 |   line-height: 1.8;
484 |   margin-bottom: 1.5rem;
485 | }
486 | 
487 | .intro-video {
488 |   width: 100%;
489 | }
490 | 
491 | .intro-video .video-placeholder {
492 |   width: 100%;
493 |   aspect-ratio: 16/9;
494 |   background: #f9fafb;
495 |   border-radius: 20px;
496 |   display: flex;
497 |   align-items: center;
498 |   justify-content: center;
499 |   position: relative;
500 |   overflow: hidden;
501 |   border: 1px solid #e5e7eb;
502 |   box-shadow: 0 4px 20px rgba(0,0,0,0.05);
503 | }
504 | 
505 | /* Paths section */
506 | .paths-section {
507 |   padding: 4rem 2rem;
508 |   background: #f9fafb;
509 | }
510 | 
511 | .paths-grid {
512 |   display: grid;
513 |   grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
514 |   gap: 2rem;
515 |   max-width: 1200px;
516 |   margin: 2rem auto 0;
517 | }
518 | 
519 | .path-card {
520 |   background: white;
521 |   padding: 2.5rem;
522 |   border-radius: 16px;
523 |   border: 1px solid #e5e7eb;
524 |   transition: all 0.3s;
525 |   text-align: center;
526 | }
527 | 
528 | .path-card:hover {
529 |   transform: translateY(-5px);
530 |   box-shadow: 0 10px 30px rgba(0,0,0,0.1);
531 |   border-color: #d1d5db;
532 | }
533 | 
534 | .path-icon {
535 |   font-size: 3rem;
536 |   margin-bottom: 1rem;
537 |   display: block;
538 | }
539 | 
540 | .path-card h3 {
541 |   font-size: 1.5rem;
542 |   font-weight: 700;
543 |   margin-bottom: 0.5rem;
544 |   color: #111827;
545 | }
546 | 
547 | .path-card h4 {
548 |   font-size: 1.125rem;
549 |   font-weight: 600;
550 |   color: #4b5563;
551 |   margin-bottom: 1rem;
552 | }
553 | 
554 | .path-card p {
555 |   color: #6b7280;
556 |   line-height: 1.6;
557 | }
558 | 
559 | /* How it works section */
560 | .how-section {
561 |   padding: 4rem 2rem;
562 |   max-width: 1200px;
563 |   margin: 0 auto;
564 |   width: 100%;
565 | }
566 | 
567 | .steps-container {
568 |   display: flex;
569 |   align-items: flex-start;
570 |   justify-content: center;
571 |   gap: 1rem;
572 |   margin: 3rem 0;
573 |   flex-wrap: wrap;
574 | }
575 | 
576 | .step-item {
577 |   flex: 1;
578 |   min-width: 250px;
579 |   max-width: 350px;
580 |   text-align: left;
581 | }
582 | 
583 | .step-content h3 {
584 |   font-size: 1.25rem;
585 |   font-weight: 700;
586 |   margin-bottom: 0.5rem;
587 |   color: #111827;
588 |   display: flex;
589 |   align-items: center;
590 |   gap: 0.75rem;
591 | }
592 | 
593 | .step-number {
594 |   width: 36px;
595 |   height: 36px;
596 |   background: #111827;
597 |   color: white;
598 |   border-radius: 50%;
599 |   display: inline-flex;
600 |   align-items: center;
601 |   justify-content: center;
602 |   font-size: 1rem;
603 |   font-weight: 700;
604 |   flex-shrink: 0;
605 | }
606 | 
607 | .step-content p {
608 |   color: #6b7280;
609 |   line-height: 1.6;
610 |   font-size: 0.95rem;
611 |   margin-left: calc(36px + 0.75rem);
612 | }
613 | 
614 | .step-connector {
615 |   width: 40px;
616 |   height: 2px;
617 |   background: #e5e7eb;
618 |   position: relative;
619 |   margin-top: 18px;
620 | }
621 | 
622 | .step-connector::after {
623 |   content: '';
624 |   position: absolute;
625 |   right: -6px;
626 |   top: -4px;
627 |   width: 0;
628 |   height: 0;
629 |   border-left: 10px solid #e5e7eb;
630 |   border-top: 5px solid transparent;
631 |   border-bottom: 5px solid transparent;
632 | }
633 | 
634 | /* Video text */
635 | 
636 | /* Stats section */
637 | .ecosystem-section {
638 |   padding: 4rem 2rem;
639 |   background: #f9fafb;
640 |   border-radius: 24px;
641 |   margin: 4rem auto;
642 |   max-width: 1200px;
643 | }
644 | 
645 | .stats-container {
646 |   background: white;
647 |   border-radius: 24px;
648 |   padding: 3rem;
649 |   box-shadow: 0 4px 20px rgba(0,0,0,0.05);
650 |   width: 100%;
651 |   margin: 0 0 3rem;
652 |   border: 1px solid #e5e7eb;
653 | }
654 | 
655 | .stats-grid {
656 |   display: grid;
657 |   grid-template-columns: repeat(3, 1fr);
658 |   gap: 3rem;
659 |   text-align: center;
660 | }
661 | 
662 | .stat-card {
663 |   padding: 1rem;
664 | }
665 | 
666 | .stat-card {
667 |   .stat-label {
668 |     font-weight: bold;
669 |     text-decoration: 2px solid underline;
670 |     text-underline-offset: 6px;
671 |   }
672 | 
673 |   &:hover {
674 |     .stat-number {
675 |       text-shadow: 1px 1px 2px;
676 |     }
677 | 
678 |     .stat-label {
679 |       text-decoration-thickness: 4px;
680 |     }
681 |   }
682 | }
683 | 
684 | .stat-number {
685 |   font-size: 3.5rem;
686 |   font-weight: 800;
687 |   color: #6366f1;
688 |   margin-bottom: 0.5rem;
689 |   line-height: 1;
690 | }
691 | 
692 | .stat-label {
693 |   color: #6b7280;
694 |   font-size: 1.125rem;
695 |   font-weight: 500;
696 | }
697 | 
698 | .ecosystem-description {
699 |   text-align: center;
700 |   max-width: 800px;
701 |   margin: 0 auto;
702 |   color: #4b5563;
703 |   font-size: 1.125rem;
704 |   line-height: 1.8;
705 | }
706 | 
707 | /* Final CTA section */
708 | .final-cta {
709 |   padding: 6rem 2rem;
710 |   background: white;
711 | }
712 | 
713 | .cta-cards {
714 |   display: grid;
715 |   grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
716 |   gap: 2rem;
717 |   max-width: 1000px;
718 |   margin: 2rem auto 0;
719 | }
720 | 
721 | .cta-card {
722 |   background: #f9fafb;
723 |   padding: 2.5rem;
724 |   border-radius: 16px;
725 |   text-decoration: none;
726 |   color: inherit;
727 |   transition: all 0.3s;
728 |   text-align: center;
729 |   border: 1px solid #e5e7eb;
730 |   display: block;
731 | }
732 | 
733 | .cta-card:hover {
734 |   transform: translateY(-5px);
735 |   background: white;
736 |   box-shadow: 0 10px 30px rgba(0,0,0,0.1);
737 |   border-color: #d1d5db;
738 | }
739 | 
740 | .cta-icon {
741 |   font-size: 2.5rem;
742 |   margin-bottom: 1rem;
743 |   display: block;
744 | }
745 | 
746 | .cta-card h3 {
747 |   font-size: 1.5rem;
748 |   font-weight: 700;
749 |   margin-bottom: 0.75rem;
750 |   color: #111827;
751 | }
752 | 
753 | .cta-card p {
754 |   color: #6b7280;
755 |   line-height: 1.6;
756 | }
757 | 
758 | @media (max-width: 768px) {
759 |   .hero-title {
760 |     font-size: 3rem;
761 |   }
762 |   .hero-subtitle {
763 |     font-size: 1.2rem;
764 |   }
765 |   .features-grid {
766 |     grid-template-columns: 1fr;
767 |   }
768 |   .paths-grid,
769 |   .steps-grid,
770 |   .cta-cards {
771 |     grid-template-columns: 1fr;
772 |   }
773 |   .stats-grid {
774 |     grid-template-columns: repeat(2, 1fr);
775 |     gap: 2rem;
776 |   }
777 |   .cta-buttons {
778 |     flex-direction: column;
779 |     width: 100%;
780 |     align-items: center;
781 |   }
782 |   .cta-primary, .cta-secondary {
783 |     width: 80%;
784 |     max-width: 300px;
785 |     text-align: center;
786 |   }
787 |   .section-title {
788 |     font-size: 2rem;
789 |   }
790 |   .stat-number {
791 |     font-size: 2.5rem;
792 |   }
793 |   .steps-container {
794 |     flex-direction: column;
795 |     gap: 2rem;
796 |   }
797 |   .step-connector {
798 |     display: none;
799 |   }
800 |   .step-item {
801 |     max-width: 100%;
802 |   }
803 |   .step-content p {
804 |     margin-left: 0;
805 |   }
806 |   .intro-content-wrapper {
807 |     flex-direction: column;
808 |     gap: 2rem;
809 |   }
810 |   .intro-logo {
811 |     width: 100%;
812 |     max-width: 200px;
813 |     margin: 0 auto;
814 |   }
815 | }
816 | 


--------------------------------------------------------------------------------
/docs/tutorials/building-a-client-node.mdx:
--------------------------------------------------------------------------------
  1 | <Tab title="Node">
  2 | 
  3 | ## System Requirements
  4 | 
  5 | Before starting, ensure your system meets these requirements:
  6 | 
  7 | - Mac or Windows computer
  8 | - Node.js version 16 or higher installed
  9 | - npm (comes with Node.js)
 10 | 
 11 | ## Setting Up Your Environment
 12 | 
 13 | First, create a new Node.js project:
 14 | 
 15 | ```bash
 16 | # Create project directory
 17 | mkdir mcp-client
 18 | cd mcp-client
 19 | 
 20 | # Initialize npm project
 21 | npm init -y
 22 | 
 23 | # Install dependencies
 24 | npm install @modelcontextprotocol/sdk @anthropic-ai/sdk dotenv
 25 | npm install -D typescript @types/node
 26 | 
 27 | # Create TypeScript config
 28 | npx tsc --init
 29 | 
 30 | # Create necessary files
 31 | mkdir src
 32 | touch src/client.ts
 33 | touch .env
 34 | ```
 35 | 
 36 | Update your `package.json` to add necessary configuration:
 37 | 
 38 | ```json
 39 | {
 40 |   "type": "module",
 41 |   "scripts": {
 42 |     "build": "tsc",
 43 |     "start": "node build/client.js"
 44 |   }
 45 | }
 46 | ```
 47 | 
 48 | Update your `tsconfig.json` with appropriate settings:
 49 | 
 50 | ```json
 51 | {
 52 |   "compilerOptions": {
 53 |     "target": "ES2022",
 54 |     "module": "Node16",
 55 |     "moduleResolution": "Node16",
 56 |     "outDir": "./build",
 57 |     "rootDir": "./src",
 58 |     "strict": true,
 59 |     "esModuleInterop": true,
 60 |     "skipLibCheck": true,
 61 |     "forceConsistentCasingInFileNames": true
 62 |   },
 63 |   "include": ["src/**/*"]
 64 | }
 65 | ```
 66 | 
 67 | ## Setting Up Your API Key
 68 | 
 69 | You'll need an Anthropic API key from the [Anthropic Console](https://console.anthropic.com/settings/keys).
 70 | 
 71 | Create a `.env` file:
 72 | 
 73 | ```bash
 74 | ANTHROPIC_API_KEY=your_key_here
 75 | ```
 76 | 
 77 | Add `.env` to your `.gitignore`:
 78 | 
 79 | ```bash
 80 | echo ".env" >> .gitignore
 81 | ```
 82 | 
 83 | ## Creating the Client
 84 | 
 85 | First, let's set up our imports and create the basic client class in `src/client.ts`:
 86 | 
 87 | ```typescript
 88 | import { Client } from "@modelcontextprotocol/sdk/client/index.js";
 89 | import { StdioClientTransport } from "@modelcontextprotocol/sdk/client/stdio.js";
 90 | import Anthropic from "@anthropic-ai/sdk";
 91 | import dotenv from "dotenv";
 92 | import {
 93 |   CallToolResultSchema,
 94 |   ListToolsResultSchema,
 95 | } from "@modelcontextprotocol/sdk/types.js";
 96 | import * as readline from "node:readline";
 97 | 
 98 | dotenv.config();
 99 | 
100 | interface MCPClientConfig {
101 |   name?: string;
102 |   version?: string;
103 | }
104 | 
105 | class MCPClient {
106 |   private client: Client | null = null;
107 |   private anthropic: Anthropic;
108 |   private transport: StdioClientTransport | null = null;
109 | 
110 |   constructor(config: MCPClientConfig = {}) {
111 |     this.anthropic = new Anthropic();
112 |   }
113 | 
114 |   // Methods will go here
115 | }
116 | ```
117 | 
118 | ## Server Connection Management
119 | 
120 | Next, implement the method to connect to an MCP server:
121 | 
122 | ```typescript
123 |   async connectToServer(serverScriptPath: string): Promise<void> {
124 |     const isPython = serverScriptPath.endsWith(".py");
125 |     const isJs = serverScriptPath.endsWith(".js");
126 | 
127 |     if (!isPython && !isJs) {
128 |       throw new Error("Server script must be a .py or .js file");
129 |     }
130 | 
131 |     const command = isPython ? "python" : "node";
132 | 
133 |     this.transport = new StdioClientTransport({
134 |       command,
135 |       args: [serverScriptPath],
136 |     });
137 | 
138 |     this.client = new Client(
139 |       {
140 |         name: "mcp-client",
141 |         version: "1.0.0",
142 |       },
143 |       {
144 |         capabilities: {},
145 |       }
146 |     );
147 | 
148 |     await this.client.connect(this.transport);
149 | 
150 |     // List available tools
151 |     const response = await this.client.request(
152 |       { method: "tools/list" },
153 |       ListToolsResultSchema
154 |     );
155 | 
156 |     console.log(
157 |       "\nConnected to server with tools:",
158 |       response.tools.map((tool: any) => tool.name)
159 |     );
160 |   }
161 | ```
162 | 
163 | ## Query Processing Logic
164 | 
165 | Now add the core functionality for processing queries and handling tool calls:
166 | 
167 | ```typescript
168 |   async processQuery(query: string): Promise<string> {
169 |     if (!this.client) {
170 |       throw new Error("Client not connected");
171 |     }
172 | 
173 |     // Initialize messages array with user query
174 |     let messages: Anthropic.MessageParam[] = [
175 |       {
176 |         role: "user",
177 |         content: query,
178 |       },
179 |     ];
180 | 
181 |     // Get available tools
182 |     const toolsResponse = await this.client.request(
183 |       { method: "tools/list" },
184 |       ListToolsResultSchema
185 |     );
186 | 
187 |     const availableTools = toolsResponse.tools.map((tool: any) => ({
188 |       name: tool.name,
189 |       description: tool.description,
190 |       input_schema: tool.inputSchema,
191 |     }));
192 | 
193 |     const finalText: string[] = [];
194 |     let currentResponse = await this.anthropic.messages.create({
195 |       model: "claude-3-5-sonnet-20241022",
196 |       max_tokens: 1000,
197 |       messages,
198 |       tools: availableTools,
199 |     });
200 | 
201 |     // Process the response and any tool calls
202 |     while (true) {
203 |       // Add Claude's response to final text and messages
204 |       for (const content of currentResponse.content) {
205 |         if (content.type === "text") {
206 |           finalText.push(content.text);
207 |         } else if (content.type === "tool_use") {
208 |           const toolName = content.name;
209 |           const toolArgs = content.input;
210 | 
211 |           // Execute tool call
212 |           const result = await this.client.request(
213 |             {
214 |               method: "tools/call",
215 |               params: {
216 |                 name: toolName,
217 |                 arguments: toolArgs,
218 |               },
219 |             },
220 |             CallToolResultSchema
221 |           );
222 | 
223 |           finalText.push(
224 |             `[Calling tool ${toolName} with args ${JSON.stringify(toolArgs)}]`
225 |           );
226 | 
227 |           // Add Claude's response (including tool use) to messages
228 |           messages.push({
229 |             role: "assistant",
230 |             content: currentResponse.content,
231 |           });
232 | 
233 |           // Add tool result to messages
234 |           messages.push({
235 |             role: "user",
236 |             content: [
237 |               {
238 |                 type: "tool_result",
239 |                 tool_use_id: content.id,
240 |                 content: [
241 |                   { type: "text", text: JSON.stringify(result.content) },
242 |                 ],
243 |               },
244 |             ],
245 |           });
246 | 
247 |           // Get next response from Claude with tool results
248 |           currentResponse = await this.anthropic.messages.create({
249 |             model: "claude-3-5-sonnet-20241022",
250 |             max_tokens: 1000,
251 |             messages,
252 |             tools: availableTools,
253 |           });
254 | 
255 |           // Add Claude's interpretation of the tool results to final text
256 |           if (currentResponse.content[0]?.type === "text") {
257 |             finalText.push(currentResponse.content[0].text);
258 |           }
259 | 
260 |           // Continue the loop to process any additional tool calls
261 |           continue;
262 |         }
263 |       }
264 | 
265 |       // If we reach here, there were no tool calls in the response
266 |       break;
267 |     }
268 | 
269 |     return finalText.join("\n");
270 |   }
271 | 
272 | ```
273 | 
274 | ## Interactive Chat Interface
275 | 
276 | Add the chat loop and cleanup functionality:
277 | 
278 | ```typescript
279 |   async chatLoop(): Promise<void> {
280 |     console.log("\nMCP Client Started!");
281 |     console.log("Type your queries or 'quit' to exit.");
282 | 
283 |     // Using Node's readline for console input
284 |     const rl = readline.createInterface({
285 |       input: process.stdin,
286 |       output: process.stdout,
287 |     });
288 | 
289 |     const askQuestion = () => {
290 |       rl.question("\nQuery: ", async (query: string) => {
291 |         try {
292 |           if (query.toLowerCase() === "quit") {
293 |             await this.cleanup();
294 |             rl.close();
295 |             return;
296 |           }
297 | 
298 |           const response = await this.processQuery(query);
299 |           console.log("\n" + response);
300 |           askQuestion();
301 |         } catch (error) {
302 |           console.error("\nError:", error);
303 |           askQuestion();
304 |         }
305 |       });
306 |     };
307 | 
308 |     askQuestion();
309 |   }
310 | 
311 |   async cleanup(): Promise<void> {
312 |     if (this.transport) {
313 |       await this.transport.close();
314 |     }
315 |   }
316 | ```
317 | 
318 | ## Main Entry Point
319 | 
320 | Finally, add the main execution logic outside the class:
321 | 
322 | ```typescript
323 | // Main execution
324 | async function main() {
325 |   if (process.argv.length < 3) {
326 |     console.log("Usage: ts-node client.ts <path_to_server_script>");
327 |     process.exit(1);
328 |   }
329 | 
330 |   const client = new MCPClient();
331 |   try {
332 |     await client.connectToServer(process.argv[2]);
333 |     await client.chatLoop();
334 |   } catch (error) {
335 |     console.error("Error:", error);
336 |     await client.cleanup();
337 |     process.exit(1);
338 |   }
339 | }
340 | 
341 | // Run main if this is the main module
342 | if (import.meta.url === new URL(process.argv[1], "file:").href) {
343 |   main();
344 | }
345 | 
346 | export default MCPClient;
347 | ```
348 | 
349 | ## Running the Client
350 | 
351 | To run your client with any MCP server:
352 | 
353 | ```bash
354 | # Build the TypeScript code. Make sure to rerun this every time you update `client.ts`!
355 | npm run build
356 | 
357 | # Run the client
358 | node build/client.js path/to/server.py  # for Python servers
359 | node build/client.js path/to/server.js  # for Node.js servers
360 | ```
361 | 
362 | The client will:
363 | 
364 | 1. Connect to the specified server
365 | 2. List available tools
366 | 3. Start an interactive chat session where you can:
367 |    - Enter queries
368 |    - See tool executions
369 |    - Get responses from Claude
370 | 
371 | ## Key Components Explained
372 | 
373 | #### 1. Client Initialization
374 | 
375 | - The `MCPClient` class initializes with session management and API clients
376 | - Sets up the MCP client with basic capabilities
377 | - Configures the Anthropic client for Claude interactions
378 | 
379 | #### 2. Server Connection
380 | 
381 | - Supports both Python and Node.js servers
382 | - Validates server script type
383 | - Sets up proper communication channels
384 | - Lists available tools on connection
385 | 
386 | #### 3. Query Processing
387 | 
388 | - Maintains conversation context
389 | - Handles Claude's responses and tool calls
390 | - Manages the message flow between Claude and tools
391 | - Combines results into a coherent response
392 | 
393 | #### 4. Interactive Interface
394 | 
395 | - Provides a simple command-line interface
396 | - Handles user input and displays responses
397 | - Includes basic error handling
398 | - Allows graceful exit
399 | 
400 | #### 5. Resource Management
401 | 
402 | - Proper cleanup of resources
403 | - Error handling for connection issues
404 | - Graceful shutdown procedures
405 | 
406 | ### Common Customization Points
407 | 
408 | 1. **Tool Handling**
409 |    - Modify `processQuery()` to handle specific tool types
410 |    - Add custom error handling for tool calls
411 |    - Implement tool-specific response formatting
412 | 
413 | 2. **Response Processing**
414 |    - Customize how tool results are formatted
415 |    - Add response filtering or transformation
416 |    - Implement custom logging
417 | 
418 | 3. **User Interface**
419 |    - Add a GUI or web interface
420 |    - Implement rich console output
421 |    - Add command history or auto-completion
422 | 
423 | ### Best Practices
424 | 
425 | 1. **Error Handling**
426 |    - Always wrap tool calls in try-catch blocks
427 |    - Provide meaningful error messages
428 |    - Gracefully handle connection issues
429 | 
430 | 2. **Resource Management**
431 |    - Use proper cleanup methods
432 |    - Close connections when done
433 |    - Handle server disconnections
434 | 
435 | 3. **Security**
436 |    - Store API keys securely in `.env`
437 |    - Validate server responses
438 |    - Be cautious with tool permissions
439 | 
440 | ### Troubleshooting
441 | 
442 | #### Server Path Issues
443 | 
444 | - Double-check the path to your server script
445 | - Use absolute paths if relative paths aren't working
446 | - For Windows users, use forward slashes (/) or escaped backslashes (\\)
447 | - Verify the server file has the correct extension (.py or .js)
448 | 
449 | Example of correct path usage:
450 | 
451 | ```bash
452 | # Relative path
453 | node build/client.js ./server/weather.js
454 | 
455 | # Absolute path
456 | node build/client.js /Users/username/projects/mcp-server/weather.js
457 | 
458 | # Windows path (either format works)
459 | node build/client.js C:/projects/mcp-server/weather.js
460 | node build/client.js C:\\projects\\mcp-server\\weather.js
461 | ```
462 | 
463 | #### Connection Issues
464 | 
465 | - Verify the server script exists and has correct permissions
466 | - Check that the server script is executable
467 | - Ensure the server script's dependencies are installed
468 | - Try running the server script directly to check for errors
469 | 
470 | #### Tool Execution Issues
471 | 
472 | - Check server logs for error messages
473 | - Verify tool input arguments match the schema
474 | - Ensure tool dependencies are available
475 | - Add debug logging to track execution flow
476 | 
477 | </Tab>
478 | 


--------------------------------------------------------------------------------
/docs/tutorials/building-mcp-with-llms.mdx:
--------------------------------------------------------------------------------
 1 | ---
 2 | title: "Building MCP with LLMs"
 3 | description: "Speed up your MCP development using LLMs such as Claude!"
 4 | ---
 5 | 
 6 | This guide will help you use LLMs to help you build custom Model Context Protocol (MCP) servers and clients. We'll be focusing on Claude for this tutorial, but you can do this with any frontier LLM.
 7 | 
 8 | ## Preparing the documentation
 9 | 
10 | Before starting, gather the necessary documentation to help Claude understand MCP:
11 | 
12 | 1. Visit https://modelcontextprotocol.io/llms-full.txt and copy the full documentation text
13 | 2. Navigate to either the [MCP TypeScript SDK](https://github.com/modelcontextprotocol/typescript-sdk) or [Python SDK repository](https://github.com/modelcontextprotocol/python-sdk)
14 | 3. Copy the README files and other relevant documentation
15 | 4. Paste these documents into your conversation with Claude
16 | 
17 | ## Describing your server
18 | 
19 | Once you've provided the documentation, clearly describe to Claude what kind of server you want to build. Be specific about:
20 | 
21 | - What resources your server will expose
22 | - What tools it will provide
23 | - Any prompts it should offer
24 | - What external systems it needs to interact with
25 | 
26 | For example:
27 | 
28 | ```
29 | Build an MCP server that:
30 | - Connects to my company's PostgreSQL database
31 | - Exposes table schemas as resources
32 | - Provides tools for running read-only SQL queries
33 | - Includes prompts for common data analysis tasks
34 | ```
35 | 
36 | ## Working with Claude
37 | 
38 | When working with Claude on MCP servers:
39 | 
40 | 1. Start with the core functionality first, then iterate to add more features
41 | 2. Ask Claude to explain any parts of the code you don't understand
42 | 3. Request modifications or improvements as needed
43 | 4. Have Claude help you test the server and handle edge cases
44 | 
45 | Claude can help implement all the key MCP features:
46 | 
47 | - Resource management and exposure
48 | - Tool definitions and implementations
49 | - Prompt templates and handlers
50 | - Error handling and logging
51 | - Connection and transport setup
52 | 
53 | ## Best practices
54 | 
55 | When building MCP servers with Claude:
56 | 
57 | - Break down complex servers into smaller pieces
58 | - Test each component thoroughly before moving on
59 | - Keep security in mind - validate inputs and limit access appropriately
60 | - Document your code well for future maintenance
61 | - Follow MCP protocol specifications carefully
62 | 
63 | ## Next steps
64 | 
65 | After Claude helps you build your server:
66 | 
67 | 1. Review the generated code carefully
68 | 2. Test the server with the MCP Inspector tool
69 | 3. Connect it to Claude.app or other MCP clients
70 | 4. Iterate based on real usage and feedback
71 | 
72 | Remember that Claude can help you modify and improve your server as requirements change over time.
73 | 
74 | Need more guidance? Just ask Claude specific questions about implementing MCP features or troubleshooting issues that arise.
75 | 


--------------------------------------------------------------------------------
/package-lock.json:
--------------------------------------------------------------------------------
    1 | {
    2 |   "name": "@modelcontextprotocol/specification",
    3 |   "version": "0.1.0",
    4 |   "lockfileVersion": 3,
    5 |   "requires": true,
    6 |   "packages": {
    7 |     "": {
    8 |       "name": "@modelcontextprotocol/specification",
    9 |       "version": "0.1.0",
   10 |       "license": "MIT",
   11 |       "devDependencies": {
   12 |         "ajv": "^8.17.1",
   13 |         "ajv-formats": "^3.0.1",
   14 |         "glob": "^11.0.0",
   15 |         "mintlify": "^4.0",
   16 |         "prettier": "^3.4.2",
   17 |         "tsx": "^4.19.1",
   18 |         "typedoc": "^0.28.7",
   19 |         "typescript": "^5.6.2",
   20 |         "typescript-json-schema": "^0.65.1"
   21 |       },
   22 |       "engines": {
   23 |         "node": ">=20"
   24 |       }
   25 |     },
   26 |     "node_modules/@alcalzone/ansi-tokenize": {
   27 |       "version": "0.1.3",
   28 |       "resolved": "https://registry.npmjs.org/@alcalzone/ansi-tokenize/-/ansi-tokenize-0.1.3.tgz",
   29 |       "integrity": "sha512-3yWxPTq3UQ/FY9p1ErPxIyfT64elWaMvM9lIHnaqpyft63tkxodF5aUElYHrdisWve5cETkh1+KBw1yJuW0aRw==",
   30 |       "dev": true,
   31 |       "license": "MIT",
   32 |       "dependencies": {
   33 |         "ansi-styles": "^6.2.1",
   34 |         "is-fullwidth-code-point": "^4.0.0"
   35 |       },
   36 |       "engines": {
   37 |         "node": ">=14.13.1"
   38 |       }
   39 |     },
   40 |     "node_modules/@alloc/quick-lru": {
   41 |       "version": "5.2.0",
   42 |       "resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
   43 |       "integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
   44 |       "dev": true,
   45 |       "license": "MIT",
   46 |       "engines": {
   47 |         "node": ">=10"
   48 |       },
   49 |       "funding": {
   50 |         "url": "https://github.com/sponsors/sindresorhus"
   51 |       }
   52 |     },
   53 |     "node_modules/@ark/schema": {
   54 |       "version": "0.46.0",
   55 |       "resolved": "https://registry.npmjs.org/@ark/schema/-/schema-0.46.0.tgz",
   56 |       "integrity": "sha512-c2UQdKgP2eqqDArfBqQIJppxJHvNNXuQPeuSPlDML4rjw+f1cu0qAlzOG4b8ujgm9ctIDWwhpyw6gjG5ledIVQ==",
   57 |       "dev": true,
   58 |       "license": "MIT",
   59 |       "dependencies": {
   60 |         "@ark/util": "0.46.0"
   61 |       }
   62 |     },
   63 |     "node_modules/@ark/util": {
   64 |       "version": "0.46.0",
   65 |       "resolved": "https://registry.npmjs.org/@ark/util/-/util-0.46.0.tgz",
   66 |       "integrity": "sha512-JPy/NGWn/lvf1WmGCPw2VGpBg5utZraE84I7wli18EDF3p3zc/e9WolT35tINeZO3l7C77SjqRJeAUoT0CvMRg==",
   67 |       "dev": true,
   68 |       "license": "MIT"
   69 |     },
   70 |     "node_modules/@asyncapi/parser": {
   71 |       "version": "3.4.0",
   72 |       "resolved": "https://registry.npmjs.org/@asyncapi/parser/-/parser-3.4.0.tgz",
   73 |       "integrity": "sha512-Sxn74oHiZSU6+cVeZy62iPZMFMvKp4jupMFHelSICCMw1qELmUHPvuZSr+ZHDmNGgHcEpzJM5HN02kR7T4g+PQ==",
   74 |       "dev": true,
   75 |       "license": "Apache-2.0",
   76 |       "dependencies": {
   77 |         "@asyncapi/specs": "^6.8.0",
   78 |         "@openapi-contrib/openapi-schema-to-json-schema": "~3.2.0",
   79 |         "@stoplight/json": "3.21.0",
   80 |         "@stoplight/json-ref-readers": "^1.2.2",
   81 |         "@stoplight/json-ref-resolver": "^3.1.5",
   82 |         "@stoplight/spectral-core": "^1.18.3",
   83 |         "@stoplight/spectral-functions": "^1.7.2",
   84 |         "@stoplight/spectral-parsers": "^1.0.2",
   85 |         "@stoplight/spectral-ref-resolver": "^1.0.3",
   86 |         "@stoplight/types": "^13.12.0",
   87 |         "@types/json-schema": "^7.0.11",
   88 |         "@types/urijs": "^1.19.19",
   89 |         "ajv": "^8.17.1",
   90 |         "ajv-errors": "^3.0.0",
   91 |         "ajv-formats": "^2.1.1",
   92 |         "avsc": "^5.7.5",
   93 |         "js-yaml": "^4.1.0",
   94 |         "jsonpath-plus": "^10.0.0",
   95 |         "node-fetch": "2.6.7"
   96 |       }
   97 |     },
   98 |     "node_modules/@asyncapi/parser/node_modules/ajv-formats": {
   99 |       "version": "2.1.1",
  100 |       "resolved": "https://registry.npmjs.org/ajv-formats/-/ajv-formats-2.1.1.tgz",
  101 |       "integrity": "sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==",
  102 |       "dev": true,
  103 |       "license": "MIT",
  104 |       "dependencies": {
  105 |         "ajv": "^8.0.0"
  106 |       },
  107 |       "peerDependencies": {
  108 |         "ajv": "^8.0.0"
  109 |       },
  110 |       "peerDependenciesMeta": {
  111 |         "ajv": {
  112 |           "optional": true
  113 |         }
  114 |       }
  115 |     },
  116 |     "node_modules/@asyncapi/specs": {
  117 |       "version": "6.9.0",
  118 |       "resolved": "https://registry.npmjs.org/@asyncapi/specs/-/specs-6.9.0.tgz",
  119 |       "integrity": "sha512-gatFEH2hfJXWmv3vogIjBZfiIbPRC/ISn9UEHZZLZDdMBO0USxt3AFgCC9AY1P+eNE7zjXddXCIT7gz32XOK4g==",
  120 |       "dev": true,
  121 |       "license": "Apache-2.0",
  122 |       "dependencies": {
  123 |         "@types/json-schema": "^7.0.11"
  124 |       }
  125 |     },
  126 |     "node_modules/@babel/code-frame": {
  127 |       "version": "7.27.1",
  128 |       "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
  129 |       "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
  130 |       "dev": true,
  131 |       "license": "MIT",
  132 |       "dependencies": {
  133 |         "@babel/helper-validator-identifier": "^7.27.1",
  134 |         "js-tokens": "^4.0.0",
  135 |         "picocolors": "^1.1.1"
  136 |       },
  137 |       "engines": {
  138 |         "node": ">=6.9.0"
  139 |       }
  140 |     },
  141 |     "node_modules/@babel/helper-validator-identifier": {
  142 |       "version": "7.27.1",
  143 |       "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
  144 |       "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
  145 |       "dev": true,
  146 |       "license": "MIT",
  147 |       "engines": {
  148 |         "node": ">=6.9.0"
  149 |       }
  150 |     },
  151 |     "node_modules/@cspotcode/source-map-support": {
  152 |       "version": "0.8.1",
  153 |       "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
  154 |       "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
  155 |       "dev": true,
  156 |       "license": "MIT",
  157 |       "dependencies": {
  158 |         "@jridgewell/trace-mapping": "0.3.9"
  159 |       },
  160 |       "engines": {
  161 |         "node": ">=12"
  162 |       }
  163 |     },
  164 |     "node_modules/@cspotcode/source-map-support/node_modules/@jridgewell/trace-mapping": {
  165 |       "version": "0.3.9",
  166 |       "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
  167 |       "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
  168 |       "dev": true,
  169 |       "license": "MIT",
  170 |       "dependencies": {
  171 |         "@jridgewell/resolve-uri": "^3.0.3",
  172 |         "@jridgewell/sourcemap-codec": "^1.4.10"
  173 |       }
  174 |     },
  175 |     "node_modules/@emnapi/runtime": {
  176 |       "version": "1.4.5",
  177 |       "resolved": "https://registry.npmjs.org/@emnapi/runtime/-/runtime-1.4.5.tgz",
  178 |       "integrity": "sha512-++LApOtY0pEEz1zrd9vy1/zXVaVJJ/EbAF3u0fXIzPJEDtnITsBGbbK0EkM72amhl/R5b+5xx0Y/QhcVOpuulg==",
  179 |       "dev": true,
  180 |       "license": "MIT",
  181 |       "optional": true,
  182 |       "dependencies": {
  183 |         "tslib": "^2.4.0"
  184 |       }
  185 |     },
  186 |     "node_modules/@emnapi/runtime/node_modules/tslib": {
  187 |       "version": "2.8.1",
  188 |       "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
  189 |       "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
  190 |       "dev": true,
  191 |       "license": "0BSD",
  192 |       "optional": true
  193 |     },
  194 |     "node_modules/@esbuild/aix-ppc64": {
  195 |       "version": "0.25.8",
  196 |       "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.8.tgz",
  197 |       "integrity": "sha512-urAvrUedIqEiFR3FYSLTWQgLu5tb+m0qZw0NBEasUeo6wuqatkMDaRT+1uABiGXEu5vqgPd7FGE1BhsAIy9QVA==",
  198 |       "cpu": [
  199 |         "ppc64"
  200 |       ],
  201 |       "dev": true,
  202 |       "license": "MIT",
  203 |       "optional": true,
  204 |       "os": [
  205 |         "aix"
  206 |       ],
  207 |       "engines": {
  208 |         "node": ">=18"
  209 |       }
  210 |     },
  211 |     "node_modules/@esbuild/android-arm": {
  212 |       "version": "0.25.8",
  213 |       "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.8.tgz",
  214 |       "integrity": "sha512-RONsAvGCz5oWyePVnLdZY/HHwA++nxYWIX1atInlaW6SEkwq6XkP3+cb825EUcRs5Vss/lGh/2YxAb5xqc07Uw==",
  215 |       "cpu": [
  216 |         "arm"
  217 |       ],
  218 |       "dev": true,
  219 |       "license": "MIT",
  220 |       "optional": true,
  221 |       "os": [
  222 |         "android"
  223 |       ],
  224 |       "engines": {
  225 |         "node": ">=18"
  226 |       }
  227 |     },
  228 |     "node_modules/@esbuild/android-arm64": {
  229 |       "version": "0.25.8",
  230 |       "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.8.tgz",
  231 |       "integrity": "sha512-OD3p7LYzWpLhZEyATcTSJ67qB5D+20vbtr6vHlHWSQYhKtzUYrETuWThmzFpZtFsBIxRvhO07+UgVA9m0i/O1w==",
  232 |       "cpu": [
  233 |         "arm64"
  234 |       ],
  235 |       "dev": true,
  236 |       "license": "MIT",
  237 |       "optional": true,
  238 |       "os": [
  239 |         "android"
  240 |       ],
  241 |       "engines": {
  242 |         "node": ">=18"
  243 |       }
  244 |     },
  245 |     "node_modules/@esbuild/android-x64": {
  246 |       "version": "0.25.8",
  247 |       "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.8.tgz",
  248 |       "integrity": "sha512-yJAVPklM5+4+9dTeKwHOaA+LQkmrKFX96BM0A/2zQrbS6ENCmxc4OVoBs5dPkCCak2roAD+jKCdnmOqKszPkjA==",
  249 |       "cpu": [
  250 |         "x64"
  251 |       ],
  252 |       "dev": true,
  253 |       "license": "MIT",
  254 |       "optional": true,
  255 |       "os": [
  256 |         "android"
  257 |       ],
  258 |       "engines": {
  259 |         "node": ">=18"
  260 |       }
  261 |     },
  262 |     "node_modules/@esbuild/darwin-arm64": {
  263 |       "version": "0.25.8",
  264 |       "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.8.tgz",
  265 |       "integrity": "sha512-Jw0mxgIaYX6R8ODrdkLLPwBqHTtYHJSmzzd+QeytSugzQ0Vg4c5rDky5VgkoowbZQahCbsv1rT1KW72MPIkevw==",
  266 |       "cpu": [
  267 |         "arm64"
  268 |       ],
  269 |       "dev": true,
  270 |       "license": "MIT",
  271 |       "optional": true,
  272 |       "os": [
  273 |         "darwin"
  274 |       ],
  275 |       "engines": {
  276 |         "node": ">=18"
  277 |       }
  278 |     },
  279 |     "node_modules/@esbuild/darwin-x64": {
  280 |       "version": "0.25.8",
  281 |       "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.8.tgz",
  282 |       "integrity": "sha512-Vh2gLxxHnuoQ+GjPNvDSDRpoBCUzY4Pu0kBqMBDlK4fuWbKgGtmDIeEC081xi26PPjn+1tct+Bh8FjyLlw1Zlg==",
  283 |       "cpu": [
  284 |         "x64"
  285 |       ],
  286 |       "dev": true,
  287 |       "license": "MIT",
  288 |       "optional": true,
  289 |       "os": [
  290 |         "darwin"
  291 |       ],
  292 |       "engines": {
  293 |         "node": ">=18"
  294 |       }
  295 |     },
  296 |     "node_modules/@esbuild/freebsd-arm64": {
  297 |       "version": "0.25.8",
  298 |       "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.8.tgz",
  299 |       "integrity": "sha512-YPJ7hDQ9DnNe5vxOm6jaie9QsTwcKedPvizTVlqWG9GBSq+BuyWEDazlGaDTC5NGU4QJd666V0yqCBL2oWKPfA==",
  300 |       "cpu": [
  301 |         "arm64"
  302 |       ],
  303 |       "dev": true,
  304 |       "license": "MIT",
  305 |       "optional": true,
  306 |       "os": [
  307 |         "freebsd"
  308 |       ],
  309 |       "engines": {
  310 |         "node": ">=18"
  311 |       }
  312 |     },
  313 |     "node_modules/@esbuild/freebsd-x64": {
  314 |       "version": "0.25.8",
  315 |       "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.8.tgz",
  316 |       "integrity": "sha512-MmaEXxQRdXNFsRN/KcIimLnSJrk2r5H8v+WVafRWz5xdSVmWLoITZQXcgehI2ZE6gioE6HirAEToM/RvFBeuhw==",
  317 |       "cpu": [
  318 |         "x64"
  319 |       ],
  320 |       "dev": true,
  321 |       "license": "MIT",
  322 |       "optional": true,
  323 |       "os": [
  324 |         "freebsd"
  325 |       ],
  326 |       "engines": {
  327 |         "node": ">=18"
  328 |       }
  329 |     },
  330 |     "node_modules/@esbuild/linux-arm": {
  331 |       "version": "0.25.8",
  332 |       "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.8.tgz",
  333 |       "integrity": "sha512-FuzEP9BixzZohl1kLf76KEVOsxtIBFwCaLupVuk4eFVnOZfU+Wsn+x5Ryam7nILV2pkq2TqQM9EZPsOBuMC+kg==",
  334 |       "cpu": [
  335 |         "arm"
  336 |       ],
  337 |       "dev": true,
  338 |       "license": "MIT",
  339 |       "optional": true,
  340 |       "os": [
  341 |         "linux"
  342 |       ],
  343 |       "engines": {
  344 |         "node": ">=18"
  345 |       }
  346 |     },
  347 |     "node_modules/@esbuild/linux-arm64": {
  348 |       "version": "0.25.8",
  349 |       "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.8.tgz",
  350 |       "integrity": "sha512-WIgg00ARWv/uYLU7lsuDK00d/hHSfES5BzdWAdAig1ioV5kaFNrtK8EqGcUBJhYqotlUByUKz5Qo6u8tt7iD/w==",
  351 |       "cpu": [
  352 |         "arm64"
  353 |       ],
  354 |       "dev": true,
  355 |       "license": "MIT",
  356 |       "optional": true,
  357 |       "os": [
  358 |         "linux"
  359 |       ],
  360 |       "engines": {
  361 |         "node": ">=18"
  362 |       }
  363 |     },
  364 |     "node_modules/@esbuild/linux-ia32": {
  365 |       "version": "0.25.8",
  366 |       "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.8.tgz",
  367 |       "integrity": "sha512-A1D9YzRX1i+1AJZuFFUMP1E9fMaYY+GnSQil9Tlw05utlE86EKTUA7RjwHDkEitmLYiFsRd9HwKBPEftNdBfjg==",
  368 |       "cpu": [
  369 |         "ia32"
  370 |       ],
  371 |       "dev": true,
  372 |       "license": "MIT",
  373 |       "optional": true,
  374 |       "os": [
  375 |         "linux"
  376 |       ],
  377 |       "engines": {
  378 |         "node": ">=18"
  379 |       }
  380 |     },
  381 |     "node_modules/@esbuild/linux-loong64": {
  382 |       "version": "0.25.8",
  383 |       "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.8.tgz",
  384 |       "integrity": "sha512-O7k1J/dwHkY1RMVvglFHl1HzutGEFFZ3kNiDMSOyUrB7WcoHGf96Sh+64nTRT26l3GMbCW01Ekh/ThKM5iI7hQ==",
  385 |       "cpu": [
  386 |         "loong64"
  387 |       ],
  388 |       "dev": true,
  389 |       "license": "MIT",
  390 |       "optional": true,
  391 |       "os": [
  392 |         "linux"
  393 |       ],
  394 |       "engines": {
  395 |         "node": ">=18"
  396 |       }
  397 |     },
  398 |     "node_modules/@esbuild/linux-mips64el": {
  399 |       "version": "0.25.8",
  400 |       "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.8.tgz",
  401 |       "integrity": "sha512-uv+dqfRazte3BzfMp8PAQXmdGHQt2oC/y2ovwpTteqrMx2lwaksiFZ/bdkXJC19ttTvNXBuWH53zy/aTj1FgGw==",
  402 |       "cpu": [
  403 |         "mips64el"
  404 |       ],
  405 |       "dev": true,
  406 |       "license": "MIT",
  407 |       "optional": true,
  408 |       "os": [
  409 |         "linux"
  410 |       ],
  411 |       "engines": {
  412 |         "node": ">=18"
  413 |       }
  414 |     },
  415 |     "node_modules/@esbuild/linux-ppc64": {
  416 |       "version": "0.25.8",
  417 |       "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.8.tgz",
  418 |       "integrity": "sha512-GyG0KcMi1GBavP5JgAkkstMGyMholMDybAf8wF5A70CALlDM2p/f7YFE7H92eDeH/VBtFJA5MT4nRPDGg4JuzQ==",
  419 |       "cpu": [
  420 |         "ppc64"
  421 |       ],
  422 |       "dev": true,
  423 |       "license": "MIT",
  424 |       "optional": true,
  425 |       "os": [
  426 |         "linux"
  427 |       ],
  428 |       "engines": {
  429 |         "node": ">=18"
  430 |       }
  431 |     },
  432 |     "node_modules/@esbuild/linux-riscv64": {
  433 |       "version": "0.25.8",
  434 |       "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.8.tgz",
  435 |       "integrity": "sha512-rAqDYFv3yzMrq7GIcen3XP7TUEG/4LK86LUPMIz6RT8A6pRIDn0sDcvjudVZBiiTcZCY9y2SgYX2lgK3AF+1eg==",
  436 |       "cpu": [
  437 |         "riscv64"
  438 |       ],
  439 |       "dev": true,
  440 |       "license": "MIT",
  441 |       "optional": true,
  442 |       "os": [
  443 |         "linux"
  444 |       ],
  445 |       "engines": {
  446 |         "node": ">=18"
  447 |       }
  448 |     },
  449 |     "node_modules/@esbuild/linux-s390x": {
  450 |       "version": "0.25.8",
  451 |       "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.8.tgz",
  452 |       "integrity": "sha512-Xutvh6VjlbcHpsIIbwY8GVRbwoviWT19tFhgdA7DlenLGC/mbc3lBoVb7jxj9Z+eyGqvcnSyIltYUrkKzWqSvg==",
  453 |       "cpu": [
  454 |         "s390x"
  455 |       ],
  456 |       "dev": true,
  457 |       "license": "MIT",
  458 |       "optional": true,
  459 |       "os": [
  460 |         "linux"
  461 |       ],
  462 |       "engines": {
  463 |         "node": ">=18"
  464 |       }
  465 |     },
  466 |     "node_modules/@esbuild/linux-x64": {
  467 |       "version": "0.25.8",
  468 |       "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.8.tgz",
  469 |       "integrity": "sha512-ASFQhgY4ElXh3nDcOMTkQero4b1lgubskNlhIfJrsH5OKZXDpUAKBlNS0Kx81jwOBp+HCeZqmoJuihTv57/jvQ==",
  470 |       "cpu": [
  471 |         "x64"
  472 |       ],
  473 |       "dev": true,
  474 |       "license": "MIT",
  475 |       "optional": true,
  476 |       "os": [
  477 |         "linux"
  478 |       ],
  479 |       "engines": {
  480 |         "node": ">=18"
  481 |       }
  482 |     },
  483 |     "node_modules/@esbuild/netbsd-arm64": {
  484 |       "version": "0.25.8",
  485 |       "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.8.tgz",
  486 |       "integrity": "sha512-d1KfruIeohqAi6SA+gENMuObDbEjn22olAR7egqnkCD9DGBG0wsEARotkLgXDu6c4ncgWTZJtN5vcgxzWRMzcw==",
  487 |       "cpu": [
  488 |         "arm64"
  489 |       ],
  490 |       "dev": true,
  491 |       "license": "MIT",
  492 |       "optional": true,
  493 |       "os": [
  494 |         "netbsd"
  495 |       ],
  496 |       "engines": {
  497 |         "node": ">=18"
  498 |       }
  499 |     },
  500 |     "node_modules/@esbuild/netbsd-x64": {
  501 |       "version": "0.25.8",
  502 |       "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.8.tgz",
  503 |       "integrity": "sha512-nVDCkrvx2ua+XQNyfrujIG38+YGyuy2Ru9kKVNyh5jAys6n+l44tTtToqHjino2My8VAY6Lw9H7RI73XFi66Cg==",
  504 |       "cpu": [
  505 |         "x64"
  506 |       ],
  507 |       "dev": true,
  508 |       "license": "MIT",
  509 |       "optional": true,
  510 |       "os": [
  511 |         "netbsd"
  512 |       ],
  513 |       "engines": {
  514 |         "node": ">=18"
  515 |       }
  516 |     },
  517 |     "node_modules/@esbuild/openbsd-arm64": {
  518 |       "version": "0.25.8",
  519 |       "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.8.tgz",
  520 |       "integrity": "sha512-j8HgrDuSJFAujkivSMSfPQSAa5Fxbvk4rgNAS5i3K+r8s1X0p1uOO2Hl2xNsGFppOeHOLAVgYwDVlmxhq5h+SQ==",
  521 |       "cpu": [
  522 |         "arm64"
  523 |       ],
  524 |       "dev": true,
  525 |       "license": "MIT",
  526 |       "optional": true,
  527 |       "os": [
  528 |         "openbsd"
  529 |       ],
  530 |       "engines": {
  531 |         "node": ">=18"
  532 |       }
  533 |     },
  534 |     "node_modules/@esbuild/openbsd-x64": {
  535 |       "version": "0.25.8",
  536 |       "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.8.tgz",
  537 |       "integrity": "sha512-1h8MUAwa0VhNCDp6Af0HToI2TJFAn1uqT9Al6DJVzdIBAd21m/G0Yfc77KDM3uF3T/YaOgQq3qTJHPbTOInaIQ==",
  538 |       "cpu": [
  539 |         "x64"
  540 |       ],
  541 |       "dev": true,
  542 |       "license": "MIT",
  543 |       "optional": true,
  544 |       "os": [
  545 |         "openbsd"
  546 |       ],
  547 |       "engines": {
  548 |         "node": ">=18"
  549 |       }
  550 |     },
  551 |     "node_modules/@esbuild/openharmony-arm64": {
  552 |       "version": "0.25.8",
  553 |       "resolved": "https://registry.npmjs.org/@esbuild/openharmony-arm64/-/openharmony-arm64-0.25.8.tgz",
  554 |       "integrity": "sha512-r2nVa5SIK9tSWd0kJd9HCffnDHKchTGikb//9c7HX+r+wHYCpQrSgxhlY6KWV1nFo1l4KFbsMlHk+L6fekLsUg==",
  555 |       "cpu": [
  556 |         "arm64"
  557 |       ],
  558 |       "dev": true,
  559 |       "license": "MIT",
  560 |       "optional": true,
  561 |       "os": [
  562 |         "openharmony"
  563 |       ],
  564 |       "engines": {
  565 |         "node": ">=18"
  566 |       }
  567 |     },
  568 |     "node_modules/@esbuild/sunos-x64": {
  569 |       "version": "0.25.8",
  570 |       "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.8.tgz",
  571 |       "integrity": "sha512-zUlaP2S12YhQ2UzUfcCuMDHQFJyKABkAjvO5YSndMiIkMimPmxA+BYSBikWgsRpvyxuRnow4nS5NPnf9fpv41w==",
  572 |       "cpu": [
  573 |         "x64"
  574 |       ],
  575 |       "dev": true,
  576 |       "license": "MIT",
  577 |       "optional": true,
  578 |       "os": [
  579 |         "sunos"
  580 |       ],
  581 |       "engines": {
  582 |         "node": ">=18"
  583 |       }
  584 |     },
  585 |     "node_modules/@esbuild/win32-arm64": {
  586 |       "version": "0.25.8",
  587 |       "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.8.tgz",
  588 |       "integrity": "sha512-YEGFFWESlPva8hGL+zvj2z/SaK+pH0SwOM0Nc/d+rVnW7GSTFlLBGzZkuSU9kFIGIo8q9X3ucpZhu8PDN5A2sQ==",
  589 |       "cpu": [
  590 |         "arm64"
  591 |       ],
  592 |       "dev": true,
  593 |       "license": "MIT",
  594 |       "optional": true,
  595 |       "os": [
  596 |         "win32"
  597 |       ],
  598 |       "engines": {
  599 |         "node": ">=18"
  600 |       }
  601 |     },
  602 |     "node_modules/@esbuild/win32-ia32": {
  603 |       "version": "0.25.8",
  604 |       "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.8.tgz",
  605 |       "integrity": "sha512-hiGgGC6KZ5LZz58OL/+qVVoZiuZlUYlYHNAmczOm7bs2oE1XriPFi5ZHHrS8ACpV5EjySrnoCKmcbQMN+ojnHg==",
  606 |       "cpu": [
  607 |         "ia32"
  608 |       ],
  609 |       "dev": true,
  610 |       "license": "MIT",
  611 |       "optional": true,
  612 |       "os": [
  613 |         "win32"
  614 |       ],
  615 |       "engines": {
  616 |         "node": ">=18"
  617 |       }
  618 |     },
  619 |     "node_modules/@esbuild/win32-x64": {
  620 |       "version": "0.25.8",
  621 |       "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.8.tgz",
  622 |       "integrity": "sha512-cn3Yr7+OaaZq1c+2pe+8yxC8E144SReCQjN6/2ynubzYjvyqZjTXfQJpAcQpsdJq3My7XADANiYGHoFC69pLQw==",
  623 |       "cpu": [
  624 |         "x64"
  625 |       ],
  626 |       "dev": true,
  627 |       "license": "MIT",
  628 |       "optional": true,
  629 |       "os": [
  630 |         "win32"
  631 |       ],
  632 |       "engines": {
  633 |         "node": ">=18"
  634 |       }
  635 |     },
  636 |     "node_modules/@gerrit0/mini-shiki": {
  637 |       "version": "3.9.2",
  638 |       "resolved": "https://registry.npmjs.org/@gerrit0/mini-shiki/-/mini-shiki-3.9.2.tgz",
  639 |       "integrity": "sha512-Tvsj+AOO4Z8xLRJK900WkyfxHsZQu+Zm1//oT1w443PO6RiYMoq/4NGOhaNuZoUMYsjKIAPVQ6eOFMddj6yphQ==",
  640 |       "dev": true,
  641 |       "license": "MIT",
  642 |       "dependencies": {
  643 |         "@shikijs/engine-oniguruma": "^3.9.2",
  644 |         "@shikijs/langs": "^3.9.2",
  645 |         "@shikijs/themes": "^3.9.2",
  646 |         "@shikijs/types": "^3.9.2",
  647 |         "@shikijs/vscode-textmate": "^10.0.2"
  648 |       }
  649 |     },
  650 |     "node_modules/@img/sharp-darwin-arm64": {
  651 |       "version": "0.33.5",
  652 |       "resolved": "https://registry.npmjs.org/@img/sharp-darwin-arm64/-/sharp-darwin-arm64-0.33.5.tgz",
  653 |       "integrity": "sha512-UT4p+iz/2H4twwAoLCqfA9UH5pI6DggwKEGuaPy7nCVQ8ZsiY5PIcrRvD1DzuY3qYL07NtIQcWnBSY/heikIFQ==",
  654 |       "cpu": [
  655 |         "arm64"
  656 |       ],
  657 |       "dev": true,
  658 |       "license": "Apache-2.0",
  659 |       "optional": true,
  660 |       "os": [
  661 |         "darwin"
  662 |       ],
  663 |       "engines": {
  664 |         "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
  665 |       },
  666 |       "funding": {
  667 |         "url": "https://opencollective.com/libvips"
  668 |       },
  669 |       "optionalDependencies": {
  670 |         "@img/sharp-libvips-darwin-arm64": "1.0.4"
  671 |       }
  672 |     },
  673 |     "node_modules/@img/sharp-darwin-x64": {
  674 |       "version": "0.33.5",
  675 |       "resolved": "https://registry.npmjs.org/@img/sharp-darwin-x64/-/sharp-darwin-x64-0.33.5.tgz",
  676 |       "integrity": "sha512-fyHac4jIc1ANYGRDxtiqelIbdWkIuQaI84Mv45KvGRRxSAa7o7d1ZKAOBaYbnepLC1WqxfpimdeWfvqqSGwR2Q==",
  677 |       "cpu": [
  678 |         "x64"
  679 |       ],
  680 |       "dev": true,
  681 |       "license": "Apache-2.0",
  682 |       "optional": true,
  683 |       "os": [
  684 |         "darwin"
  685 |       ],
  686 |       "engines": {
  687 |         "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
  688 |       },
  689 |       "funding": {
  690 |         "url": "https://opencollective.com/libvips"
  691 |       },
  692 |       "optionalDependencies": {
  693 |         "@img/sharp-libvips-darwin-x64": "1.0.4"
  694 |       }
  695 |     },
  696 |     "node_modules/@img/sharp-libvips-darwin-arm64": {
  697 |       "version": "1.0.4",
  698 |       "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-arm64/-/sharp-libvips-darwin-arm64-1.0.4.tgz",
  699 |       "integrity": "sha512-XblONe153h0O2zuFfTAbQYAX2JhYmDHeWikp1LM9Hul9gVPjFY427k6dFEcOL72O01QxQsWi761svJ/ev9xEDg==",
  700 |       "cpu": [
  701 |         "arm64"
  702 |       ],
  703 |       "dev": true,
  704 |       "license": "LGPL-3.0-or-later",
  705 |       "optional": true,
  706 |       "os": [
  707 |         "darwin"
  708 |       ],
  709 |       "funding": {
  710 |         "url": "https://opencollective.com/libvips"
  711 |       }
  712 |     },
  713 |     "node_modules/@img/sharp-libvips-darwin-x64": {
  714 |       "version": "1.0.4",
  715 |       "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-x64/-/sharp-libvips-darwin-x64-1.0.4.tgz",
  716 |       "integrity": "sha512-xnGR8YuZYfJGmWPvmlunFaWJsb9T/AO2ykoP3Fz/0X5XV2aoYBPkX6xqCQvUTKKiLddarLaxpzNe+b1hjeWHAQ==",
  717 |       "cpu": [
  718 |         "x64"
  719 |       ],
  720 |       "dev": true,
  721 |       "license": "LGPL-3.0-or-later",
  722 |       "optional": true,
  723 |       "os": [
  724 |         "darwin"
  725 |       ],
  726 |       "funding": {
  727 |         "url": "https://opencollective.com/libvips"
  728 |       }
  729 |     },
  730 |     "node_modules/@img/sharp-libvips-linux-arm": {
  731 |       "version": "1.0.5",
  732 |       "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm/-/sharp-libvips-linux-arm-1.0.5.tgz",
  733 |       "integrity": "sha512-gvcC4ACAOPRNATg/ov8/MnbxFDJqf/pDePbBnuBDcjsI8PssmjoKMAz4LtLaVi+OnSb5FK/yIOamqDwGmXW32g==",
  734 |       "cpu": [
  735 |         "arm"
  736 |       ],
  737 |       "dev": true,
  738 |       "license": "LGPL-3.0-or-later",
  739 |       "optional": true,
  740 |       "os": [
  741 |         "linux"
  742 |       ],
  743 |       "funding": {
  744 |         "url": "https://opencollective.com/libvips"
  745 |       }
  746 |     },
  747 |     "node_modules/@img/sharp-libvips-linux-arm64": {
  748 |       "version": "1.0.4",
  749 |       "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm64/-/sharp-libvips-linux-arm64-1.0.4.tgz",
  750 |       "integrity": "sha512-9B+taZ8DlyyqzZQnoeIvDVR/2F4EbMepXMc/NdVbkzsJbzkUjhXv/70GQJ7tdLA4YJgNP25zukcxpX2/SueNrA==",
  751 |       "cpu": [
  752 |         "arm64"
  753 |       ],
  754 |       "dev": true,
  755 |       "license": "LGPL-3.0-or-later",
  756 |       "optional": true,
  757 |       "os": [
  758 |         "linux"
  759 |       ],
  760 |       "funding": {
  761 |         "url": "https://opencollective.com/libvips"
  762 |       }
  763 |     },
  764 |     "node_modules/@img/sharp-libvips-linux-s390x": {
  765 |       "version": "1.0.4",
  766 |       "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-s390x/-/sharp-libvips-linux-s390x-1.0.4.tgz",
  767 |       "integrity": "sha512-u7Wz6ntiSSgGSGcjZ55im6uvTrOxSIS8/dgoVMoiGE9I6JAfU50yH5BoDlYA1tcuGS7g/QNtetJnxA6QEsCVTA==",
  768 |       "cpu": [
  769 |         "s390x"
  770 |       ],
  771 |       "dev": true,
  772 |       "license": "LGPL-3.0-or-later",
  773 |       "optional": true,
  774 |       "os": [
  775 |         "linux"
  776 |       ],
  777 |       "funding": {
  778 |         "url": "https://opencollective.com/libvips"
  779 |       }
  780 |     },
  781 |     "node_modules/@img/sharp-libvips-linux-x64": {
  782 |       "version": "1.0.4",
  783 |       "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-x64/-/sharp-libvips-linux-x64-1.0.4.tgz",
  784 |       "integrity": "sha512-MmWmQ3iPFZr0Iev+BAgVMb3ZyC4KeFc3jFxnNbEPas60e1cIfevbtuyf9nDGIzOaW9PdnDciJm+wFFaTlj5xYw==",
  785 |       "cpu": [
  786 |         "x64"
  787 |       ],
  788 |       "dev": true,
  789 |       "license": "LGPL-3.0-or-later",
  790 |       "optional": true,
  791 |       "os": [
  792 |         "linux"
  793 |       ],
  794 |       "funding": {
  795 |         "url": "https://opencollective.com/libvips"
  796 |       }
  797 |     },
  798 |     "node_modules/@img/sharp-libvips-linuxmusl-arm64": {
  799 |       "version": "1.0.4",
  800 |       "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-arm64/-/sharp-libvips-linuxmusl-arm64-1.0.4.tgz",
  801 |       "integrity": "sha512-9Ti+BbTYDcsbp4wfYib8Ctm1ilkugkA/uscUn6UXK1ldpC1JjiXbLfFZtRlBhjPZ5o1NCLiDbg8fhUPKStHoTA==",
  802 |       "cpu": [
  803 |         "arm64"
  804 |       ],
  805 |       "dev": true,
  806 |       "license": "LGPL-3.0-or-later",
  807 |       "optional": true,
  808 |       "os": [
  809 |         "linux"
  810 |       ],
  811 |       "funding": {
  812 |         "url": "https://opencollective.com/libvips"
  813 |       }
  814 |     },
  815 |     "node_modules/@img/sharp-libvips-linuxmusl-x64": {
  816 |       "version": "1.0.4",
  817 |       "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-x64/-/sharp-libvips-linuxmusl-x64-1.0.4.tgz",
  818 |       "integrity": "sha512-viYN1KX9m+/hGkJtvYYp+CCLgnJXwiQB39damAO7WMdKWlIhmYTfHjwSbQeUK/20vY154mwezd9HflVFM1wVSw==",
  819 |       "cpu": [
  820 |         "x64"
  821 |       ],
  822 |       "dev": true,
  823 |       "license": "LGPL-3.0-or-later",
  824 |       "optional": true,
  825 |       "os": [
  826 |         "linux"
  827 |       ],
  828 |       "funding": {
  829 |         "url": "https://opencollective.com/libvips"
  830 |       }
  831 |     },
  832 |     "node_modules/@img/sharp-linux-arm": {
  833 |       "version": "0.33.5",
  834 |       "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm/-/sharp-linux-arm-0.33.5.tgz",
  835 |       "integrity": "sha512-JTS1eldqZbJxjvKaAkxhZmBqPRGmxgu+qFKSInv8moZ2AmT5Yib3EQ1c6gp493HvrvV8QgdOXdyaIBrhvFhBMQ==",
  836 |       "cpu": [
  837 |         "arm"
  838 |       ],
  839 |       "dev": true,
  840 |       "license": "Apache-2.0",
  841 |       "optional": true,
  842 |       "os": [
  843 |         "linux"
  844 |       ],
  845 |       "engines": {
  846 |         "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
  847 |       },
  848 |       "funding": {
  849 |         "url": "https://opencollective.com/libvips"
  850 |       },
  851 |       "optionalDependencies": {
  852 |         "@img/sharp-libvips-linux-arm": "1.0.5"
  853 |       }
  854 |     },
  855 |     "node_modules/@img/sharp-linux-arm64": {
  856 |       "version": "0.33.5",
  857 |       "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm64/-/sharp-linux-arm64-0.33.5.tgz",
  858 |       "integrity": "sha512-JMVv+AMRyGOHtO1RFBiJy/MBsgz0x4AWrT6QoEVVTyh1E39TrCUpTRI7mx9VksGX4awWASxqCYLCV4wBZHAYxA==",
  859 |       "cpu": [
  860 |         "arm64"
  861 |       ],
  862 |       "dev": true,
  863 |       "license": "Apache-2.0",
  864 |       "optional": true,
  865 |       "os": [
  866 |         "linux"
  867 |       ],
  868 |       "engines": {
  869 |         "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
  870 |       },
  871 |       "funding": {
  872 |         "url": "https://opencollective.com/libvips"
  873 |       },
  874 |       "optionalDependencies": {
  875 |         "@img/sharp-libvips-linux-arm64": "1.0.4"
  876 |       }
  877 |     },
  878 |     "node_modules/@img/sharp-linux-s390x": {
  879 |       "version": "0.33.5",
  880 |       "resolved": "https://registry.npmjs.org/@img/sharp-linux-s390x/-/sharp-linux-s390x-0.33.5.tgz",
  881 |       "integrity": "sha512-y/5PCd+mP4CA/sPDKl2961b+C9d+vPAveS33s6Z3zfASk2j5upL6fXVPZi7ztePZ5CuH+1kW8JtvxgbuXHRa4Q==",
  882 |       "cpu": [
  883 |         "s390x"
  884 |       ],
  885 |       "dev": true,
  886 |       "license": "Apache-2.0",
  887 |       "optional": true,
  888 |       "os": [
  889 |         "linux"
  890 |       ],
  891 |       "engines": {
  892 |         "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
  893 |       },
  894 |       "funding": {
  895 |         "url": "https://opencollective.com/libvips"
  896 |       },
  897 |       "optionalDependencies": {
  898 |         "@img/sharp-libvips-linux-s390x": "1.0.4"
  899 |       }
  900 |     },
  901 |     "node_modules/@img/sharp-linux-x64": {
  902 |       "version": "0.33.5",
  903 |       "resolved": "https://registry.npmjs.org/@img/sharp-linux-x64/-/sharp-linux-x64-0.33.5.tgz",
  904 |       "integrity": "sha512-opC+Ok5pRNAzuvq1AG0ar+1owsu842/Ab+4qvU879ippJBHvyY5n2mxF1izXqkPYlGuP/M556uh53jRLJmzTWA==",
  905 |       "cpu": [
  906 |         "x64"
  907 |       ],
  908 |       "dev": true,
  909 |       "license": "Apache-2.0",
  910 |       "optional": true,
  911 |       "os": [
  912 |         "linux"
  913 |       ],
  914 |       "engines": {
  915 |         "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
  916 |       },
  917 |       "funding": {
  918 |         "url": "https://opencollective.com/libvips"
  919 |       },
  920 |       "optionalDependencies": {
  921 |         "@img/sharp-libvips-linux-x64": "1.0.4"
  922 |       }
  923 |     },
  924 |     "node_modules/@img/sharp-linuxmusl-arm64": {
  925 |       "version": "0.33.5",
  926 |       "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-arm64/-/sharp-linuxmusl-arm64-0.33.5.tgz",
  927 |       "integrity": "sha512-XrHMZwGQGvJg2V/oRSUfSAfjfPxO+4DkiRh6p2AFjLQztWUuY/o8Mq0eMQVIY7HJ1CDQUJlxGGZRw1a5bqmd1g==",
  928 |       "cpu": [
  929 |         "arm64"
  930 |       ],
  931 |       "dev": true,
  932 |       "license": "Apache-2.0",
  933 |       "optional": true,
  934 |       "os": [
  935 |         "linux"
  936 |       ],
  937 |       "engines": {
  938 |         "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
  939 |       },
  940 |       "funding": {
  941 |         "url": "https://opencollective.com/libvips"
  942 |       },
  943 |       "optionalDependencies": {
  944 |         "@img/sharp-libvips-linuxmusl-arm64": "1.0.4"
  945 |       }
  946 |     },
  947 |     "node_modules/@img/sharp-linuxmusl-x64": {
  948 |       "version": "0.33.5",
  949 |       "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-x64/-/sharp-linuxmusl-x64-0.33.5.tgz",
  950 |       "integrity": "sha512-WT+d/cgqKkkKySYmqoZ8y3pxx7lx9vVejxW/W4DOFMYVSkErR+w7mf2u8m/y4+xHe7yY9DAXQMWQhpnMuFfScw==",
  951 |       "cpu": [
  952 |         "x64"
  953 |       ],
  954 |       "dev": true,
  955 |       "license": "Apache-2.0",
  956 |       "optional": true,
  957 |       "os": [
  958 |         "linux"
  959 |       ],
  960 |       "engines": {
  961 |         "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
  962 |       },
  963 |       "funding": {
  964 |         "url": "https://opencollective.com/libvips"
  965 |       },
  966 |       "optionalDependencies": {
  967 |         "@img/sharp-libvips-linuxmusl-x64": "1.0.4"
  968 |       }
  969 |     },
  970 |     "node_modules/@img/sharp-wasm32": {
  971 |       "version": "0.33.5",
  972 |       "resolved": "https://registry.npmjs.org/@img/sharp-wasm32/-/sharp-wasm32-0.33.5.tgz",
  973 |       "integrity": "sha512-ykUW4LVGaMcU9lu9thv85CbRMAwfeadCJHRsg2GmeRa/cJxsVY9Rbd57JcMxBkKHag5U/x7TSBpScF4U8ElVzg==",
  974 |       "cpu": [
  975 |         "wasm32"
  976 |       ],
  977 |       "dev": true,
  978 |       "license": "Apache-2.0 AND LGPL-3.0-or-later AND MIT",
  979 |       "optional": true,
  980 |       "dependencies": {
  981 |         "@emnapi/runtime": "^1.2.0"
  982 |       },
  983 |       "engines": {
  984 |         "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
  985 |       },
  986 |       "funding": {
  987 |         "url": "https://opencollective.com/libvips"
  988 |       }
  989 |     },
  990 |     "node_modules/@img/sharp-win32-ia32": {
  991 |       "version": "0.33.5",
  992 |       "resolved": "https://registry.npmjs.org/@img/sharp-win32-ia32/-/sharp-win32-ia32-0.33.5.tgz",
  993 |       "integrity": "sha512-T36PblLaTwuVJ/zw/LaH0PdZkRz5rd3SmMHX8GSmR7vtNSP5Z6bQkExdSK7xGWyxLw4sUknBuugTelgw2faBbQ==",
  994 |       "cpu": [
  995 |         "ia32"
  996 |       ],
  997 |       "dev": true,
  998 |       "license": "Apache-2.0 AND LGPL-3.0-or-later",
  999 |       "optional": true,
 1000 |       "os": [
 1001 |         "win32"
 1002 |       ],
 1003 |       "engines": {
 1004 |         "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
 1005 |       },
 1006 |       "funding": {
 1007 |         "url": "https://opencollective.com/libvips"
 1008 |       }
 1009 |     },
 1010 |     "node_modules/@img/sharp-win32-x64": {
 1011 |       "version": "0.33.5",
 1012 |       "resolved": "https://registry.npmjs.org/@img/sharp-win32-x64/-/sharp-win32-x64-0.33.5.tgz",
 1013 |       "integrity": "sha512-MpY/o8/8kj+EcnxwvrP4aTJSWw/aZ7JIGR4aBeZkZw5B7/Jn+tY9/VNwtcoGmdT7GfggGIU4kygOMSbYnOrAbg==",
 1014 |       "cpu": [
 1015 |         "x64"
 1016 |       ],
 1017 |       "dev": true,
 1018 |       "license": "Apache-2.0 AND LGPL-3.0-or-later",
 1019 |       "optional": true,
 1020 |       "os": [
 1021 |         "win32"
 1022 |       ],
 1023 |       "engines": {
 1024 |         "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
 1025 |       },
 1026 |       "funding": {
 1027 |         "url": "https://opencollective.com/libvips"
 1028 |       }
 1029 |     },
 1030 |     "node_modules/@inquirer/checkbox": {
 1031 |       "version": "4.2.0",
 1032 |       "resolved": "https://registry.npmjs.org/@inquirer/checkbox/-/checkbox-4.2.0.tgz",
 1033 |       "integrity": "sha512-fdSw07FLJEU5vbpOPzXo5c6xmMGDzbZE2+niuDHX5N6mc6V0Ebso/q3xiHra4D73+PMsC8MJmcaZKuAAoaQsSA==",
 1034 |       "dev": true,
 1035 |       "license": "MIT",
 1036 |       "dependencies": {
 1037 |         "@inquirer/core": "^10.1.15",
 1038 |         "@inquirer/figures": "^1.0.13",
 1039 |         "@inquirer/type": "^3.0.8",
 1040 |         "ansi-escapes": "^4.3.2",
 1041 |         "yoctocolors-cjs": "^2.1.2"
 1042 |       },
 1043 |       "engines": {
 1044 |         "node": ">=18"
 1045 |       },
 1046 |       "peerDependencies": {
 1047 |         "@types/node": ">=18"
 1048 |       },
 1049 |       "peerDependenciesMeta": {
 1050 |         "@types/node": {
 1051 |           "optional": true
 1052 |         }
 1053 |       }
 1054 |     },
 1055 |     "node_modules/@inquirer/checkbox/node_modules/ansi-escapes": {
 1056 |       "version": "4.3.2",
 1057 |       "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
 1058 |       "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
 1059 |       "dev": true,
 1060 |       "license": "MIT",
 1061 |       "dependencies": {
 1062 |         "type-fest": "^0.21.3"
 1063 |       },
 1064 |       "engines": {
 1065 |         "node": ">=8"
 1066 |       },
 1067 |       "funding": {
 1068 |         "url": "https://github.com/sponsors/sindresorhus"
 1069 |       }
 1070 |     },
 1071 |     "node_modules/@inquirer/checkbox/node_modules/type-fest": {
 1072 |       "version": "0.21.3",
 1073 |       "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
 1074 |       "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
 1075 |       "dev": true,
 1076 |       "license": "(MIT OR CC0-1.0)",
 1077 |       "engines": {
 1078 |         "node": ">=10"
 1079 |       },
 1080 |       "funding": {
 1081 |         "url": "https://github.com/sponsors/sindresorhus"
 1082 |       }
 1083 |     },
 1084 |     "node_modules/@inquirer/confirm": {
 1085 |       "version": "5.1.14",
 1086 |       "resolved": "https://registry.npmjs.org/@inquirer/confirm/-/confirm-5.1.14.tgz",
 1087 |       "integrity": "sha512-5yR4IBfe0kXe59r1YCTG8WXkUbl7Z35HK87Sw+WUyGD8wNUx7JvY7laahzeytyE1oLn74bQnL7hstctQxisQ8Q==",
 1088 |       "dev": true,
 1089 |       "license": "MIT",
 1090 |       "dependencies": {
 1091 |         "@inquirer/core": "^10.1.15",
 1092 |         "@inquirer/type": "^3.0.8"
 1093 |       },
 1094 |       "engines": {
 1095 |         "node": ">=18"
 1096 |       },
 1097 |       "peerDependencies": {
 1098 |         "@types/node": ">=18"
 1099 |       },
 1100 |       "peerDependenciesMeta": {
 1101 |         "@types/node": {
 1102 |           "optional": true
 1103 |         }
 1104 |       }
 1105 |     },
 1106 |     "node_modules/@inquirer/core": {
 1107 |       "version": "10.1.15",
 1108 |       "resolved": "https://registry.npmjs.org/@inquirer/core/-/core-10.1.15.tgz",
 1109 |       "integrity": "sha512-8xrp836RZvKkpNbVvgWUlxjT4CraKk2q+I3Ksy+seI2zkcE+y6wNs1BVhgcv8VyImFecUhdQrYLdW32pAjwBdA==",
 1110 |       "dev": true,
 1111 |       "license": "MIT",
 1112 |       "dependencies": {
 1113 |         "@inquirer/figures": "^1.0.13",
 1114 |         "@inquirer/type": "^3.0.8",
 1115 |         "ansi-escapes": "^4.3.2",
 1116 |         "cli-width": "^4.1.0",
 1117 |         "mute-stream": "^2.0.0",
 1118 |         "signal-exit": "^4.1.0",
 1119 |         "wrap-ansi": "^6.2.0",
 1120 |         "yoctocolors-cjs": "^2.1.2"
 1121 |       },
 1122 |       "engines": {
 1123 |         "node": ">=18"
 1124 |       },
 1125 |       "peerDependencies": {
 1126 |         "@types/node": ">=18"
 1127 |       },
 1128 |       "peerDependenciesMeta": {
 1129 |         "@types/node": {
 1130 |           "optional": true
 1131 |         }
 1132 |       }
 1133 |     },
 1134 |     "node_modules/@inquirer/core/node_modules/ansi-escapes": {
 1135 |       "version": "4.3.2",
 1136 |       "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
 1137 |       "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
 1138 |       "dev": true,
 1139 |       "license": "MIT",
 1140 |       "dependencies": {
 1141 |         "type-fest": "^0.21.3"
 1142 |       },
 1143 |       "engines": {
 1144 |         "node": ">=8"
 1145 |       },
 1146 |       "funding": {
 1147 |         "url": "https://github.com/sponsors/sindresorhus"
 1148 |       }
 1149 |     },
 1150 |     "node_modules/@inquirer/core/node_modules/ansi-regex": {
 1151 |       "version": "5.0.1",
 1152 |       "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
 1153 |       "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
 1154 |       "dev": true,
 1155 |       "license": "MIT",
 1156 |       "engines": {
 1157 |         "node": ">=8"
 1158 |       }
 1159 |     },
 1160 |     "node_modules/@inquirer/core/node_modules/ansi-styles": {
 1161 |       "version": "4.3.0",
 1162 |       "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
 1163 |       "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
 1164 |       "dev": true,
 1165 |       "license": "MIT",
 1166 |       "dependencies": {
 1167 |         "color-convert": "^2.0.1"
 1168 |       },
 1169 |       "engines": {
 1170 |         "node": ">=8"
 1171 |       },
 1172 |       "funding": {
 1173 |         "url": "https://github.com/chalk/ansi-styles?sponsor=1"
 1174 |       }
 1175 |     },
 1176 |     "node_modules/@inquirer/core/node_modules/emoji-regex": {
 1177 |       "version": "8.0.0",
 1178 |       "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
 1179 |       "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
 1180 |       "dev": true,
 1181 |       "license": "MIT"
 1182 |     },
 1183 |     "node_modules/@inquirer/core/node_modules/is-fullwidth-code-point": {
 1184 |       "version": "3.0.0",
 1185 |       "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
 1186 |       "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
 1187 |       "dev": true,
 1188 |       "license": "MIT",
 1189 |       "engines": {
 1190 |         "node": ">=8"
 1191 |       }
 1192 |     },
 1193 |     "node_modules/@inquirer/core/node_modules/string-width": {
 1194 |       "version": "4.2.3",
 1195 |       "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
 1196 |       "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
 1197 |       "dev": true,
 1198 |       "license": "MIT",
 1199 |       "dependencies": {
 1200 |         "emoji-regex": "^8.0.0",
 1201 |         "is-fullwidth-code-point": "^3.0.0",
 1202 |         "strip-ansi": "^6.0.1"
 1203 |       },
 1204 |       "engines": {
 1205 |         "node": ">=8"
 1206 |       }
 1207 |     },
 1208 |     "node_modules/@inquirer/core/node_modules/strip-ansi": {
 1209 |       "version": "6.0.1",
 1210 |       "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
 1211 |       "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
 1212 |       "dev": true,
 1213 |       "license": "MIT",
 1214 |       "dependencies": {
 1215 |         "ansi-regex": "^5.0.1"
 1216 |       },
 1217 |       "engines": {
 1218 |         "node": ">=8"
 1219 |       }
 1220 |     },
 1221 |     "node_modules/@inquirer/core/node_modules/type-fest": {
 1222 |       "version": "0.21.3",
 1223 |       "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
 1224 |       "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
 1225 |       "dev": true,
 1226 |       "license": "(MIT OR CC0-1.0)",
 1227 |       "engines": {
 1228 |         "node": ">=10"
 1229 |       },
 1230 |       "funding": {
 1231 |         "url": "https://github.com/sponsors/sindresorhus"
 1232 |       }
 1233 |     },
 1234 |     "node_modules/@inquirer/core/node_modules/wrap-ansi": {
 1235 |       "version": "6.2.0",
 1236 |       "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz",
 1237 |       "integrity": "sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==",
 1238 |       "dev": true,
 1239 |       "license": "MIT",
 1240 |       "dependencies": {
 1241 |         "ansi-styles": "^4.0.0",
 1242 |         "string-width": "^4.1.0",
 1243 |         "strip-ansi": "^6.0.0"
 1244 |       },
 1245 |       "engines": {
 1246 |         "node": ">=8"
 1247 |       }
 1248 |     },
 1249 |     "node_modules/@inquirer/editor": {
 1250 |       "version": "4.2.16",
 1251 |       "resolved": "https://registry.npmjs.org/@inquirer/editor/-/editor-4.2.16.tgz",
 1252 |       "integrity": "sha512-iSzLjT4C6YKp2DU0fr8T7a97FnRRxMO6CushJnW5ktxLNM2iNeuyUuUA5255eOLPORoGYCrVnuDOEBdGkHGkpw==",
 1253 |       "dev": true,
 1254 |       "license": "MIT",
 1255 |       "dependencies": {
 1256 |         "@inquirer/core": "^10.1.15",
 1257 |         "@inquirer/external-editor": "^1.0.0",
 1258 |         "@inquirer/type": "^3.0.8"
 1259 |       },
 1260 |       "engines": {
 1261 |         "node": ">=18"
 1262 |       },
 1263 |       "peerDependencies": {
 1264 |         "@types/node": ">=18"
 1265 |       },
 1266 |       "peerDependenciesMeta": {
 1267 |         "@types/node": {
 1268 |           "optional": true
 1269 |         }
 1270 |       }
 1271 |     },
 1272 |     "node_modules/@inquirer/expand": {
 1273 |       "version": "4.0.17",
 1274 |       "resolved": "https://registry.npmjs.org/@inquirer/expand/-/expand-4.0.17.tgz",
 1275 |       "integrity": "sha512-PSqy9VmJx/VbE3CT453yOfNa+PykpKg/0SYP7odez1/NWBGuDXgPhp4AeGYYKjhLn5lUUavVS/JbeYMPdH50Mw==",
 1276 |       "dev": true,
 1277 |       "license": "MIT",
 1278 |       "dependencies": {
 1279 |         "@inquirer/core": "^10.1.15",
 1280 |         "@inquirer/type": "^3.0.8",
 1281 |         "yoctocolors-cjs": "^2.1.2"
 1282 |       },
 1283 |       "engines": {
 1284 |         "node": ">=18"
 1285 |       },
 1286 |       "peerDependencies": {
 1287 |         "@types/node": ">=18"
 1288 |       },
 1289 |       "peerDependenciesMeta": {
 1290 |         "@types/node": {
 1291 |           "optional": true
 1292 |         }
 1293 |       }
 1294 |     },
 1295 |     "node_modules/@inquirer/external-editor": {
 1296 |       "version": "1.0.0",
 1297 |       "resolved": "https://registry.npmjs.org/@inquirer/external-editor/-/external-editor-1.0.0.tgz",
 1298 |       "integrity": "sha512-5v3YXc5ZMfL6OJqXPrX9csb4l7NlQA2doO1yynUjpUChT9hg4JcuBVP0RbsEJ/3SL/sxWEyFjT2W69ZhtoBWqg==",
 1299 |       "dev": true,
 1300 |       "license": "MIT",
 1301 |       "dependencies": {
 1302 |         "chardet": "^2.1.0",
 1303 |         "iconv-lite": "^0.6.3"
 1304 |       },
 1305 |       "engines": {
 1306 |         "node": ">=18"
 1307 |       },
 1308 |       "peerDependencies": {
 1309 |         "@types/node": ">=18"
 1310 |       }
 1311 |     },
 1312 |     "node_modules/@inquirer/external-editor/node_modules/iconv-lite": {
 1313 |       "version": "0.6.3",
 1314 |       "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
 1315 |       "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
 1316 |       "dev": true,
 1317 |       "license": "MIT",
 1318 |       "dependencies": {
 1319 |         "safer-buffer": ">= 2.1.2 < 3.0.0"
 1320 |       },
 1321 |       "engines": {
 1322 |         "node": ">=0.10.0"
 1323 |       }
 1324 |     },
 1325 |     "node_modules/@inquirer/figures": {
 1326 |       "version": "1.0.13",
 1327 |       "resolved": "https://registry.npmjs.org/@inquirer/figures/-/figures-1.0.13.tgz",
 1328 |       "integrity": "sha512-lGPVU3yO9ZNqA7vTYz26jny41lE7yoQansmqdMLBEfqaGsmdg7V3W9mK9Pvb5IL4EVZ9GnSDGMO/cJXud5dMaw==",
 1329 |       "dev": true,
 1330 |       "license": "MIT",
 1331 |       "engines": {
 1332 |         "node": ">=18"
 1333 |       }
 1334 |     },
 1335 |     "node_modules/@inquirer/input": {
 1336 |       "version": "4.2.1",
 1337 |       "resolved": "https://registry.npmjs.org/@inquirer/input/-/input-4.2.1.tgz",
 1338 |       "integrity": "sha512-tVC+O1rBl0lJpoUZv4xY+WGWY8V5b0zxU1XDsMsIHYregdh7bN5X5QnIONNBAl0K765FYlAfNHS2Bhn7SSOVow==",
 1339 |       "dev": true,
 1340 |       "license": "MIT",
 1341 |       "dependencies": {
 1342 |         "@inquirer/core": "^10.1.15",
 1343 |         "@inquirer/type": "^3.0.8"
 1344 |       },
 1345 |       "engines": {
 1346 |         "node": ">=18"
 1347 |       },
 1348 |       "peerDependencies": {
 1349 |         "@types/node": ">=18"
 1350 |       },
 1351 |       "peerDependenciesMeta": {
 1352 |         "@types/node": {
 1353 |           "optional": true
 1354 |         }
 1355 |       }
 1356 |     },
 1357 |     "node_modules/@inquirer/number": {
 1358 |       "version": "3.0.17",
 1359 |       "resolved": "https://registry.npmjs.org/@inquirer/number/-/number-3.0.17.tgz",
 1360 |       "integrity": "sha512-GcvGHkyIgfZgVnnimURdOueMk0CztycfC8NZTiIY9arIAkeOgt6zG57G+7vC59Jns3UX27LMkPKnKWAOF5xEYg==",
 1361 |       "dev": true,
 1362 |       "license": "MIT",
 1363 |       "dependencies": {
 1364 |         "@inquirer/core": "^10.1.15",
 1365 |         "@inquirer/type": "^3.0.8"
 1366 |       },
 1367 |       "engines": {
 1368 |         "node": ">=18"
 1369 |       },
 1370 |       "peerDependencies": {
 1371 |         "@types/node": ">=18"
 1372 |       },
 1373 |       "peerDependenciesMeta": {
 1374 |         "@types/node": {
 1375 |           "optional": true
 1376 |         }
 1377 |       }
 1378 |     },
 1379 |     "node_modules/@inquirer/password": {
 1380 |       "version": "4.0.17",
 1381 |       "resolved": "https://registry.npmjs.org/@inquirer/password/-/password-4.0.17.tgz",
 1382 |       "integrity": "sha512-DJolTnNeZ00E1+1TW+8614F7rOJJCM4y4BAGQ3Gq6kQIG+OJ4zr3GLjIjVVJCbKsk2jmkmv6v2kQuN/vriHdZA==",
 1383 |       "dev": true,
 1384 |       "license": "MIT",
 1385 |       "dependencies": {
 1386 |         "@inquirer/core": "^10.1.15",
 1387 |         "@inquirer/type": "^3.0.8",
 1388 |         "ansi-escapes": "^4.3.2"
 1389 |       },
 1390 |       "engines": {
 1391 |         "node": ">=18"
 1392 |       },
 1393 |       "peerDependencies": {
 1394 |         "@types/node": ">=18"
 1395 |       },
 1396 |       "peerDependenciesMeta": {
 1397 |         "@types/node": {
 1398 |           "optional": true
 1399 |         }
 1400 |       }
 1401 |     },
 1402 |     "node_modules/@inquirer/password/node_modules/ansi-escapes": {
 1403 |       "version": "4.3.2",
 1404 |       "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
 1405 |       "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
 1406 |       "dev": true,
 1407 |       "license": "MIT",
 1408 |       "dependencies": {
 1409 |         "type-fest": "^0.21.3"
 1410 |       },
 1411 |       "engines": {
 1412 |         "node": ">=8"
 1413 |       },
 1414 |       "funding": {
 1415 |         "url": "https://github.com/sponsors/sindresorhus"
 1416 |       }
 1417 |     },
 1418 |     "node_modules/@inquirer/password/node_modules/type-fest": {
 1419 |       "version": "0.21.3",
 1420 |       "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
 1421 |       "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
 1422 |       "dev": true,
 1423 |       "license": "(MIT OR CC0-1.0)",
 1424 |       "engines": {
 1425 |         "node": ">=10"
 1426 |       },
 1427 |       "funding": {
 1428 |         "url": "https://github.com/sponsors/sindresorhus"
 1429 |       }
 1430 |     },
 1431 |     "node_modules/@inquirer/prompts": {
 1432 |       "version": "7.8.1",
 1433 |       "resolved": "https://registry.npmjs.org/@inquirer/prompts/-/prompts-7.8.1.tgz",
 1434 |       "integrity": "sha512-LpBPeIpyCF1H3C7SK/QxJQG4iV1/SRmJdymfcul8PuwtVhD0JI1CSwqmd83VgRgt1QEsDojQYFSXJSgo81PVMw==",
 1435 |       "dev": true,
 1436 |       "license": "MIT",
 1437 |       "dependencies": {
 1438 |         "@inquirer/checkbox": "^4.2.0",
 1439 |         "@inquirer/confirm": "^5.1.14",
 1440 |         "@inquirer/editor": "^4.2.16",
 1441 |         "@inquirer/expand": "^4.0.17",
 1442 |         "@inquirer/input": "^4.2.1",
 1443 |         "@inquirer/number": "^3.0.17",
 1444 |         "@inquirer/password": "^4.0.17",
 1445 |         "@inquirer/rawlist": "^4.1.5",
 1446 |         "@inquirer/search": "^3.1.0",
 1447 |         "@inquirer/select": "^4.3.1"
 1448 |       },
 1449 |       "engines": {
 1450 |         "node": ">=18"
 1451 |       },
 1452 |       "peerDependencies": {
 1453 |         "@types/node": ">=18"
 1454 |       },
 1455 |       "peerDependenciesMeta": {
 1456 |         "@types/node": {
 1457 |           "optional": true
 1458 |         }
 1459 |       }
 1460 |     },
 1461 |     "node_modules/@inquirer/rawlist": {
 1462 |       "version": "4.1.5",
 1463 |       "resolved": "https://registry.npmjs.org/@inquirer/rawlist/-/rawlist-4.1.5.tgz",
 1464 |       "integrity": "sha512-R5qMyGJqtDdi4Ht521iAkNqyB6p2UPuZUbMifakg1sWtu24gc2Z8CJuw8rP081OckNDMgtDCuLe42Q2Kr3BolA==",
 1465 |       "dev": true,
 1466 |       "license": "MIT",
 1467 |       "dependencies": {
 1468 |         "@inquirer/core": "^10.1.15",
 1469 |         "@inquirer/type": "^3.0.8",
 1470 |         "yoctocolors-cjs": "^2.1.2"
 1471 |       },
 1472 |       "engines": {
 1473 |         "node": ">=18"
 1474 |       },
 1475 |       "peerDependencies": {
 1476 |         "@types/node": ">=18"
 1477 |       },
 1478 |       "peerDependenciesMeta": {
 1479 |         "@types/node": {
 1480 |           "optional": true
 1481 |         }
 1482 |       }
 1483 |     },
 1484 |     "node_modules/@inquirer/search": {
 1485 |       "version": "3.1.0",
 1486 |       "resolved": "https://registry.npmjs.org/@inquirer/search/-/search-3.1.0.tgz",
 1487 |       "integrity": "sha512-PMk1+O/WBcYJDq2H7foV0aAZSmDdkzZB9Mw2v/DmONRJopwA/128cS9M/TXWLKKdEQKZnKwBzqu2G4x/2Nqx8Q==",
 1488 |       "dev": true,
 1489 |       "license": "MIT",
 1490 |       "dependencies": {
 1491 |         "@inquirer/core": "^10.1.15",
 1492 |         "@inquirer/figures": "^1.0.13",
 1493 |         "@inquirer/type": "^3.0.8",
 1494 |         "yoctocolors-cjs": "^2.1.2"
 1495 |       },
 1496 |       "engines": {
 1497 |         "node": ">=18"
 1498 |       },
 1499 |       "peerDependencies": {
 1500 |         "@types/node": ">=18"
 1501 |       },
 1502 |       "peerDependenciesMeta": {
 1503 |         "@types/node": {
 1504 |           "optional": true
 1505 |         }
 1506 |       }
 1507 |     },
 1508 |     "node_modules/@inquirer/select": {
 1509 |       "version": "4.3.1",
 1510 |       "resolved": "https://registry.npmjs.org/@inquirer/select/-/select-4.3.1.tgz",
 1511 |       "integrity": "sha512-Gfl/5sqOF5vS/LIrSndFgOh7jgoe0UXEizDqahFRkq5aJBLegZ6WjuMh/hVEJwlFQjyLq1z9fRtvUMkb7jM1LA==",
 1512 |       "dev": true,
 1513 |       "license": "MIT",
 1514 |       "dependencies": {
 1515 |         "@inquirer/core": "^10.1.15",
 1516 |         "@inquirer/figures": "^1.0.13",
 1517 |         "@inquirer/type": "^3.0.8",
 1518 |         "ansi-escapes": "^4.3.2",
 1519 |         "yoctocolors-cjs": "^2.1.2"
 1520 |       },
 1521 |       "engines": {
 1522 |         "node": ">=18"
 1523 |       },
 1524 |       "peerDependencies": {
 1525 |         "@types/node": ">=18"
 1526 |       },
 1527 |       "peerDependenciesMeta": {
 1528 |         "@types/node": {
 1529 |           "optional": true
 1530 |         }
 1531 |       }
 1532 |     },
 1533 |     "node_modules/@inquirer/select/node_modules/ansi-escapes": {
 1534 |       "version": "4.3.2",
 1535 |       "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
 1536 |       "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
 1537 |       "dev": true,
 1538 |       "license": "MIT",
 1539 |       "dependencies": {
 1540 |         "type-fest": "^0.21.3"
 1541 |       },
 1542 |       "engines": {
 1543 |         "node": ">=8"
 1544 |       },
 1545 |       "funding": {
 1546 |         "url": "https://github.com/sponsors/sindresorhus"
 1547 |       }
 1548 |     },
 1549 |     "node_modules/@inquirer/select/node_modules/type-fest": {
 1550 |       "version": "0.21.3",
 1551 |       "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
 1552 |       "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
 1553 |       "dev": true,
 1554 |       "license": "(MIT OR CC0-1.0)",
 1555 |       "engines": {
 1556 |         "node": ">=10"
 1557 |       },
 1558 |       "funding": {
 1559 |         "url": "https://github.com/sponsors/sindresorhus"
 1560 |       }
 1561 |     },
 1562 |     "node_modules/@inquirer/type": {
 1563 |       "version": "3.0.8",
 1564 |       "resolved": "https://registry.npmjs.org/@inquirer/type/-/type-3.0.8.tgz",
 1565 |       "integrity": "sha512-lg9Whz8onIHRthWaN1Q9EGLa/0LFJjyM8mEUbL1eTi6yMGvBf8gvyDLtxSXztQsxMvhxxNpJYrwa1YHdq+w4Jw==",
 1566 |       "dev": true,
 1567 |       "license": "MIT",
 1568 |       "engines": {
 1569 |         "node": ">=18"
 1570 |       },
 1571 |       "peerDependencies": {
 1572 |         "@types/node": ">=18"
 1573 |       },
 1574 |       "peerDependenciesMeta": {
 1575 |         "@types/node": {
 1576 |           "optional": true
 1577 |         }
 1578 |       }
 1579 |     },
 1580 |     "node_modules/@isaacs/balanced-match": {
 1581 |       "version": "4.0.1",
 1582 |       "resolved": "https://registry.npmjs.org/@isaacs/balanced-match/-/balanced-match-4.0.1.tgz",
 1583 |       "integrity": "sha512-yzMTt9lEb8Gv7zRioUilSglI0c0smZ9k5D65677DLWLtWJaXIS3CqcGyUFByYKlnUj6TkjLVs54fBl6+TiGQDQ==",
 1584 |       "dev": true,
 1585 |       "license": "MIT",
 1586 |       "engines": {
 1587 |         "node": "20 || >=22"
 1588 |       }
 1589 |     },
 1590 |     "node_modules/@isaacs/brace-expansion": {
 1591 |       "version": "5.0.0",
 1592 |       "resolved": "https://registry.npmjs.org/@isaacs/brace-expansion/-/brace-expansion-5.0.0.tgz",
 1593 |       "integrity": "sha512-ZT55BDLV0yv0RBm2czMiZ+SqCGO7AvmOM3G/w2xhVPH+te0aKgFjmBvGlL1dH+ql2tgGO3MVrbb3jCKyvpgnxA==",
 1594 |       "dev": true,
 1595 |       "license": "MIT",
 1596 |       "dependencies": {
 1597 |         "@isaacs/balanced-match": "^4.0.1"
 1598 |       },
 1599 |       "engines": {
 1600 |         "node": "20 || >=22"
 1601 |       }
 1602 |     },
 1603 |     "node_modules/@isaacs/cliui": {
 1604 |       "version": "8.0.2",
 1605 |       "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
 1606 |       "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
 1607 |       "dev": true,
 1608 |       "license": "ISC",
 1609 |       "dependencies": {
 1610 |         "string-width": "^5.1.2",
 1611 |         "string-width-cjs": "npm:string-width@^4.2.0",
 1612 |         "strip-ansi": "^7.0.1",
 1613 |         "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
 1614 |         "wrap-ansi": "^8.1.0",
 1615 |         "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
 1616 |       },
 1617 |       "engines": {
 1618 |         "node": ">=12"
 1619 |       }
 1620 |     },
 1621 |     "node_modules/@jridgewell/gen-mapping": {
 1622 |       "version": "0.3.12",
 1623 |       "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.12.tgz",
 1624 |       "integrity": "sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==",
 1625 |       "dev": true,
 1626 |       "license": "MIT",
 1627 |       "dependencies": {
 1628 |         "@jridgewell/sourcemap-codec": "^1.5.0",
 1629 |         "@jridgewell/trace-mapping": "^0.3.24"
 1630 |       }
 1631 |     },
 1632 |     "node_modules/@jridgewell/resolve-uri": {
 1633 |       "version": "3.1.2",
 1634 |       "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
 1635 |       "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
 1636 |       "dev": true,
 1637 |       "license": "MIT",
 1638 |       "engines": {
 1639 |         "node": ">=6.0.0"
 1640 |       }
 1641 |     },
 1642 |     "node_modules/@jridgewell/sourcemap-codec": {
 1643 |       "version": "1.5.4",
 1644 |       "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz",
 1645 |       "integrity": "sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==",
 1646 |       "dev": true,
 1647 |       "license": "MIT"
 1648 |     },
 1649 |     "node_modules/@jridgewell/trace-mapping": {
 1650 |       "version": "0.3.29",
 1651 |       "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
 1652 |       "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
 1653 |       "dev": true,
 1654 |       "license": "MIT",
 1655 |       "dependencies": {
 1656 |         "@jridgewell/resolve-uri": "^3.1.0",
 1657 |         "@jridgewell/sourcemap-codec": "^1.4.14"
 1658 |       }
 1659 |     },
 1660 |     "node_modules/@jsep-plugin/assignment": {
 1661 |       "version": "1.3.0",
 1662 |       "resolved": "https://registry.npmjs.org/@jsep-plugin/assignment/-/assignment-1.3.0.tgz",
 1663 |       "integrity": "sha512-VVgV+CXrhbMI3aSusQyclHkenWSAm95WaiKrMxRFam3JSUiIaQjoMIw2sEs/OX4XifnqeQUN4DYbJjlA8EfktQ==",
 1664 |       "dev": true,
 1665 |       "license": "MIT",
 1666 |       "engines": {
 1667 |         "node": ">= 10.16.0"
 1668 |       },
 1669 |       "peerDependencies": {
 1670 |         "jsep": "^0.4.0||^1.0.0"
 1671 |       }
 1672 |     },
 1673 |     "node_modules/@jsep-plugin/regex": {
 1674 |       "version": "1.0.4",
 1675 |       "resolved": "https://registry.npmjs.org/@jsep-plugin/regex/-/regex-1.0.4.tgz",
 1676 |       "integrity": "sha512-q7qL4Mgjs1vByCaTnDFcBnV9HS7GVPJX5vyVoCgZHNSC9rjwIlmbXG5sUuorR5ndfHAIlJ8pVStxvjXHbNvtUg==",
 1677 |       "dev": true,
 1678 |       "license": "MIT",
 1679 |       "engines": {
 1680 |         "node": ">= 10.16.0"
 1681 |       },
 1682 |       "peerDependencies": {
 1683 |         "jsep": "^0.4.0||^1.0.0"
 1684 |       }
 1685 |     },
 1686 |     "node_modules/@jsep-plugin/ternary": {
 1687 |       "version": "1.1.4",
 1688 |       "resolved": "https://registry.npmjs.org/@jsep-plugin/ternary/-/ternary-1.1.4.tgz",
 1689 |       "integrity": "sha512-ck5wiqIbqdMX6WRQztBL7ASDty9YLgJ3sSAK5ZpBzXeySvFGCzIvM6UiAI4hTZ22fEcYQVV/zhUbNscggW+Ukg==",
 1690 |       "dev": true,
 1691 |       "license": "MIT",
 1692 |       "engines": {
 1693 |         "node": ">= 10.16.0"
 1694 |       },
 1695 |       "peerDependencies": {
 1696 |         "jsep": "^0.4.0||^1.0.0"
 1697 |       }
 1698 |     },
 1699 |     "node_modules/@leichtgewicht/ip-codec": {
 1700 |       "version": "2.0.5",
 1701 |       "resolved": "https://registry.npmjs.org/@leichtgewicht/ip-codec/-/ip-codec-2.0.5.tgz",
 1702 |       "integrity": "sha512-Vo+PSpZG2/fmgmiNzYK9qWRh8h/CHrwD0mo1h1DzL4yzHNSfWYujGTYsWGreD000gcgmZ7K4Ys6Tx9TxtsKdDw==",
 1703 |       "dev": true,
 1704 |       "license": "MIT"
 1705 |     },
 1706 |     "node_modules/@mdx-js/mdx": {
 1707 |       "version": "3.1.0",
 1708 |       "resolved": "https://registry.npmjs.org/@mdx-js/mdx/-/mdx-3.1.0.tgz",
 1709 |       "integrity": "sha512-/QxEhPAvGwbQmy1Px8F899L5Uc2KZ6JtXwlCgJmjSTBedwOZkByYcBG4GceIGPXRDsmfxhHazuS+hlOShRLeDw==",
 1710 |       "dev": true,
 1711 |       "license": "MIT",
 1712 |       "dependencies": {
 1713 |         "@types/estree": "^1.0.0",
 1714 |         "@types/estree-jsx": "^1.0.0",
 1715 |         "@types/hast": "^3.0.0",
 1716 |         "@types/mdx": "^2.0.0",
 1717 |         "collapse-white-space": "^2.0.0",
 1718 |         "devlop": "^1.0.0",
 1719 |         "estree-util-is-identifier-name": "^3.0.0",
 1720 |         "estree-util-scope": "^1.0.0",
 1721 |         "estree-walker": "^3.0.0",
 1722 |         "hast-util-to-jsx-runtime": "^2.0.0",
 1723 |         "markdown-extensions": "^2.0.0",
 1724 |         "recma-build-jsx": "^1.0.0",
 1725 |         "recma-jsx": "^1.0.0",
 1726 |         "recma-stringify": "^1.0.0",
 1727 |         "rehype-recma": "^1.0.0",
 1728 |         "remark-mdx": "^3.0.0",
 1729 |         "remark-parse": "^11.0.0",
 1730 |         "remark-rehype": "^11.0.0",
 1731 |         "source-map": "^0.7.0",
 1732 |         "unified": "^11.0.0",
 1733 |         "unist-util-position-from-estree": "^2.0.0",
 1734 |         "unist-util-stringify-position": "^4.0.0",
 1735 |         "unist-util-visit": "^5.0.0",
 1736 |         "vfile": "^6.0.0"
 1737 |       },
 1738 |       "funding": {
 1739 |         "type": "opencollective",
 1740 |         "url": "https://opencollective.com/unified"
 1741 |       }
 1742 |     },
 1743 |     "node_modules/@mdx-js/react": {
 1744 |       "version": "3.1.0",
 1745 |       "resolved": "https://registry.npmjs.org/@mdx-js/react/-/react-3.1.0.tgz",
 1746 |       "integrity": "sha512-QjHtSaoameoalGnKDT3FoIl4+9RwyTmo9ZJGBdLOks/YOiWHoRDI3PUwEzOE7kEmGcV3AFcp9K6dYu9rEuKLAQ==",
 1747 |       "dev": true,
 1748 |       "license": "MIT",
 1749 |       "dependencies": {
 1750 |         "@types/mdx": "^2.0.0"
 1751 |       },
 1752 |       "funding": {
 1753 |         "type": "opencollective",
 1754 |         "url": "https://opencollective.com/unified"
 1755 |       },
 1756 |       "peerDependencies": {
 1757 |         "@types/react": ">=16",
 1758 |         "react": ">=16"
 1759 |       }
 1760 |     },
 1761 |     "node_modules/@mintlify/cli": {
 1762 |       "version": "4.0.669",
 1763 |       "resolved": "https://registry.npmjs.org/@mintlify/cli/-/cli-4.0.669.tgz",
 1764 |       "integrity": "sha512-Xv0uIJgvIGXmB/LRxXL+MlBvoAMq7i+zDKSdC3GNn2D8RfDe9sbyvafVYV/YTkXv1EWwzbRnxsdEAb0IrJBeBQ==",
 1765 |       "dev": true,
 1766 |       "license": "Elastic-2.0",
 1767 |       "dependencies": {
 1768 |         "@mintlify/common": "1.0.486",
 1769 |         "@mintlify/link-rot": "3.0.617",
 1770 |         "@mintlify/models": "0.0.218",
 1771 |         "@mintlify/prebuild": "1.0.606",
 1772 |         "@mintlify/previewing": "4.0.653",
 1773 |         "@mintlify/validation": "0.1.437",
 1774 |         "chalk": "^5.2.0",
 1775 |         "detect-port": "^1.5.1",
 1776 |         "fs-extra": "^11.2.0",
 1777 |         "ink": "^5.2.1",
 1778 |         "inquirer": "^12.3.0",
 1779 |         "js-yaml": "^4.1.0",
 1780 |         "react": "^18.3.1",
 1781 |         "semver": "^7.7.2",
 1782 |         "yargs": "^17.6.0"
 1783 |       },
 1784 |       "bin": {
 1785 |         "mint": "bin/index.js",
 1786 |         "mintlify": "bin/index.js"
 1787 |       },
 1788 |       "engines": {
 1789 |         "node": ">=18.0.0"
 1790 |       }
 1791 |     },
 1792 |     "node_modules/@mintlify/common": {
 1793 |       "version": "1.0.486",
 1794 |       "resolved": "https://registry.npmjs.org/@mintlify/common/-/common-1.0.486.tgz",
 1795 |       "integrity": "sha512-AcNrKBKfKoXJyqnPcd4z853MqZXMpnVAzTjtT5IdJwEtuzmIbkFkwjeGpCTeZJGW+f5GDyEuUE/SzqkFC4j8xQ==",
 1796 |       "dev": true,
 1797 |       "license": "ISC",
 1798 |       "dependencies": {
 1799 |         "@asyncapi/parser": "^3.4.0",
 1800 |         "@mintlify/mdx": "^2.0.3",
 1801 |         "@mintlify/models": "0.0.218",
 1802 |         "@mintlify/openapi-parser": "^0.0.7",
 1803 |         "@mintlify/validation": "0.1.437",
 1804 |         "@sindresorhus/slugify": "^2.1.1",
 1805 |         "acorn": "^8.11.2",
 1806 |         "acorn-jsx": "^5.3.2",
 1807 |         "estree-util-to-js": "^2.0.0",
 1808 |         "estree-walker": "^3.0.3",
 1809 |         "gray-matter": "^4.0.3",
 1810 |         "hast-util-from-html": "^2.0.3",
 1811 |         "hast-util-to-html": "^9.0.4",
 1812 |         "hast-util-to-text": "^4.0.2",
 1813 |         "js-yaml": "^4.1.0",
 1814 |         "lodash": "^4.17.21",
 1815 |         "mdast": "^3.0.0",
 1816 |         "mdast-util-from-markdown": "^2.0.2",
 1817 |         "mdast-util-gfm": "^3.0.0",
 1818 |         "mdast-util-mdx": "^3.0.0",
 1819 |         "mdast-util-mdx-jsx": "^3.1.3",
 1820 |         "micromark-extension-gfm": "^3.0.0",
 1821 |         "micromark-extension-mdx-jsx": "^3.0.1",
 1822 |         "micromark-extension-mdxjs": "^3.0.0",
 1823 |         "openapi-types": "^12.0.0",
 1824 |         "postcss": "^8.5.6",
 1825 |         "remark": "^15.0.1",
 1826 |         "remark-frontmatter": "^5.0.0",
 1827 |         "remark-gfm": "^4.0.0",
 1828 |         "remark-math": "^6.0.0",
 1829 |         "remark-mdx": "^3.1.0",
 1830 |         "remark-stringify": "^11.0.0",
 1831 |         "tailwindcss": "^3.4.4",
 1832 |         "unified": "^11.0.5",
 1833 |         "unist-builder": "^4.0.0",
 1834 |         "unist-util-map": "^4.0.0",
 1835 |         "unist-util-remove": "^4.0.0",
 1836 |         "unist-util-remove-position": "^5.0.0",
 1837 |         "unist-util-visit": "^5.0.0",
 1838 |         "unist-util-visit-parents": "^6.0.1",
 1839 |         "vfile": "^6.0.3"
 1840 |       }
 1841 |     },
 1842 |     "node_modules/@mintlify/link-rot": {
 1843 |       "version": "3.0.617",
 1844 |       "resolved": "https://registry.npmjs.org/@mintlify/link-rot/-/link-rot-3.0.617.tgz",
 1845 |       "integrity": "sha512-f2t9W+VLJU3l0Psmq1vPVm2SSXYd9l3+NVf7zdr2FmgCeP9noZvqfEK1MOTTjxrw2NaATQYHjk5aFlV1Weyerg==",
 1846 |       "dev": true,
 1847 |       "license": "Elastic-2.0",
 1848 |       "dependencies": {
 1849 |         "@mintlify/common": "1.0.486",
 1850 |         "@mintlify/prebuild": "1.0.606",
 1851 |         "@mintlify/previewing": "4.0.653",
 1852 |         "@mintlify/validation": "0.1.437",
 1853 |         "fs-extra": "^11.1.0",
 1854 |         "unist-util-visit": "^4.1.1"
 1855 |       },
 1856 |       "engines": {
 1857 |         "node": ">=18.0.0"
 1858 |       }
 1859 |     },
 1860 |     "node_modules/@mintlify/link-rot/node_modules/@types/unist": {
 1861 |       "version": "2.0.11",
 1862 |       "resolved": "https://registry.npmjs.org/@types/unist/-/unist-2.0.11.tgz",
 1863 |       "integrity": "sha512-CmBKiL6NNo/OqgmMn95Fk9Whlp2mtvIv+KNpQKN2F4SjvrEesubTRWGYSg+BnWZOnlCaSTU1sMpsBOzgbYhnsA==",
 1864 |       "dev": true,
 1865 |       "license": "MIT"
 1866 |     },
 1867 |     "node_modules/@mintlify/link-rot/node_modules/unist-util-is": {
 1868 |       "version": "5.2.1",
 1869 |       "resolved": "https://registry.npmjs.org/unist-util-is/-/unist-util-is-5.2.1.tgz",
 1870 |       "integrity": "sha512-u9njyyfEh43npf1M+yGKDGVPbY/JWEemg5nH05ncKPfi+kBbKBJoTdsogMu33uhytuLlv9y0O7GH7fEdwLdLQw==",
 1871 |       "dev": true,
 1872 |       "license": "MIT",
 1873 |       "dependencies": {
 1874 |         "@types/unist": "^2.0.0"
 1875 |       },
 1876 |       "funding": {
 1877 |         "type": "opencollective",
 1878 |         "url": "https://opencollective.com/unified"
 1879 |       }
 1880 |     },
 1881 |     "node_modules/@mintlify/link-rot/node_modules/unist-util-visit": {
 1882 |       "version": "4.1.2",
 1883 |       "resolved": "https://registry.npmjs.org/unist-util-visit/-/unist-util-visit-4.1.2.tgz",
 1884 |       "integrity": "sha512-MSd8OUGISqHdVvfY9TPhyK2VdUrPgxkUtWSuMHF6XAAFuL4LokseigBnZtPnJMu+FbynTkFNnFlyjxpVKujMRg==",
 1885 |       "dev": true,
 1886 |       "license": "MIT",
 1887 |       "dependencies": {
 1888 |         "@types/unist": "^2.0.0",
 1889 |         "unist-util-is": "^5.0.0",
 1890 |         "unist-util-visit-parents": "^5.1.1"
 1891 |       },
 1892 |       "funding": {
 1893 |         "type": "opencollective",
 1894 |         "url": "https://opencollective.com/unified"
 1895 |       }
 1896 |     },
 1897 |     "node_modules/@mintlify/link-rot/node_modules/unist-util-visit-parents": {
 1898 |       "version": "5.1.3",
 1899 |       "resolved": "https://registry.npmjs.org/unist-util-visit-parents/-/unist-util-visit-parents-5.1.3.tgz",
 1900 |       "integrity": "sha512-x6+y8g7wWMyQhL1iZfhIPhDAs7Xwbn9nRosDXl7qoPTSCy0yNxnKc+hWokFifWQIDGi154rdUqKvbCa4+1kLhg==",
 1901 |       "dev": true,
 1902 |       "license": "MIT",
 1903 |       "dependencies": {
 1904 |         "@types/unist": "^2.0.0",
 1905 |         "unist-util-is": "^5.0.0"
 1906 |       },
 1907 |       "funding": {
 1908 |         "type": "opencollective",
 1909 |         "url": "https://opencollective.com/unified"
 1910 |       }
 1911 |     },
 1912 |     "node_modules/@mintlify/mdx": {
 1913 |       "version": "2.0.3",
 1914 |       "resolved": "https://registry.npmjs.org/@mintlify/mdx/-/mdx-2.0.3.tgz",
 1915 |       "integrity": "sha512-UGlwavma8QooWAlhtXpTAG5MAUZTTUKI8Qu25Wqfp1HMOPrYGvo5YQPmlqqogbMsqDMcFPLP/ZYnaZsGUYBspQ==",
 1916 |       "dev": true,
 1917 |       "license": "MIT",
 1918 |       "dependencies": {
 1919 |         "@shikijs/transformers": "^3.6.0",
 1920 |         "hast-util-to-string": "^3.0.1",
 1921 |         "mdast-util-mdx-jsx": "^3.2.0",
 1922 |         "next-mdx-remote-client": "^1.0.3",
 1923 |         "rehype-katex": "^7.0.1",
 1924 |         "remark-gfm": "^4.0.0",
 1925 |         "remark-math": "^6.0.0",
 1926 |         "remark-smartypants": "^3.0.2",
 1927 |         "shiki": "^3.6.0",
 1928 |         "unified": "^11.0.0",
 1929 |         "unist-util-visit": "^5.0.0"
 1930 |       },
 1931 |       "peerDependencies": {
 1932 |         "react": "^18.3.1",
 1933 |         "react-dom": "^18.3.1"
 1934 |       }
 1935 |     },
 1936 |     "node_modules/@mintlify/models": {
 1937 |       "version": "0.0.218",
 1938 |       "resolved": "https://registry.npmjs.org/@mintlify/models/-/models-0.0.218.tgz",
 1939 |       "integrity": "sha512-XJWeh20/VeB9CJjIf2xY3wnSGZ6YH9yp0A2eXElD/32QppBQBQ9OA6Kt4rMWFyie7Uv6+/Ud9N+IBwWObbRNsA==",
 1940 |       "dev": true,
 1941 |       "license": "Elastic-2.0",
 1942 |       "dependencies": {
 1943 |         "axios": "^1.8.3",
 1944 |         "openapi-types": "^12.0.0"
 1945 |       },
 1946 |       "engines": {
 1947 |         "node": ">=18.0.0"
 1948 |       }
 1949 |     },
 1950 |     "node_modules/@mintlify/openapi-parser": {
 1951 |       "version": "0.0.7",
 1952 |       "resolved": "https://registry.npmjs.org/@mintlify/openapi-parser/-/openapi-parser-0.0.7.tgz",
 1953 |       "integrity": "sha512-3ecbkzPbsnkKVZJypVL0H5pCTR7a4iLv4cP7zbffzAwy+vpH70JmPxNVpPPP62yLrdZlfNcMxu5xKeT7fllgMg==",
 1954 |       "dev": true,
 1955 |       "license": "MIT",
 1956 |       "dependencies": {
 1957 |         "ajv": "^8.17.1",
 1958 |         "ajv-draft-04": "^1.0.0",
 1959 |         "ajv-formats": "^3.0.1",
 1960 |         "jsonpointer": "^5.0.1",
 1961 |         "leven": "^4.0.0",
 1962 |         "yaml": "^2.4.5"
 1963 |       },
 1964 |       "engines": {
 1965 |         "node": ">=18"
 1966 |       }
 1967 |     },
 1968 |     "node_modules/@mintlify/prebuild": {
 1969 |       "version": "1.0.606",
 1970 |       "resolved": "https://registry.npmjs.org/@mintlify/prebuild/-/prebuild-1.0.606.tgz",
 1971 |       "integrity": "sha512-ajslkwQNON8lIZr6WMFlv4uiTiIYCetvyiCg4IL3B0gkilqMz5E9hq9evCs5F7nCkQegrWvBSZvnSIsI8uE4pg==",
 1972 |       "dev": true,
 1973 |       "license": "Elastic-2.0",
 1974 |       "dependencies": {
 1975 |         "@mintlify/common": "1.0.486",
 1976 |         "@mintlify/openapi-parser": "^0.0.7",
 1977 |         "@mintlify/scraping": "4.0.344",
 1978 |         "@mintlify/validation": "0.1.437",
 1979 |         "chalk": "^5.3.0",
 1980 |         "favicons": "^7.2.0",
 1981 |         "fs-extra": "^11.1.0",
 1982 |         "gray-matter": "^4.0.3",
 1983 |         "js-yaml": "^4.1.0",
 1984 |         "mdast": "^3.0.0",
 1985 |         "openapi-types": "^12.0.0",
 1986 |         "unist-util-visit": "^4.1.1"
 1987 |       }
 1988 |     },
 1989 |     "node_modules/@mintlify/prebuild/node_modules/@types/unist": {
 1990 |       "version": "2.0.11",
 1991 |       "resolved": "https://registry.npmjs.org/@types/unist/-/unist-2.0.11.tgz",
 1992 |       "integrity": "sha512-CmBKiL6NNo/OqgmMn95Fk9Whlp2mtvIv+KNpQKN2F4SjvrEesubTRWGYSg+BnWZOnlCaSTU1sMpsBOzgbYhnsA==",
 1993 |       "dev": true,
 1994 |       "license": "MIT"
 1995 |     },
 1996 |     "node_modules/@mintlify/prebuild/node_modules/unist-util-is": {
 1997 |       "version": "5.2.1",
 1998 |       "resolved": "https://registry.npmjs.org/unist-util-is/-/unist-util-is-5.2.1.tgz",
 1999 |       "integrity": "sha512-u9njyyfEh43npf1M+yGKDGVPbY/JWEemg5nH05ncKPfi+kBbKBJoTdsogMu33uhytuLlv9y0O7GH7fEdwLdLQw==",
 2000 |       "dev": true,
 2001 |       "license": "MIT",
 2002 |       "dependencies": {
 2003 |         "@types/unist": "^2.0.0"
 2004 |       },
 2005 |       "funding": {
 2006 |         "type": "opencollective",
 2007 |         "url": "https://opencollective.com/unified"
 2008 |       }
 2009 |     },
 2010 |     "node_modules/@mintlify/prebuild/node_modules/unist-util-visit": {
 2011 |       "version": "4.1.2",
 2012 |       "resolved": "https://registry.npmjs.org/unist-util-visit/-/unist-util-visit-4.1.2.tgz",
 2013 |       "integrity": "sha512-MSd8OUGISqHdVvfY9TPhyK2VdUrPgxkUtWSuMHF6XAAFuL4LokseigBnZtPnJMu+FbynTkFNnFlyjxpVKujMRg==",
 2014 |       "dev": true,
 2015 |       "license": "MIT",
 2016 |       "dependencies": {
 2017 |         "@types/unist": "^2.0.0",
 2018 |         "unist-util-is": "^5.0.0",
 2019 |         "unist-util-visit-parents": "^5.1.1"
 2020 |       },
 2021 |       "funding": {
 2022 |         "type": "opencollective",
 2023 |         "url": "https://opencollective.com/unified"
 2024 |       }
 2025 |     },
 2026 |     "node_modules/@mintlify/prebuild/node_modules/unist-util-visit-parents": {
 2027 |       "version": "5.1.3",
 2028 |       "resolved": "https://registry.npmjs.org/unist-util-visit-parents/-/unist-util-visit-parents-5.1.3.tgz",
 2029 |       "integrity": "sha512-x6+y8g7wWMyQhL1iZfhIPhDAs7Xwbn9nRosDXl7qoPTSCy0yNxnKc+hWokFifWQIDGi154rdUqKvbCa4+1kLhg==",
 2030 |       "dev": true,
 2031 |       "license": "MIT",
 2032 |       "dependencies": {
 2033 |         "@types/unist": "^2.0.0",
 2034 |         "unist-util-is": "^5.0.0"
 2035 |       },
 2036 |       "funding": {
 2037 |         "type": "opencollective",
 2038 |         "url": "https://opencollective.com/unified"
 2039 |       }
 2040 |     },
 2041 |     "node_modules/@mintlify/previewing": {
 2042 |       "version": "4.0.653",
 2043 |       "resolved": "https://registry.npmjs.org/@mintlify/previewing/-/previewing-4.0.653.tgz",
 2044 |       "integrity": "sha512-Plr0eXys4mUSEQraJauO0x6xYFVe44zoXYoB/KGIiYVifbr2oRF1qqWLXLy6Mr6KCcewe7JRK1Z3VEXAnVP43A==",
 2045 |       "dev": true,
 2046 |       "license": "Elastic-2.0",
 2047 |       "dependencies": {
 2048 |         "@mintlify/common": "1.0.486",
 2049 |         "@mintlify/prebuild": "1.0.606",
 2050 |         "@mintlify/validation": "0.1.437",
 2051 |         "better-opn": "^3.0.2",
 2052 |         "chalk": "^5.1.0",
 2053 |         "chokidar": "^3.5.3",
 2054 |         "express": "^4.18.2",
 2055 |         "fs-extra": "^11.1.0",
 2056 |         "got": "^13.0.0",
 2057 |         "gray-matter": "^4.0.3",
 2058 |         "ink": "^5.2.1",
 2059 |         "ink-spinner": "^5.0.0",
 2060 |         "is-online": "^10.0.0",
 2061 |         "js-yaml": "^4.1.0",
 2062 |         "mdast": "^3.0.0",
 2063 |         "openapi-types": "^12.0.0",
 2064 |         "react": "^18.3.1",
 2065 |         "socket.io": "^4.7.2",
 2066 |         "tar": "^6.1.15",
 2067 |         "unist-util-visit": "^4.1.1",
 2068 |         "yargs": "^17.6.0"
 2069 |       },
 2070 |       "engines": {
 2071 |         "node": ">=18.0.0"
 2072 |       }
 2073 |     },
 2074 |     "node_modules/@mintlify/previewing/node_modules/@types/unist": {
 2075 |       "version": "2.0.11",
 2076 |       "resolved": "https://registry.npmjs.org/@types/unist/-/unist-2.0.11.tgz",
 2077 |       "integrity": "sha512-CmBKiL6NNo/OqgmMn95Fk9Whlp2mtvIv+KNpQKN2F4SjvrEesubTRWGYSg+BnWZOnlCaSTU1sMpsBOzgbYhnsA==",
 2078 |       "dev": true,
 2079 |       "license": "MIT"
 2080 |     },
 2081 |     "node_modules/@mintlify/previewing/node_modules/unist-util-is": {
 2082 |       "version": "5.2.1",
 2083 |       "resolved": "https://registry.npmjs.org/unist-util-is/-/unist-util-is-5.2.1.tgz",
 2084 |       "integrity": "sha512-u9njyyfEh43npf1M+yGKDGVPbY/JWEemg5nH05ncKPfi+kBbKBJoTdsogMu33uhytuLlv9y0O7GH7fEdwLdLQw==",
 2085 |       "dev": true,
 2086 |       "license": "MIT",
 2087 |       "dependencies": {
 2088 |         "@types/unist": "^2.0.0"
 2089 |       },
 2090 |       "funding": {
 2091 |         "type": "opencollective",
 2092 |         "url": "https://opencollective.com/unified"
 2093 |       }
 2094 |     },
 2095 |     "node_modules/@mintlify/previewing/node_modules/unist-util-visit": {
 2096 |       "version": "4.1.2",
 2097 |       "resolved": "https://registry.npmjs.org/unist-util-visit/-/unist-util-visit-4.1.2.tgz",
 2098 |       "integrity": "sha512-MSd8OUGISqHdVvfY9TPhyK2VdUrPgxkUtWSuMHF6XAAFuL4LokseigBnZtPnJMu+FbynTkFNnFlyjxpVKujMRg==",
 2099 |       "dev": true,
 2100 |       "license": "MIT",
 2101 |       "dependencies": {
 2102 |         "@types/unist": "^2.0.0",
 2103 |         "unist-util-is": "^5.0.0",
 2104 |         "unist-util-visit-parents": "^5.1.1"
 2105 |       },
 2106 |       "funding": {
 2107 |         "type": "opencollective",
 2108 |         "url": "https://opencollective.com/unified"
 2109 |       }
 2110 |     },
 2111 |     "node_modules/@mintlify/previewing/node_modules/unist-util-visit-parents": {
 2112 |       "version": "5.1.3",
 2113 |       "resolved": "https://registry.npmjs.org/unist-util-visit-parents/-/unist-util-visit-parents-5.1.3.tgz",
 2114 |       "integrity": "sha512-x6+y8g7wWMyQhL1iZfhIPhDAs7Xwbn9nRosDXl7qoPTSCy0yNxnKc+hWokFifWQIDGi154rdUqKvbCa4+1kLhg==",
 2115 |       "dev": true,
 2116 |       "license": "MIT",
 2117 |       "dependencies": {
 2118 |         "@types/unist": "^2.0.0",
 2119 |         "unist-util-is": "^5.0.0"
 2120 |       },
 2121 |       "funding": {
 2122 |         "type": "opencollective",
 2123 |         "url": "https://opencollective.com/unified"
 2124 |       }
 2125 |     },
 2126 |     "node_modules/@mintlify/scraping": {
 2127 |       "version": "4.0.344",
 2128 |       "resolved": "https://registry.npmjs.org/@mintlify/scraping/-/scraping-4.0.344.tgz",
 2129 |       "integrity": "sha512-F8pajZmB5MfeNOHo1LnwwpQJgmQNuCibOE8/TX9AMYvFvxYY1WhsIQxw9NAUj+kAogaP+cGzFebV+4Wj+MQgAA==",
 2130 |       "dev": true,
 2131 |       "license": "Elastic-2.0",
 2132 |       "dependencies": {
 2133 |         "@mintlify/common": "1.0.486",
 2134 |         "@mintlify/openapi-parser": "^0.0.7",
 2135 |         "fs-extra": "^11.1.1",
 2136 |         "hast-util-to-mdast": "^10.1.0",
 2137 |         "js-yaml": "^4.1.0",
 2138 |         "mdast-util-mdx-jsx": "^3.1.3",
 2139 |         "neotraverse": "^0.6.18",
 2140 |         "puppeteer": "^22.14.0",
 2141 |         "rehype-parse": "^9.0.0",
 2142 |         "remark-gfm": "^4.0.0",
 2143 |         "remark-mdx": "^3.0.1",
 2144 |         "remark-parse": "^11.0.0",
 2145 |         "remark-stringify": "^11.0.0",
 2146 |         "unified": "^11.0.5",
 2147 |         "unist-util-visit": "^5.0.0",
 2148 |         "yargs": "^17.6.0",
 2149 |         "zod": "^3.20.6"
 2150 |       },
 2151 |       "bin": {
 2152 |         "mintlify-scrape": "bin/cli.js"
 2153 |       },
 2154 |       "engines": {
 2155 |         "node": ">=18.0.0"
 2156 |       }
 2157 |     },
 2158 |     "node_modules/@mintlify/validation": {
 2159 |       "version": "0.1.437",
 2160 |       "resolved": "https://registry.npmjs.org/@mintlify/validation/-/validation-0.1.437.tgz",
 2161 |       "integrity": "sha512-3iaLFNn5JOfoRl8Yml5cCtNIllG70pPI0vYS0xMMEwJELbbD1wk+TKEBT+FwdyZzd0077Uius4ItSXiuBwYS/g==",
 2162 |       "dev": true,
 2163 |       "license": "Elastic-2.0",
 2164 |       "dependencies": {
 2165 |         "@mintlify/models": "0.0.218",
 2166 |         "arktype": "^2.1.20",
 2167 |         "lcm": "^0.0.3",
 2168 |         "lodash": "^4.17.21",
 2169 |         "openapi-types": "^12.0.0",
 2170 |         "zod": "^3.20.6",
 2171 |         "zod-to-json-schema": "^3.20.3"
 2172 |       }
 2173 |     },
 2174 |     "node_modules/@nodelib/fs.scandir": {
 2175 |       "version": "2.1.5",
 2176 |       "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
 2177 |       "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
 2178 |       "dev": true,
 2179 |       "license": "MIT",
 2180 |       "dependencies": {
 2181 |         "@nodelib/fs.stat": "2.0.5",
 2182 |         "run-parallel": "^1.1.9"
 2183 |       },
 2184 |       "engines": {
 2185 |         "node": ">= 8"
 2186 |       }
 2187 |     },
 2188 |     "node_modules/@nodelib/fs.stat": {
 2189 |       "version": "2.0.5",
 2190 |       "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
 2191 |       "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
 2192 |       "dev": true,
 2193 |       "license": "MIT",
 2194 |       "engines": {
 2195 |         "node": ">= 8"
 2196 |       }
 2197 |     },
 2198 |     "node_modules/@nodelib/fs.walk": {
 2199 |       "version": "1.2.8",
 2200 |       "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
 2201 |       "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
 2202 |       "dev": true,
 2203 |       "license": "MIT",
 2204 |       "dependencies": {
 2205 |         "@nodelib/fs.scandir": "2.1.5",
 2206 |         "fastq": "^1.6.0"
 2207 |       },
 2208 |       "engines": {
 2209 |         "node": ">= 8"
 2210 |       }
 2211 |     },
 2212 |     "node_modules/@openapi-contrib/openapi-schema-to-json-schema": {
 2213 |       "version": "3.2.0",
 2214 |       "resolved": "https://registry.npmjs.org/@openapi-contrib/openapi-schema-to-json-schema/-/openapi-schema-to-json-schema-3.2.0.tgz",
 2215 |       "integrity": "sha512-Gj6C0JwCr8arj0sYuslWXUBSP/KnUlEGnPW4qxlXvAl543oaNQgMgIgkQUA6vs5BCCvwTEiL8m/wdWzfl4UvSw==",
 2216 |       "dev": true,
 2217 |       "license": "MIT",
 2218 |       "dependencies": {
 2219 |         "fast-deep-equal": "^3.1.3"
 2220 |       }
 2221 |     },
 2222 |     "node_modules/@pkgjs/parseargs": {
 2223 |       "version": "0.11.0",
 2224 |       "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
 2225 |       "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
 2226 |       "dev": true,
 2227 |       "license": "MIT",
 2228 |       "optional": true,
 2229 |       "engines": {
 2230 |         "node": ">=14"
 2231 |       }
 2232 |     },
 2233 |     "node_modules/@puppeteer/browsers": {
 2234 |       "version": "2.3.0",
 2235 |       "resolved": "https://registry.npmjs.org/@puppeteer/browsers/-/browsers-2.3.0.tgz",
 2236 |       "integrity": "sha512-ioXoq9gPxkss4MYhD+SFaU9p1IHFUX0ILAWFPyjGaBdjLsYAlZw6j1iLA0N/m12uVHLFDfSYNF7EQccjinIMDA==",
 2237 |       "dev": true,
 2238 |       "license": "Apache-2.0",
 2239 |       "dependencies": {
 2240 |         "debug": "^4.3.5",
 2241 |         "extract-zip": "^2.0.1",
 2242 |         "progress": "^2.0.3",
 2243 |         "proxy-agent": "^6.4.0",
 2244 |         "semver": "^7.6.3",
 2245 |         "tar-fs": "^3.0.6",
 2246 |         "unbzip2-stream": "^1.4.3",
 2247 |         "yargs": "^17.7.2"
 2248 |       },
 2249 |       "bin": {
 2250 |         "browsers": "lib/cjs/main-cli.js"
 2251 |       },
 2252 |       "engines": {
 2253 |         "node": ">=18"
 2254 |       }
 2255 |     },
 2256 |     "node_modules/@shikijs/core": {
 2257 |       "version": "3.9.2",
 2258 |       "resolved": "https://registry.npmjs.org/@shikijs/core/-/core-3.9.2.tgz",
 2259 |       "integrity": "sha512-3q/mzmw09B2B6PgFNeiaN8pkNOixWS726IHmJEpjDAcneDPMQmUg2cweT9cWXY4XcyQS3i6mOOUgQz9RRUP6HA==",
 2260 |       "dev": true,
 2261 |       "license": "MIT",
 2262 |       "dependencies": {
 2263 |         "@shikijs/types": "3.9.2",
 2264 |         "@shikijs/vscode-textmate": "^10.0.2",
 2265 |         "@types/hast": "^3.0.4",
 2266 |         "hast-util-to-html": "^9.0.5"
 2267 |       }
 2268 |     },
 2269 |     "node_modules/@shikijs/engine-javascript": {
 2270 |       "version": "3.9.2",
 2271 |       "resolved": "https://registry.npmjs.org/@shikijs/engine-javascript/-/engine-javascript-3.9.2.tgz",
 2272 |       "integrity": "sha512-kUTRVKPsB/28H5Ko6qEsyudBiWEDLst+Sfi+hwr59E0GLHV0h8RfgbQU7fdN5Lt9A8R1ulRiZyTvAizkROjwDA==",
 2273 |       "dev": true,
 2274 |       "license": "MIT",
 2275 |       "dependencies": {
 2276 |         "@shikijs/types": "3.9.2",
 2277 |         "@shikijs/vscode-textmate": "^10.0.2",
 2278 |         "oniguruma-to-es": "^4.3.3"
 2279 |       }
 2280 |     },
 2281 |     "node_modules/@shikijs/engine-oniguruma": {
 2282 |       "version": "3.9.2",
 2283 |       "resolved": "https://registry.npmjs.org/@shikijs/engine-oniguruma/-/engine-oniguruma-3.9.2.tgz",
 2284 |       "integrity": "sha512-Vn/w5oyQ6TUgTVDIC/BrpXwIlfK6V6kGWDVVz2eRkF2v13YoENUvaNwxMsQU/t6oCuZKzqp9vqtEtEzKl9VegA==",
 2285 |       "dev": true,
 2286 |       "license": "MIT",
 2287 |       "dependencies": {
 2288 |         "@shikijs/types": "3.9.2",
 2289 |         "@shikijs/vscode-textmate": "^10.0.2"
 2290 |       }
 2291 |     },
 2292 |     "node_modules/@shikijs/langs": {
 2293 |       "version": "3.9.2",
 2294 |       "resolved": "https://registry.npmjs.org/@shikijs/langs/-/langs-3.9.2.tgz",
 2295 |       "integrity": "sha512-X1Q6wRRQXY7HqAuX3I8WjMscjeGjqXCg/Sve7J2GWFORXkSrXud23UECqTBIdCSNKJioFtmUGJQNKtlMMZMn0w==",
 2296 |       "dev": true,
 2297 |       "license": "MIT",
 2298 |       "dependencies": {
 2299 |         "@shikijs/types": "3.9.2"
 2300 |       }
 2301 |     },
 2302 |     "node_modules/@shikijs/themes": {
 2303 |       "version": "3.9.2",
 2304 |       "resolved": "https://registry.npmjs.org/@shikijs/themes/-/themes-3.9.2.tgz",
 2305 |       "integrity": "sha512-6z5lBPBMRfLyyEsgf6uJDHPa6NAGVzFJqH4EAZ+03+7sedYir2yJBRu2uPZOKmj43GyhVHWHvyduLDAwJQfDjA==",
 2306 |       "dev": true,
 2307 |       "license": "MIT",
 2308 |       "dependencies": {
 2309 |         "@shikijs/types": "3.9.2"
 2310 |       }
 2311 |     },
 2312 |     "node_modules/@shikijs/transformers": {
 2313 |       "version": "3.9.2",
 2314 |       "resolved": "https://registry.npmjs.org/@shikijs/transformers/-/transformers-3.9.2.tgz",
 2315 |       "integrity": "sha512-MW5hT4TyUp6bNAgTExRYLk1NNasVQMTCw1kgbxHcEC0O5cbepPWaB+1k+JzW9r3SP2/R8kiens8/3E6hGKfgsA==",
 2316 |       "dev": true,
 2317 |       "license": "MIT",
 2318 |       "dependencies": {
 2319 |         "@shikijs/core": "3.9.2",
 2320 |         "@shikijs/types": "3.9.2"
 2321 |       }
 2322 |     },
 2323 |     "node_modules/@shikijs/types": {
 2324 |       "version": "3.9.2",
 2325 |       "resolved": "https://registry.npmjs.org/@shikijs/types/-/types-3.9.2.tgz",
 2326 |       "integrity": "sha512-/M5L0Uc2ljyn2jKvj4Yiah7ow/W+DJSglVafvWAJ/b8AZDeeRAdMu3c2riDzB7N42VD+jSnWxeP9AKtd4TfYVw==",
 2327 |       "dev": true,
 2328 |       "license": "MIT",
 2329 |       "dependencies": {
 2330 |         "@shikijs/vscode-textmate": "^10.0.2",
 2331 |         "@types/hast": "^3.0.4"
 2332 |       }
 2333 |     },
 2334 |     "node_modules/@shikijs/vscode-textmate": {
 2335 |       "version": "10.0.2",
 2336 |       "resolved": "https://registry.npmjs.org/@shikijs/vscode-textmate/-/vscode-textmate-10.0.2.tgz",
 2337 |       "integrity": "sha512-83yeghZ2xxin3Nj8z1NMd/NCuca+gsYXswywDy5bHvwlWL8tpTQmzGeUuHd9FC3E/SBEMvzJRwWEOz5gGes9Qg==",
 2338 |       "dev": true,
 2339 |       "license": "MIT"
 2340 |     },
 2341 |     "node_modules/@sindresorhus/is": {
 2342 |       "version": "5.6.0",
 2343 |       "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-5.6.0.tgz",
 2344 |       "integrity": "sha512-TV7t8GKYaJWsn00tFDqBw8+Uqmr8A0fRU1tvTQhyZzGv0sJCGRQL3JGMI3ucuKo3XIZdUP+Lx7/gh2t3lewy7g==",
 2345 |       "dev": true,
 2346 |       "license": "MIT",
 2347 |       "engines": {
 2348 |         "node": ">=14.16"
 2349 |       },
 2350 |       "funding": {
 2351 |         "url": "https://github.com/sindresorhus/is?sponsor=1"
 2352 |       }
 2353 |     },
 2354 |     "node_modules/@sindresorhus/slugify": {
 2355 |       "version": "2.2.1",
 2356 |       "resolved": "https://registry.npmjs.org/@sindresorhus/slugify/-/slugify-2.2.1.tgz",
 2357 |       "integrity": "sha512-MkngSCRZ8JdSOCHRaYd+D01XhvU3Hjy6MGl06zhOk614hp9EOAp5gIkBeQg7wtmxpitU6eAL4kdiRMcJa2dlrw==",
 2358 |       "dev": true,
 2359 |       "license": "MIT",
 2360 |       "dependencies": {
 2361 |         "@sindresorhus/transliterate": "^1.0.0",
 2362 |         "escape-string-regexp": "^5.0.0"
 2363 |       },
 2364 |       "engines": {
 2365 |         "node": ">=12"
 2366 |       },
 2367 |       "funding": {
 2368 |         "url": "https://github.com/sponsors/sindresorhus"
 2369 |       }
 2370 |     },
 2371 |     "node_modules/@sindresorhus/transliterate": {
 2372 |       "version": "1.6.0",
 2373 |       "resolved": "https://registry.npmjs.org/@sindresorhus/transliterate/-/transliterate-1.6.0.tgz",
 2374 |       "integrity": "sha512-doH1gimEu3A46VX6aVxpHTeHrytJAG6HgdxntYnCFiIFHEM/ZGpG8KiZGBChchjQmG0XFIBL552kBTjVcMZXwQ==",
 2375 |       "dev": true,
 2376 |       "license": "MIT",
 2377 |       "dependencies": {
 2378 |         "escape-string-regexp": "^5.0.0"
 2379 |       },
 2380 |       "engines": {
 2381 |         "node": ">=12"
 2382 |       },
 2383 |       "funding": {
 2384 |         "url": "https://github.com/sponsors/sindresorhus"
 2385 |       }
 2386 |     },
 2387 |     "node_modules/@socket.io/component-emitter": {
 2388 |       "version": "3.1.2",
 2389 |       "resolved": "https://registry.npmjs.org/@socket.io/component-emitter/-/component-emitter-3.1.2.tgz",
 2390 |       "integrity": "sha512-9BCxFwvbGg/RsZK9tjXd8s4UcwR0MWeFQ1XEKIQVVvAGJyINdrqKMcTRyLoK8Rse1GjzLV9cwjWV1olXRWEXVA==",
 2391 |       "dev": true,
 2392 |       "license": "MIT"
 2393 |     },
 2394 |     "node_modules/@stoplight/better-ajv-errors": {
 2395 |       "version": "1.0.3",
 2396 |       "resolved": "https://registry.npmjs.org/@stoplight/better-ajv-errors/-/better-ajv-errors-1.0.3.tgz",
 2397 |       "integrity": "sha512-0p9uXkuB22qGdNfy3VeEhxkU5uwvp/KrBTAbrLBURv6ilxIVwanKwjMc41lQfIVgPGcOkmLbTolfFrSsueu7zA==",
 2398 |       "dev": true,
 2399 |       "license": "Apache-2.0",
 2400 |       "dependencies": {
 2401 |         "jsonpointer": "^5.0.0",
 2402 |         "leven": "^3.1.0"
 2403 |       },
 2404 |       "engines": {
 2405 |         "node": "^12.20 || >= 14.13"
 2406 |       },
 2407 |       "peerDependencies": {
 2408 |         "ajv": ">=8"
 2409 |       }
 2410 |     },
 2411 |     "node_modules/@stoplight/better-ajv-errors/node_modules/leven": {
 2412 |       "version": "3.1.0",
 2413 |       "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
 2414 |       "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
 2415 |       "dev": true,
 2416 |       "license": "MIT",
 2417 |       "engines": {
 2418 |         "node": ">=6"
 2419 |       }
 2420 |     },
 2421 |     "node_modules/@stoplight/json": {
 2422 |       "version": "3.21.0",
 2423 |       "resolved": "https://registry.npmjs.org/@stoplight/json/-/json-3.21.0.tgz",
 2424 |       "integrity": "sha512-5O0apqJ/t4sIevXCO3SBN9AHCEKKR/Zb4gaj7wYe5863jme9g02Q0n/GhM7ZCALkL+vGPTe4ZzTETP8TFtsw3g==",
 2425 |       "dev": true,
 2426 |       "license": "Apache-2.0",
 2427 |       "dependencies": {
 2428 |         "@stoplight/ordered-object-literal": "^1.0.3",
 2429 |         "@stoplight/path": "^1.3.2",
 2430 |         "@stoplight/types": "^13.6.0",
 2431 |         "jsonc-parser": "~2.2.1",
 2432 |         "lodash": "^4.17.21",
 2433 |         "safe-stable-stringify": "^1.1"
 2434 |       },
 2435 |       "engines": {
 2436 |         "node": ">=8.3.0"
 2437 |       }
 2438 |     },
 2439 |     "node_modules/@stoplight/json-ref-readers": {
 2440 |       "version": "1.2.2",
 2441 |       "resolved": "https://registry.npmjs.org/@stoplight/json-ref-readers/-/json-ref-readers-1.2.2.tgz",
 2442 |       "integrity": "sha512-nty0tHUq2f1IKuFYsLM4CXLZGHdMn+X/IwEUIpeSOXt0QjMUbL0Em57iJUDzz+2MkWG83smIigNZ3fauGjqgdQ==",
 2443 |       "dev": true,
 2444 |       "license": "Apache-2.0",
 2445 |       "dependencies": {
 2446 |         "node-fetch": "^2.6.0",
 2447 |         "tslib": "^1.14.1"
 2448 |       },
 2449 |       "engines": {
 2450 |         "node": ">=8.3.0"
 2451 |       }
 2452 |     },
 2453 |     "node_modules/@stoplight/json-ref-resolver": {
 2454 |       "version": "3.1.6",
 2455 |       "resolved": "https://registry.npmjs.org/@stoplight/json-ref-resolver/-/json-ref-resolver-3.1.6.tgz",
 2456 |       "integrity": "sha512-YNcWv3R3n3U6iQYBsFOiWSuRGE5su1tJSiX6pAPRVk7dP0L7lqCteXGzuVRQ0gMZqUl8v1P0+fAKxF6PLo9B5A==",
 2457 |       "dev": true,
 2458 |       "license": "Apache-2.0",
 2459 |       "dependencies": {
 2460 |         "@stoplight/json": "^3.21.0",
 2461 |         "@stoplight/path": "^1.3.2",
 2462 |         "@stoplight/types": "^12.3.0 || ^13.0.0",
 2463 |         "@types/urijs": "^1.19.19",
 2464 |         "dependency-graph": "~0.11.0",
 2465 |         "fast-memoize": "^2.5.2",
 2466 |         "immer": "^9.0.6",
 2467 |         "lodash": "^4.17.21",
 2468 |         "tslib": "^2.6.0",
 2469 |         "urijs": "^1.19.11"
 2470 |       },
 2471 |       "engines": {
 2472 |         "node": ">=8.3.0"
 2473 |       }
 2474 |     },
 2475 |     "node_modules/@stoplight/json-ref-resolver/node_modules/tslib": {
 2476 |       "version": "2.8.1",
 2477 |       "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
 2478 |       "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
 2479 |       "dev": true,
 2480 |       "license": "0BSD"
 2481 |     },
 2482 |     "node_modules/@stoplight/ordered-object-literal": {
 2483 |       "version": "1.0.5",
 2484 |       "resolved": "https://registry.npmjs.org/@stoplight/ordered-object-literal/-/ordered-object-literal-1.0.5.tgz",
 2485 |       "integrity": "sha512-COTiuCU5bgMUtbIFBuyyh2/yVVzlr5Om0v5utQDgBCuQUOPgU1DwoffkTfg4UBQOvByi5foF4w4T+H9CoRe5wg==",
 2486 |       "dev": true,
 2487 |       "license": "Apache-2.0",
 2488 |       "engines": {
 2489 |         "node": ">=8"
 2490 |       }
 2491 |     },
 2492 |     "node_modules/@stoplight/path": {
 2493 |       "version": "1.3.2",
 2494 |       "resolved": "https://registry.npmjs.org/@stoplight/path/-/path-1.3.2.tgz",
 2495 |       "integrity": "sha512-lyIc6JUlUA8Ve5ELywPC8I2Sdnh1zc1zmbYgVarhXIp9YeAB0ReeqmGEOWNtlHkbP2DAA1AL65Wfn2ncjK/jtQ==",
 2496 |       "dev": true,
 2497 |       "license": "Apache-2.0",
 2498 |       "engines": {
 2499 |         "node": ">=8"
 2500 |       }
 2501 |     },
 2502 |     "node_modules/@stoplight/spectral-core": {
 2503 |       "version": "1.20.0",
 2504 |       "resolved": "https://registry.npmjs.org/@stoplight/spectral-core/-/spectral-core-1.20.0.tgz",
 2505 |       "integrity": "sha512-5hBP81nCC1zn1hJXL/uxPNRKNcB+/pEIHgCjPRpl/w/qy9yC9ver04tw1W0l/PMiv0UeB5dYgozXVQ4j5a6QQQ==",
 2506 |       "dev": true,
 2507 |       "license": "Apache-2.0",
 2508 |       "dependencies": {
 2509 |         "@stoplight/better-ajv-errors": "1.0.3",
 2510 |         "@stoplight/json": "~3.21.0",
 2511 |         "@stoplight/path": "1.3.2",
 2512 |         "@stoplight/spectral-parsers": "^1.0.0",
 2513 |         "@stoplight/spectral-ref-resolver": "^1.0.4",
 2514 |         "@stoplight/spectral-runtime": "^1.1.2",
 2515 |         "@stoplight/types": "~13.6.0",
 2516 |         "@types/es-aggregate-error": "^1.0.2",
 2517 |         "@types/json-schema": "^7.0.11",
 2518 |         "ajv": "^8.17.1",
 2519 |         "ajv-errors": "~3.0.0",
 2520 |         "ajv-formats": "~2.1.1",
 2521 |         "es-aggregate-error": "^1.0.7",
 2522 |         "jsonpath-plus": "^10.3.0",
 2523 |         "lodash": "~4.17.21",
 2524 |         "lodash.topath": "^4.5.2",
 2525 |         "minimatch": "3.1.2",
 2526 |         "nimma": "0.2.3",
 2527 |         "pony-cause": "^1.1.1",
 2528 |         "simple-eval": "1.0.1",
 2529 |         "tslib": "^2.8.1"
 2530 |       },
 2531 |       "engines": {
 2532 |         "node": "^16.20 || ^18.18 || >= 20.17"
 2533 |       }
 2534 |     },
 2535 |     "node_modules/@stoplight/spectral-core/node_modules/@stoplight/types": {
 2536 |       "version": "13.6.0",
 2537 |       "resolved": "https://registry.npmjs.org/@stoplight/types/-/types-13.6.0.tgz",
 2538 |       "integrity": "sha512-dzyuzvUjv3m1wmhPfq82lCVYGcXG0xUYgqnWfCq3PCVR4BKFhjdkHrnJ+jIDoMKvXb05AZP/ObQF6+NpDo29IQ==",
 2539 |       "dev": true,
 2540 |       "license": "Apache-2.0",
 2541 |       "dependencies": {
 2542 |         "@types/json-schema": "^7.0.4",
 2543 |         "utility-types": "^3.10.0"
 2544 |       },
 2545 |       "engines": {
 2546 |         "node": "^12.20 || >=14.13"
 2547 |       }
 2548 |     },
 2549 |     "node_modules/@stoplight/spectral-core/node_modules/ajv-formats": {
 2550 |       "version": "2.1.1",
 2551 |       "resolved": "https://registry.npmjs.org/ajv-formats/-/ajv-formats-2.1.1.tgz",
 2552 |       "integrity": "sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==",
 2553 |       "dev": true,
 2554 |       "license": "MIT",
 2555 |       "dependencies": {
 2556 |         "ajv": "^8.0.0"
 2557 |       },
 2558 |       "peerDependencies": {
 2559 |         "ajv": "^8.0.0"
 2560 |       },
 2561 |       "peerDependenciesMeta": {
 2562 |         "ajv": {
 2563 |           "optional": true
 2564 |         }
 2565 |       }
 2566 |     },
 2567 |     "node_modules/@stoplight/spectral-core/node_modules/minimatch": {
 2568 |       "version": "3.1.2",
 2569 |       "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
 2570 |       "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
 2571 |       "dev": true,
 2572 |       "license": "ISC",
 2573 |       "dependencies": {
 2574 |         "brace-expansion": "^1.1.7"
 2575 |       },
 2576 |       "engines": {
 2577 |         "node": "*"
 2578 |       }
 2579 |     },
 2580 |     "node_modules/@stoplight/spectral-core/node_modules/tslib": {
 2581 |       "version": "2.8.1",
 2582 |       "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
 2583 |       "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
 2584 |       "dev": true,
 2585 |       "license": "0BSD"
 2586 |     },
 2587 |     "node_modules/@stoplight/spectral-formats": {
 2588 |       "version": "1.8.2",
 2589 |       "resolved": "https://registry.npmjs.org/@stoplight/spectral-formats/-/spectral-formats-1.8.2.tgz",
 2590 |       "integrity": "sha512-c06HB+rOKfe7tuxg0IdKDEA5XnjL2vrn/m/OVIIxtINtBzphZrOgtRn7epQ5bQF5SWp84Ue7UJWaGgDwVngMFw==",
 2591 |       "dev": true,
 2592 |       "license": "Apache-2.0",
 2593 |       "dependencies": {
 2594 |         "@stoplight/json": "^3.17.0",
 2595 |         "@stoplight/spectral-core": "^1.19.2",
 2596 |         "@types/json-schema": "^7.0.7",
 2597 |         "tslib": "^2.8.1"
 2598 |       },
 2599 |       "engines": {
 2600 |         "node": "^16.20 || ^18.18 || >= 20.17"
 2601 |       }
 2602 |     },
 2603 |     "node_modules/@stoplight/spectral-formats/node_modules/tslib": {
 2604 |       "version": "2.8.1",
 2605 |       "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
 2606 |       "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
 2607 |       "dev": true,
 2608 |       "license": "0BSD"
 2609 |     },
 2610 |     "node_modules/@stoplight/spectral-functions": {
 2611 |       "version": "1.10.1",
 2612 |       "resolved": "https://registry.npmjs.org/@stoplight/spectral-functions/-/spectral-functions-1.10.1.tgz",
 2613 |       "integrity": "sha512-obu8ZfoHxELOapfGsCJixKZXZcffjg+lSoNuttpmUFuDzVLT3VmH8QkPXfOGOL5Pz80BR35ClNAToDkdnYIURg==",
 2614 |       "dev": true,
 2615 |       "license": "Apache-2.0",
 2616 |       "dependencies": {
 2617 |         "@stoplight/better-ajv-errors": "1.0.3",
 2618 |         "@stoplight/json": "^3.17.1",
 2619 |         "@stoplight/spectral-core": "^1.19.4",
 2620 |         "@stoplight/spectral-formats": "^1.8.1",
 2621 |         "@stoplight/spectral-runtime": "^1.1.2",
 2622 |         "ajv": "^8.17.1",
 2623 |         "ajv-draft-04": "~1.0.0",
 2624 |         "ajv-errors": "~3.0.0",
 2625 |         "ajv-formats": "~2.1.1",
 2626 |         "lodash": "~4.17.21",
 2627 |         "tslib": "^2.8.1"
 2628 |       },
 2629 |       "engines": {
 2630 |         "node": "^16.20 || ^18.18 || >= 20.17"
 2631 |       }
 2632 |     },
 2633 |     "node_modules/@stoplight/spectral-functions/node_modules/ajv-formats": {
 2634 |       "version": "2.1.1",
 2635 |       "resolved": "https://registry.npmjs.org/ajv-formats/-/ajv-formats-2.1.1.tgz",
 2636 |       "integrity": "sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==",
 2637 |       "dev": true,
 2638 |       "license": "MIT",
 2639 |       "dependencies": {
 2640 |         "ajv": "^8.0.0"
 2641 |       },
 2642 |       "peerDependencies": {
 2643 |         "ajv": "^8.0.0"
 2644 |       },
 2645 |       "peerDependenciesMeta": {
 2646 |         "ajv": {
 2647 |           "optional": true
 2648 |         }
 2649 |       }
 2650 |     },
 2651 |     "node_modules/@stoplight/spectral-functions/node_modules/tslib": {
 2652 |       "version": "2.8.1",
 2653 |       "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
 2654 |       "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
 2655 |       "dev": true,
 2656 |       "license": "0BSD"
 2657 |     },
 2658 |     "node_modules/@stoplight/spectral-parsers": {
 2659 |       "version": "1.0.5",
 2660 |       "resolved": "https://registry.npmjs.org/@stoplight/spectral-parsers/-/spectral-parsers-1.0.5.tgz",
 2661 |       "integrity": "sha512-ANDTp2IHWGvsQDAY85/jQi9ZrF4mRrA5bciNHX+PUxPr4DwS6iv4h+FVWJMVwcEYdpyoIdyL+SRmHdJfQEPmwQ==",
 2662 |       "dev": true,
 2663 |       "license": "Apache-2.0",
 2664 |       "dependencies": {
 2665 |         "@stoplight/json": "~3.21.0",
 2666 |         "@stoplight/types": "^14.1.1",
 2667 |         "@stoplight/yaml": "~4.3.0",
 2668 |         "tslib": "^2.8.1"
 2669 |       },
 2670 |       "engines": {
 2671 |         "node": "^16.20 || ^18.18 || >= 20.17"
 2672 |       }
 2673 |     },
 2674 |     "node_modules/@stoplight/spectral-parsers/node_modules/@stoplight/types": {
 2675 |       "version": "14.1.1",
 2676 |       "resolved": "https://registry.npmjs.org/@stoplight/types/-/types-14.1.1.tgz",
 2677 |       "integrity": "sha512-/kjtr+0t0tjKr+heVfviO9FrU/uGLc+QNX3fHJc19xsCNYqU7lVhaXxDmEID9BZTjG+/r9pK9xP/xU02XGg65g==",
 2678 |       "dev": true,
 2679 |       "license": "Apache-2.0",
 2680 |       "dependencies": {
 2681 |         "@types/json-schema": "^7.0.4",
 2682 |         "utility-types": "^3.10.0"
 2683 |       },
 2684 |       "engines": {
 2685 |         "node": "^12.20 || >=14.13"
 2686 |       }
 2687 |     },
 2688 |     "node_modules/@stoplight/spectral-parsers/node_modules/tslib": {
 2689 |       "version": "2.8.1",
 2690 |       "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
 2691 |       "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
 2692 |       "dev": true,
 2693 |       "license": "0BSD"
 2694 |     },
 2695 |     "node_modules/@stoplight/spectral-ref-resolver": {
 2696 |       "version": "1.0.5",
 2697 |       "resolved": "https://registry.npmjs.org/@stoplight/spectral-ref-resolver/-/spectral-ref-resolver-1.0.5.tgz",
 2698 |       "integrity": "sha512-gj3TieX5a9zMW29z3mBlAtDOCgN3GEc1VgZnCVlr5irmR4Qi5LuECuFItAq4pTn5Zu+sW5bqutsCH7D4PkpyAA==",
 2699 |       "dev": true,
 2700 |       "license": "Apache-2.0",
 2701 |       "dependencies": {
 2702 |         "@stoplight/json-ref-readers": "1.2.2",
 2703 |         "@stoplight/json-ref-resolver": "~3.1.6",
 2704 |         "@stoplight/spectral-runtime": "^1.1.2",
 2705 |         "dependency-graph": "0.11.0",
 2706 |         "tslib": "^2.8.1"
 2707 |       },
 2708 |       "engines": {
 2709 |         "node": "^16.20 || ^18.18 || >= 20.17"
 2710 |       }
 2711 |     },
 2712 |     "node_modules/@stoplight/spectral-ref-resolver/node_modules/tslib": {
 2713 |       "version": "2.8.1",
 2714 |       "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
 2715 |       "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
 2716 |       "dev": true,
 2717 |       "license": "0BSD"
 2718 |     },
 2719 |     "node_modules/@stoplight/spectral-runtime": {
 2720 |       "version": "1.1.4",
 2721 |       "resolved": "https://registry.npmjs.org/@stoplight/spectral-runtime/-/spectral-runtime-1.1.4.tgz",
 2722 |       "integrity": "sha512-YHbhX3dqW0do6DhiPSgSGQzr6yQLlWybhKwWx0cqxjMwxej3TqLv3BXMfIUYFKKUqIwH4Q2mV8rrMM8qD2N0rQ==",
 2723 |       "dev": true,
 2724 |       "license": "Apache-2.0",
 2725 |       "dependencies": {
 2726 |         "@stoplight/json": "^3.20.1",
 2727 |         "@stoplight/path": "^1.3.2",
 2728 |         "@stoplight/types": "^13.6.0",
 2729 |         "abort-controller": "^3.0.0",
 2730 |         "lodash": "^4.17.21",
 2731 |         "node-fetch": "^2.7.0",
 2732 |         "tslib": "^2.8.1"
 2733 |       },
 2734 |       "engines": {
 2735 |         "node": "^16.20 || ^18.18 || >= 20.17"
 2736 |       }
 2737 |     },
 2738 |     "node_modules/@stoplight/spectral-runtime/node_modules/node-fetch": {
 2739 |       "version": "2.7.0",
 2740 |       "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
 2741 |       "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
 2742 |       "dev": true,
 2743 |       "license": "MIT",
 2744 |       "dependencies": {
 2745 |         "whatwg-url": "^5.0.0"
 2746 |       },
 2747 |       "engines": {
 2748 |         "node": "4.x || >=6.0.0"
 2749 |       },
 2750 |       "peerDependencies": {
 2751 |         "encoding": "^0.1.0"
 2752 |       },
 2753 |       "peerDependenciesMeta": {
 2754 |         "encoding": {
 2755 |           "optional": true
 2756 |         }
 2757 |       }
 2758 |     },
 2759 |     "node_modules/@stoplight/spectral-runtime/node_modules/tslib": {
 2760 |       "version": "2.8.1",
 2761 |       "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
 2762 |       "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
 2763 |       "dev": true,
 2764 |       "license": "0BSD"
 2765 |     },
 2766 |     "node_modules/@stoplight/types": {
 2767 |       "version": "13.20.0",
 2768 |       "resolved": "https://registry.npmjs.org/@stoplight/types/-/types-13.20.0.tgz",
 2769 |       "integrity": "sha512-2FNTv05If7ib79VPDA/r9eUet76jewXFH2y2K5vuge6SXbRHtWBhcaRmu+6QpF4/WRNoJj5XYRSwLGXDxysBGA==",
 2770 |       "dev": true,
 2771 |       "license": "Apache-2.0",
 2772 |       "dependencies": {
 2773 |         "@types/json-schema": "^7.0.4",
 2774 |         "utility-types": "^3.10.0"
 2775 |       },
 2776 |       "engines": {
 2777 |         "node": "^12.20 || >=14.13"
 2778 |       }
 2779 |     },
 2780 |     "node_modules/@stoplight/yaml": {
 2781 |       "version": "4.3.0",
 2782 |       "resolved": "https://registry.npmjs.org/@stoplight/yaml/-/yaml-4.3.0.tgz",
 2783 |       "integrity": "sha512-JZlVFE6/dYpP9tQmV0/ADfn32L9uFarHWxfcRhReKUnljz1ZiUM5zpX+PH8h5CJs6lao3TuFqnPm9IJJCEkE2w==",
 2784 |       "dev": true,
 2785 |       "license": "Apache-2.0",
 2786 |       "dependencies": {
 2787 |         "@stoplight/ordered-object-literal": "^1.0.5",
 2788 |         "@stoplight/types": "^14.1.1",
 2789 |         "@stoplight/yaml-ast-parser": "0.0.50",
 2790 |         "tslib": "^2.2.0"
 2791 |       },
 2792 |       "engines": {
 2793 |         "node": ">=10.8"
 2794 |       }
 2795 |     },
 2796 |     "node_modules/@stoplight/yaml-ast-parser": {
 2797 |       "version": "0.0.50",
 2798 |       "resolved": "https://registry.npmjs.org/@stoplight/yaml-ast-parser/-/yaml-ast-parser-0.0.50.tgz",
 2799 |       "integrity": "sha512-Pb6M8TDO9DtSVla9yXSTAxmo9GVEouq5P40DWXdOie69bXogZTkgvopCq+yEvTMA0F6PEvdJmbtTV3ccIp11VQ==",
 2800 |       "dev": true,
 2801 |       "license": "Apache-2.0"
 2802 |     },
 2803 |     "node_modules/@stoplight/yaml/node_modules/@stoplight/types": {
 2804 |       "version": "14.1.1",
 2805 |       "resolved": "https://registry.npmjs.org/@stoplight/types/-/types-14.1.1.tgz",
 2806 |       "integrity": "sha512-/kjtr+0t0tjKr+heVfviO9FrU/uGLc+QNX3fHJc19xsCNYqU7lVhaXxDmEID9BZTjG+/r9pK9xP/xU02XGg65g==",
 2807 |       "dev": true,
 2808 |       "license": "Apache-2.0",
 2809 |       "dependencies": {
 2810 |         "@types/json-schema": "^7.0.4",
 2811 |         "utility-types": "^3.10.0"
 2812 |       },
 2813 |       "engines": {
 2814 |         "node": "^12.20 || >=14.13"
 2815 |       }
 2816 |     },
 2817 |     "node_modules/@stoplight/yaml/node_modules/tslib": {
 2818 |       "version": "2.8.1",
 2819 |       "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
 2820 |       "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
 2821 |       "dev": true,
 2822 |       "license": "0BSD"
 2823 |     },
 2824 |     "node_modules/@szmarczak/http-timer": {
 2825 |       "version": "5.0.1",
 2826 |       "resolved": "https://registry.npmjs.org/@szmarczak/http-timer/-/http-timer-5.0.1.tgz",
 2827 |       "integrity": "sha512-+PmQX0PiAYPMeVYe237LJAYvOMYW1j2rH5YROyS3b4CTVJum34HfRvKvAzozHAQG0TnHNdUfY9nCeUyRAs//cw==",
 2828 |       "dev": true,
 2829 |       "license": "MIT",
 2830 |       "dependencies": {
 2831 |         "defer-to-connect": "^2.0.1"
 2832 |       },
 2833 |       "engines": {
 2834 |         "node": ">=14.16"
 2835 |       }
 2836 |     },
 2837 |     "node_modules/@tootallnate/quickjs-emscripten": {
 2838 |       "version": "0.23.0",
 2839 |       "resolved": "https://registry.npmjs.org/@tootallnate/quickjs-emscripten/-/quickjs-emscripten-0.23.0.tgz",
 2840 |       "integrity": "sha512-C5Mc6rdnsaJDjO3UpGW/CQTHtCKaYlScZTly4JIu97Jxo/odCiH0ITnDXSJPTOrEKk/ycSZ0AOgTmkDtkOsvIA==",
 2841 |       "dev": true,
 2842 |       "license": "MIT"
 2843 |     },
 2844 |     "node_modules/@tsconfig/node10": {
 2845 |       "version": "1.0.11",
 2846 |       "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.11.tgz",
 2847 |       "integrity": "sha512-DcRjDCujK/kCk/cUe8Xz8ZSpm8mS3mNNpta+jGCA6USEDfktlNvm1+IuZ9eTcDbNk41BHwpHHeW+N1lKCz4zOw==",
 2848 |       "dev": true,
 2849 |       "license": "MIT"
 2850 |     },
 2851 |     "node_modules/@tsconfig/node12": {
 2852 |       "version": "1.0.11",
 2853 |       "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
 2854 |       "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==",
 2855 |       "dev": true,
 2856 |       "license": "MIT"
 2857 |     },
 2858 |     "node_modules/@tsconfig/node14": {
 2859 |       "version": "1.0.3",
 2860 |       "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
 2861 |       "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==",
 2862 |       "dev": true,
 2863 |       "license": "MIT"
 2864 |     },
 2865 |     "node_modules/@tsconfig/node16": {
 2866 |       "version": "1.0.4",
 2867 |       "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
 2868 |       "integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==",
 2869 |       "dev": true,
 2870 |       "license": "MIT"
 2871 |     },
 2872 |     "node_modules/@types/cors": {
 2873 |       "version": "2.8.19",
 2874 |       "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.19.tgz",
 2875 |       "integrity": "sha512-mFNylyeyqN93lfe/9CSxOGREz8cpzAhH+E93xJ4xWQf62V8sQ/24reV2nyzUWM6H6Xji+GGHpkbLe7pVoUEskg==",
 2876 |       "dev": true,
 2877 |       "license": "MIT",
 2878 |       "dependencies": {
 2879 |         "@types/node": "*"
 2880 |       }
 2881 |     },
 2882 |     "node_modules/@types/debug": {
 2883 |       "version": "4.1.12",
 2884 |       "resolved": "https://registry.npmjs.org/@types/debug/-/debug-4.1.12.tgz",
 2885 |       "integrity": "sha512-vIChWdVG3LG1SMxEvI/AK+FWJthlrqlTu7fbrlywTkkaONwk/UAGaULXRlf8vkzFBLVm0zkMdCquhL5aOjhXPQ==",
 2886 |       "dev": true,
 2887 |       "license": "MIT",
 2888 |       "dependencies": {
 2889 |         "@types/ms": "*"
 2890 |       }
 2891 |     },
 2892 |     "node_modules/@types/es-aggregate-error": {
 2893 |       "version": "1.0.6",
 2894 |       "resolved": "https://registry.npmjs.org/@types/es-aggregate-error/-/es-aggregate-error-1.0.6.tgz",
 2895 |       "integrity": "sha512-qJ7LIFp06h1QE1aVxbVd+zJP2wdaugYXYfd6JxsyRMrYHaxb6itXPogW2tz+ylUJ1n1b+JF1PHyYCfYHm0dvUg==",
 2896 |       "dev": true,
 2897 |       "license": "MIT",
 2898 |       "dependencies": {
 2899 |         "@types/node": "*"
 2900 |       }
 2901 |     },
 2902 |     "node_modules/@types/estree": {
 2903 |       "version": "1.0.8",
 2904 |       "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
 2905 |       "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
 2906 |       "dev": true,
 2907 |       "license": "MIT"
 2908 |     },
 2909 |     "node_modules/@types/estree-jsx": {
 2910 |       "version": "1.0.5",
 2911 |       "resolved": "https://registry.npmjs.org/@types/estree-jsx/-/estree-jsx-1.0.5.tgz",
 2912 |       "integrity": "sha512-52CcUVNFyfb1A2ALocQw/Dd1BQFNmSdkuC3BkZ6iqhdMfQz7JWOFRuJFloOzjk+6WijU56m9oKXFAXc7o3Towg==",
 2913 |       "dev": true,
 2914 |       "license": "MIT",
 2915 |       "dependencies": {
 2916 |         "@types/estree": "*"
 2917 |       }
 2918 |     },
 2919 |     "node_modules/@types/hast": {
 2920 |       "version": "3.0.4",
 2921 |       "resolved": "https://registry.npmjs.org/@types/hast/-/hast-3.0.4.tgz",
 2922 |       "integrity": "sha512-WPs+bbQw5aCj+x6laNGWLH3wviHtoCv/P3+otBhbOhJgG8qtpdAMlTCxLtsTWA7LH1Oh/bFCHsBn0TPS5m30EQ==",
 2923 |       "dev": true,
 2924 |       "license": "MIT",
 2925 |       "dependencies": {
 2926 |         "@types/unist": "*"
 2927 |       }
 2928 |     },
 2929 |     "node_modules/@types/http-cache-semantics": {
 2930 |       "version": "4.0.4",
 2931 |       "resolved": "https://registry.npmjs.org/@types/http-cache-semantics/-/http-cache-semantics-4.0.4.tgz",
 2932 |       "integrity": "sha512-1m0bIFVc7eJWyve9S0RnuRgcQqF/Xd5QsUZAZeQFr1Q3/p9JWoQQEqmVy+DPTNpGXwhgIetAoYF8JSc33q29QA==",
 2933 |       "dev": true,
 2934 |       "license": "MIT"
 2935 |     },
 2936 |     "node_modules/@types/json-schema": {
 2937 |       "version": "7.0.15",
 2938 |       "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
 2939 |       "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
 2940 |       "dev": true,
 2941 |       "license": "MIT"
 2942 |     },
 2943 |     "node_modules/@types/katex": {
 2944 |       "version": "0.16.7",
 2945 |       "resolved": "https://registry.npmjs.org/@types/katex/-/katex-0.16.7.tgz",
 2946 |       "integrity": "sha512-HMwFiRujE5PjrgwHQ25+bsLJgowjGjm5Z8FVSf0N6PwgJrwxH0QxzHYDcKsTfV3wva0vzrpqMTJS2jXPr5BMEQ==",
 2947 |       "dev": true,
 2948 |       "license": "MIT"
 2949 |     },
 2950 |     "node_modules/@types/mdast": {
 2951 |       "version": "4.0.4",
 2952 |       "resolved": "https://registry.npmjs.org/@types/mdast/-/mdast-4.0.4.tgz",
 2953 |       "integrity": "sha512-kGaNbPh1k7AFzgpud/gMdvIm5xuECykRR+JnWKQno9TAXVa6WIVCGTPvYGekIDL4uwCZQSYbUxNBSb1aUo79oA==",
 2954 |       "dev": true,
 2955 |       "license": "MIT",
 2956 |       "dependencies": {
 2957 |         "@types/unist": "*"
 2958 |       }
 2959 |     },
 2960 |     "node_modules/@types/mdx": {
 2961 |       "version": "2.0.13",
 2962 |       "resolved": "https://registry.npmjs.org/@types/mdx/-/mdx-2.0.13.tgz",
 2963 |       "integrity": "sha512-+OWZQfAYyio6YkJb3HLxDrvnx6SWWDbC0zVPfBRzUk0/nqoDyf6dNxQi3eArPe8rJ473nobTMQ/8Zk+LxJ+Yuw==",
 2964 |       "dev": true,
 2965 |       "license": "MIT"
 2966 |     },
 2967 |     "node_modules/@types/ms": {
 2968 |       "version": "2.1.0",
 2969 |       "resolved": "https://registry.npmjs.org/@types/ms/-/ms-2.1.0.tgz",
 2970 |       "integrity": "sha512-GsCCIZDE/p3i96vtEqx+7dBUGXrc7zeSK3wwPHIaRThS+9OhWIXRqzs4d6k1SVU8g91DrNRWxWUGhp5KXQb2VA==",
 2971 |       "dev": true,
 2972 |       "license": "MIT"
 2973 |     },
 2974 |     "node_modules/@types/nlcst": {
 2975 |       "version": "2.0.3",
 2976 |       "resolved": "https://registry.npmjs.org/@types/nlcst/-/nlcst-2.0.3.tgz",
 2977 |       "integrity": "sha512-vSYNSDe6Ix3q+6Z7ri9lyWqgGhJTmzRjZRqyq15N0Z/1/UnVsno9G/N40NBijoYx2seFDIl0+B2mgAb9mezUCA==",
 2978 |       "dev": true,
 2979 |       "license": "MIT",
 2980 |       "dependencies": {
 2981 |         "@types/unist": "*"
 2982 |       }
 2983 |     },
 2984 |     "node_modules/@types/node": {
 2985 |       "version": "24.2.1",
 2986 |       "resolved": "https://registry.npmjs.org/@types/node/-/node-24.2.1.tgz",
 2987 |       "integrity": "sha512-DRh5K+ka5eJic8CjH7td8QpYEV6Zo10gfRkjHCO3weqZHWDtAaSTFtl4+VMqOJ4N5jcuhZ9/l+yy8rVgw7BQeQ==",
 2988 |       "dev": true,
 2989 |       "license": "MIT",
 2990 |       "dependencies": {
 2991 |         "undici-types": "~7.10.0"
 2992 |       }
 2993 |     },
 2994 |     "node_modules/@types/react": {
 2995 |       "version": "19.1.9",
 2996 |       "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.9.tgz",
 2997 |       "integrity": "sha512-WmdoynAX8Stew/36uTSVMcLJJ1KRh6L3IZRx1PZ7qJtBqT3dYTgyDTx8H1qoRghErydW7xw9mSJ3wS//tCRpFA==",
 2998 |       "dev": true,
 2999 |       "license": "MIT",
 3000 |       "peer": true,
 3001 |       "dependencies": {
 3002 |         "csstype": "^3.0.2"
 3003 |       }
 3004 |     },
 3005 |     "node_modules/@types/unist": {
 3006 |       "version": "3.0.3",
 3007 |       "resolved": "https://registry.npmjs.org/@types/unist/-/unist-3.0.3.tgz",
 3008 |       "integrity": "sha512-ko/gIFJRv177XgZsZcBwnqJN5x/Gien8qNOn0D5bQU/zAzVf9Zt3BlcUiLqhV9y4ARk0GbT3tnUiPNgnTXzc/Q==",
 3009 |       "dev": true,
 3010 |       "license": "MIT"
 3011 |     },
 3012 |     "node_modules/@types/urijs": {
 3013 |       "version": "1.19.25",
 3014 |       "resolved": "https://registry.npmjs.org/@types/urijs/-/urijs-1.19.25.tgz",
 3015 |       "integrity": "sha512-XOfUup9r3Y06nFAZh3WvO0rBU4OtlfPB/vgxpjg+NRdGU6CN6djdc6OEiH+PcqHCY6eFLo9Ista73uarf4gnBg==",
 3016 |       "dev": true,
 3017 |       "license": "MIT"
 3018 |     },
 3019 |     "node_modules/@types/yauzl": {
 3020 |       "version": "2.10.3",
 3021 |       "resolved": "https://registry.npmjs.org/@types/yauzl/-/yauzl-2.10.3.tgz",
 3022 |       "integrity": "sha512-oJoftv0LSuaDZE3Le4DbKX+KS9G36NzOeSap90UIK0yMA/NhKJhqlSGtNDORNRaIbQfzjXDrQa0ytJ6mNRGz/Q==",
 3023 |       "dev": true,
 3024 |       "license": "MIT",
 3025 |       "optional": true,
 3026 |       "dependencies": {
 3027 |         "@types/node": "*"
 3028 |       }
 3029 |     },
 3030 |     "node_modules/@ungap/structured-clone": {
 3031 |       "version": "1.3.0",
 3032 |       "resolved": "https://registry.npmjs.org/@ungap/structured-clone/-/structured-clone-1.3.0.tgz",
 3033 |       "integrity": "sha512-WmoN8qaIAo7WTYWbAZuG8PYEhn5fkz7dZrqTBZ7dtt//lL2Gwms1IcnQ5yHqjDfX8Ft5j4YzDM23f87zBfDe9g==",
 3034 |       "dev": true,
 3035 |       "license": "ISC"
 3036 |     },
 3037 |     "node_modules/abort-controller": {
 3038 |       "version": "3.0.0",
 3039 |       "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
 3040 |       "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
 3041 |       "dev": true,
 3042 |       "license": "MIT",
 3043 |       "dependencies": {
 3044 |         "event-target-shim": "^5.0.0"
 3045 |       },
 3046 |       "engines": {
 3047 |         "node": ">=6.5"
 3048 |       }
 3049 |     },
 3050 |     "node_modules/accepts": {
 3051 |       "version": "1.3.8",
 3052 |       "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
 3053 |       "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
 3054 |       "dev": true,
 3055 |       "license": "MIT",
 3056 |       "dependencies": {
 3057 |         "mime-types": "~2.1.34",
 3058 |         "negotiator": "0.6.3"
 3059 |       },
 3060 |       "engines": {
 3061 |         "node": ">= 0.6"
 3062 |       }
 3063 |     },
 3064 |     "node_modules/acorn": {
 3065 |       "version": "8.15.0",
 3066 |       "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
 3067 |       "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
 3068 |       "dev": true,
 3069 |       "license": "MIT",
 3070 |       "bin": {
 3071 |         "acorn": "bin/acorn"
 3072 |       },
 3073 |       "engines": {
 3074 |         "node": ">=0.4.0"
 3075 |       }
 3076 |     },
 3077 |     "node_modules/acorn-jsx": {
 3078 |       "version": "5.3.2",
 3079 |       "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
 3080 |       "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
 3081 |       "dev": true,
 3082 |       "license": "MIT",
 3083 |       "peerDependencies": {
 3084 |         "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
 3085 |       }
 3086 |     },
 3087 |     "node_modules/acorn-walk": {
 3088 |       "version": "8.3.4",
 3089 |       "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.3.4.tgz",
 3090 |       "integrity": "sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==",
 3091 |       "dev": true,
 3092 |       "license": "MIT",
 3093 |       "dependencies": {
 3094 |         "acorn": "^8.11.0"
 3095 |       },
 3096 |       "engines": {
 3097 |         "node": ">=0.4.0"
 3098 |       }
 3099 |     },
 3100 |     "node_modules/address": {
 3101 |       "version": "1.2.2",
 3102 |       "resolved": "https://registry.npmjs.org/address/-/address-1.2.2.tgz",
 3103 |       "integrity": "sha512-4B/qKCfeE/ODUaAUpSwfzazo5x29WD4r3vXiWsB7I2mSDAihwEqKO+g8GELZUQSSAo5e1XTYh3ZVfLyxBc12nA==",
 3104 |       "dev": true,
 3105 |       "license": "MIT",
 3106 |       "engines": {
 3107 |         "node": ">= 10.0.0"
 3108 |       }
 3109 |     },
 3110 |     "node_modules/agent-base": {
 3111 |       "version": "7.1.4",
 3112 |       "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.4.tgz",
 3113 |       "integrity": "sha512-MnA+YT8fwfJPgBx3m60MNqakm30XOkyIoH1y6huTQvC0PwZG7ki8NacLBcrPbNoo8vEZy7Jpuk7+jMO+CUovTQ==",
 3114 |       "dev": true,
 3115 |       "license": "MIT",
 3116 |       "engines": {
 3117 |         "node": ">= 14"
 3118 |       }
 3119 |     },
 3120 |     "node_modules/aggregate-error": {
 3121 |       "version": "4.0.1",
 3122 |       "resolved": "https://registry.npmjs.org/aggregate-error/-/aggregate-error-4.0.1.tgz",
 3123 |       "integrity": "sha512-0poP0T7el6Vq3rstR8Mn4V/IQrpBLO6POkUSrN7RhyY+GF/InCFShQzsQ39T25gkHhLgSLByyAz+Kjb+c2L98w==",
 3124 |       "dev": true,
 3125 |       "license": "MIT",
 3126 |       "dependencies": {
 3127 |         "clean-stack": "^4.0.0",
 3128 |         "indent-string": "^5.0.0"
 3129 |       },
 3130 |       "engines": {
 3131 |         "node": ">=12"
 3132 |       },
 3133 |       "funding": {
 3134 |         "url": "https://github.com/sponsors/sindresorhus"
 3135 |       }
 3136 |     },
 3137 |     "node_modules/ajv": {
 3138 |       "version": "8.17.1",
 3139 |       "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
 3140 |       "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
 3141 |       "dev": true,
 3142 |       "license": "MIT",
 3143 |       "dependencies": {
 3144 |         "fast-deep-equal": "^3.1.3",
 3145 |         "fast-uri": "^3.0.1",
 3146 |         "json-schema-traverse": "^1.0.0",
 3147 |         "require-from-string": "^2.0.2"
 3148 |       },
 3149 |       "funding": {
 3150 |         "type": "github",
 3151 |         "url": "https://github.com/sponsors/epoberezkin"
 3152 |       }
 3153 |     },
 3154 |     "node_modules/ajv-draft-04": {
 3155 |       "version": "1.0.0",
 3156 |       "resolved": "https://registry.npmjs.org/ajv-draft-04/-/ajv-draft-04-1.0.0.tgz",
 3157 |       "integrity": "sha512-mv00Te6nmYbRp5DCwclxtt7yV/joXJPGS7nM+97GdxvuttCOfgI3K4U25zboyeX0O+myI8ERluxQe5wljMmVIw==",
 3158 |       "dev": true,
 3159 |       "license": "MIT",
 3160 |       "peerDependencies": {
 3161 |         "ajv": "^8.5.0"
 3162 |       },
 3163 |       "peerDependenciesMeta": {
 3164 |         "ajv": {
 3165 |           "optional": true
 3166 |         }
 3167 |       }
 3168 |     },
 3169 |     "node_modules/ajv-errors": {
 3170 |       "version": "3.0.0",
 3171 |       "resolved": "https://registry.npmjs.org/ajv-errors/-/ajv-errors-3.0.0.tgz",
 3172 |       "integrity": "sha512-V3wD15YHfHz6y0KdhYFjyy9vWtEVALT9UrxfN3zqlI6dMioHnJrqOYfyPKol3oqrnCM9uwkcdCwkJ0WUcbLMTQ==",
 3173 |       "dev": true,
 3174 |       "license": "MIT",
 3175 |       "peerDependencies": {
 3176 |         "ajv": "^8.0.1"
 3177 |       }
 3178 |     },
 3179 |     "node_modules/ajv-formats": {
 3180 |       "version": "3.0.1",
 3181 |       "resolved": "https://registry.npmjs.org/ajv-formats/-/ajv-formats-3.0.1.tgz",
 3182 |       "integrity": "sha512-8iUql50EUR+uUcdRQ3HDqa6EVyo3docL8g5WJ3FNcWmu62IbkGUue/pEyLBW8VGKKucTPgqeks4fIU1DA4yowQ==",
 3183 |       "dev": true,
 3184 |       "license": "MIT",
 3185 |       "dependencies": {
 3186 |         "ajv": "^8.0.0"
 3187 |       },
 3188 |       "peerDependencies": {
 3189 |         "ajv": "^8.0.0"
 3190 |       },
 3191 |       "peerDependenciesMeta": {
 3192 |         "ajv": {
 3193 |           "optional": true
 3194 |         }
 3195 |       }
 3196 |     },
 3197 |     "node_modules/ansi-escapes": {
 3198 |       "version": "7.0.0",
 3199 |       "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-7.0.0.tgz",
 3200 |       "integrity": "sha512-GdYO7a61mR0fOlAsvC9/rIHf7L96sBc6dEWzeOu+KAea5bZyQRPIpojrVoI4AXGJS/ycu/fBTdLrUkA4ODrvjw==",
 3201 |       "dev": true,
 3202 |       "license": "MIT",
 3203 |       "dependencies": {
 3204 |         "environment": "^1.0.0"
 3205 |       },
 3206 |       "engines": {
 3207 |         "node": ">=18"
 3208 |       },
 3209 |       "funding": {
 3210 |         "url": "https://github.com/sponsors/sindresorhus"
 3211 |       }
 3212 |     },
 3213 |     "node_modules/ansi-regex": {
 3214 |       "version": "6.1.0",
 3215 |       "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
 3216 |       "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
 3217 |       "dev": true,
 3218 |       "license": "MIT",
 3219 |       "engines": {
 3220 |         "node": ">=12"
 3221 |       },
 3222 |       "funding": {
 3223 |         "url": "https://github.com/chalk/ansi-regex?sponsor=1"
 3224 |       }
 3225 |     },
 3226 |     "node_modules/ansi-styles": {
 3227 |       "version": "6.2.1",
 3228 |       "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
 3229 |       "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
 3230 |       "dev": true,
 3231 |       "license": "MIT",
 3232 |       "engines": {
 3233 |         "node": ">=12"
 3234 |       },
 3235 |       "funding": {
 3236 |         "url": "https://github.com/chalk/ansi-styles?sponsor=1"
 3237 |       }
 3238 |     },
 3239 |     "node_modules/any-promise": {
 3240 |       "version": "1.3.0",
 3241 |       "resolved": "https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz",
 3242 |       "integrity": "sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==",
 3243 |       "dev": true,
 3244 |       "license": "MIT"
 3245 |     },
 3246 |     "node_modules/anymatch": {
 3247 |       "version": "3.1.3",
 3248 |       "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
 3249 |       "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
 3250 |       "dev": true,
 3251 |       "license": "ISC",
 3252 |       "dependencies": {
 3253 |         "normalize-path": "^3.0.0",
 3254 |         "picomatch": "^2.0.4"
 3255 |       },
 3256 |       "engines": {
 3257 |         "node": ">= 8"
 3258 |       }
 3259 |     },
 3260 |     "node_modules/arg": {
 3261 |       "version": "5.0.2",
 3262 |       "resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
 3263 |       "integrity": "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==",
 3264 |       "dev": true,
 3265 |       "license": "MIT"
 3266 |     },
 3267 |     "node_modules/argparse": {
 3268 |       "version": "2.0.1",
 3269 |       "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
 3270 |       "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
 3271 |       "dev": true,
 3272 |       "license": "Python-2.0"
 3273 |     },
 3274 |     "node_modules/arktype": {
 3275 |       "version": "2.1.20",
 3276 |       "resolved": "https://registry.npmjs.org/arktype/-/arktype-2.1.20.tgz",
 3277 |       "integrity": "sha512-IZCEEXaJ8g+Ijd59WtSYwtjnqXiwM8sWQ5EjGamcto7+HVN9eK0C4p0zDlCuAwWhpqr6fIBkxPuYDl4/Mcj/+Q==",
 3278 |       "dev": true,
 3279 |       "license": "MIT",
 3280 |       "dependencies": {
 3281 |         "@ark/schema": "0.46.0",
 3282 |         "@ark/util": "0.46.0"
 3283 |       }
 3284 |     },
 3285 |     "node_modules/array-buffer-byte-length": {
 3286 |       "version": "1.0.2",
 3287 |       "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.2.tgz",
 3288 |       "integrity": "sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==",
 3289 |       "dev": true,
 3290 |       "license": "MIT",
 3291 |       "dependencies": {
 3292 |         "call-bound": "^1.0.3",
 3293 |         "is-array-buffer": "^3.0.5"
 3294 |       },
 3295 |       "engines": {
 3296 |         "node": ">= 0.4"
 3297 |       },
 3298 |       "funding": {
 3299 |         "url": "https://github.com/sponsors/ljharb"
 3300 |       }
 3301 |     },
 3302 |     "node_modules/array-flatten": {
 3303 |       "version": "1.1.1",
 3304 |       "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
 3305 |       "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
 3306 |       "dev": true,
 3307 |       "license": "MIT"
 3308 |     },
 3309 |     "node_modules/array-iterate": {
 3310 |       "version": "2.0.1",
 3311 |       "resolved": "https://registry.npmjs.org/array-iterate/-/array-iterate-2.0.1.tgz",
 3312 |       "integrity": "sha512-I1jXZMjAgCMmxT4qxXfPXa6SthSoE8h6gkSI9BGGNv8mP8G/v0blc+qFnZu6K42vTOiuME596QaLO0TP3Lk0xg==",
 3313 |       "dev": true,
 3314 |       "license": "MIT",
 3315 |       "funding": {
 3316 |         "type": "github",
 3317 |         "url": "https://github.com/sponsors/wooorm"
 3318 |       }
 3319 |     },
 3320 |     "node_modules/arraybuffer.prototype.slice": {
 3321 |       "version": "1.0.4",
 3322 |       "resolved": "https://registry.npmjs.org/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.4.tgz",
 3323 |       "integrity": "sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==",
 3324 |       "dev": true,
 3325 |       "license": "MIT",
 3326 |       "dependencies": {
 3327 |         "array-buffer-byte-length": "^1.0.1",
 3328 |         "call-bind": "^1.0.8",
 3329 |         "define-properties": "^1.2.1",
 3330 |         "es-abstract": "^1.23.5",
 3331 |         "es-errors": "^1.3.0",
 3332 |         "get-intrinsic": "^1.2.6",
 3333 |         "is-array-buffer": "^3.0.4"
 3334 |       },
 3335 |       "engines": {
 3336 |         "node": ">= 0.4"
 3337 |       },
 3338 |       "funding": {
 3339 |         "url": "https://github.com/sponsors/ljharb"
 3340 |       }
 3341 |     },
 3342 |     "node_modules/ast-types": {
 3343 |       "version": "0.13.4",
 3344 |       "resolved": "https://registry.npmjs.org/ast-types/-/ast-types-0.13.4.tgz",
 3345 |       "integrity": "sha512-x1FCFnFifvYDDzTaLII71vG5uvDwgtmDTEVWAxrgeiR8VjMONcCXJx7E+USjDtHlwFmt9MysbqgF9b9Vjr6w+w==",
 3346 |       "dev": true,
 3347 |       "license": "MIT",
 3348 |       "dependencies": {
 3349 |         "tslib": "^2.0.1"
 3350 |       },
 3351 |       "engines": {
 3352 |         "node": ">=4"
 3353 |       }
 3354 |     },
 3355 |     "node_modules/ast-types/node_modules/tslib": {
 3356 |       "version": "2.8.1",
 3357 |       "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
 3358 |       "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
 3359 |       "dev": true,
 3360 |       "license": "0BSD"
 3361 |     },
 3362 |     "node_modules/astring": {
 3363 |       "version": "1.9.0",
 3364 |       "resolved": "https://registry.npmjs.org/astring/-/astring-1.9.0.tgz",
 3365 |       "integrity": "sha512-LElXdjswlqjWrPpJFg1Fx4wpkOCxj1TDHlSV4PlaRxHGWko024xICaa97ZkMfs6DRKlCguiAI+rbXv5GWwXIkg==",
 3366 |       "dev": true,
 3367 |       "license": "MIT",
 3368 |       "bin": {
 3369 |         "astring": "bin/astring"
 3370 |       }
 3371 |     },
 3372 |     "node_modules/async-function": {
 3373 |       "version": "1.0.0",
 3374 |       "resolved": "https://registry.npmjs.org/async-function/-/async-function-1.0.0.tgz",
 3375 |       "integrity": "sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==",
 3376 |       "dev": true,
 3377 |       "license": "MIT",
 3378 |       "engines": {
 3379 |         "node": ">= 0.4"
 3380 |       }
 3381 |     },
 3382 |     "node_modules/asynckit": {
 3383 |       "version": "0.4.0",
 3384 |       "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
 3385 |       "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
 3386 |       "dev": true,
 3387 |       "license": "MIT"
 3388 |     },
 3389 |     "node_modules/auto-bind": {
 3390 |       "version": "5.0.1",
 3391 |       "resolved": "https://registry.npmjs.org/auto-bind/-/auto-bind-5.0.1.tgz",
 3392 |       "integrity": "sha512-ooviqdwwgfIfNmDwo94wlshcdzfO64XV0Cg6oDsDYBJfITDz1EngD2z7DkbvCWn+XIMsIqW27sEVF6qcpJrRcg==",
 3393 |       "dev": true,
 3394 |       "license": "MIT",
 3395 |       "engines": {
 3396 |         "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
 3397 |       },
 3398 |       "funding": {
 3399 |         "url": "https://github.com/sponsors/sindresorhus"
 3400 |       }
 3401 |     },
 3402 |     "node_modules/available-typed-arrays": {
 3403 |       "version": "1.0.7",
 3404 |       "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
 3405 |       "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
 3406 |       "dev": true,
 3407 |       "license": "MIT",
 3408 |       "dependencies": {
 3409 |         "possible-typed-array-names": "^1.0.0"
 3410 |       },
 3411 |       "engines": {
 3412 |         "node": ">= 0.4"
 3413 |       },
 3414 |       "funding": {
 3415 |         "url": "https://github.com/sponsors/ljharb"
 3416 |       }
 3417 |     },
 3418 |     "node_modules/avsc": {
 3419 |       "version": "5.7.9",
 3420 |       "resolved": "https://registry.npmjs.org/avsc/-/avsc-5.7.9.tgz",
 3421 |       "integrity": "sha512-yOA4wFeI7ET3v32Di/sUybQ+ttP20JHSW3mxLuNGeO0uD6PPcvLrIQXSvy/rhJOWU5JrYh7U4OHplWMmtAtjMg==",
 3422 |       "dev": true,
 3423 |       "license": "MIT",
 3424 |       "engines": {
 3425 |         "node": ">=0.11"
 3426 |       }
 3427 |     },
 3428 |     "node_modules/axios": {
 3429 |       "version": "1.11.0",
 3430 |       "resolved": "https://registry.npmjs.org/axios/-/axios-1.11.0.tgz",
 3431 |       "integrity": "sha512-1Lx3WLFQWm3ooKDYZD1eXmoGO9fxYQjrycfHFC8P0sCfQVXyROp0p9PFWBehewBOdCwHc+f/b8I0fMto5eSfwA==",
 3432 |       "dev": true,
 3433 |       "license": "MIT",
 3434 |       "dependencies": {
 3435 |         "follow-redirects": "^1.15.6",
 3436 |         "form-data": "^4.0.4",
 3437 |         "proxy-from-env": "^1.1.0"
 3438 |       }
 3439 |     },
 3440 |     "node_modules/b4a": {
 3441 |       "version": "1.6.7",
 3442 |       "resolved": "https://registry.npmjs.org/b4a/-/b4a-1.6.7.tgz",
 3443 |       "integrity": "sha512-OnAYlL5b7LEkALw87fUVafQw5rVR9RjwGd4KUwNQ6DrrNmaVaUCgLipfVlzrPQ4tWOR9P0IXGNOx50jYCCdSJg==",
 3444 |       "dev": true,
 3445 |       "license": "Apache-2.0"
 3446 |     },
 3447 |     "node_modules/bail": {
 3448 |       "version": "2.0.2",
 3449 |       "resolved": "https://registry.npmjs.org/bail/-/bail-2.0.2.tgz",
 3450 |       "integrity": "sha512-0xO6mYd7JB2YesxDKplafRpsiOzPt9V02ddPCLbY1xYGPOX24NTyN50qnUxgCPcSoYMhKpAuBTjQoRZCAkUDRw==",
 3451 |       "dev": true,
 3452 |       "license": "MIT",
 3453 |       "funding": {
 3454 |         "type": "github",
 3455 |         "url": "https://github.com/sponsors/wooorm"
 3456 |       }
 3457 |     },
 3458 |     "node_modules/balanced-match": {
 3459 |       "version": "1.0.2",
 3460 |       "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
 3461 |       "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
 3462 |       "dev": true,
 3463 |       "license": "MIT"
 3464 |     },
 3465 |     "node_modules/bare-events": {
 3466 |       "version": "2.6.1",
 3467 |       "resolved": "https://registry.npmjs.org/bare-events/-/bare-events-2.6.1.tgz",
 3468 |       "integrity": "sha512-AuTJkq9XmE6Vk0FJVNq5QxETrSA/vKHarWVBG5l/JbdCL1prJemiyJqUS0jrlXO0MftuPq4m3YVYhoNc5+aE/g==",
 3469 |       "dev": true,
 3470 |       "license": "Apache-2.0",
 3471 |       "optional": true
 3472 |     },
 3473 |     "node_modules/bare-fs": {
 3474 |       "version": "4.1.6",
 3475 |       "resolved": "https://registry.npmjs.org/bare-fs/-/bare-fs-4.1.6.tgz",
 3476 |       "integrity": "sha512-25RsLF33BqooOEFNdMcEhMpJy8EoR88zSMrnOQOaM3USnOK2VmaJ1uaQEwPA6AQjrv1lXChScosN6CzbwbO9OQ==",
 3477 |       "dev": true,
 3478 |       "license": "Apache-2.0",
 3479 |       "optional": true,
 3480 |       "dependencies": {
 3481 |         "bare-events": "^2.5.4",
 3482 |         "bare-path": "^3.0.0",
 3483 |         "bare-stream": "^2.6.4"
 3484 |       },
 3485 |       "engines": {
 3486 |         "bare": ">=1.16.0"
 3487 |       },
 3488 |       "peerDependencies": {
 3489 |         "bare-buffer": "*"
 3490 |       },
 3491 |       "peerDependenciesMeta": {
 3492 |         "bare-buffer": {
 3493 |           "optional": true
 3494 |         }
 3495 |       }
 3496 |     },
 3497 |     "node_modules/bare-os": {
 3498 |       "version": "3.6.1",
 3499 |       "resolved": "https://registry.npmjs.org/bare-os/-/bare-os-3.6.1.tgz",
 3500 |       "integrity": "sha512-uaIjxokhFidJP+bmmvKSgiMzj2sV5GPHaZVAIktcxcpCyBFFWO+YlikVAdhmUo2vYFvFhOXIAlldqV29L8126g==",
 3501 |       "dev": true,
 3502 |       "license": "Apache-2.0",
 3503 |       "optional": true,
 3504 |       "engines": {
 3505 |         "bare": ">=1.14.0"
 3506 |       }
 3507 |     },
 3508 |     "node_modules/bare-path": {
 3509 |       "version": "3.0.0",
 3510 |       "resolved": "https://registry.npmjs.org/bare-path/-/bare-path-3.0.0.tgz",
 3511 |       "integrity": "sha512-tyfW2cQcB5NN8Saijrhqn0Zh7AnFNsnczRcuWODH0eYAXBsJ5gVxAUuNr7tsHSC6IZ77cA0SitzT+s47kot8Mw==",
 3512 |       "dev": true,
 3513 |       "license": "Apache-2.0",
 3514 |       "optional": true,
 3515 |       "dependencies": {
 3516 |         "bare-os": "^3.0.1"
 3517 |       }
 3518 |     },
 3519 |     "node_modules/bare-stream": {
 3520 |       "version": "2.6.5",
 3521 |       "resolved": "https://registry.npmjs.org/bare-stream/-/bare-stream-2.6.5.tgz",
 3522 |       "integrity": "sha512-jSmxKJNJmHySi6hC42zlZnq00rga4jjxcgNZjY9N5WlOe/iOoGRtdwGsHzQv2RlH2KOYMwGUXhf2zXd32BA9RA==",
 3523 |       "dev": true,
 3524 |       "license": "Apache-2.0",
 3525 |       "optional": true,
 3526 |       "dependencies": {
 3527 |         "streamx": "^2.21.0"
 3528 |       },
 3529 |       "peerDependencies": {
 3530 |         "bare-buffer": "*",
 3531 |         "bare-events": "*"
 3532 |       },
 3533 |       "peerDependenciesMeta": {
 3534 |         "bare-buffer": {
 3535 |           "optional": true
 3536 |         },
 3537 |         "bare-events": {
 3538 |           "optional": true
 3539 |         }
 3540 |       }
 3541 |     },
 3542 |     "node_modules/base64-js": {
 3543 |       "version": "1.5.1",
 3544 |       "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
 3545 |       "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
 3546 |       "dev": true,
 3547 |       "funding": [
 3548 |         {
 3549 |           "type": "github",
 3550 |           "url": "https://github.com/sponsors/feross"
 3551 |         },
 3552 |         {
 3553 |           "type": "patreon",
 3554 |           "url": "https://www.patreon.com/feross"
 3555 |         },
 3556 |         {
 3557 |           "type": "consulting",
 3558 |           "url": "https://feross.org/support"
 3559 |         }
 3560 |       ],
 3561 |       "license": "MIT"
 3562 |     },
 3563 |     "node_modules/base64id": {
 3564 |       "version": "2.0.0",
 3565 |       "resolved": "https://registry.npmjs.org/base64id/-/base64id-2.0.0.tgz",
 3566 |       "integrity": "sha512-lGe34o6EHj9y3Kts9R4ZYs/Gr+6N7MCaMlIFA3F1R2O5/m7K06AxfSeO5530PEERE6/WyEg3lsuyw4GHlPZHog==",
 3567 |       "dev": true,
 3568 |       "license": "MIT",
 3569 |       "engines": {
 3570 |         "node": "^4.5.0 || >= 5.9"
 3571 |       }
 3572 |     },
 3573 |     "node_modules/basic-ftp": {
 3574 |       "version": "5.0.5",
 3575 |       "resolved": "https://registry.npmjs.org/basic-ftp/-/basic-ftp-5.0.5.tgz",
 3576 |       "integrity": "sha512-4Bcg1P8xhUuqcii/S0Z9wiHIrQVPMermM1any+MX5GeGD7faD3/msQUDGLol9wOcz4/jbg/WJnGqoJF6LiBdtg==",
 3577 |       "dev": true,
 3578 |       "license": "MIT",
 3579 |       "engines": {
 3580 |         "node": ">=10.0.0"
 3581 |       }
 3582 |     },
 3583 |     "node_modules/better-opn": {
 3584 |       "version": "3.0.2",
 3585 |       "resolved": "https://registry.npmjs.org/better-opn/-/better-opn-3.0.2.tgz",
 3586 |       "integrity": "sha512-aVNobHnJqLiUelTaHat9DZ1qM2w0C0Eym4LPI/3JxOnSokGVdsl1T1kN7TFvsEAD8G47A6VKQ0TVHqbBnYMJlQ==",
 3587 |       "dev": true,
 3588 |       "license": "MIT",
 3589 |       "dependencies": {
 3590 |         "open": "^8.0.4"
 3591 |       },
 3592 |       "engines": {
 3593 |         "node": ">=12.0.0"
 3594 |       }
 3595 |     },
 3596 |     "node_modules/binary-extensions": {
 3597 |       "version": "2.3.0",
 3598 |       "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
 3599 |       "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
 3600 |       "dev": true,
 3601 |       "license": "MIT",
 3602 |       "engines": {
 3603 |         "node": ">=8"
 3604 |       },
 3605 |       "funding": {
 3606 |         "url": "https://github.com/sponsors/sindresorhus"
 3607 |       }
 3608 |     },
 3609 |     "node_modules/body-parser": {
 3610 |       "version": "1.20.3",
 3611 |       "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
 3612 |       "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
 3613 |       "dev": true,
 3614 |       "license": "MIT",
 3615 |       "dependencies": {
 3616 |         "bytes": "3.1.2",
 3617 |         "content-type": "~1.0.5",
 3618 |         "debug": "2.6.9",
 3619 |         "depd": "2.0.0",
 3620 |         "destroy": "1.2.0",
 3621 |         "http-errors": "2.0.0",
 3622 |         "iconv-lite": "0.4.24",
 3623 |         "on-finished": "2.4.1",
 3624 |         "qs": "6.13.0",
 3625 |         "raw-body": "2.5.2",
 3626 |         "type-is": "~1.6.18",
 3627 |         "unpipe": "1.0.0"
 3628 |       },
 3629 |       "engines": {
 3630 |         "node": ">= 0.8",
 3631 |         "npm": "1.2.8000 || >= 1.4.16"
 3632 |       }
 3633 |     },
 3634 |     "node_modules/body-parser/node_modules/debug": {
 3635 |       "version": "2.6.9",
 3636 |       "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
 3637 |       "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
 3638 |       "dev": true,
 3639 |       "license": "MIT",
 3640 |       "dependencies": {
 3641 |         "ms": "2.0.0"
 3642 |       }
 3643 |     },
 3644 |     "node_modules/body-parser/node_modules/ms": {
 3645 |       "version": "2.0.0",
 3646 |       "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
 3647 |       "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
 3648 |       "dev": true,
 3649 |       "license": "MIT"
 3650 |     },
 3651 |     "node_modules/brace-expansion": {
 3652 |       "version": "1.1.12",
 3653 |       "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
 3654 |       "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
 3655 |       "dev": true,
 3656 |       "license": "MIT",
 3657 |       "dependencies": {
 3658 |         "balanced-match": "^1.0.0",
 3659 |         "concat-map": "0.0.1"
 3660 |       }
 3661 |     },
 3662 |     "node_modules/braces": {
 3663 |       "version": "3.0.3",
 3664 |       "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
 3665 |       "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
 3666 |       "dev": true,
 3667 |       "license": "MIT",
 3668 |       "dependencies": {
 3669 |         "fill-range": "^7.1.1"
 3670 |       },
 3671 |       "engines": {
 3672 |         "node": ">=8"
 3673 |       }
 3674 |     },
 3675 |     "node_modules/buffer": {
 3676 |       "version": "5.7.1",
 3677 |       "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
 3678 |       "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
 3679 |       "dev": true,
 3680 |       "funding": [
 3681 |         {
 3682 |           "type": "github",
 3683 |           "url": "https://github.com/sponsors/feross"
 3684 |         },
 3685 |         {
 3686 |           "type": "patreon",
 3687 |           "url": "https://www.patreon.com/feross"
 3688 |         },
 3689 |         {
 3690 |           "type": "consulting",
 3691 |           "url": "https://feross.org/support"
 3692 |         }
 3693 |       ],
 3694 |       "license": "MIT",
 3695 |       "dependencies": {
 3696 |         "base64-js": "^1.3.1",
 3697 |         "ieee754": "^1.1.13"
 3698 |       }
 3699 |     },
 3700 |     "node_modules/buffer-crc32": {
 3701 |       "version": "0.2.13",
 3702 |       "resolved": "https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.13.tgz",
 3703 |       "integrity": "sha512-VO9Ht/+p3SN7SKWqcrgEzjGbRSJYTx+Q1pTQC0wrWqHx0vpJraQ6GtHx8tvcg1rlK1byhU5gccxgOgj7B0TDkQ==",
 3704 |       "dev": true,
 3705 |       "license": "MIT",
 3706 |       "engines": {
 3707 |         "node": "*"
 3708 |       }
 3709 |     },
 3710 |     "node_modules/bytes": {
 3711 |       "version": "3.1.2",
 3712 |       "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
 3713 |       "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
 3714 |       "dev": true,
 3715 |       "license": "MIT",
 3716 |       "engines": {
 3717 |         "node": ">= 0.8"
 3718 |       }
 3719 |     },
 3720 |     "node_modules/cacheable-lookup": {
 3721 |       "version": "7.0.0",
 3722 |       "resolved": "https://registry.npmjs.org/cacheable-lookup/-/cacheable-lookup-7.0.0.tgz",
 3723 |       "integrity": "sha512-+qJyx4xiKra8mZrcwhjMRMUhD5NR1R8esPkzIYxX96JiecFoxAXFuz/GpR3+ev4PE1WamHip78wV0vcmPQtp8w==",
 3724 |       "dev": true,
 3725 |       "license": "MIT",
 3726 |       "engines": {
 3727 |         "node": ">=14.16"
 3728 |       }
 3729 |     },
 3730 |     "node_modules/cacheable-request": {
 3731 |       "version": "10.2.14",
 3732 |       "resolved": "https://registry.npmjs.org/cacheable-request/-/cacheable-request-10.2.14.tgz",
 3733 |       "integrity": "sha512-zkDT5WAF4hSSoUgyfg5tFIxz8XQK+25W/TLVojJTMKBaxevLBBtLxgqguAuVQB8PVW79FVjHcU+GJ9tVbDZ9mQ==",
 3734 |       "dev": true,
 3735 |       "license": "MIT",
 3736 |       "dependencies": {
 3737 |         "@types/http-cache-semantics": "^4.0.2",
 3738 |         "get-stream": "^6.0.1",
 3739 |         "http-cache-semantics": "^4.1.1",
 3740 |         "keyv": "^4.5.3",
 3741 |         "mimic-response": "^4.0.0",
 3742 |         "normalize-url": "^8.0.0",
 3743 |         "responselike": "^3.0.0"
 3744 |       },
 3745 |       "engines": {
 3746 |         "node": ">=14.16"
 3747 |       }
 3748 |     },
 3749 |     "node_modules/call-bind": {
 3750 |       "version": "1.0.8",
 3751 |       "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.8.tgz",
 3752 |       "integrity": "sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==",
 3753 |       "dev": true,
 3754 |       "license": "MIT",
 3755 |       "dependencies": {
 3756 |         "call-bind-apply-helpers": "^1.0.0",
 3757 |         "es-define-property": "^1.0.0",
 3758 |         "get-intrinsic": "^1.2.4",
 3759 |         "set-function-length": "^1.2.2"
 3760 |       },
 3761 |       "engines": {
 3762 |         "node": ">= 0.4"
 3763 |       },
 3764 |       "funding": {
 3765 |         "url": "https://github.com/sponsors/ljharb"
 3766 |       }
 3767 |     },
 3768 |     "node_modules/call-bind-apply-helpers": {
 3769 |       "version": "1.0.2",
 3770 |       "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
 3771 |       "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
 3772 |       "dev": true,
 3773 |       "license": "MIT",
 3774 |       "dependencies": {
 3775 |         "es-errors": "^1.3.0",
 3776 |         "function-bind": "^1.1.2"
 3777 |       },
 3778 |       "engines": {
 3779 |         "node": ">= 0.4"
 3780 |       }
 3781 |     },
 3782 |     "node_modules/call-bound": {
 3783 |       "version": "1.0.4",
 3784 |       "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
 3785 |       "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
 3786 |       "dev": true,
 3787 |       "license": "MIT",
 3788 |       "dependencies": {
 3789 |         "call-bind-apply-helpers": "^1.0.2",
 3790 |         "get-intrinsic": "^1.3.0"
 3791 |       },
 3792 |       "engines": {
 3793 |         "node": ">= 0.4"
 3794 |       },
 3795 |       "funding": {
 3796 |         "url": "https://github.com/sponsors/ljharb"
 3797 |       }
 3798 |     },
 3799 |     "node_modules/callsites": {
 3800 |       "version": "3.1.0",
 3801 |       "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
 3802 |       "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
 3803 |       "dev": true,
 3804 |       "license": "MIT",
 3805 |       "engines": {
 3806 |         "node": ">=6"
 3807 |       }
 3808 |     },
 3809 |     "node_modules/camelcase-css": {
 3810 |       "version": "2.0.1",
 3811 |       "resolved": "https://registry.npmjs.org/camelcase-css/-/camelcase-css-2.0.1.tgz",
 3812 |       "integrity": "sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==",
 3813 |       "dev": true,
 3814 |       "license": "MIT",
 3815 |       "engines": {
 3816 |         "node": ">= 6"
 3817 |       }
 3818 |     },
 3819 |     "node_modules/ccount": {
 3820 |       "version": "2.0.1",
 3821 |       "resolved": "https://registry.npmjs.org/ccount/-/ccount-2.0.1.tgz",
 3822 |       "integrity": "sha512-eyrF0jiFpY+3drT6383f1qhkbGsLSifNAjA61IUjZjmLCWjItY6LB9ft9YhoDgwfmclB2zhu51Lc7+95b8NRAg==",
 3823 |       "dev": true,
 3824 |       "license": "MIT",
 3825 |       "funding": {
 3826 |         "type": "github",
 3827 |         "url": "https://github.com/sponsors/wooorm"
 3828 |       }
 3829 |     },
 3830 |     "node_modules/chalk": {
 3831 |       "version": "5.5.0",
 3832 |       "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.5.0.tgz",
 3833 |       "integrity": "sha512-1tm8DTaJhPBG3bIkVeZt1iZM9GfSX2lzOeDVZH9R9ffRHpmHvxZ/QhgQH/aDTkswQVt+YHdXAdS/In/30OjCbg==",
 3834 |       "dev": true,
 3835 |       "license": "MIT",
 3836 |       "engines": {
 3837 |         "node": "^12.17.0 || ^14.13 || >=16.0.0"
 3838 |       },
 3839 |       "funding": {
 3840 |         "url": "https://github.com/chalk/chalk?sponsor=1"
 3841 |       }
 3842 |     },
 3843 |     "node_modules/character-entities": {
 3844 |       "version": "2.0.2",
 3845 |       "resolved": "https://registry.npmjs.org/character-entities/-/character-entities-2.0.2.tgz",
 3846 |       "integrity": "sha512-shx7oQ0Awen/BRIdkjkvz54PnEEI/EjwXDSIZp86/KKdbafHh1Df/RYGBhn4hbe2+uKC9FnT5UCEdyPz3ai9hQ==",
 3847 |       "dev": true,
 3848 |       "license": "MIT",
 3849 |       "funding": {
 3850 |         "type": "github",
 3851 |         "url": "https://github.com/sponsors/wooorm"
 3852 |       }
 3853 |     },
 3854 |     "node_modules/character-entities-html4": {
 3855 |       "version": "2.1.0",
 3856 |       "resolved": "https://registry.npmjs.org/character-entities-html4/-/character-entities-html4-2.1.0.tgz",
 3857 |       "integrity": "sha512-1v7fgQRj6hnSwFpq1Eu0ynr/CDEw0rXo2B61qXrLNdHZmPKgb7fqS1a2JwF0rISo9q77jDI8VMEHoApn8qDoZA==",
 3858 |       "dev": true,
 3859 |       "license": "MIT",
 3860 |       "funding": {
 3861 |         "type": "github",
 3862 |         "url": "https://github.com/sponsors/wooorm"
 3863 |       }
 3864 |     },
 3865 |     "node_modules/character-entities-legacy": {
 3866 |       "version": "3.0.0",
 3867 |       "resolved": "https://registry.npmjs.org/character-entities-legacy/-/character-entities-legacy-3.0.0.tgz",
 3868 |       "integrity": "sha512-RpPp0asT/6ufRm//AJVwpViZbGM/MkjQFxJccQRHmISF/22NBtsHqAWmL+/pmkPWoIUJdWyeVleTl1wydHATVQ==",
 3869 |       "dev": true,
 3870 |       "license": "MIT",
 3871 |       "funding": {
 3872 |         "type": "github",
 3873 |         "url": "https://github.com/sponsors/wooorm"
 3874 |       }
 3875 |     },
 3876 |     "node_modules/character-reference-invalid": {
 3877 |       "version": "2.0.1",
 3878 |       "resolved": "https://registry.npmjs.org/character-reference-invalid/-/character-reference-invalid-2.0.1.tgz",
 3879 |       "integrity": "sha512-iBZ4F4wRbyORVsu0jPV7gXkOsGYjGHPmAyv+HiHG8gi5PtC9KI2j1+v8/tlibRvjoWX027ypmG/n0HtO5t7unw==",
 3880 |       "dev": true,
 3881 |       "license": "MIT",
 3882 |       "funding": {
 3883 |         "type": "github",
 3884 |         "url": "https://github.com/sponsors/wooorm"
 3885 |       }
 3886 |     },
 3887 |     "node_modules/chardet": {
 3888 |       "version": "2.1.0",
 3889 |       "resolved": "https://registry.npmjs.org/chardet/-/chardet-2.1.0.tgz",
 3890 |       "integrity": "sha512-bNFETTG/pM5ryzQ9Ad0lJOTa6HWD/YsScAR3EnCPZRPlQh77JocYktSHOUHelyhm8IARL+o4c4F1bP5KVOjiRA==",
 3891 |       "dev": true,
 3892 |       "license": "MIT"
 3893 |     },
 3894 |     "node_modules/chokidar": {
 3895 |       "version": "3.6.0",
 3896 |       "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
 3897 |       "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
 3898 |       "dev": true,
 3899 |       "license": "MIT",
 3900 |       "dependencies": {
 3901 |         "anymatch": "~3.1.2",
 3902 |         "braces": "~3.0.2",
 3903 |         "glob-parent": "~5.1.2",
 3904 |         "is-binary-path": "~2.1.0",
 3905 |         "is-glob": "~4.0.1",
 3906 |         "normalize-path": "~3.0.0",
 3907 |         "readdirp": "~3.6.0"
 3908 |       },
 3909 |       "engines": {
 3910 |         "node": ">= 8.10.0"
 3911 |       },
 3912 |       "funding": {
 3913 |         "url": "https://paulmillr.com/funding/"
 3914 |       },
 3915 |       "optionalDependencies": {
 3916 |         "fsevents": "~2.3.2"
 3917 |       }
 3918 |     },
 3919 |     "node_modules/chownr": {
 3920 |       "version": "2.0.0",
 3921 |       "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
 3922 |       "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
 3923 |       "dev": true,
 3924 |       "license": "ISC",
 3925 |       "engines": {
 3926 |         "node": ">=10"
 3927 |       }
 3928 |     },
 3929 |     "node_modules/chromium-bidi": {
 3930 |       "version": "0.6.3",
 3931 |       "resolved": "https://registry.npmjs.org/chromium-bidi/-/chromium-bidi-0.6.3.tgz",
 3932 |       "integrity": "sha512-qXlsCmpCZJAnoTYI83Iu6EdYQpMYdVkCfq08KDh2pmlVqK5t5IA9mGs4/LwCwp4fqisSOMXZxP3HIh8w8aRn0A==",
 3933 |       "dev": true,
 3934 |       "license": "Apache-2.0",
 3935 |       "dependencies": {
 3936 |         "mitt": "3.0.1",
 3937 |         "urlpattern-polyfill": "10.0.0",
 3938 |         "zod": "3.23.8"
 3939 |       },
 3940 |       "peerDependencies": {
 3941 |         "devtools-protocol": "*"
 3942 |       }
 3943 |     },
 3944 |     "node_modules/chromium-bidi/node_modules/zod": {
 3945 |       "version": "3.23.8",
 3946 |       "resolved": "https://registry.npmjs.org/zod/-/zod-3.23.8.tgz",
 3947 |       "integrity": "sha512-XBx9AXhXktjUqnepgTiE5flcKIYWi/rme0Eaj+5Y0lftuGBq+jyRu/md4WnuxqgP1ubdpNCsYEYPxrzVHD8d6g==",
 3948 |       "dev": true,
 3949 |       "license": "MIT",
 3950 |       "funding": {
 3951 |         "url": "https://github.com/sponsors/colinhacks"
 3952 |       }
 3953 |     },
 3954 |     "node_modules/clean-stack": {
 3955 |       "version": "4.2.0",
 3956 |       "resolved": "https://registry.npmjs.org/clean-stack/-/clean-stack-4.2.0.tgz",
 3957 |       "integrity": "sha512-LYv6XPxoyODi36Dp976riBtSY27VmFo+MKqEU9QCCWyTrdEPDog+RWA7xQWHi6Vbp61j5c4cdzzX1NidnwtUWg==",
 3958 |       "dev": true,
 3959 |       "license": "MIT",
 3960 |       "dependencies": {
 3961 |         "escape-string-regexp": "5.0.0"
 3962 |       },
 3963 |       "engines": {
 3964 |         "node": ">=12"
 3965 |       },
 3966 |       "funding": {
 3967 |         "url": "https://github.com/sponsors/sindresorhus"
 3968 |       }
 3969 |     },
 3970 |     "node_modules/cli-boxes": {
 3971 |       "version": "3.0.0",
 3972 |       "resolved": "https://registry.npmjs.org/cli-boxes/-/cli-boxes-3.0.0.tgz",
 3973 |       "integrity": "sha512-/lzGpEWL/8PfI0BmBOPRwp0c/wFNX1RdUML3jK/RcSBA9T8mZDdQpqYBKtCFTOfQbwPqWEOpjqW+Fnayc0969g==",
 3974 |       "dev": true,
 3975 |       "license": "MIT",
 3976 |       "engines": {
 3977 |         "node": ">=10"
 3978 |       },
 3979 |       "funding": {
 3980 |         "url": "https://github.com/sponsors/sindresorhus"
 3981 |       }
 3982 |     },
 3983 |     "node_modules/cli-cursor": {
 3984 |       "version": "4.0.0",
 3985 |       "resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-4.0.0.tgz",
 3986 |       "integrity": "sha512-VGtlMu3x/4DOtIUwEkRezxUZ2lBacNJCHash0N0WeZDBS+7Ux1dm3XWAgWYxLJFMMdOeXMHXorshEFhbMSGelg==",
 3987 |       "dev": true,
 3988 |       "license": "MIT",
 3989 |       "dependencies": {
 3990 |         "restore-cursor": "^4.0.0"
 3991 |       },
 3992 |       "engines": {
 3993 |         "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
 3994 |       },
 3995 |       "funding": {
 3996 |         "url": "https://github.com/sponsors/sindresorhus"
 3997 |       }
 3998 |     },
 3999 |     "node_modules/cli-spinners": {
 4000 |       "version": "2.9.2",
 4001 |       "resolved": "https://registry.npmjs.org/cli-spinners/-/cli-spinners-2.9.2.tgz",
 4002 |       "integrity": "sha512-ywqV+5MmyL4E7ybXgKys4DugZbX0FC6LnwrhjuykIjnK9k8OQacQ7axGKnjDXWNhns0xot3bZI5h55H8yo9cJg==",
 4003 |       "dev": true,
 4004 |       "license": "MIT",
 4005 |       "engines": {
 4006 |         "node": ">=6"
 4007 |       },
 4008 |       "funding": {
 4009 |         "url": "https://github.com/sponsors/sindresorhus"
 4010 |       }
 4011 |     },
 4012 |     "node_modules/cli-truncate": {
 4013 |       "version": "4.0.0",
 4014 |       "resolved": "https://registry.npmjs.org/cli-truncate/-/cli-truncate-4.0.0.tgz",
 4015 |       "integrity": "sha512-nPdaFdQ0h/GEigbPClz11D0v/ZJEwxmeVZGeMo3Z5StPtUTkA9o1lD6QwoirYiSDzbcwn2XcjwmCp68W1IS4TA==",
 4016 |       "dev": true,
 4017 |       "license": "MIT",
 4018 |       "dependencies": {
 4019 |         "slice-ansi": "^5.0.0",
 4020 |         "string-width": "^7.0.0"
 4021 |       },
 4022 |       "engines": {
 4023 |         "node": ">=18"
 4024 |       },
 4025 |       "funding": {
 4026 |         "url": "https://github.com/sponsors/sindresorhus"
 4027 |       }
 4028 |     },
 4029 |     "node_modules/cli-truncate/node_modules/emoji-regex": {
 4030 |       "version": "10.4.0",
 4031 |       "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-10.4.0.tgz",
 4032 |       "integrity": "sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw==",
 4033 |       "dev": true,
 4034 |       "license": "MIT"
 4035 |     },
 4036 |     "node_modules/cli-truncate/node_modules/slice-ansi": {
 4037 |       "version": "5.0.0",
 4038 |       "resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-5.0.0.tgz",
 4039 |       "integrity": "sha512-FC+lgizVPfie0kkhqUScwRu1O/lF6NOgJmlCgK+/LYxDCTk8sGelYaHDhFcDN+Sn3Cv+3VSa4Byeo+IMCzpMgQ==",
 4040 |       "dev": true,
 4041 |       "license": "MIT",
 4042 |       "dependencies": {
 4043 |         "ansi-styles": "^6.0.0",
 4044 |         "is-fullwidth-code-point": "^4.0.0"
 4045 |       },
 4046 |       "engines": {
 4047 |         "node": ">=12"
 4048 |       },
 4049 |       "funding": {
 4050 |         "url": "https://github.com/chalk/slice-ansi?sponsor=1"
 4051 |       }
 4052 |     },
 4053 |     "node_modules/cli-truncate/node_modules/string-width": {
 4054 |       "version": "7.2.0",
 4055 |       "resolved": "https://registry.npmjs.org/string-width/-/string-width-7.2.0.tgz",
 4056 |       "integrity": "sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==",
 4057 |       "dev": true,
 4058 |       "license": "MIT",
 4059 |       "dependencies": {
 4060 |         "emoji-regex": "^10.3.0",
 4061 |         "get-east-asian-width": "^1.0.0",
 4062 |         "strip-ansi": "^7.1.0"
 4063 |       },
 4064 |       "engines": {
 4065 |         "node": ">=18"
 4066 |       },
 4067 |       "funding": {
 4068 |         "url": "https://github.com/sponsors/sindresorhus"
 4069 |       }
 4070 |     },
 4071 |     "node_modules/cli-width": {
 4072 |       "version": "4.1.0",
 4073 |       "resolved": "https://registry.npmjs.org/cli-width/-/cli-width-4.1.0.tgz",
 4074 |       "integrity": "sha512-ouuZd4/dm2Sw5Gmqy6bGyNNNe1qt9RpmxveLSO7KcgsTnU7RXfsw+/bukWGo1abgBiMAic068rclZsO4IWmmxQ==",
 4075 |       "dev": true,
 4076 |       "license": "ISC",
 4077 |       "engines": {
 4078 |         "node": ">= 12"
 4079 |       }
 4080 |     },
 4081 |     "node_modules/cliui": {
 4082 |       "version": "8.0.1",
 4083 |       "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
 4084 |       "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
 4085 |       "dev": true,
 4086 |       "license": "ISC",
 4087 |       "dependencies": {
 4088 |         "string-width": "^4.2.0",
 4089 |         "strip-ansi": "^6.0.1",
 4090 |         "wrap-ansi": "^7.0.0"
 4091 |       },
 4092 |       "engines": {
 4093 |         "node": ">=12"
 4094 |       }
 4095 |     },
 4096 |     "node_modules/cliui/node_modules/ansi-regex": {
 4097 |       "version": "5.0.1",
 4098 |       "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
 4099 |       "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
 4100 |       "dev": true,
 4101 |       "license": "MIT",
 4102 |       "engines": {
 4103 |         "node": ">=8"
 4104 |       }
 4105 |     },
 4106 |     "node_modules/cliui/node_modules/ansi-styles": {
 4107 |       "version": "4.3.0",
 4108 |       "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
 4109 |       "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
 4110 |       "dev": true,
 4111 |       "license": "MIT",
 4112 |       "dependencies": {
 4113 |         "color-convert": "^2.0.1"
 4114 |       },
 4115 |       "engines": {
 4116 |         "node": ">=8"
 4117 |       },
 4118 |       "funding": {
 4119 |         "url": "https://github.com/chalk/ansi-styles?sponsor=1"
 4120 |       }
 4121 |     },
 4122 |     "node_modules/cliui/node_modules/emoji-regex": {
 4123 |       "version": "8.0.0",
 4124 |       "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
 4125 |       "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
 4126 |       "dev": true,
 4127 |       "license": "MIT"
 4128 |     },
 4129 |     "node_modules/cliui/node_modules/is-fullwidth-code-point": {
 4130 |       "version": "3.0.0",
 4131 |       "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
 4132 |       "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
 4133 |       "dev": true,
 4134 |       "license": "MIT",
 4135 |       "engines": {
 4136 |         "node": ">=8"
 4137 |       }
 4138 |     },
 4139 |     "node_modules/cliui/node_modules/string-width": {
 4140 |       "version": "4.2.3",
 4141 |       "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
 4142 |       "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
 4143 |       "dev": true,
 4144 |       "license": "MIT",
 4145 |       "dependencies": {
 4146 |         "emoji-regex": "^8.0.0",
 4147 |         "is-fullwidth-code-point": "^3.0.0",
 4148 |         "strip-ansi": "^6.0.1"
 4149 |       },
 4150 |       "engines": {
 4151 |         "node": ">=8"
 4152 |       }
 4153 |     },
 4154 |     "node_modules/cliui/node_modules/strip-ansi": {
 4155 |       "version": "6.0.1",
 4156 |       "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
 4157 |       "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
 4158 |       "dev": true,
 4159 |       "license": "MIT",
 4160 |       "dependencies": {
 4161 |         "ansi-regex": "^5.0.1"
 4162 |       },
 4163 |       "engines": {
 4164 |         "node": ">=8"
 4165 |       }
 4166 |     },
 4167 |     "node_modules/cliui/node_modules/wrap-ansi": {
 4168 |       "version": "7.0.0",
 4169 |       "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
 4170 |       "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
 4171 |       "dev": true,
 4172 |       "license": "MIT",
 4173 |       "dependencies": {
 4174 |         "ansi-styles": "^4.0.0",
 4175 |         "string-width": "^4.1.0",
 4176 |         "strip-ansi": "^6.0.0"
 4177 |       },
 4178 |       "engines": {
 4179 |         "node": ">=10"
 4180 |       },
 4181 |       "funding": {
 4182 |         "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
 4183 |       }
 4184 |     },
 4185 |     "node_modules/code-excerpt": {
 4186 |       "version": "4.0.0",
 4187 |       "resolved": "https://registry.npmjs.org/code-excerpt/-/code-excerpt-4.0.0.tgz",
 4188 |       "integrity": "sha512-xxodCmBen3iy2i0WtAK8FlFNrRzjUqjRsMfho58xT/wvZU1YTM3fCnRjcy1gJPMepaRlgm/0e6w8SpWHpn3/cA==",
 4189 |       "dev": true,
 4190 |       "license": "MIT",
 4191 |       "dependencies": {
 4192 |         "convert-to-spaces": "^2.0.1"
 4193 |       },
 4194 |       "engines": {
 4195 |         "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
 4196 |       }
 4197 |     },
 4198 |     "node_modules/collapse-white-space": {
 4199 |       "version": "2.1.0",
 4200 |       "resolved": "https://registry.npmjs.org/collapse-white-space/-/collapse-white-space-2.1.0.tgz",
 4201 |       "integrity": "sha512-loKTxY1zCOuG4j9f6EPnuyyYkf58RnhhWTvRoZEokgB+WbdXehfjFviyOVYkqzEWz1Q5kRiZdBYS5SwxbQYwzw==",
 4202 |       "dev": true,
 4203 |       "license": "MIT",
 4204 |       "funding": {
 4205 |         "type": "github",
 4206 |         "url": "https://github.com/sponsors/wooorm"
 4207 |       }
 4208 |     },
 4209 |     "node_modules/color": {
 4210 |       "version": "4.2.3",
 4211 |       "resolved": "https://registry.npmjs.org/color/-/color-4.2.3.tgz",
 4212 |       "integrity": "sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==",
 4213 |       "dev": true,
 4214 |       "license": "MIT",
 4215 |       "dependencies": {
 4216 |         "color-convert": "^2.0.1",
 4217 |         "color-string": "^1.9.0"
 4218 |       },
 4219 |       "engines": {
 4220 |         "node": ">=12.5.0"
 4221 |       }
 4222 |     },
 4223 |     "node_modules/color-convert": {
 4224 |       "version": "2.0.1",
 4225 |       "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
 4226 |       "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
 4227 |       "dev": true,
 4228 |       "license": "MIT",
 4229 |       "dependencies": {
 4230 |         "color-name": "~1.1.4"
 4231 |       },
 4232 |       "engines": {
 4233 |         "node": ">=7.0.0"
 4234 |       }
 4235 |     },
 4236 |     "node_modules/color-name": {
 4237 |       "version": "1.1.4",
 4238 |       "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
 4239 |       "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
 4240 |       "dev": true,
 4241 |       "license": "MIT"
 4242 |     },
 4243 |     "node_modules/color-string": {
 4244 |       "version": "1.9.1",
 4245 |       "resolved": "https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz",
 4246 |       "integrity": "sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==",
 4247 |       "dev": true,
 4248 |       "license": "MIT",
 4249 |       "dependencies": {
 4250 |         "color-name": "^1.0.0",
 4251 |         "simple-swizzle": "^0.2.2"
 4252 |       }
 4253 |     },
 4254 |     "node_modules/combined-stream": {
 4255 |       "version": "1.0.8",
 4256 |       "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
 4257 |       "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
 4258 |       "dev": true,
 4259 |       "license": "MIT",
 4260 |       "dependencies": {
 4261 |         "delayed-stream": "~1.0.0"
 4262 |       },
 4263 |       "engines": {
 4264 |         "node": ">= 0.8"
 4265 |       }
 4266 |     },
 4267 |     "node_modules/comma-separated-tokens": {
 4268 |       "version": "2.0.3",
 4269 |       "resolved": "https://registry.npmjs.org/comma-separated-tokens/-/comma-separated-tokens-2.0.3.tgz",
 4270 |       "integrity": "sha512-Fu4hJdvzeylCfQPp9SGWidpzrMs7tTrlu6Vb8XGaRGck8QSNZJJp538Wrb60Lax4fPwR64ViY468OIUTbRlGZg==",
 4271 |       "dev": true,
 4272 |       "license": "MIT",
 4273 |       "funding": {
 4274 |         "type": "github",
 4275 |         "url": "https://github.com/sponsors/wooorm"
 4276 |       }
 4277 |     },
 4278 |     "node_modules/commander": {
 4279 |       "version": "8.3.0",
 4280 |       "resolved": "https://registry.npmjs.org/commander/-/commander-8.3.0.tgz",
 4281 |       "integrity": "sha512-OkTL9umf+He2DZkUq8f8J9of7yL6RJKI24dVITBmNfZBmri9zYZQrKkuXiKhyfPSu8tUhnVBB1iKXevvnlR4Ww==",
 4282 |       "dev": true,
 4283 |       "license": "MIT",
 4284 |       "engines": {
 4285 |         "node": ">= 12"
 4286 |       }
 4287 |     },
 4288 |     "node_modules/concat-map": {
 4289 |       "version": "0.0.1",
 4290 |       "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
 4291 |       "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
 4292 |       "dev": true,
 4293 |       "license": "MIT"
 4294 |     },
 4295 |     "node_modules/content-disposition": {
 4296 |       "version": "0.5.4",
 4297 |       "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
 4298 |       "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
 4299 |       "dev": true,
 4300 |       "license": "MIT",
 4301 |       "dependencies": {
 4302 |         "safe-buffer": "5.2.1"
 4303 |       },
 4304 |       "engines": {
 4305 |         "node": ">= 0.6"
 4306 |       }
 4307 |     },
 4308 |     "node_modules/content-type": {
 4309 |       "version": "1.0.5",
 4310 |       "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
 4311 |       "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
 4312 |       "dev": true,
 4313 |       "license": "MIT",
 4314 |       "engines": {
 4315 |         "node": ">= 0.6"
 4316 |       }
 4317 |     },
 4318 |     "node_modules/convert-to-spaces": {
 4319 |       "version": "2.0.1",
 4320 |       "resolved": "https://registry.npmjs.org/convert-to-spaces/-/convert-to-spaces-2.0.1.tgz",
 4321 |       "integrity": "sha512-rcQ1bsQO9799wq24uE5AM2tAILy4gXGIK/njFWcVQkGNZ96edlpY+A7bjwvzjYvLDyzmG1MmMLZhpcsb+klNMQ==",
 4322 |       "dev": true,
 4323 |       "license": "MIT",
 4324 |       "engines": {
 4325 |         "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
 4326 |       }
 4327 |     },
 4328 |     "node_modules/cookie": {
 4329 |       "version": "0.7.1",
 4330 |       "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
 4331 |       "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
 4332 |       "dev": true,
 4333 |       "license": "MIT",
 4334 |       "engines": {
 4335 |         "node": ">= 0.6"
 4336 |       }
 4337 |     },
 4338 |     "node_modules/cookie-signature": {
 4339 |       "version": "1.0.6",
 4340 |       "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
 4341 |       "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
 4342 |       "dev": true,
 4343 |       "license": "MIT"
 4344 |     },
 4345 |     "node_modules/cors": {
 4346 |       "version": "2.8.5",
 4347 |       "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
 4348 |       "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
 4349 |       "dev": true,
 4350 |       "license": "MIT",
 4351 |       "dependencies": {
 4352 |         "object-assign": "^4",
 4353 |         "vary": "^1"
 4354 |       },
 4355 |       "engines": {
 4356 |         "node": ">= 0.10"
 4357 |       }
 4358 |     },
 4359 |     "node_modules/cosmiconfig": {
 4360 |       "version": "9.0.0",
 4361 |       "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-9.0.0.tgz",
 4362 |       "integrity": "sha512-itvL5h8RETACmOTFc4UfIyB2RfEHi71Ax6E/PivVxq9NseKbOWpeyHEOIbmAw1rs8Ak0VursQNww7lf7YtUwzg==",
 4363 |       "dev": true,
 4364 |       "license": "MIT",
 4365 |       "dependencies": {
 4366 |         "env-paths": "^2.2.1",
 4367 |         "import-fresh": "^3.3.0",
 4368 |         "js-yaml": "^4.1.0",
 4369 |         "parse-json": "^5.2.0"
 4370 |       },
 4371 |       "engines": {
 4372 |         "node": ">=14"
 4373 |       },
 4374 |       "funding": {
 4375 |         "url": "https://github.com/sponsors/d-fischer"
 4376 |       },
 4377 |       "peerDependencies": {
 4378 |         "typescript": ">=4.9.5"
 4379 |       },
 4380 |       "peerDependenciesMeta": {
 4381 |         "typescript": {
 4382 |           "optional": true
 4383 |         }
 4384 |       }
 4385 |     },
 4386 |     "node_modules/create-require": {
 4387 |       "version": "1.1.1",
 4388 |       "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
 4389 |       "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==",
 4390 |       "dev": true,
 4391 |       "license": "MIT"
 4392 |     },
 4393 |     "node_modules/cross-spawn": {
 4394 |       "version": "7.0.6",
 4395 |       "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
 4396 |       "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
 4397 |       "dev": true,
 4398 |       "license": "MIT",
 4399 |       "dependencies": {
 4400 |         "path-key": "^3.1.0",
 4401 |         "shebang-command": "^2.0.0",
 4402 |         "which": "^2.0.1"
 4403 |       },
 4404 |       "engines": {
 4405 |         "node": ">= 8"
 4406 |       }
 4407 |     },
 4408 |     "node_modules/cssesc": {
 4409 |       "version": "3.0.0",
 4410 |       "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
 4411 |       "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
 4412 |       "dev": true,
 4413 |       "license": "MIT",
 4414 |       "bin": {
 4415 |         "cssesc": "bin/cssesc"
 4416 |       },
 4417 |       "engines": {
 4418 |         "node": ">=4"
 4419 |       }
 4420 |     },
 4421 |     "node_modules/csstype": {
 4422 |       "version": "3.1.3",
 4423 |       "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
 4424 |       "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
 4425 |       "dev": true,
 4426 |       "license": "MIT",
 4427 |       "peer": true
 4428 |     },
 4429 |     "node_modules/data-uri-to-buffer": {
 4430 |       "version": "6.0.2",
 4431 |       "resolved": "https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-6.0.2.tgz",
 4432 |       "integrity": "sha512-7hvf7/GW8e86rW0ptuwS3OcBGDjIi6SZva7hCyWC0yYry2cOPmLIjXAUHI6DK2HsnwJd9ifmt57i8eV2n4YNpw==",
 4433 |       "dev": true,
 4434 |       "license": "MIT",
 4435 |       "engines": {
 4436 |         "node": ">= 14"
 4437 |       }
 4438 |     },
 4439 |     "node_modules/data-view-buffer": {
 4440 |       "version": "1.0.2",
 4441 |       "resolved": "https://registry.npmjs.org/data-view-buffer/-/data-view-buffer-1.0.2.tgz",
 4442 |       "integrity": "sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==",
 4443 |       "dev": true,
 4444 |       "license": "MIT",
 4445 |       "dependencies": {
 4446 |         "call-bound": "^1.0.3",
 4447 |         "es-errors": "^1.3.0",
 4448 |         "is-data-view": "^1.0.2"
 4449 |       },
 4450 |       "engines": {
 4451 |         "node": ">= 0.4"
 4452 |       },
 4453 |       "funding": {
 4454 |         "url": "https://github.com/sponsors/ljharb"
 4455 |       }
 4456 |     },
 4457 |     "node_modules/data-view-byte-length": {
 4458 |       "version": "1.0.2",
 4459 |       "resolved": "https://registry.npmjs.org/data-view-byte-length/-/data-view-byte-length-1.0.2.tgz",
 4460 |       "integrity": "sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==",
 4461 |       "dev": true,
 4462 |       "license": "MIT",
 4463 |       "dependencies": {
 4464 |         "call-bound": "^1.0.3",
 4465 |         "es-errors": "^1.3.0",
 4466 |         "is-data-view": "^1.0.2"
 4467 |       },
 4468 |       "engines": {
 4469 |         "node": ">= 0.4"
 4470 |       },
 4471 |       "funding": {
 4472 |         "url": "https://github.com/sponsors/inspect-js"
 4473 |       }
 4474 |     },
 4475 |     "node_modules/data-view-byte-offset": {
 4476 |       "version": "1.0.1",
 4477 |       "resolved": "https://registry.npmjs.org/data-view-byte-offset/-/data-view-byte-offset-1.0.1.tgz",
 4478 |       "integrity": "sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==",
 4479 |       "dev": true,
 4480 |       "license": "MIT",
 4481 |       "dependencies": {
 4482 |         "call-bound": "^1.0.2",
 4483 |         "es-errors": "^1.3.0",
 4484 |         "is-data-view": "^1.0.1"
 4485 |       },
 4486 |       "engines": {
 4487 |         "node": ">= 0.4"
 4488 |       },
 4489 |       "funding": {
 4490 |         "url": "https://github.com/sponsors/ljharb"
 4491 |       }
 4492 |     },
 4493 |     "node_modules/debug": {
 4494 |       "version": "4.4.1",
 4495 |       "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
 4496 |       "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
 4497 |       "dev": true,
 4498 |       "license": "MIT",
 4499 |       "dependencies": {
 4500 |         "ms": "^2.1.3"
 4501 |       },
 4502 |       "engines": {
 4503 |         "node": ">=6.0"
 4504 |       },
 4505 |       "peerDependenciesMeta": {
 4506 |         "supports-color": {
 4507 |           "optional": true
 4508 |         }
 4509 |       }
 4510 |     },
 4511 |     "node_modules/decode-named-character-reference": {
 4512 |       "version": "1.2.0",
 4513 |       "resolved": "https://registry.npmjs.org/decode-named-character-reference/-/decode-named-character-reference-1.2.0.tgz",
 4514 |       "integrity": "sha512-c6fcElNV6ShtZXmsgNgFFV5tVX2PaV4g+MOAkb8eXHvn6sryJBrZa9r0zV6+dtTyoCKxtDy5tyQ5ZwQuidtd+Q==",
 4515 |       "dev": true,
 4516 |       "license": "MIT",
 4517 |       "dependencies": {
 4518 |         "character-entities": "^2.0.0"
 4519 |       },
 4520 |       "funding": {
 4521 |         "type": "github",
 4522 |         "url": "https://github.com/sponsors/wooorm"
 4523 |       }
 4524 |     },
 4525 |     "node_modules/decompress-response": {
 4526 |       "version": "6.0.0",
 4527 |       "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-6.0.0.tgz",
 4528 |       "integrity": "sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==",
 4529 |       "dev": true,
 4530 |       "license": "MIT",
 4531 |       "dependencies": {
 4532 |         "mimic-response": "^3.1.0"
 4533 |       },
 4534 |       "engines": {
 4535 |         "node": ">=10"
 4536 |       },
 4537 |       "funding": {
 4538 |         "url": "https://github.com/sponsors/sindresorhus"
 4539 |       }
 4540 |     },
 4541 |     "node_modules/decompress-response/node_modules/mimic-response": {
 4542 |       "version": "3.1.0",
 4543 |       "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-3.1.0.tgz",
 4544 |       "integrity": "sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ==",
 4545 |       "dev": true,
 4546 |       "license": "MIT",
 4547 |       "engines": {
 4548 |         "node": ">=10"
 4549 |       },
 4550 |       "funding": {
 4551 |         "url": "https://github.com/sponsors/sindresorhus"
 4552 |       }
 4553 |     },
 4554 |     "node_modules/defer-to-connect": {
 4555 |       "version": "2.0.1",
 4556 |       "resolved": "https://registry.npmjs.org/defer-to-connect/-/defer-to-connect-2.0.1.tgz",
 4557 |       "integrity": "sha512-4tvttepXG1VaYGrRibk5EwJd1t4udunSOVMdLSAL6mId1ix438oPwPZMALY41FCijukO1L0twNcGsdzS7dHgDg==",
 4558 |       "dev": true,
 4559 |       "license": "MIT",
 4560 |       "engines": {
 4561 |         "node": ">=10"
 4562 |       }
 4563 |     },
 4564 |     "node_modules/define-data-property": {
 4565 |       "version": "1.1.4",
 4566 |       "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
 4567 |       "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
 4568 |       "dev": true,
 4569 |       "license": "MIT",
 4570 |       "dependencies": {
 4571 |         "es-define-property": "^1.0.0",
 4572 |         "es-errors": "^1.3.0",
 4573 |         "gopd": "^1.0.1"
 4574 |       },
 4575 |       "engines": {
 4576 |         "node": ">= 0.4"
 4577 |       },
 4578 |       "funding": {
 4579 |         "url": "https://github.com/sponsors/ljharb"
 4580 |       }
 4581 |     },
 4582 |     "node_modules/define-lazy-prop": {
 4583 |       "version": "2.0.0",
 4584 |       "resolved": "https://registry.npmjs.org/define-lazy-prop/-/define-lazy-prop-2.0.0.tgz",
 4585 |       "integrity": "sha512-Ds09qNh8yw3khSjiJjiUInaGX9xlqZDY7JVryGxdxV7NPeuqQfplOpQ66yJFZut3jLa5zOwkXw1g9EI2uKh4Og==",
 4586 |       "dev": true,
 4587 |       "license": "MIT",
 4588 |       "engines": {
 4589 |         "node": ">=8"
 4590 |       }
 4591 |     },
 4592 |     "node_modules/define-properties": {
 4593 |       "version": "1.2.1",
 4594 |       "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
 4595 |       "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
 4596 |       "dev": true,
 4597 |       "license": "MIT",
 4598 |       "dependencies": {
 4599 |         "define-data-property": "^1.0.1",
 4600 |         "has-property-descriptors": "^1.0.0",
 4601 |         "object-keys": "^1.1.1"
 4602 |       },
 4603 |       "engines": {
 4604 |         "node": ">= 0.4"
 4605 |       },
 4606 |       "funding": {
 4607 |         "url": "https://github.com/sponsors/ljharb"
 4608 |       }
 4609 |     },
 4610 |     "node_modules/degenerator": {
 4611 |       "version": "5.0.1",
 4612 |       "resolved": "https://registry.npmjs.org/degenerator/-/degenerator-5.0.1.tgz",
 4613 |       "integrity": "sha512-TllpMR/t0M5sqCXfj85i4XaAzxmS5tVA16dqvdkMwGmzI+dXLXnw3J+3Vdv7VKw+ThlTMboK6i9rnZ6Nntj5CQ==",
 4614 |       "dev": true,
 4615 |       "license": "MIT",
 4616 |       "dependencies": {
 4617 |         "ast-types": "^0.13.4",
 4618 |         "escodegen": "^2.1.0",
 4619 |         "esprima": "^4.0.1"
 4620 |       },
 4621 |       "engines": {
 4622 |         "node": ">= 14"
 4623 |       }
 4624 |     },
 4625 |     "node_modules/delayed-stream": {
 4626 |       "version": "1.0.0",
 4627 |       "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
 4628 |       "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
 4629 |       "dev": true,
 4630 |       "license": "MIT",
 4631 |       "engines": {
 4632 |         "node": ">=0.4.0"
 4633 |       }
 4634 |     },
 4635 |     "node_modules/depd": {
 4636 |       "version": "2.0.0",
 4637 |       "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
 4638 |       "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
 4639 |       "dev": true,
 4640 |       "license": "MIT",
 4641 |       "engines": {
 4642 |         "node": ">= 0.8"
 4643 |       }
 4644 |     },
 4645 |     "node_modules/dependency-graph": {
 4646 |       "version": "0.11.0",
 4647 |       "resolved": "https://registry.npmjs.org/dependency-graph/-/dependency-graph-0.11.0.tgz",
 4648 |       "integrity": "sha512-JeMq7fEshyepOWDfcfHK06N3MhyPhz++vtqWhMT5O9A3K42rdsEDpfdVqjaqaAhsw6a+ZqeDvQVtD0hFHQWrzg==",
 4649 |       "dev": true,
 4650 |       "license": "MIT",
 4651 |       "engines": {
 4652 |         "node": ">= 0.6.0"
 4653 |       }
 4654 |     },
 4655 |     "node_modules/dequal": {
 4656 |       "version": "2.0.3",
 4657 |       "resolved": "https://registry.npmjs.org/dequal/-/dequal-2.0.3.tgz",
 4658 |       "integrity": "sha512-0je+qPKHEMohvfRTCEo3CrPG6cAzAYgmzKyxRiYSSDkS6eGJdyVJm7WaYA5ECaAD9wLB2T4EEeymA5aFVcYXCA==",
 4659 |       "dev": true,
 4660 |       "license": "MIT",
 4661 |       "engines": {
 4662 |         "node": ">=6"
 4663 |       }
 4664 |     },
 4665 |     "node_modules/destroy": {
 4666 |       "version": "1.2.0",
 4667 |       "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
 4668 |       "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
 4669 |       "dev": true,
 4670 |       "license": "MIT",
 4671 |       "engines": {
 4672 |         "node": ">= 0.8",
 4673 |         "npm": "1.2.8000 || >= 1.4.16"
 4674 |       }
 4675 |     },
 4676 |     "node_modules/detect-libc": {
 4677 |       "version": "2.0.4",
 4678 |       "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz",
 4679 |       "integrity": "sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==",
 4680 |       "dev": true,
 4681 |       "license": "Apache-2.0",
 4682 |       "engines": {
 4683 |         "node": ">=8"
 4684 |       }
 4685 |     },
 4686 |     "node_modules/detect-port": {
 4687 |       "version": "1.6.1",
 4688 |       "resolved": "https://registry.npmjs.org/detect-port/-/detect-port-1.6.1.tgz",
 4689 |       "integrity": "sha512-CmnVc+Hek2egPx1PeTFVta2W78xy2K/9Rkf6cC4T59S50tVnzKj+tnx5mmx5lwvCkujZ4uRrpRSuV+IVs3f90Q==",
 4690 |       "dev": true,
 4691 |       "license": "MIT",
 4692 |       "dependencies": {
 4693 |         "address": "^1.0.1",
 4694 |         "debug": "4"
 4695 |       },
 4696 |       "bin": {
 4697 |         "detect": "bin/detect-port.js",
 4698 |         "detect-port": "bin/detect-port.js"
 4699 |       },
 4700 |       "engines": {
 4701 |         "node": ">= 4.0.0"
 4702 |       }
 4703 |     },
 4704 |     "node_modules/devlop": {
 4705 |       "version": "1.1.0",
 4706 |       "resolved": "https://registry.npmjs.org/devlop/-/devlop-1.1.0.tgz",
 4707 |       "integrity": "sha512-RWmIqhcFf1lRYBvNmr7qTNuyCt/7/ns2jbpp1+PalgE/rDQcBT0fioSMUpJ93irlUhC5hrg4cYqe6U+0ImW0rA==",
 4708 |       "dev": true,
 4709 |       "license": "MIT",
 4710 |       "dependencies": {
 4711 |         "dequal": "^2.0.0"
 4712 |       },
 4713 |       "funding": {
 4714 |         "type": "github",
 4715 |         "url": "https://github.com/sponsors/wooorm"
 4716 |       }
 4717 |     },
 4718 |     "node_modules/devtools-protocol": {
 4719 |       "version": "0.0.1312386",
 4720 |       "resolved": "https://registry.npmjs.org/devtools-protocol/-/devtools-protocol-0.0.1312386.tgz",
 4721 |       "integrity": "sha512-DPnhUXvmvKT2dFA/j7B+riVLUt9Q6RKJlcppojL5CoRywJJKLDYnRlw0gTFKfgDPHP5E04UoB71SxoJlVZy8FA==",
 4722 |       "dev": true,
 4723 |       "license": "BSD-3-Clause"
 4724 |     },
 4725 |     "node_modules/didyoumean": {
 4726 |       "version": "1.2.2",
 4727 |       "resolved": "https://registry.npmjs.org/didyoumean/-/didyoumean-1.2.2.tgz",
 4728 |       "integrity": "sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==",
 4729 |       "dev": true,
 4730 |       "license": "Apache-2.0"
 4731 |     },
 4732 |     "node_modules/diff": {
 4733 |       "version": "4.0.2",
 4734 |       "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
 4735 |       "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
 4736 |       "dev": true,
 4737 |       "license": "BSD-3-Clause",
 4738 |       "engines": {
 4739 |         "node": ">=0.3.1"
 4740 |       }
 4741 |     },
 4742 |     "node_modules/dlv": {
 4743 |       "version": "1.1.3",
 4744 |       "resolved": "https://registry.npmjs.org/dlv/-/dlv-1.1.3.tgz",
 4745 |       "integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==",
 4746 |       "dev": true,
 4747 |       "license": "MIT"
 4748 |     },
 4749 |     "node_modules/dns-packet": {
 4750 |       "version": "5.6.1",
 4751 |       "resolved": "https://registry.npmjs.org/dns-packet/-/dns-packet-5.6.1.tgz",
 4752 |       "integrity": "sha512-l4gcSouhcgIKRvyy99RNVOgxXiicE+2jZoNmaNmZ6JXiGajBOJAesk1OBlJuM5k2c+eudGdLxDqXuPCKIj6kpw==",
 4753 |       "dev": true,
 4754 |       "license": "MIT",
 4755 |       "dependencies": {
 4756 |         "@leichtgewicht/ip-codec": "^2.0.1"
 4757 |       },
 4758 |       "engines": {
 4759 |         "node": ">=6"
 4760 |       }
 4761 |     },
 4762 |     "node_modules/dns-socket": {
 4763 |       "version": "4.2.2",
 4764 |       "resolved": "https://registry.npmjs.org/dns-socket/-/dns-socket-4.2.2.tgz",
 4765 |       "integrity": "sha512-BDeBd8najI4/lS00HSKpdFia+OvUMytaVjfzR9n5Lq8MlZRSvtbI+uLtx1+XmQFls5wFU9dssccTmQQ6nfpjdg==",
 4766 |       "dev": true,
 4767 |       "license": "MIT",
 4768 |       "dependencies": {
 4769 |         "dns-packet": "^5.2.4"
 4770 |       },
 4771 |       "engines": {
 4772 |         "node": ">=6"
 4773 |       }
 4774 |     },
 4775 |     "node_modules/dunder-proto": {
 4776 |       "version": "1.0.1",
 4777 |       "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
 4778 |       "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
 4779 |       "dev": true,
 4780 |       "license": "MIT",
 4781 |       "dependencies": {
 4782 |         "call-bind-apply-helpers": "^1.0.1",
 4783 |         "es-errors": "^1.3.0",
 4784 |         "gopd": "^1.2.0"
 4785 |       },
 4786 |       "engines": {
 4787 |         "node": ">= 0.4"
 4788 |       }
 4789 |     },
 4790 |     "node_modules/eastasianwidth": {
 4791 |       "version": "0.2.0",
 4792 |       "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
 4793 |       "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
 4794 |       "dev": true,
 4795 |       "license": "MIT"
 4796 |     },
 4797 |     "node_modules/ee-first": {
 4798 |       "version": "1.1.1",
 4799 |       "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
 4800 |       "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
 4801 |       "dev": true,
 4802 |       "license": "MIT"
 4803 |     },
 4804 |     "node_modules/emoji-regex": {
 4805 |       "version": "9.2.2",
 4806 |       "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
 4807 |       "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
 4808 |       "dev": true,
 4809 |       "license": "MIT"
 4810 |     },
 4811 |     "node_modules/encodeurl": {
 4812 |       "version": "2.0.0",
 4813 |       "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
 4814 |       "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
 4815 |       "dev": true,
 4816 |       "license": "MIT",
 4817 |       "engines": {
 4818 |         "node": ">= 0.8"
 4819 |       }
 4820 |     },
 4821 |     "node_modules/end-of-stream": {
 4822 |       "version": "1.4.5",
 4823 |       "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.5.tgz",
 4824 |       "integrity": "sha512-ooEGc6HP26xXq/N+GCGOT0JKCLDGrq2bQUZrQ7gyrJiZANJ/8YDTxTpQBXGMn+WbIQXNVpyWymm7KYVICQnyOg==",
 4825 |       "dev": true,
 4826 |       "license": "MIT",
 4827 |       "dependencies": {
 4828 |         "once": "^1.4.0"
 4829 |       }
 4830 |     },
 4831 |     "node_modules/engine.io": {
 4832 |       "version": "6.6.4",
 4833 |       "resolved": "https://registry.npmjs.org/engine.io/-/engine.io-6.6.4.tgz",
 4834 |       "integrity": "sha512-ZCkIjSYNDyGn0R6ewHDtXgns/Zre/NT6Agvq1/WobF7JXgFff4SeDroKiCO3fNJreU9YG429Sc81o4w5ok/W5g==",
 4835 |       "dev": true,
 4836 |       "license": "MIT",
 4837 |       "dependencies": {
 4838 |         "@types/cors": "^2.8.12",
 4839 |         "@types/node": ">=10.0.0",
 4840 |         "accepts": "~1.3.4",
 4841 |         "base64id": "2.0.0",
 4842 |         "cookie": "~0.7.2",
 4843 |         "cors": "~2.8.5",
 4844 |         "debug": "~4.3.1",
 4845 |         "engine.io-parser": "~5.2.1",
 4846 |         "ws": "~8.17.1"
 4847 |       },
 4848 |       "engines": {
 4849 |         "node": ">=10.2.0"
 4850 |       }
 4851 |     },
 4852 |     "node_modules/engine.io-parser": {
 4853 |       "version": "5.2.3",
 4854 |       "resolved": "https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-5.2.3.tgz",
 4855 |       "integrity": "sha512-HqD3yTBfnBxIrbnM1DoD6Pcq8NECnh8d4As1Qgh0z5Gg3jRRIqijury0CL3ghu/edArpUYiYqQiDUQBIs4np3Q==",
 4856 |       "dev": true,
 4857 |       "license": "MIT",
 4858 |       "engines": {
 4859 |         "node": ">=10.0.0"
 4860 |       }
 4861 |     },
 4862 |     "node_modules/engine.io/node_modules/cookie": {
 4863 |       "version": "0.7.2",
 4864 |       "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.2.tgz",
 4865 |       "integrity": "sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==",
 4866 |       "dev": true,
 4867 |       "license": "MIT",
 4868 |       "engines": {
 4869 |         "node": ">= 0.6"
 4870 |       }
 4871 |     },
 4872 |     "node_modules/engine.io/node_modules/debug": {
 4873 |       "version": "4.3.7",
 4874 |       "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
 4875 |       "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
 4876 |       "dev": true,
 4877 |       "license": "MIT",
 4878 |       "dependencies": {
 4879 |         "ms": "^2.1.3"
 4880 |       },
 4881 |       "engines": {
 4882 |         "node": ">=6.0"
 4883 |       },
 4884 |       "peerDependenciesMeta": {
 4885 |         "supports-color": {
 4886 |           "optional": true
 4887 |         }
 4888 |       }
 4889 |     },
 4890 |     "node_modules/engine.io/node_modules/ws": {
 4891 |       "version": "8.17.1",
 4892 |       "resolved": "https://registry.npmjs.org/ws/-/ws-8.17.1.tgz",
 4893 |       "integrity": "sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==",
 4894 |       "dev": true,
 4895 |       "license": "MIT",
 4896 |       "engines": {
 4897 |         "node": ">=10.0.0"
 4898 |       },
 4899 |       "peerDependencies": {
 4900 |         "bufferutil": "^4.0.1",
 4901 |         "utf-8-validate": ">=5.0.2"
 4902 |       },
 4903 |       "peerDependenciesMeta": {
 4904 |         "bufferutil": {
 4905 |           "optional": true
 4906 |         },
 4907 |         "utf-8-validate": {
 4908 |           "optional": true
 4909 |         }
 4910 |       }
 4911 |     },
 4912 |     "node_modules/entities": {
 4913 |       "version": "6.0.1",
 4914 |       "resolved": "https://registry.npmjs.org/entities/-/entities-6.0.1.tgz",
 4915 |       "integrity": "sha512-aN97NXWF6AWBTahfVOIrB/NShkzi5H7F9r1s9mD3cDj4Ko5f2qhhVoYMibXF7GlLveb/D2ioWay8lxI97Ven3g==",
 4916 |       "dev": true,
 4917 |       "license": "BSD-2-Clause",
 4918 |       "engines": {
 4919 |         "node": ">=0.12"
 4920 |       },
 4921 |       "funding": {
 4922 |         "url": "https://github.com/fb55/entities?sponsor=1"
 4923 |       }
 4924 |     },
 4925 |     "node_modules/env-paths": {
 4926 |       "version": "2.2.1",
 4927 |       "resolved": "https://registry.npmjs.org/env-paths/-/env-paths-2.2.1.tgz",
 4928 |       "integrity": "sha512-+h1lkLKhZMTYjog1VEpJNG7NZJWcuc2DDk/qsqSTRRCOXiLjeQ1d1/udrUGhqMxUgAlwKNZ0cf2uqan5GLuS2A==",
 4929 |       "dev": true,
 4930 |       "license": "MIT",
 4931 |       "engines": {
 4932 |         "node": ">=6"
 4933 |       }
 4934 |     },
 4935 |     "node_modules/environment": {
 4936 |       "version": "1.1.0",
 4937 |       "resolved": "https://registry.npmjs.org/environment/-/environment-1.1.0.tgz",
 4938 |       "integrity": "sha512-xUtoPkMggbz0MPyPiIWr1Kp4aeWJjDZ6SMvURhimjdZgsRuDplF5/s9hcgGhyXMhs+6vpnuoiZ2kFiu3FMnS8Q==",
 4939 |       "dev": true,
 4940 |       "license": "MIT",
 4941 |       "engines": {
 4942 |         "node": ">=18"
 4943 |       },
 4944 |       "funding": {
 4945 |         "url": "https://github.com/sponsors/sindresorhus"
 4946 |       }
 4947 |     },
 4948 |     "node_modules/error-ex": {
 4949 |       "version": "1.3.2",
 4950 |       "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
 4951 |       "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
 4952 |       "dev": true,
 4953 |       "license": "MIT",
 4954 |       "dependencies": {
 4955 |         "is-arrayish": "^0.2.1"
 4956 |       }
 4957 |     },
 4958 |     "node_modules/es-abstract": {
 4959 |       "version": "1.24.0",
 4960 |       "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.24.0.tgz",
 4961 |       "integrity": "sha512-WSzPgsdLtTcQwm4CROfS5ju2Wa1QQcVeT37jFjYzdFz1r9ahadC8B8/a4qxJxM+09F18iumCdRmlr96ZYkQvEg==",
 4962 |       "dev": true,
 4963 |       "license": "MIT",
 4964 |       "dependencies": {
 4965 |         "array-buffer-byte-length": "^1.0.2",
 4966 |         "arraybuffer.prototype.slice": "^1.0.4",
 4967 |         "available-typed-arrays": "^1.0.7",
 4968 |         "call-bind": "^1.0.8",
 4969 |         "call-bound": "^1.0.4",
 4970 |         "data-view-buffer": "^1.0.2",
 4971 |         "data-view-byte-length": "^1.0.2",
 4972 |         "data-view-byte-offset": "^1.0.1",
 4973 |         "es-define-property": "^1.0.1",
 4974 |         "es-errors": "^1.3.0",
 4975 |         "es-object-atoms": "^1.1.1",
 4976 |         "es-set-tostringtag": "^2.1.0",
 4977 |         "es-to-primitive": "^1.3.0",
 4978 |         "function.prototype.name": "^1.1.8",
 4979 |         "get-intrinsic": "^1.3.0",
 4980 |         "get-proto": "^1.0.1",
 4981 |         "get-symbol-description": "^1.1.0",
 4982 |         "globalthis": "^1.0.4",
 4983 |         "gopd": "^1.2.0",
 4984 |         "has-property-descriptors": "^1.0.2",
 4985 |         "has-proto": "^1.2.0",
 4986 |         "has-symbols": "^1.1.0",
 4987 |         "hasown": "^2.0.2",
 4988 |         "internal-slot": "^1.1.0",
 4989 |         "is-array-buffer": "^3.0.5",
 4990 |         "is-callable": "^1.2.7",
 4991 |         "is-data-view": "^1.0.2",
 4992 |         "is-negative-zero": "^2.0.3",
 4993 |         "is-regex": "^1.2.1",
 4994 |         "is-set": "^2.0.3",
 4995 |         "is-shared-array-buffer": "^1.0.4",
 4996 |         "is-string": "^1.1.1",
 4997 |         "is-typed-array": "^1.1.15",
 4998 |         "is-weakref": "^1.1.1",
 4999 |         "math-intrinsics": "^1.1.0",
 5000 |         "object-inspect": "^1.13.4",
 5001 |         "object-keys": "^1.1.1",
 5002 |         "object.assign": "^4.1.7",
 5003 |         "own-keys": "^1.0.1",
 5004 |         "regexp.prototype.flags": "^1.5.4",
 5005 |         "safe-array-concat": "^1.1.3",
 5006 |         "safe-push-apply": "^1.0.0",
 5007 |         "safe-regex-test": "^1.1.0",
 5008 |         "set-proto": "^1.0.0",
 5009 |         "stop-iteration-iterator": "^1.1.0",
 5010 |         "string.prototype.trim": "^1.2.10",
 5011 |         "string.prototype.trimend": "^1.0.9",
 5012 |         "string.prototype.trimstart": "^1.0.8",
 5013 |         "typed-array-buffer": "^1.0.3",
 5014 |         "typed-array-byte-length": "^1.0.3",
 5015 |         "typed-array-byte-offset": "^1.0.4",
 5016 |         "typed-array-length": "^1.0.7",
 5017 |         "unbox-primitive": "^1.1.0",
 5018 |         "which-typed-array": "^1.1.19"
 5019 |       },
 5020 |       "engines": {
 5021 |         "node": ">= 0.4"
 5022 |       },
 5023 |       "funding": {
 5024 |         "url": "https://github.com/sponsors/ljharb"
 5025 |       }
 5026 |     },
 5027 |     "node_modules/es-aggregate-error": {
 5028 |       "version": "1.0.14",
 5029 |       "resolved": "https://registry.npmjs.org/es-aggregate-error/-/es-aggregate-error-1.0.14.tgz",
 5030 |       "integrity": "sha512-3YxX6rVb07B5TV11AV5wsL7nQCHXNwoHPsQC8S4AmBiqYhyNCJ5BRKXkXyDJvs8QzXN20NgRtxe3dEEQD9NLHA==",
 5031 |       "dev": true,
 5032 |       "license": "MIT",
 5033 |       "dependencies": {
 5034 |         "define-data-property": "^1.1.4",
 5035 |         "define-properties": "^1.2.1",
 5036 |         "es-abstract": "^1.24.0",
 5037 |         "es-errors": "^1.3.0",
 5038 |         "function-bind": "^1.1.2",
 5039 |         "globalthis": "^1.0.4",
 5040 |         "has-property-descriptors": "^1.0.2",
 5041 |         "set-function-name": "^2.0.2"
 5042 |       },
 5043 |       "engines": {
 5044 |         "node": ">= 0.4"
 5045 |       },
 5046 |       "funding": {
 5047 |         "url": "https://github.com/sponsors/ljharb"
 5048 |       }
 5049 |     },
 5050 |     "node_modules/es-define-property": {
 5051 |       "version": "1.0.1",
 5052 |       "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
 5053 |       "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
 5054 |       "dev": true,
 5055 |       "license": "MIT",
 5056 |       "engines": {
 5057 |         "node": ">= 0.4"
 5058 |       }
 5059 |     },
 5060 |     "node_modules/es-errors": {
 5061 |       "version": "1.3.0",
 5062 |       "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
 5063 |       "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
 5064 |       "dev": true,
 5065 |       "license": "MIT",
 5066 |       "engines": {
 5067 |         "node": ">= 0.4"
 5068 |       }
 5069 |     },
 5070 |     "node_modules/es-object-atoms": {
 5071 |       "version": "1.1.1",
 5072 |       "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
 5073 |       "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
 5074 |       "dev": true,
 5075 |       "license": "MIT",
 5076 |       "dependencies": {
 5077 |         "es-errors": "^1.3.0"
 5078 |       },
 5079 |       "engines": {
 5080 |         "node": ">= 0.4"
 5081 |       }
 5082 |     },
 5083 |     "node_modules/es-set-tostringtag": {
 5084 |       "version": "2.1.0",
 5085 |       "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
 5086 |       "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
 5087 |       "dev": true,
 5088 |       "license": "MIT",
 5089 |       "dependencies": {
 5090 |         "es-errors": "^1.3.0",
 5091 |         "get-intrinsic": "^1.2.6",
 5092 |         "has-tostringtag": "^1.0.2",
 5093 |         "hasown": "^2.0.2"
 5094 |       },
 5095 |       "engines": {
 5096 |         "node": ">= 0.4"
 5097 |       }
 5098 |     },
 5099 |     "node_modules/es-to-primitive": {
 5100 |       "version": "1.3.0",
 5101 |       "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.3.0.tgz",
 5102 |       "integrity": "sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==",
 5103 |       "dev": true,
 5104 |       "license": "MIT",
 5105 |       "dependencies": {
 5106 |         "is-callable": "^1.2.7",
 5107 |         "is-date-object": "^1.0.5",
 5108 |         "is-symbol": "^1.0.4"
 5109 |       },
 5110 |       "engines": {
 5111 |         "node": ">= 0.4"
 5112 |       },
 5113 |       "funding": {
 5114 |         "url": "https://github.com/sponsors/ljharb"
 5115 |       }
 5116 |     },
 5117 |     "node_modules/es-toolkit": {
 5118 |       "version": "1.39.9",
 5119 |       "resolved": "https://registry.npmjs.org/es-toolkit/-/es-toolkit-1.39.9.tgz",
 5120 |       "integrity": "sha512-9OtbkZmTA2Qc9groyA1PUNeb6knVTkvB2RSdr/LcJXDL8IdEakaxwXLHXa7VX/Wj0GmdMJPR3WhnPGhiP3E+qg==",
 5121 |       "dev": true,
 5122 |       "license": "MIT",
 5123 |       "workspaces": [
 5124 |         "docs",
 5125 |         "benchmarks"
 5126 |       ]
 5127 |     },
 5128 |     "node_modules/esast-util-from-estree": {
 5129 |       "version": "2.0.0",
 5130 |       "resolved": "https://registry.npmjs.org/esast-util-from-estree/-/esast-util-from-estree-2.0.0.tgz",
 5131 |       "integrity": "sha512-4CyanoAudUSBAn5K13H4JhsMH6L9ZP7XbLVe/dKybkxMO7eDyLsT8UHl9TRNrU2Gr9nz+FovfSIjuXWJ81uVwQ==",
 5132 |       "dev": true,
 5133 |       "license": "MIT",
 5134 |       "dependencies": {
 5135 |         "@types/estree-jsx": "^1.0.0",
 5136 |         "devlop": "^1.0.0",
 5137 |         "estree-util-visit": "^2.0.0",
 5138 |         "unist-util-position-from-estree": "^2.0.0"
 5139 |       },
 5140 |       "funding": {
 5141 |         "type": "opencollective",
 5142 |         "url": "https://opencollective.com/unified"
 5143 |       }
 5144 |     },
 5145 |     "node_modules/esast-util-from-js": {
 5146 |       "version": "2.0.1",
 5147 |       "resolved": "https://registry.npmjs.org/esast-util-from-js/-/esast-util-from-js-2.0.1.tgz",
 5148 |       "integrity": "sha512-8Ja+rNJ0Lt56Pcf3TAmpBZjmx8ZcK5Ts4cAzIOjsjevg9oSXJnl6SUQ2EevU8tv3h6ZLWmoKL5H4fgWvdvfETw==",
 5149 |       "dev": true,
 5150 |       "license": "MIT",
 5151 |       "dependencies": {
 5152 |         "@types/estree-jsx": "^1.0.0",
 5153 |         "acorn": "^8.0.0",
 5154 |         "esast-util-from-estree": "^2.0.0",
 5155 |         "vfile-message": "^4.0.0"
 5156 |       },
 5157 |       "funding": {
 5158 |         "type": "opencollective",
 5159 |         "url": "https://opencollective.com/unified"
 5160 |       }
 5161 |     },
 5162 |     "node_modules/esbuild": {
 5163 |       "version": "0.25.8",
 5164 |       "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.8.tgz",
 5165 |       "integrity": "sha512-vVC0USHGtMi8+R4Kz8rt6JhEWLxsv9Rnu/lGYbPR8u47B+DCBksq9JarW0zOO7bs37hyOK1l2/oqtbciutL5+Q==",
 5166 |       "dev": true,
 5167 |       "hasInstallScript": true,
 5168 |       "license": "MIT",
 5169 |       "bin": {
 5170 |         "esbuild": "bin/esbuild"
 5171 |       },
 5172 |       "engines": {
 5173 |         "node": ">=18"
 5174 |       },
 5175 |       "optionalDependencies": {
 5176 |         "@esbuild/aix-ppc64": "0.25.8",
 5177 |         "@esbuild/android-arm": "0.25.8",
 5178 |         "@esbuild/android-arm64": "0.25.8",
 5179 |         "@esbuild/android-x64": "0.25.8",
 5180 |         "@esbuild/darwin-arm64": "0.25.8",
 5181 |         "@esbuild/darwin-x64": "0.25.8",
 5182 |         "@esbuild/freebsd-arm64": "0.25.8",
 5183 |         "@esbuild/freebsd-x64": "0.25.8",
 5184 |         "@esbuild/linux-arm": "0.25.8",
 5185 |         "@esbuild/linux-arm64": "0.25.8",
 5186 |         "@esbuild/linux-ia32": "0.25.8",
 5187 |         "@esbuild/linux-loong64": "0.25.8",
 5188 |         "@esbuild/linux-mips64el": "0.25.8",
 5189 |         "@esbuild/linux-ppc64": "0.25.8",
 5190 |         "@esbuild/linux-riscv64": "0.25.8",
 5191 |         "@esbuild/linux-s390x": "0.25.8",
 5192 |         "@esbuild/linux-x64": "0.25.8",
 5193 |         "@esbuild/netbsd-arm64": "0.25.8",
 5194 |         "@esbuild/netbsd-x64": "0.25.8",
 5195 |         "@esbuild/openbsd-arm64": "0.25.8",
 5196 |         "@esbuild/openbsd-x64": "0.25.8",
 5197 |         "@esbuild/openharmony-arm64": "0.25.8",
 5198 |         "@esbuild/sunos-x64": "0.25.8",
 5199 |         "@esbuild/win32-arm64": "0.25.8",
 5200 |         "@esbuild/win32-ia32": "0.25.8",
 5201 |         "@esbuild/win32-x64": "0.25.8"
 5202 |       }
 5203 |     },
 5204 |     "node_modules/escalade": {
 5205 |       "version": "3.2.0",
 5206 |       "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
 5207 |       "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
 5208 |       "dev": true,
 5209 |       "license": "MIT",
 5210 |       "engines": {
 5211 |         "node": ">=6"
 5212 |       }
 5213 |     },
 5214 |     "node_modules/escape-html": {
 5215 |       "version": "1.0.3",
 5216 |       "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
 5217 |       "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
 5218 |       "dev": true,
 5219 |       "license": "MIT"
 5220 |     },
 5221 |     "node_modules/escape-string-regexp": {
 5222 |       "version": "5.0.0",
 5223 |       "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-5.0.0.tgz",
 5224 |       "integrity": "sha512-/veY75JbMK4j1yjvuUxuVsiS/hr/4iHs9FTT6cgTexxdE0Ly/glccBAkloH/DofkjRbZU3bnoj38mOmhkZ0lHw==",
 5225 |       "dev": true,
 5226 |       "license": "MIT",
 5227 |       "engines": {
 5228 |         "node": ">=12"
 5229 |       },
 5230 |       "funding": {
 5231 |         "url": "https://github.com/sponsors/sindresorhus"
 5232 |       }
 5233 |     },
 5234 |     "node_modules/escodegen": {
 5235 |       "version": "2.1.0",
 5236 |       "resolved": "https://registry.npmjs.org/escodegen/-/escodegen-2.1.0.tgz",
 5237 |       "integrity": "sha512-2NlIDTwUWJN0mRPQOdtQBzbUHvdGY2P1VXSyU83Q3xKxM7WHX2Ql8dKq782Q9TgQUNOLEzEYu9bzLNj1q88I5w==",
 5238 |       "dev": true,
 5239 |       "license": "BSD-2-Clause",
 5240 |       "dependencies": {
 5241 |         "esprima": "^4.0.1",
 5242 |         "estraverse": "^5.2.0",
 5243 |         "esutils": "^2.0.2"
 5244 |       },
 5245 |       "bin": {
 5246 |         "escodegen": "bin/escodegen.js",
 5247 |         "esgenerate": "bin/esgenerate.js"
 5248 |       },
 5249 |       "engines": {
 5250 |         "node": ">=6.0"
 5251 |       },
 5252 |       "optionalDependencies": {
 5253 |         "source-map": "~0.6.1"
 5254 |       }
 5255 |     },
 5256 |     "node_modules/escodegen/node_modules/source-map": {
 5257 |       "version": "0.6.1",
 5258 |       "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
 5259 |       "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
 5260 |       "dev": true,
 5261 |       "license": "BSD-3-Clause",
 5262 |       "optional": true,
 5263 |       "engines": {
 5264 |         "node": ">=0.10.0"
 5265 |       }
 5266 |     },
 5267 |     "node_modules/esprima": {
 5268 |       "version": "4.0.1",
 5269 |       "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
 5270 |       "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
 5271 |       "dev": true,
 5272 |       "license": "BSD-2-Clause",
 5273 |       "bin": {
 5274 |         "esparse": "bin/esparse.js",
 5275 |         "esvalidate": "bin/esvalidate.js"
 5276 |       },
 5277 |       "engines": {
 5278 |         "node": ">=4"
 5279 |       }
 5280 |     },
 5281 |     "node_modules/estraverse": {
 5282 |       "version": "5.3.0",
 5283 |       "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
 5284 |       "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
 5285 |       "dev": true,
 5286 |       "license": "BSD-2-Clause",
 5287 |       "engines": {
 5288 |         "node": ">=4.0"
 5289 |       }
 5290 |     },
 5291 |     "node_modules/estree-util-attach-comments": {
 5292 |       "version": "3.0.0",
 5293 |       "resolved": "https://registry.npmjs.org/estree-util-attach-comments/-/estree-util-attach-comments-3.0.0.tgz",
 5294 |       "integrity": "sha512-cKUwm/HUcTDsYh/9FgnuFqpfquUbwIqwKM26BVCGDPVgvaCl/nDCCjUfiLlx6lsEZ3Z4RFxNbOQ60pkaEwFxGw==",
 5295 |       "dev": true,
 5296 |       "license": "MIT",
 5297 |       "dependencies": {
 5298 |         "@types/estree": "^1.0.0"
 5299 |       },
 5300 |       "funding": {
 5301 |         "type": "opencollective",
 5302 |         "url": "https://opencollective.com/unified"
 5303 |       }
 5304 |     },
 5305 |     "node_modules/estree-util-build-jsx": {
 5306 |       "version": "3.0.1",
 5307 |       "resolved": "https://registry.npmjs.org/estree-util-build-jsx/-/estree-util-build-jsx-3.0.1.tgz",
 5308 |       "integrity": "sha512-8U5eiL6BTrPxp/CHbs2yMgP8ftMhR5ww1eIKoWRMlqvltHF8fZn5LRDvTKuxD3DUn+shRbLGqXemcP51oFCsGQ==",
 5309 |       "dev": true,
 5310 |       "license": "MIT",
 5311 |       "dependencies": {
 5312 |         "@types/estree-jsx": "^1.0.0",
 5313 |         "devlop": "^1.0.0",
 5314 |         "estree-util-is-identifier-name": "^3.0.0",
 5315 |         "estree-walker": "^3.0.0"
 5316 |       },
 5317 |       "funding": {
 5318 |         "type": "opencollective",
 5319 |         "url": "https://opencollective.com/unified"
 5320 |       }
 5321 |     },
 5322 |     "node_modules/estree-util-is-identifier-name": {
 5323 |       "version": "3.0.0",
 5324 |       "resolved": "https://registry.npmjs.org/estree-util-is-identifier-name/-/estree-util-is-identifier-name-3.0.0.tgz",
 5325 |       "integrity": "sha512-hFtqIDZTIUZ9BXLb8y4pYGyk6+wekIivNVTcmvk8NoOh+VeRn5y6cEHzbURrWbfp1fIqdVipilzj+lfaadNZmg==",
 5326 |       "dev": true,
 5327 |       "license": "MIT",
 5328 |       "funding": {
 5329 |         "type": "opencollective",
 5330 |         "url": "https://opencollective.com/unified"
 5331 |       }
 5332 |     },
 5333 |     "node_modules/estree-util-scope": {
 5334 |       "version": "1.0.0",
 5335 |       "resolved": "https://registry.npmjs.org/estree-util-scope/-/estree-util-scope-1.0.0.tgz",
 5336 |       "integrity": "sha512-2CAASclonf+JFWBNJPndcOpA8EMJwa0Q8LUFJEKqXLW6+qBvbFZuF5gItbQOs/umBUkjviCSDCbBwU2cXbmrhQ==",
 5337 |       "dev": true,
 5338 |       "license": "MIT",
 5339 |       "dependencies": {
 5340 |         "@types/estree": "^1.0.0",
 5341 |         "devlop": "^1.0.0"
 5342 |       },
 5343 |       "funding": {
 5344 |         "type": "opencollective",
 5345 |         "url": "https://opencollective.com/unified"
 5346 |       }
 5347 |     },
 5348 |     "node_modules/estree-util-to-js": {
 5349 |       "version": "2.0.0",
 5350 |       "resolved": "https://registry.npmjs.org/estree-util-to-js/-/estree-util-to-js-2.0.0.tgz",
 5351 |       "integrity": "sha512-WDF+xj5rRWmD5tj6bIqRi6CkLIXbbNQUcxQHzGysQzvHmdYG2G7p/Tf0J0gpxGgkeMZNTIjT/AoSvC9Xehcgdg==",
 5352 |       "dev": true,
 5353 |       "license": "MIT",
 5354 |       "dependencies": {
 5355 |         "@types/estree-jsx": "^1.0.0",
 5356 |         "astring": "^1.8.0",
 5357 |         "source-map": "^0.7.0"
 5358 |       },
 5359 |       "funding": {
 5360 |         "type": "opencollective",
 5361 |         "url": "https://opencollective.com/unified"
 5362 |       }
 5363 |     },
 5364 |     "node_modules/estree-util-visit": {
 5365 |       "version": "2.0.0",
 5366 |       "resolved": "https://registry.npmjs.org/estree-util-visit/-/estree-util-visit-2.0.0.tgz",
 5367 |       "integrity": "sha512-m5KgiH85xAhhW8Wta0vShLcUvOsh3LLPI2YVwcbio1l7E09NTLL1EyMZFM1OyWowoH0skScNbhOPl4kcBgzTww==",
 5368 |       "dev": true,
 5369 |       "license": "MIT",
 5370 |       "dependencies": {
 5371 |         "@types/estree-jsx": "^1.0.0",
 5372 |         "@types/unist": "^3.0.0"
 5373 |       },
 5374 |       "funding": {
 5375 |         "type": "opencollective",
 5376 |         "url": "https://opencollective.com/unified"
 5377 |       }
 5378 |     },
 5379 |     "node_modules/estree-walker": {
 5380 |       "version": "3.0.3",
 5381 |       "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-3.0.3.tgz",
 5382 |       "integrity": "sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==",
 5383 |       "dev": true,
 5384 |       "license": "MIT",
 5385 |       "dependencies": {
 5386 |         "@types/estree": "^1.0.0"
 5387 |       }
 5388 |     },
 5389 |     "node_modules/esutils": {
 5390 |       "version": "2.0.3",
 5391 |       "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
 5392 |       "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
 5393 |       "dev": true,
 5394 |       "license": "BSD-2-Clause",
 5395 |       "engines": {
 5396 |         "node": ">=0.10.0"
 5397 |       }
 5398 |     },
 5399 |     "node_modules/etag": {
 5400 |       "version": "1.8.1",
 5401 |       "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
 5402 |       "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
 5403 |       "dev": true,
 5404 |       "license": "MIT",
 5405 |       "engines": {
 5406 |         "node": ">= 0.6"
 5407 |       }
 5408 |     },
 5409 |     "node_modules/event-target-shim": {
 5410 |       "version": "5.0.1",
 5411 |       "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
 5412 |       "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
 5413 |       "dev": true,
 5414 |       "license": "MIT",
 5415 |       "engines": {
 5416 |         "node": ">=6"
 5417 |       }
 5418 |     },
 5419 |     "node_modules/express": {
 5420 |       "version": "4.21.2",
 5421 |       "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
 5422 |       "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
 5423 |       "dev": true,
 5424 |       "license": "MIT",
 5425 |       "dependencies": {
 5426 |         "accepts": "~1.3.8",
 5427 |         "array-flatten": "1.1.1",
 5428 |         "body-parser": "1.20.3",
 5429 |         "content-disposition": "0.5.4",
 5430 |         "content-type": "~1.0.4",
 5431 |         "cookie": "0.7.1",
 5432 |         "cookie-signature": "1.0.6",
 5433 |         "debug": "2.6.9",
 5434 |         "depd": "2.0.0",
 5435 |         "encodeurl": "~2.0.0",
 5436 |         "escape-html": "~1.0.3",
 5437 |         "etag": "~1.8.1",
 5438 |         "finalhandler": "1.3.1",
 5439 |         "fresh": "0.5.2",
 5440 |         "http-errors": "2.0.0",
 5441 |         "merge-descriptors": "1.0.3",
 5442 |         "methods": "~1.1.2",
 5443 |         "on-finished": "2.4.1",
 5444 |         "parseurl": "~1.3.3",
 5445 |         "path-to-regexp": "0.1.12",
 5446 |         "proxy-addr": "~2.0.7",
 5447 |         "qs": "6.13.0",
 5448 |         "range-parser": "~1.2.1",
 5449 |         "safe-buffer": "5.2.1",
 5450 |         "send": "0.19.0",
 5451 |         "serve-static": "1.16.2",
 5452 |         "setprototypeof": "1.2.0",
 5453 |         "statuses": "2.0.1",
 5454 |         "type-is": "~1.6.18",
 5455 |         "utils-merge": "1.0.1",
 5456 |         "vary": "~1.1.2"
 5457 |       },
 5458 |       "engines": {
 5459 |         "node": ">= 0.10.0"
 5460 |       },
 5461 |       "funding": {
 5462 |         "type": "opencollective",
 5463 |         "url": "https://opencollective.com/express"
 5464 |       }
 5465 |     },
 5466 |     "node_modules/express/node_modules/debug": {
 5467 |       "version": "2.6.9",
 5468 |       "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
 5469 |       "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
 5470 |       "dev": true,
 5471 |       "license": "MIT",
 5472 |       "dependencies": {
 5473 |         "ms": "2.0.0"
 5474 |       }
 5475 |     },
 5476 |     "node_modules/express/node_modules/ms": {
 5477 |       "version": "2.0.0",
 5478 |       "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
 5479 |       "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
 5480 |       "dev": true,
 5481 |       "license": "MIT"
 5482 |     },
 5483 |     "node_modules/extend": {
 5484 |       "version": "3.0.2",
 5485 |       "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
 5486 |       "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==",
 5487 |       "dev": true,
 5488 |       "license": "MIT"
 5489 |     },
 5490 |     "node_modules/extend-shallow": {
 5491 |       "version": "2.0.1",
 5492 |       "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
 5493 |       "integrity": "sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==",
 5494 |       "dev": true,
 5495 |       "license": "MIT",
 5496 |       "dependencies": {
 5497 |         "is-extendable": "^0.1.0"
 5498 |       },
 5499 |       "engines": {
 5500 |         "node": ">=0.10.0"
 5501 |       }
 5502 |     },
 5503 |     "node_modules/extract-zip": {
 5504 |       "version": "2.0.1",
 5505 |       "resolved": "https://registry.npmjs.org/extract-zip/-/extract-zip-2.0.1.tgz",
 5506 |       "integrity": "sha512-GDhU9ntwuKyGXdZBUgTIe+vXnWj0fppUEtMDL0+idd5Sta8TGpHssn/eusA9mrPr9qNDym6SxAYZjNvCn/9RBg==",
 5507 |       "dev": true,
 5508 |       "license": "BSD-2-Clause",
 5509 |       "dependencies": {
 5510 |         "debug": "^4.1.1",
 5511 |         "get-stream": "^5.1.0",
 5512 |         "yauzl": "^2.10.0"
 5513 |       },
 5514 |       "bin": {
 5515 |         "extract-zip": "cli.js"
 5516 |       },
 5517 |       "engines": {
 5518 |         "node": ">= 10.17.0"
 5519 |       },
 5520 |       "optionalDependencies": {
 5521 |         "@types/yauzl": "^2.9.1"
 5522 |       }
 5523 |     },
 5524 |     "node_modules/extract-zip/node_modules/get-stream": {
 5525 |       "version": "5.2.0",
 5526 |       "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
 5527 |       "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
 5528 |       "dev": true,
 5529 |       "license": "MIT",
 5530 |       "dependencies": {
 5531 |         "pump": "^3.0.0"
 5532 |       },
 5533 |       "engines": {
 5534 |         "node": ">=8"
 5535 |       },
 5536 |       "funding": {
 5537 |         "url": "https://github.com/sponsors/sindresorhus"
 5538 |       }
 5539 |     },
 5540 |     "node_modules/fast-deep-equal": {
 5541 |       "version": "3.1.3",
 5542 |       "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
 5543 |       "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
 5544 |       "dev": true,
 5545 |       "license": "MIT"
 5546 |     },
 5547 |     "node_modules/fast-fifo": {
 5548 |       "version": "1.3.2",
 5549 |       "resolved": "https://registry.npmjs.org/fast-fifo/-/fast-fifo-1.3.2.tgz",
 5550 |       "integrity": "sha512-/d9sfos4yxzpwkDkuN7k2SqFKtYNmCTzgfEpz82x34IM9/zc8KGxQoXg1liNC/izpRM/MBdt44Nmx41ZWqk+FQ==",
 5551 |       "dev": true,
 5552 |       "license": "MIT"
 5553 |     },
 5554 |     "node_modules/fast-glob": {
 5555 |       "version": "3.3.3",
 5556 |       "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
 5557 |       "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
 5558 |       "dev": true,
 5559 |       "license": "MIT",
 5560 |       "dependencies": {
 5561 |         "@nodelib/fs.stat": "^2.0.2",
 5562 |         "@nodelib/fs.walk": "^1.2.3",
 5563 |         "glob-parent": "^5.1.2",
 5564 |         "merge2": "^1.3.0",
 5565 |         "micromatch": "^4.0.8"
 5566 |       },
 5567 |       "engines": {
 5568 |         "node": ">=8.6.0"
 5569 |       }
 5570 |     },
 5571 |     "node_modules/fast-memoize": {
 5572 |       "version": "2.5.2",
 5573 |       "resolved": "https://registry.npmjs.org/fast-memoize/-/fast-memoize-2.5.2.tgz",
 5574 |       "integrity": "sha512-Ue0LwpDYErFbmNnZSF0UH6eImUwDmogUO1jyE+JbN2gsQz/jICm1Ve7t9QT0rNSsfJt+Hs4/S3GnsDVjL4HVrw==",
 5575 |       "dev": true,
 5576 |       "license": "MIT"
 5577 |     },
 5578 |     "node_modules/fast-uri": {
 5579 |       "version": "3.0.6",
 5580 |       "resolved": "https://registry.npmjs.org/fast-uri/-/fast-uri-3.0.6.tgz",
 5581 |       "integrity": "sha512-Atfo14OibSv5wAp4VWNsFYE1AchQRTv9cBGWET4pZWHzYshFSS9NQI6I57rdKn9croWVMbYFbLhJ+yJvmZIIHw==",
 5582 |       "dev": true,
 5583 |       "funding": [
 5584 |         {
 5585 |           "type": "github",
 5586 |           "url": "https://github.com/sponsors/fastify"
 5587 |         },
 5588 |         {
 5589 |           "type": "opencollective",
 5590 |           "url": "https://opencollective.com/fastify"
 5591 |         }
 5592 |       ],
 5593 |       "license": "BSD-3-Clause"
 5594 |     },
 5595 |     "node_modules/fastq": {
 5596 |       "version": "1.19.1",
 5597 |       "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
 5598 |       "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
 5599 |       "dev": true,
 5600 |       "license": "ISC",
 5601 |       "dependencies": {
 5602 |         "reusify": "^1.0.4"
 5603 |       }
 5604 |     },
 5605 |     "node_modules/fault": {
 5606 |       "version": "2.0.1",
 5607 |       "resolved": "https://registry.npmjs.org/fault/-/fault-2.0.1.tgz",
 5608 |       "integrity": "sha512-WtySTkS4OKev5JtpHXnib4Gxiurzh5NCGvWrFaZ34m6JehfTUhKZvn9njTfw48t6JumVQOmrKqpmGcdwxnhqBQ==",
 5609 |       "dev": true,
 5610 |       "license": "MIT",
 5611 |       "dependencies": {
 5612 |         "format": "^0.2.0"
 5613 |       },
 5614 |       "funding": {
 5615 |         "type": "github",
 5616 |         "url": "https://github.com/sponsors/wooorm"
 5617 |       }
 5618 |     },
 5619 |     "node_modules/favicons": {
 5620 |       "version": "7.2.0",
 5621 |       "resolved": "https://registry.npmjs.org/favicons/-/favicons-7.2.0.tgz",
 5622 |       "integrity": "sha512-k/2rVBRIRzOeom3wI9jBPaSEvoTSQEW4iM0EveBmBBKFxO8mSyyRWtDlfC3VnEfu0avmjrMzy8/ZFPSe6F71Hw==",
 5623 |       "dev": true,
 5624 |       "license": "MIT",
 5625 |       "dependencies": {
 5626 |         "escape-html": "^1.0.3",
 5627 |         "sharp": "^0.33.1",
 5628 |         "xml2js": "^0.6.1"
 5629 |       },
 5630 |       "engines": {
 5631 |         "node": ">=14.0.0"
 5632 |       }
 5633 |     },
 5634 |     "node_modules/fd-slicer": {
 5635 |       "version": "1.1.0",
 5636 |       "resolved": "https://registry.npmjs.org/fd-slicer/-/fd-slicer-1.1.0.tgz",
 5637 |       "integrity": "sha512-cE1qsB/VwyQozZ+q1dGxR8LBYNZeofhEdUNGSMbQD3Gw2lAzX9Zb3uIU6Ebc/Fmyjo9AWWfnn0AUCHqtevs/8g==",
 5638 |       "dev": true,
 5639 |       "license": "MIT",
 5640 |       "dependencies": {
 5641 |         "pend": "~1.2.0"
 5642 |       }
 5643 |     },
 5644 |     "node_modules/fill-range": {
 5645 |       "version": "7.1.1",
 5646 |       "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
 5647 |       "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
 5648 |       "dev": true,
 5649 |       "license": "MIT",
 5650 |       "dependencies": {
 5651 |         "to-regex-range": "^5.0.1"
 5652 |       },
 5653 |       "engines": {
 5654 |         "node": ">=8"
 5655 |       }
 5656 |     },
 5657 |     "node_modules/finalhandler": {
 5658 |       "version": "1.3.1",
 5659 |       "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
 5660 |       "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
 5661 |       "dev": true,
 5662 |       "license": "MIT",
 5663 |       "dependencies": {
 5664 |         "debug": "2.6.9",
 5665 |         "encodeurl": "~2.0.0",
 5666 |         "escape-html": "~1.0.3",
 5667 |         "on-finished": "2.4.1",
 5668 |         "parseurl": "~1.3.3",
 5669 |         "statuses": "2.0.1",
 5670 |         "unpipe": "~1.0.0"
 5671 |       },
 5672 |       "engines": {
 5673 |         "node": ">= 0.8"
 5674 |       }
 5675 |     },
 5676 |     "node_modules/finalhandler/node_modules/debug": {
 5677 |       "version": "2.6.9",
 5678 |       "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
 5679 |       "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
 5680 |       "dev": true,
 5681 |       "license": "MIT",
 5682 |       "dependencies": {
 5683 |         "ms": "2.0.0"
 5684 |       }
 5685 |     },
 5686 |     "node_modules/finalhandler/node_modules/ms": {
 5687 |       "version": "2.0.0",
 5688 |       "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
 5689 |       "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
 5690 |       "dev": true,
 5691 |       "license": "MIT"
 5692 |     },
 5693 |     "node_modules/follow-redirects": {
 5694 |       "version": "1.15.11",
 5695 |       "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.11.tgz",
 5696 |       "integrity": "sha512-deG2P0JfjrTxl50XGCDyfI97ZGVCxIpfKYmfyrQ54n5FO/0gfIES8C/Psl6kWVDolizcaaxZJnTS0QSMxvnsBQ==",
 5697 |       "dev": true,
 5698 |       "funding": [
 5699 |         {
 5700 |           "type": "individual",
 5701 |           "url": "https://github.com/sponsors/RubenVerborgh"
 5702 |         }
 5703 |       ],
 5704 |       "license": "MIT",
 5705 |       "engines": {
 5706 |         "node": ">=4.0"
 5707 |       },
 5708 |       "peerDependenciesMeta": {
 5709 |         "debug": {
 5710 |           "optional": true
 5711 |         }
 5712 |       }
 5713 |     },
 5714 |     "node_modules/for-each": {
 5715 |       "version": "0.3.5",
 5716 |       "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.5.tgz",
 5717 |       "integrity": "sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==",
 5718 |       "dev": true,
 5719 |       "license": "MIT",
 5720 |       "dependencies": {
 5721 |         "is-callable": "^1.2.7"
 5722 |       },
 5723 |       "engines": {
 5724 |         "node": ">= 0.4"
 5725 |       },
 5726 |       "funding": {
 5727 |         "url": "https://github.com/sponsors/ljharb"
 5728 |       }
 5729 |     },
 5730 |     "node_modules/foreground-child": {
 5731 |       "version": "3.3.1",
 5732 |       "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.1.tgz",
 5733 |       "integrity": "sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==",
 5734 |       "dev": true,
 5735 |       "license": "ISC",
 5736 |       "dependencies": {
 5737 |         "cross-spawn": "^7.0.6",
 5738 |         "signal-exit": "^4.0.1"
 5739 |       },
 5740 |       "engines": {
 5741 |         "node": ">=14"
 5742 |       },
 5743 |       "funding": {
 5744 |         "url": "https://github.com/sponsors/isaacs"
 5745 |       }
 5746 |     },
 5747 |     "node_modules/form-data": {
 5748 |       "version": "4.0.4",
 5749 |       "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.4.tgz",
 5750 |       "integrity": "sha512-KrGhL9Q4zjj0kiUt5OO4Mr/A/jlI2jDYs5eHBpYHPcBEVSiipAvn2Ko2HnPe20rmcuuvMHNdZFp+4IlGTMF0Ow==",
 5751 |       "dev": true,
 5752 |       "license": "MIT",
 5753 |       "dependencies": {
 5754 |         "asynckit": "^0.4.0",
 5755 |         "combined-stream": "^1.0.8",
 5756 |         "es-set-tostringtag": "^2.1.0",
 5757 |         "hasown": "^2.0.2",
 5758 |         "mime-types": "^2.1.12"
 5759 |       },
 5760 |       "engines": {
 5761 |         "node": ">= 6"
 5762 |       }
 5763 |     },
 5764 |     "node_modules/form-data-encoder": {
 5765 |       "version": "2.1.4",
 5766 |       "resolved": "https://registry.npmjs.org/form-data-encoder/-/form-data-encoder-2.1.4.tgz",
 5767 |       "integrity": "sha512-yDYSgNMraqvnxiEXO4hi88+YZxaHC6QKzb5N84iRCTDeRO7ZALpir/lVmf/uXUhnwUr2O4HU8s/n6x+yNjQkHw==",
 5768 |       "dev": true,
 5769 |       "license": "MIT",
 5770 |       "engines": {
 5771 |         "node": ">= 14.17"
 5772 |       }
 5773 |     },
 5774 |     "node_modules/format": {
 5775 |       "version": "0.2.2",
 5776 |       "resolved": "https://registry.npmjs.org/format/-/format-0.2.2.tgz",
 5777 |       "integrity": "sha512-wzsgA6WOq+09wrU1tsJ09udeR/YZRaeArL9e1wPbFg3GG2yDnC2ldKpxs4xunpFF9DgqCqOIra3bc1HWrJ37Ww==",
 5778 |       "dev": true,
 5779 |       "engines": {
 5780 |         "node": ">=0.4.x"
 5781 |       }
 5782 |     },
 5783 |     "node_modules/forwarded": {
 5784 |       "version": "0.2.0",
 5785 |       "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
 5786 |       "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
 5787 |       "dev": true,
 5788 |       "license": "MIT",
 5789 |       "engines": {
 5790 |         "node": ">= 0.6"
 5791 |       }
 5792 |     },
 5793 |     "node_modules/fresh": {
 5794 |       "version": "0.5.2",
 5795 |       "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
 5796 |       "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
 5797 |       "dev": true,
 5798 |       "license": "MIT",
 5799 |       "engines": {
 5800 |         "node": ">= 0.6"
 5801 |       }
 5802 |     },
 5803 |     "node_modules/fs-extra": {
 5804 |       "version": "11.3.1",
 5805 |       "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-11.3.1.tgz",
 5806 |       "integrity": "sha512-eXvGGwZ5CL17ZSwHWd3bbgk7UUpF6IFHtP57NYYakPvHOs8GDgDe5KJI36jIJzDkJ6eJjuzRA8eBQb6SkKue0g==",
 5807 |       "dev": true,
 5808 |       "license": "MIT",
 5809 |       "dependencies": {
 5810 |         "graceful-fs": "^4.2.0",
 5811 |         "jsonfile": "^6.0.1",
 5812 |         "universalify": "^2.0.0"
 5813 |       },
 5814 |       "engines": {
 5815 |         "node": ">=14.14"
 5816 |       }
 5817 |     },
 5818 |     "node_modules/fs-minipass": {
 5819 |       "version": "2.1.0",
 5820 |       "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
 5821 |       "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
 5822 |       "dev": true,
 5823 |       "license": "ISC",
 5824 |       "dependencies": {
 5825 |         "minipass": "^3.0.0"
 5826 |       },
 5827 |       "engines": {
 5828 |         "node": ">= 8"
 5829 |       }
 5830 |     },
 5831 |     "node_modules/fs-minipass/node_modules/minipass": {
 5832 |       "version": "3.3.6",
 5833 |       "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
 5834 |       "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
 5835 |       "dev": true,
 5836 |       "license": "ISC",
 5837 |       "dependencies": {
 5838 |         "yallist": "^4.0.0"
 5839 |       },
 5840 |       "engines": {
 5841 |         "node": ">=8"
 5842 |       }
 5843 |     },
 5844 |     "node_modules/fs.realpath": {
 5845 |       "version": "1.0.0",
 5846 |       "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
 5847 |       "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
 5848 |       "dev": true,
 5849 |       "license": "ISC"
 5850 |     },
 5851 |     "node_modules/fsevents": {
 5852 |       "version": "2.3.3",
 5853 |       "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
 5854 |       "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
 5855 |       "dev": true,
 5856 |       "hasInstallScript": true,
 5857 |       "license": "MIT",
 5858 |       "optional": true,
 5859 |       "os": [
 5860 |         "darwin"
 5861 |       ],
 5862 |       "engines": {
 5863 |         "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
 5864 |       }
 5865 |     },
 5866 |     "node_modules/function-bind": {
 5867 |       "version": "1.1.2",
 5868 |       "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
 5869 |       "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
 5870 |       "dev": true,
 5871 |       "license": "MIT",
 5872 |       "funding": {
 5873 |         "url": "https://github.com/sponsors/ljharb"
 5874 |       }
 5875 |     },
 5876 |     "node_modules/function.prototype.name": {
 5877 |       "version": "1.1.8",
 5878 |       "resolved": "https://registry.npmjs.org/function.prototype.name/-/function.prototype.name-1.1.8.tgz",
 5879 |       "integrity": "sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==",
 5880 |       "dev": true,
 5881 |       "license": "MIT",
 5882 |       "dependencies": {
 5883 |         "call-bind": "^1.0.8",
 5884 |         "call-bound": "^1.0.3",
 5885 |         "define-properties": "^1.2.1",
 5886 |         "functions-have-names": "^1.2.3",
 5887 |         "hasown": "^2.0.2",
 5888 |         "is-callable": "^1.2.7"
 5889 |       },
 5890 |       "engines": {
 5891 |         "node": ">= 0.4"
 5892 |       },
 5893 |       "funding": {
 5894 |         "url": "https://github.com/sponsors/ljharb"
 5895 |       }
 5896 |     },
 5897 |     "node_modules/functions-have-names": {
 5898 |       "version": "1.2.3",
 5899 |       "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
 5900 |       "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
 5901 |       "dev": true,
 5902 |       "license": "MIT",
 5903 |       "funding": {
 5904 |         "url": "https://github.com/sponsors/ljharb"
 5905 |       }
 5906 |     },
 5907 |     "node_modules/gcd": {
 5908 |       "version": "0.0.1",
 5909 |       "resolved": "https://registry.npmjs.org/gcd/-/gcd-0.0.1.tgz",
 5910 |       "integrity": "sha512-VNx3UEGr+ILJTiMs1+xc5SX1cMgJCrXezKPa003APUWNqQqaF6n25W8VcR7nHN6yRWbvvUTwCpZCFJeWC2kXlw==",
 5911 |       "dev": true,
 5912 |       "license": "MIT"
 5913 |     },
 5914 |     "node_modules/get-caller-file": {
 5915 |       "version": "2.0.5",
 5916 |       "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
 5917 |       "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
 5918 |       "dev": true,
 5919 |       "license": "ISC",
 5920 |       "engines": {
 5921 |         "node": "6.* || 8.* || >= 10.*"
 5922 |       }
 5923 |     },
 5924 |     "node_modules/get-east-asian-width": {
 5925 |       "version": "1.3.0",
 5926 |       "resolved": "https://registry.npmjs.org/get-east-asian-width/-/get-east-asian-width-1.3.0.tgz",
 5927 |       "integrity": "sha512-vpeMIQKxczTD/0s2CdEWHcb0eeJe6TFjxb+J5xgX7hScxqrGuyjmv4c1D4A/gelKfyox0gJJwIHF+fLjeaM8kQ==",
 5928 |       "dev": true,
 5929 |       "license": "MIT",
 5930 |       "engines": {
 5931 |         "node": ">=18"
 5932 |       },
 5933 |       "funding": {
 5934 |         "url": "https://github.com/sponsors/sindresorhus"
 5935 |       }
 5936 |     },
 5937 |     "node_modules/get-intrinsic": {
 5938 |       "version": "1.3.0",
 5939 |       "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
 5940 |       "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
 5941 |       "dev": true,
 5942 |       "license": "MIT",
 5943 |       "dependencies": {
 5944 |         "call-bind-apply-helpers": "^1.0.2",
 5945 |         "es-define-property": "^1.0.1",
 5946 |         "es-errors": "^1.3.0",
 5947 |         "es-object-atoms": "^1.1.1",
 5948 |         "function-bind": "^1.1.2",
 5949 |         "get-proto": "^1.0.1",
 5950 |         "gopd": "^1.2.0",
 5951 |         "has-symbols": "^1.1.0",
 5952 |         "hasown": "^2.0.2",
 5953 |         "math-intrinsics": "^1.1.0"
 5954 |       },
 5955 |       "engines": {
 5956 |         "node": ">= 0.4"
 5957 |       },
 5958 |       "funding": {
 5959 |         "url": "https://github.com/sponsors/ljharb"
 5960 |       }
 5961 |     },
 5962 |     "node_modules/get-proto": {
 5963 |       "version": "1.0.1",
 5964 |       "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
 5965 |       "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
 5966 |       "dev": true,
 5967 |       "license": "MIT",
 5968 |       "dependencies": {
 5969 |         "dunder-proto": "^1.0.1",
 5970 |         "es-object-atoms": "^1.0.0"
 5971 |       },
 5972 |       "engines": {
 5973 |         "node": ">= 0.4"
 5974 |       }
 5975 |     },
 5976 |     "node_modules/get-stream": {
 5977 |       "version": "6.0.1",
 5978 |       "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
 5979 |       "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
 5980 |       "dev": true,
 5981 |       "license": "MIT",
 5982 |       "engines": {
 5983 |         "node": ">=10"
 5984 |       },
 5985 |       "funding": {
 5986 |         "url": "https://github.com/sponsors/sindresorhus"
 5987 |       }
 5988 |     },
 5989 |     "node_modules/get-symbol-description": {
 5990 |       "version": "1.1.0",
 5991 |       "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.1.0.tgz",
 5992 |       "integrity": "sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==",
 5993 |       "dev": true,
 5994 |       "license": "MIT",
 5995 |       "dependencies": {
 5996 |         "call-bound": "^1.0.3",
 5997 |         "es-errors": "^1.3.0",
 5998 |         "get-intrinsic": "^1.2.6"
 5999 |       },
 6000 |       "engines": {
 6001 |         "node": ">= 0.4"
 6002 |       },
 6003 |       "funding": {
 6004 |         "url": "https://github.com/sponsors/ljharb"
 6005 |       }
 6006 |     },
 6007 |     "node_modules/get-tsconfig": {
 6008 |       "version": "4.10.1",
 6009 |       "resolved": "https://registry.npmjs.org/get-tsconfig/-/get-tsconfig-4.10.1.tgz",
 6010 |       "integrity": "sha512-auHyJ4AgMz7vgS8Hp3N6HXSmlMdUyhSUrfBF16w153rxtLIEOE+HGqaBppczZvnHLqQJfiHotCYpNhl0lUROFQ==",
 6011 |       "dev": true,
 6012 |       "license": "MIT",
 6013 |       "dependencies": {
 6014 |         "resolve-pkg-maps": "^1.0.0"
 6015 |       },
 6016 |       "funding": {
 6017 |         "url": "https://github.com/privatenumber/get-tsconfig?sponsor=1"
 6018 |       }
 6019 |     },
 6020 |     "node_modules/get-uri": {
 6021 |       "version": "6.0.5",
 6022 |       "resolved": "https://registry.npmjs.org/get-uri/-/get-uri-6.0.5.tgz",
 6023 |       "integrity": "sha512-b1O07XYq8eRuVzBNgJLstU6FYc1tS6wnMtF1I1D9lE8LxZSOGZ7LhxN54yPP6mGw5f2CkXY2BQUL9Fx41qvcIg==",
 6024 |       "dev": true,
 6025 |       "license": "MIT",
 6026 |       "dependencies": {
 6027 |         "basic-ftp": "^5.0.2",
 6028 |         "data-uri-to-buffer": "^6.0.2",
 6029 |         "debug": "^4.3.4"
 6030 |       },
 6031 |       "engines": {
 6032 |         "node": ">= 14"
 6033 |       }
 6034 |     },
 6035 |     "node_modules/glob": {
 6036 |       "version": "11.0.3",
 6037 |       "resolved": "https://registry.npmjs.org/glob/-/glob-11.0.3.tgz",
 6038 |       "integrity": "sha512-2Nim7dha1KVkaiF4q6Dj+ngPPMdfvLJEOpZk/jKiUAkqKebpGAWQXAq9z1xu9HKu5lWfqw/FASuccEjyznjPaA==",
 6039 |       "dev": true,
 6040 |       "license": "ISC",
 6041 |       "dependencies": {
 6042 |         "foreground-child": "^3.3.1",
 6043 |         "jackspeak": "^4.1.1",
 6044 |         "minimatch": "^10.0.3",
 6045 |         "minipass": "^7.1.2",
 6046 |         "package-json-from-dist": "^1.0.0",
 6047 |         "path-scurry": "^2.0.0"
 6048 |       },
 6049 |       "bin": {
 6050 |         "glob": "dist/esm/bin.mjs"
 6051 |       },
 6052 |       "engines": {
 6053 |         "node": "20 || >=22"
 6054 |       },
 6055 |       "funding": {
 6056 |         "url": "https://github.com/sponsors/isaacs"
 6057 |       }
 6058 |     },
 6059 |     "node_modules/glob-parent": {
 6060 |       "version": "5.1.2",
 6061 |       "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
 6062 |       "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
 6063 |       "dev": true,
 6064 |       "license": "ISC",
 6065 |       "dependencies": {
 6066 |         "is-glob": "^4.0.1"
 6067 |       },
 6068 |       "engines": {
 6069 |         "node": ">= 6"
 6070 |       }
 6071 |     },
 6072 |     "node_modules/globalthis": {
 6073 |       "version": "1.0.4",
 6074 |       "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.4.tgz",
 6075 |       "integrity": "sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==",
 6076 |       "dev": true,
 6077 |       "license": "MIT",
 6078 |       "dependencies": {
 6079 |         "define-properties": "^1.2.1",
 6080 |         "gopd": "^1.0.1"
 6081 |       },
 6082 |       "engines": {
 6083 |         "node": ">= 0.4"
 6084 |       },
 6085 |       "funding": {
 6086 |         "url": "https://github.com/sponsors/ljharb"
 6087 |       }
 6088 |     },
 6089 |     "node_modules/gopd": {
 6090 |       "version": "1.2.0",
 6091 |       "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
 6092 |       "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
 6093 |       "dev": true,
 6094 |       "license": "MIT",
 6095 |       "engines": {
 6096 |         "node": ">= 0.4"
 6097 |       },
 6098 |       "funding": {
 6099 |         "url": "https://github.com/sponsors/ljharb"
 6100 |       }
 6101 |     },
 6102 |     "node_modules/got": {
 6103 |       "version": "13.0.0",
 6104 |       "resolved": "https://registry.npmjs.org/got/-/got-13.0.0.tgz",
 6105 |       "integrity": "sha512-XfBk1CxOOScDcMr9O1yKkNaQyy865NbYs+F7dr4H0LZMVgCj2Le59k6PqbNHoL5ToeaEQUYh6c6yMfVcc6SJxA==",
 6106 |       "dev": true,
 6107 |       "license": "MIT",
 6108 |       "dependencies": {
 6109 |         "@sindresorhus/is": "^5.2.0",
 6110 |         "@szmarczak/http-timer": "^5.0.1",
 6111 |         "cacheable-lookup": "^7.0.0",
 6112 |         "cacheable-request": "^10.2.8",
 6113 |         "decompress-response": "^6.0.0",
 6114 |         "form-data-encoder": "^2.1.2",
 6115 |         "get-stream": "^6.0.1",
 6116 |         "http2-wrapper": "^2.1.10",
 6117 |         "lowercase-keys": "^3.0.0",
 6118 |         "p-cancelable": "^3.0.0",
 6119 |         "responselike": "^3.0.0"
 6120 |       },
 6121 |       "engines": {
 6122 |         "node": ">=16"
 6123 |       },
 6124 |       "funding": {
 6125 |         "url": "https://github.com/sindresorhus/got?sponsor=1"
 6126 |       }
 6127 |     },
 6128 |     "node_modules/graceful-fs": {
 6129 |       "version": "4.2.11",
 6130 |       "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
 6131 |       "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
 6132 |       "dev": true,
 6133 |       "license": "ISC"
 6134 |     },
 6135 |     "node_modules/gray-matter": {
 6136 |       "version": "4.0.3",
 6137 |       "resolved": "https://registry.npmjs.org/gray-matter/-/gray-matter-4.0.3.tgz",
 6138 |       "integrity": "sha512-5v6yZd4JK3eMI3FqqCouswVqwugaA9r4dNZB1wwcmrD02QkV5H0y7XBQW8QwQqEaZY1pM9aqORSORhJRdNK44Q==",
 6139 |       "dev": true,
 6140 |       "license": "MIT",
 6141 |       "dependencies": {
 6142 |         "js-yaml": "^3.13.1",
 6143 |         "kind-of": "^6.0.2",
 6144 |         "section-matter": "^1.0.0",
 6145 |         "strip-bom-string": "^1.0.0"
 6146 |       },
 6147 |       "engines": {
 6148 |         "node": ">=6.0"
 6149 |       }
 6150 |     },
 6151 |     "node_modules/gray-matter/node_modules/argparse": {
 6152 |       "version": "1.0.10",
 6153 |       "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
 6154 |       "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
 6155 |       "dev": true,
 6156 |       "license": "MIT",
 6157 |       "dependencies": {
 6158 |         "sprintf-js": "~1.0.2"
 6159 |       }
 6160 |     },
 6161 |     "node_modules/gray-matter/node_modules/js-yaml": {
 6162 |       "version": "3.14.1",
 6163 |       "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
 6164 |       "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
 6165 |       "dev": true,
 6166 |       "license": "MIT",
 6167 |       "dependencies": {
 6168 |         "argparse": "^1.0.7",
 6169 |         "esprima": "^4.0.0"
 6170 |       },
 6171 |       "bin": {
 6172 |         "js-yaml": "bin/js-yaml.js"
 6173 |       }
 6174 |     },
 6175 |     "node_modules/gray-matter/node_modules/sprintf-js": {
 6176 |       "version": "1.0.3",
 6177 |       "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
 6178 |       "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
 6179 |       "dev": true,
 6180 |       "license": "BSD-3-Clause"
 6181 |     },
 6182 |     "node_modules/has-bigints": {
 6183 |       "version": "1.1.0",
 6184 |       "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.1.0.tgz",
 6185 |       "integrity": "sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==",
 6186 |       "dev": true,
 6187 |       "license": "MIT",
 6188 |       "engines": {
 6189 |         "node": ">= 0.4"
 6190 |       },
 6191 |       "funding": {
 6192 |         "url": "https://github.com/sponsors/ljharb"
 6193 |       }
 6194 |     },
 6195 |     "node_modules/has-property-descriptors": {
 6196 |       "version": "1.0.2",
 6197 |       "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
 6198 |       "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
 6199 |       "dev": true,
 6200 |       "license": "MIT",
 6201 |       "dependencies": {
 6202 |         "es-define-property": "^1.0.0"
 6203 |       },
 6204 |       "funding": {
 6205 |         "url": "https://github.com/sponsors/ljharb"
 6206 |       }
 6207 |     },
 6208 |     "node_modules/has-proto": {
 6209 |       "version": "1.2.0",
 6210 |       "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.2.0.tgz",
 6211 |       "integrity": "sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==",
 6212 |       "dev": true,
 6213 |       "license": "MIT",
 6214 |       "dependencies": {
 6215 |         "dunder-proto": "^1.0.0"
 6216 |       },
 6217 |       "engines": {
 6218 |         "node": ">= 0.4"
 6219 |       },
 6220 |       "funding": {
 6221 |         "url": "https://github.com/sponsors/ljharb"
 6222 |       }
 6223 |     },
 6224 |     "node_modules/has-symbols": {
 6225 |       "version": "1.1.0",
 6226 |       "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
 6227 |       "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
 6228 |       "dev": true,
 6229 |       "license": "MIT",
 6230 |       "engines": {
 6231 |         "node": ">= 0.4"
 6232 |       },
 6233 |       "funding": {
 6234 |         "url": "https://github.com/sponsors/ljharb"
 6235 |       }
 6236 |     },
 6237 |     "node_modules/has-tostringtag": {
 6238 |       "version": "1.0.2",
 6239 |       "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
 6240 |       "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
 6241 |       "dev": true,
 6242 |       "license": "MIT",
 6243 |       "dependencies": {
 6244 |         "has-symbols": "^1.0.3"
 6245 |       },
 6246 |       "engines": {
 6247 |         "node": ">= 0.4"
 6248 |       },
 6249 |       "funding": {
 6250 |         "url": "https://github.com/sponsors/ljharb"
 6251 |       }
 6252 |     },
 6253 |     "node_modules/hasown": {
 6254 |       "version": "2.0.2",
 6255 |       "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
 6256 |       "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
 6257 |       "dev": true,
 6258 |       "license": "MIT",
 6259 |       "dependencies": {
 6260 |         "function-bind": "^1.1.2"
 6261 |       },
 6262 |       "engines": {
 6263 |         "node": ">= 0.4"
 6264 |       }
 6265 |     },
 6266 |     "node_modules/hast-util-embedded": {
 6267 |       "version": "3.0.0",
 6268 |       "resolved": "https://registry.npmjs.org/hast-util-embedded/-/hast-util-embedded-3.0.0.tgz",
 6269 |       "integrity": "sha512-naH8sld4Pe2ep03qqULEtvYr7EjrLK2QHY8KJR6RJkTUjPGObe1vnx585uzem2hGra+s1q08DZZpfgDVYRbaXA==",
 6270 |       "dev": true,
 6271 |       "license": "MIT",
 6272 |       "dependencies": {
 6273 |         "@types/hast": "^3.0.0",
 6274 |         "hast-util-is-element": "^3.0.0"
 6275 |       },
 6276 |       "funding": {
 6277 |         "type": "opencollective",
 6278 |         "url": "https://opencollective.com/unified"
 6279 |       }
 6280 |     },
 6281 |     "node_modules/hast-util-from-dom": {
 6282 |       "version": "5.0.1",
 6283 |       "resolved": "https://registry.npmjs.org/hast-util-from-dom/-/hast-util-from-dom-5.0.1.tgz",
 6284 |       "integrity": "sha512-N+LqofjR2zuzTjCPzyDUdSshy4Ma6li7p/c3pA78uTwzFgENbgbUrm2ugwsOdcjI1muO+o6Dgzp9p8WHtn/39Q==",
 6285 |       "dev": true,
 6286 |       "license": "ISC",
 6287 |       "dependencies": {
 6288 |         "@types/hast": "^3.0.0",
 6289 |         "hastscript": "^9.0.0",
 6290 |         "web-namespaces": "^2.0.0"
 6291 |       },
 6292 |       "funding": {
 6293 |         "type": "opencollective",
 6294 |         "url": "https://opencollective.com/unified"
 6295 |       }
 6296 |     },
 6297 |     "node_modules/hast-util-from-html": {
 6298 |       "version": "2.0.3",
 6299 |       "resolved": "https://registry.npmjs.org/hast-util-from-html/-/hast-util-from-html-2.0.3.tgz",
 6300 |       "integrity": "sha512-CUSRHXyKjzHov8yKsQjGOElXy/3EKpyX56ELnkHH34vDVw1N1XSQ1ZcAvTyAPtGqLTuKP/uxM+aLkSPqF/EtMw==",
 6301 |       "dev": true,
 6302 |       "license": "MIT",
 6303 |       "dependencies": {
 6304 |         "@types/hast": "^3.0.0",
 6305 |         "devlop": "^1.1.0",
 6306 |         "hast-util-from-parse5": "^8.0.0",
 6307 |         "parse5": "^7.0.0",
 6308 |         "vfile": "^6.0.0",
 6309 |         "vfile-message": "^4.0.0"
 6310 |       },
 6311 |       "funding": {
 6312 |         "type": "opencollective",
 6313 |         "url": "https://opencollective.com/unified"
 6314 |       }
 6315 |     },
 6316 |     "node_modules/hast-util-from-html-isomorphic": {
 6317 |       "version": "2.0.0",
 6318 |       "resolved": "https://registry.npmjs.org/hast-util-from-html-isomorphic/-/hast-util-from-html-isomorphic-2.0.0.tgz",
 6319 |       "integrity": "sha512-zJfpXq44yff2hmE0XmwEOzdWin5xwH+QIhMLOScpX91e/NSGPsAzNCvLQDIEPyO2TXi+lBmU6hjLIhV8MwP2kw==",
 6320 |       "dev": true,
 6321 |       "license": "MIT",
 6322 |       "dependencies": {
 6323 |         "@types/hast": "^3.0.0",
 6324 |         "hast-util-from-dom": "^5.0.0",
 6325 |         "hast-util-from-html": "^2.0.0",
 6326 |         "unist-util-remove-position": "^5.0.0"
 6327 |       },
 6328 |       "funding": {
 6329 |         "type": "opencollective",
 6330 |         "url": "https://opencollective.com/unified"
 6331 |       }
 6332 |     },
 6333 |     "node_modules/hast-util-from-parse5": {
 6334 |       "version": "8.0.3",
 6335 |       "resolved": "https://registry.npmjs.org/hast-util-from-parse5/-/hast-util-from-parse5-8.0.3.tgz",
 6336 |       "integrity": "sha512-3kxEVkEKt0zvcZ3hCRYI8rqrgwtlIOFMWkbclACvjlDw8Li9S2hk/d51OI0nr/gIpdMHNepwgOKqZ/sy0Clpyg==",
 6337 |       "dev": true,
 6338 |       "license": "MIT",
 6339 |       "dependencies": {
 6340 |         "@types/hast": "^3.0.0",
 6341 |         "@types/unist": "^3.0.0",
 6342 |         "devlop": "^1.0.0",
 6343 |         "hastscript": "^9.0.0",
 6344 |         "property-information": "^7.0.0",
 6345 |         "vfile": "^6.0.0",
 6346 |         "vfile-location": "^5.0.0",
 6347 |         "web-namespaces": "^2.0.0"
 6348 |       },
 6349 |       "funding": {
 6350 |         "type": "opencollective",
 6351 |         "url": "https://opencollective.com/unified"
 6352 |       }
 6353 |     },
 6354 |     "node_modules/hast-util-has-property": {
 6355 |       "version": "3.0.0",
 6356 |       "resolved": "https://registry.npmjs.org/hast-util-has-property/-/hast-util-has-property-3.0.0.tgz",
 6357 |       "integrity": "sha512-MNilsvEKLFpV604hwfhVStK0usFY/QmM5zX16bo7EjnAEGofr5YyI37kzopBlZJkHD4t887i+q/C8/tr5Q94cA==",
 6358 |       "dev": true,
 6359 |       "license": "MIT",
 6360 |       "dependencies": {
 6361 |         "@types/hast": "^3.0.0"
 6362 |       },
 6363 |       "funding": {
 6364 |         "type": "opencollective",
 6365 |         "url": "https://opencollective.com/unified"
 6366 |       }
 6367 |     },
 6368 |     "node_modules/hast-util-is-body-ok-link": {
 6369 |       "version": "3.0.1",
 6370 |       "resolved": "https://registry.npmjs.org/hast-util-is-body-ok-link/-/hast-util-is-body-ok-link-3.0.1.tgz",
 6371 |       "integrity": "sha512-0qpnzOBLztXHbHQenVB8uNuxTnm/QBFUOmdOSsEn7GnBtyY07+ENTWVFBAnXd/zEgd9/SUG3lRY7hSIBWRgGpQ==",
 6372 |       "dev": true,
 6373 |       "license": "MIT",
 6374 |       "dependencies": {
 6375 |         "@types/hast": "^3.0.0"
 6376 |       },
 6377 |       "funding": {
 6378 |         "type": "opencollective",
 6379 |         "url": "https://opencollective.com/unified"
 6380 |       }
 6381 |     },
 6382 |     "node_modules/hast-util-is-element": {
 6383 |       "version": "3.0.0",
 6384 |       "resolved": "https://registry.npmjs.org/hast-util-is-element/-/hast-util-is-element-3.0.0.tgz",
 6385 |       "integrity": "sha512-Val9mnv2IWpLbNPqc/pUem+a7Ipj2aHacCwgNfTiK0vJKl0LF+4Ba4+v1oPHFpf3bLYmreq0/l3Gud9S5OH42g==",
 6386 |       "dev": true,
 6387 |       "license": "MIT",
 6388 |       "dependencies": {
 6389 |         "@types/hast": "^3.0.0"
 6390 |       },
 6391 |       "funding": {
 6392 |         "type": "opencollective",
 6393 |         "url": "https://opencollective.com/unified"
 6394 |       }
 6395 |     },
 6396 |     "node_modules/hast-util-minify-whitespace": {
 6397 |       "version": "1.0.1",
 6398 |       "resolved": "https://registry.npmjs.org/hast-util-minify-whitespace/-/hast-util-minify-whitespace-1.0.1.tgz",
 6399 |       "integrity": "sha512-L96fPOVpnclQE0xzdWb/D12VT5FabA7SnZOUMtL1DbXmYiHJMXZvFkIZfiMmTCNJHUeO2K9UYNXoVyfz+QHuOw==",
 6400 |       "dev": true,
 6401 |       "license": "MIT",
 6402 |       "dependencies": {
 6403 |         "@types/hast": "^3.0.0",
 6404 |         "hast-util-embedded": "^3.0.0",
 6405 |         "hast-util-is-element": "^3.0.0",
 6406 |         "hast-util-whitespace": "^3.0.0",
 6407 |         "unist-util-is": "^6.0.0"
 6408 |       },
 6409 |       "funding": {
 6410 |         "type": "opencollective",
 6411 |         "url": "https://opencollective.com/unified"
 6412 |       }
 6413 |     },
 6414 |     "node_modules/hast-util-parse-selector": {
 6415 |       "version": "4.0.0",
 6416 |       "resolved": "https://registry.npmjs.org/hast-util-parse-selector/-/hast-util-parse-selector-4.0.0.tgz",
 6417 |       "integrity": "sha512-wkQCkSYoOGCRKERFWcxMVMOcYE2K1AaNLU8DXS9arxnLOUEWbOXKXiJUNzEpqZ3JOKpnha3jkFrumEjVliDe7A==",
 6418 |       "dev": true,
 6419 |       "license": "MIT",
 6420 |       "dependencies": {
 6421 |         "@types/hast": "^3.0.0"
 6422 |       },
 6423 |       "funding": {
 6424 |         "type": "opencollective",
 6425 |         "url": "https://opencollective.com/unified"
 6426 |       }
 6427 |     },
 6428 |     "node_modules/hast-util-phrasing": {
 6429 |       "version": "3.0.1",
 6430 |       "resolved": "https://registry.npmjs.org/hast-util-phrasing/-/hast-util-phrasing-3.0.1.tgz",
 6431 |       "integrity": "sha512-6h60VfI3uBQUxHqTyMymMZnEbNl1XmEGtOxxKYL7stY2o601COo62AWAYBQR9lZbYXYSBoxag8UpPRXK+9fqSQ==",
 6432 |       "dev": true,
 6433 |       "license": "MIT",
 6434 |       "dependencies": {
 6435 |         "@types/hast": "^3.0.0",
 6436 |         "hast-util-embedded": "^3.0.0",
 6437 |         "hast-util-has-property": "^3.0.0",
 6438 |         "hast-util-is-body-ok-link": "^3.0.0",
 6439 |         "hast-util-is-element": "^3.0.0"
 6440 |       },
 6441 |       "funding": {
 6442 |         "type": "opencollective",
 6443 |         "url": "https://opencollective.com/unified"
 6444 |       }
 6445 |     },
 6446 |     "node_modules/hast-util-to-estree": {
 6447 |       "version": "3.1.3",
 6448 |       "resolved": "https://registry.npmjs.org/hast-util-to-estree/-/hast-util-to-estree-3.1.3.tgz",
 6449 |       "integrity": "sha512-48+B/rJWAp0jamNbAAf9M7Uf//UVqAoMmgXhBdxTDJLGKY+LRnZ99qcG+Qjl5HfMpYNzS5v4EAwVEF34LeAj7w==",
 6450 |       "dev": true,
 6451 |       "license": "MIT",
 6452 |       "dependencies": {
 6453 |         "@types/estree": "^1.0.0",
 6454 |         "@types/estree-jsx": "^1.0.0",
 6455 |         "@types/hast": "^3.0.0",
 6456 |         "comma-separated-tokens": "^2.0.0",
 6457 |         "devlop": "^1.0.0",
 6458 |         "estree-util-attach-comments": "^3.0.0",
 6459 |         "estree-util-is-identifier-name": "^3.0.0",
 6460 |         "hast-util-whitespace": "^3.0.0",
 6461 |         "mdast-util-mdx-expression": "^2.0.0",
 6462 |         "mdast-util-mdx-jsx": "^3.0.0",
 6463 |         "mdast-util-mdxjs-esm": "^2.0.0",
 6464 |         "property-information": "^7.0.0",
 6465 |         "space-separated-tokens": "^2.0.0",
 6466 |         "style-to-js": "^1.0.0",
 6467 |         "unist-util-position": "^5.0.0",
 6468 |         "zwitch": "^2.0.0"
 6469 |       },
 6470 |       "funding": {
 6471 |         "type": "opencollective",
 6472 |         "url": "https://opencollective.com/unified"
 6473 |       }
 6474 |     },
 6475 |     "node_modules/hast-util-to-html": {
 6476 |       "version": "9.0.5",
 6477 |       "resolved": "https://registry.npmjs.org/hast-util-to-html/-/hast-util-to-html-9.0.5.tgz",
 6478 |       "integrity": "sha512-OguPdidb+fbHQSU4Q4ZiLKnzWo8Wwsf5bZfbvu7//a9oTYoqD/fWpe96NuHkoS9h0ccGOTe0C4NGXdtS0iObOw==",
 6479 |       "dev": true,
 6480 |       "license": "MIT",
 6481 |       "dependencies": {
 6482 |         "@types/hast": "^3.0.0",
 6483 |         "@types/unist": "^3.0.0",
 6484 |         "ccount": "^2.0.0",
 6485 |         "comma-separated-tokens": "^2.0.0",
 6486 |         "hast-util-whitespace": "^3.0.0",
 6487 |         "html-void-elements": "^3.0.0",
 6488 |         "mdast-util-to-hast": "^13.0.0",
 6489 |         "property-information": "^7.0.0",
 6490 |         "space-separated-tokens": "^2.0.0",
 6491 |         "stringify-entities": "^4.0.0",
 6492 |         "zwitch": "^2.0.4"
 6493 |       },
 6494 |       "funding": {
 6495 |         "type": "opencollective",
 6496 |         "url": "https://opencollective.com/unified"
 6497 |       }
 6498 |     },
 6499 |     "node_modules/hast-util-to-jsx-runtime": {
 6500 |       "version": "2.3.6",
 6501 |       "resolved": "https://registry.npmjs.org/hast-util-to-jsx-runtime/-/hast-util-to-jsx-runtime-2.3.6.tgz",
 6502 |       "integrity": "sha512-zl6s8LwNyo1P9uw+XJGvZtdFF1GdAkOg8ujOw+4Pyb76874fLps4ueHXDhXWdk6YHQ6OgUtinliG7RsYvCbbBg==",
 6503 |       "dev": true,
 6504 |       "license": "MIT",
 6505 |       "dependencies": {
 6506 |         "@types/estree": "^1.0.0",
 6507 |         "@types/hast": "^3.0.0",
 6508 |         "@types/unist": "^3.0.0",
 6509 |         "comma-separated-tokens": "^2.0.0",
 6510 |         "devlop": "^1.0.0",
 6511 |         "estree-util-is-identifier-name": "^3.0.0",
 6512 |         "hast-util-whitespace": "^3.0.0",
 6513 |         "mdast-util-mdx-expression": "^2.0.0",
 6514 |         "mdast-util-mdx-jsx": "^3.0.0",
 6515 |         "mdast-util-mdxjs-esm": "^2.0.0",
 6516 |         "property-information": "^7.0.0",
 6517 |         "space-separated-tokens": "^2.0.0",
 6518 |         "style-to-js": "^1.0.0",
 6519 |         "unist-util-position": "^5.0.0",
 6520 |         "vfile-message": "^4.0.0"
 6521 |       },
 6522 |       "funding": {
 6523 |         "type": "opencollective",
 6524 |         "url": "https://opencollective.com/unified"
 6525 |       }
 6526 |     },
 6527 |     "node_modules/hast-util-to-mdast": {
 6528 |       "version": "10.1.2",
 6529 |       "resolved": "https://registry.npmjs.org/hast-util-to-mdast/-/hast-util-to-mdast-10.1.2.tgz",
 6530 |       "integrity": "sha512-FiCRI7NmOvM4y+f5w32jPRzcxDIz+PUqDwEqn1A+1q2cdp3B8Gx7aVrXORdOKjMNDQsD1ogOr896+0jJHW1EFQ==",
 6531 |       "dev": true,
 6532 |       "license": "MIT",
 6533 |       "dependencies": {
 6534 |         "@types/hast": "^3.0.0",
 6535 |         "@types/mdast": "^4.0.0",
 6536 |         "@ungap/structured-clone": "^1.0.0",
 6537 |         "hast-util-phrasing": "^3.0.0",
 6538 |         "hast-util-to-html": "^9.0.0",
 6539 |         "hast-util-to-text": "^4.0.0",
 6540 |         "hast-util-whitespace": "^3.0.0",
 6541 |         "mdast-util-phrasing": "^4.0.0",
 6542 |         "mdast-util-to-hast": "^13.0.0",
 6543 |         "mdast-util-to-string": "^4.0.0",
 6544 |         "rehype-minify-whitespace": "^6.0.0",
 6545 |         "trim-trailing-lines": "^2.0.0",
 6546 |         "unist-util-position": "^5.0.0",
 6547 |         "unist-util-visit": "^5.0.0"
 6548 |       },
 6549 |       "funding": {
 6550 |         "type": "opencollective",
 6551 |         "url": "https://opencollective.com/unified"
 6552 |       }
 6553 |     },
 6554 |     "node_modules/hast-util-to-string": {
 6555 |       "version": "3.0.1",
 6556 |       "resolved": "https://registry.npmjs.org/hast-util-to-string/-/hast-util-to-string-3.0.1.tgz",
 6557 |       "integrity": "sha512-XelQVTDWvqcl3axRfI0xSeoVKzyIFPwsAGSLIsKdJKQMXDYJS4WYrBNF/8J7RdhIcFI2BOHgAifggsvsxp/3+A==",
 6558 |       "dev": true,
 6559 |       "license": "MIT",
 6560 |       "dependencies": {
 6561 |         "@types/hast": "^3.0.0"
 6562 |       },
 6563 |       "funding": {
 6564 |         "type": "opencollective",
 6565 |         "url": "https://opencollective.com/unified"
 6566 |       }
 6567 |     },
 6568 |     "node_modules/hast-util-to-text": {
 6569 |       "version": "4.0.2",
 6570 |       "resolved": "https://registry.npmjs.org/hast-util-to-text/-/hast-util-to-text-4.0.2.tgz",
 6571 |       "integrity": "sha512-KK6y/BN8lbaq654j7JgBydev7wuNMcID54lkRav1P0CaE1e47P72AWWPiGKXTJU271ooYzcvTAn/Zt0REnvc7A==",
 6572 |       "dev": true,
 6573 |       "license": "MIT",
 6574 |       "dependencies": {
 6575 |         "@types/hast": "^3.0.0",
 6576 |         "@types/unist": "^3.0.0",
 6577 |         "hast-util-is-element": "^3.0.0",
 6578 |         "unist-util-find-after": "^5.0.0"
 6579 |       },
 6580 |       "funding": {
 6581 |         "type": "opencollective",
 6582 |         "url": "https://opencollective.com/unified"
 6583 |       }
 6584 |     },
 6585 |     "node_modules/hast-util-whitespace": {
 6586 |       "version": "3.0.0",
 6587 |       "resolved": "https://registry.npmjs.org/hast-util-whitespace/-/hast-util-whitespace-3.0.0.tgz",
 6588 |       "integrity": "sha512-88JUN06ipLwsnv+dVn+OIYOvAuvBMy/Qoi6O7mQHxdPXpjy+Cd6xRkWwux7DKO+4sYILtLBRIKgsdpS2gQc7qw==",
 6589 |       "dev": true,
 6590 |       "license": "MIT",
 6591 |       "dependencies": {
 6592 |         "@types/hast": "^3.0.0"
 6593 |       },
 6594 |       "funding": {
 6595 |         "type": "opencollective",
 6596 |         "url": "https://opencollective.com/unified"
 6597 |       }
 6598 |     },
 6599 |     "node_modules/hastscript": {
 6600 |       "version": "9.0.1",
 6601 |       "resolved": "https://registry.npmjs.org/hastscript/-/hastscript-9.0.1.tgz",
 6602 |       "integrity": "sha512-g7df9rMFX/SPi34tyGCyUBREQoKkapwdY/T04Qn9TDWfHhAYt4/I0gMVirzK5wEzeUqIjEB+LXC/ypb7Aqno5w==",
 6603 |       "dev": true,
 6604 |       "license": "MIT",
 6605 |       "dependencies": {
 6606 |         "@types/hast": "^3.0.0",
 6607 |         "comma-separated-tokens": "^2.0.0",
 6608 |         "hast-util-parse-selector": "^4.0.0",
 6609 |         "property-information": "^7.0.0",
 6610 |         "space-separated-tokens": "^2.0.0"
 6611 |       },
 6612 |       "funding": {
 6613 |         "type": "opencollective",
 6614 |         "url": "https://opencollective.com/unified"
 6615 |       }
 6616 |     },
 6617 |     "node_modules/html-void-elements": {
 6618 |       "version": "3.0.0",
 6619 |       "resolved": "https://registry.npmjs.org/html-void-elements/-/html-void-elements-3.0.0.tgz",
 6620 |       "integrity": "sha512-bEqo66MRXsUGxWHV5IP0PUiAWwoEjba4VCzg0LjFJBpchPaTfyfCKTG6bc5F8ucKec3q5y6qOdGyYTSBEvhCrg==",
 6621 |       "dev": true,
 6622 |       "license": "MIT",
 6623 |       "funding": {
 6624 |         "type": "github",
 6625 |         "url": "https://github.com/sponsors/wooorm"
 6626 |       }
 6627 |     },
 6628 |     "node_modules/http-cache-semantics": {
 6629 |       "version": "4.2.0",
 6630 |       "resolved": "https://registry.npmjs.org/http-cache-semantics/-/http-cache-semantics-4.2.0.tgz",
 6631 |       "integrity": "sha512-dTxcvPXqPvXBQpq5dUr6mEMJX4oIEFv6bwom3FDwKRDsuIjjJGANqhBuoAn9c1RQJIdAKav33ED65E2ys+87QQ==",
 6632 |       "dev": true,
 6633 |       "license": "BSD-2-Clause"
 6634 |     },
 6635 |     "node_modules/http-errors": {
 6636 |       "version": "2.0.0",
 6637 |       "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
 6638 |       "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
 6639 |       "dev": true,
 6640 |       "license": "MIT",
 6641 |       "dependencies": {
 6642 |         "depd": "2.0.0",
 6643 |         "inherits": "2.0.4",
 6644 |         "setprototypeof": "1.2.0",
 6645 |         "statuses": "2.0.1",
 6646 |         "toidentifier": "1.0.1"
 6647 |       },
 6648 |       "engines": {
 6649 |         "node": ">= 0.8"
 6650 |       }
 6651 |     },
 6652 |     "node_modules/http-proxy-agent": {
 6653 |       "version": "7.0.2",
 6654 |       "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-7.0.2.tgz",
 6655 |       "integrity": "sha512-T1gkAiYYDWYx3V5Bmyu7HcfcvL7mUrTWiM6yOfa3PIphViJ/gFPbvidQ+veqSOHci/PxBcDabeUNCzpOODJZig==",
 6656 |       "dev": true,
 6657 |       "license": "MIT",
 6658 |       "dependencies": {
 6659 |         "agent-base": "^7.1.0",
 6660 |         "debug": "^4.3.4"
 6661 |       },
 6662 |       "engines": {
 6663 |         "node": ">= 14"
 6664 |       }
 6665 |     },
 6666 |     "node_modules/http2-wrapper": {
 6667 |       "version": "2.2.1",
 6668 |       "resolved": "https://registry.npmjs.org/http2-wrapper/-/http2-wrapper-2.2.1.tgz",
 6669 |       "integrity": "sha512-V5nVw1PAOgfI3Lmeaj2Exmeg7fenjhRUgz1lPSezy1CuhPYbgQtbQj4jZfEAEMlaL+vupsvhjqCyjzob0yxsmQ==",
 6670 |       "dev": true,
 6671 |       "license": "MIT",
 6672 |       "dependencies": {
 6673 |         "quick-lru": "^5.1.1",
 6674 |         "resolve-alpn": "^1.2.0"
 6675 |       },
 6676 |       "engines": {
 6677 |         "node": ">=10.19.0"
 6678 |       }
 6679 |     },
 6680 |     "node_modules/https-proxy-agent": {
 6681 |       "version": "7.0.6",
 6682 |       "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.6.tgz",
 6683 |       "integrity": "sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==",
 6684 |       "dev": true,
 6685 |       "license": "MIT",
 6686 |       "dependencies": {
 6687 |         "agent-base": "^7.1.2",
 6688 |         "debug": "4"
 6689 |       },
 6690 |       "engines": {
 6691 |         "node": ">= 14"
 6692 |       }
 6693 |     },
 6694 |     "node_modules/iconv-lite": {
 6695 |       "version": "0.4.24",
 6696 |       "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
 6697 |       "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
 6698 |       "dev": true,
 6699 |       "license": "MIT",
 6700 |       "dependencies": {
 6701 |         "safer-buffer": ">= 2.1.2 < 3"
 6702 |       },
 6703 |       "engines": {
 6704 |         "node": ">=0.10.0"
 6705 |       }
 6706 |     },
 6707 |     "node_modules/ieee754": {
 6708 |       "version": "1.2.1",
 6709 |       "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
 6710 |       "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
 6711 |       "dev": true,
 6712 |       "funding": [
 6713 |         {
 6714 |           "type": "github",
 6715 |           "url": "https://github.com/sponsors/feross"
 6716 |         },
 6717 |         {
 6718 |           "type": "patreon",
 6719 |           "url": "https://www.patreon.com/feross"
 6720 |         },
 6721 |         {
 6722 |           "type": "consulting",
 6723 |           "url": "https://feross.org/support"
 6724 |         }
 6725 |       ],
 6726 |       "license": "BSD-3-Clause"
 6727 |     },
 6728 |     "node_modules/immer": {
 6729 |       "version": "9.0.21",
 6730 |       "resolved": "https://registry.npmjs.org/immer/-/immer-9.0.21.tgz",
 6731 |       "integrity": "sha512-bc4NBHqOqSfRW7POMkHd51LvClaeMXpm8dx0e8oE2GORbq5aRK7Bxl4FyzVLdGtLmvLKL7BTDBG5ACQm4HWjTA==",
 6732 |       "dev": true,
 6733 |       "license": "MIT",
 6734 |       "funding": {
 6735 |         "type": "opencollective",
 6736 |         "url": "https://opencollective.com/immer"
 6737 |       }
 6738 |     },
 6739 |     "node_modules/import-fresh": {
 6740 |       "version": "3.3.1",
 6741 |       "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
 6742 |       "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
 6743 |       "dev": true,
 6744 |       "license": "MIT",
 6745 |       "dependencies": {
 6746 |         "parent-module": "^1.0.0",
 6747 |         "resolve-from": "^4.0.0"
 6748 |       },
 6749 |       "engines": {
 6750 |         "node": ">=6"
 6751 |       },
 6752 |       "funding": {
 6753 |         "url": "https://github.com/sponsors/sindresorhus"
 6754 |       }
 6755 |     },
 6756 |     "node_modules/indent-string": {
 6757 |       "version": "5.0.0",
 6758 |       "resolved": "https://registry.npmjs.org/indent-string/-/indent-string-5.0.0.tgz",
 6759 |       "integrity": "sha512-m6FAo/spmsW2Ab2fU35JTYwtOKa2yAwXSwgjSv1TJzh4Mh7mC3lzAOVLBprb72XsTrgkEIsl7YrFNAiDiRhIGg==",
 6760 |       "dev": true,
 6761 |       "license": "MIT",
 6762 |       "engines": {
 6763 |         "node": ">=12"
 6764 |       },
 6765 |       "funding": {
 6766 |         "url": "https://github.com/sponsors/sindresorhus"
 6767 |       }
 6768 |     },
 6769 |     "node_modules/inflight": {
 6770 |       "version": "1.0.6",
 6771 |       "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
 6772 |       "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
 6773 |       "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
 6774 |       "dev": true,
 6775 |       "license": "ISC",
 6776 |       "dependencies": {
 6777 |         "once": "^1.3.0",
 6778 |         "wrappy": "1"
 6779 |       }
 6780 |     },
 6781 |     "node_modules/inherits": {
 6782 |       "version": "2.0.4",
 6783 |       "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
 6784 |       "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
 6785 |       "dev": true,
 6786 |       "license": "ISC"
 6787 |     },
 6788 |     "node_modules/ink": {
 6789 |       "version": "5.2.1",
 6790 |       "resolved": "https://registry.npmjs.org/ink/-/ink-5.2.1.tgz",
 6791 |       "integrity": "sha512-BqcUyWrG9zq5HIwW6JcfFHsIYebJkWWb4fczNah1goUO0vv5vneIlfwuS85twyJ5hYR/y18FlAYUxrO9ChIWVg==",
 6792 |       "dev": true,
 6793 |       "license": "MIT",
 6794 |       "dependencies": {
 6795 |         "@alcalzone/ansi-tokenize": "^0.1.3",
 6796 |         "ansi-escapes": "^7.0.0",
 6797 |         "ansi-styles": "^6.2.1",
 6798 |         "auto-bind": "^5.0.1",
 6799 |         "chalk": "^5.3.0",
 6800 |         "cli-boxes": "^3.0.0",
 6801 |         "cli-cursor": "^4.0.0",
 6802 |         "cli-truncate": "^4.0.0",
 6803 |         "code-excerpt": "^4.0.0",
 6804 |         "es-toolkit": "^1.22.0",
 6805 |         "indent-string": "^5.0.0",
 6806 |         "is-in-ci": "^1.0.0",
 6807 |         "patch-console": "^2.0.0",
 6808 |         "react-reconciler": "^0.29.0",
 6809 |         "scheduler": "^0.23.0",
 6810 |         "signal-exit": "^3.0.7",
 6811 |         "slice-ansi": "^7.1.0",
 6812 |         "stack-utils": "^2.0.6",
 6813 |         "string-width": "^7.2.0",
 6814 |         "type-fest": "^4.27.0",
 6815 |         "widest-line": "^5.0.0",
 6816 |         "wrap-ansi": "^9.0.0",
 6817 |         "ws": "^8.18.0",
 6818 |         "yoga-layout": "~3.2.1"
 6819 |       },
 6820 |       "engines": {
 6821 |         "node": ">=18"
 6822 |       },
 6823 |       "peerDependencies": {
 6824 |         "@types/react": ">=18.0.0",
 6825 |         "react": ">=18.0.0",
 6826 |         "react-devtools-core": "^4.19.1"
 6827 |       },
 6828 |       "peerDependenciesMeta": {
 6829 |         "@types/react": {
 6830 |           "optional": true
 6831 |         },
 6832 |         "react-devtools-core": {
 6833 |           "optional": true
 6834 |         }
 6835 |       }
 6836 |     },
 6837 |     "node_modules/ink-spinner": {
 6838 |       "version": "5.0.0",
 6839 |       "resolved": "https://registry.npmjs.org/ink-spinner/-/ink-spinner-5.0.0.tgz",
 6840 |       "integrity": "sha512-EYEasbEjkqLGyPOUc8hBJZNuC5GvXGMLu0w5gdTNskPc7Izc5vO3tdQEYnzvshucyGCBXc86ig0ujXPMWaQCdA==",
 6841 |       "dev": true,
 6842 |       "license": "MIT",
 6843 |       "dependencies": {
 6844 |         "cli-spinners": "^2.7.0"
 6845 |       },
 6846 |       "engines": {
 6847 |         "node": ">=14.16"
 6848 |       },
 6849 |       "peerDependencies": {
 6850 |         "ink": ">=4.0.0",
 6851 |         "react": ">=18.0.0"
 6852 |       }
 6853 |     },
 6854 |     "node_modules/ink/node_modules/emoji-regex": {
 6855 |       "version": "10.4.0",
 6856 |       "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-10.4.0.tgz",
 6857 |       "integrity": "sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw==",
 6858 |       "dev": true,
 6859 |       "license": "MIT"
 6860 |     },
 6861 |     "node_modules/ink/node_modules/signal-exit": {
 6862 |       "version": "3.0.7",
 6863 |       "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
 6864 |       "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
 6865 |       "dev": true,
 6866 |       "license": "ISC"
 6867 |     },
 6868 |     "node_modules/ink/node_modules/string-width": {
 6869 |       "version": "7.2.0",
 6870 |       "resolved": "https://registry.npmjs.org/string-width/-/string-width-7.2.0.tgz",
 6871 |       "integrity": "sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==",
 6872 |       "dev": true,
 6873 |       "license": "MIT",
 6874 |       "dependencies": {
 6875 |         "emoji-regex": "^10.3.0",
 6876 |         "get-east-asian-width": "^1.0.0",
 6877 |         "strip-ansi": "^7.1.0"
 6878 |       },
 6879 |       "engines": {
 6880 |         "node": ">=18"
 6881 |       },
 6882 |       "funding": {
 6883 |         "url": "https://github.com/sponsors/sindresorhus"
 6884 |       }
 6885 |     },
 6886 |     "node_modules/ink/node_modules/wrap-ansi": {
 6887 |       "version": "9.0.0",
 6888 |       "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-9.0.0.tgz",
 6889 |       "integrity": "sha512-G8ura3S+3Z2G+mkgNRq8dqaFZAuxfsxpBB8OCTGRTCtp+l/v9nbFNmCUP1BZMts3G1142MsZfn6eeUKrr4PD1Q==",
 6890 |       "dev": true,
 6891 |       "license": "MIT",
 6892 |       "dependencies": {
 6893 |         "ansi-styles": "^6.2.1",
 6894 |         "string-width": "^7.0.0",
 6895 |         "strip-ansi": "^7.1.0"
 6896 |       },
 6897 |       "engines": {
 6898 |         "node": ">=18"
 6899 |       },
 6900 |       "funding": {
 6901 |         "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
 6902 |       }
 6903 |     },
 6904 |     "node_modules/inline-style-parser": {
 6905 |       "version": "0.2.4",
 6906 |       "resolved": "https://registry.npmjs.org/inline-style-parser/-/inline-style-parser-0.2.4.tgz",
 6907 |       "integrity": "sha512-0aO8FkhNZlj/ZIbNi7Lxxr12obT7cL1moPfE4tg1LkX7LlLfC6DeX4l2ZEud1ukP9jNQyNnfzQVqwbwmAATY4Q==",
 6908 |       "dev": true,
 6909 |       "license": "MIT"
 6910 |     },
 6911 |     "node_modules/inquirer": {
 6912 |       "version": "12.9.1",
 6913 |       "resolved": "https://registry.npmjs.org/inquirer/-/inquirer-12.9.1.tgz",
 6914 |       "integrity": "sha512-G7uXAb9OiLcd+9jmA/7KKrItvFF00kKk/jb6CtG+Tm2zSPWfzzhyJwDhVCy+mBmE32o2zJnB5JnknIIv2Ft+AA==",
 6915 |       "dev": true,
 6916 |       "license": "MIT",
 6917 |       "dependencies": {
 6918 |         "@inquirer/core": "^10.1.15",
 6919 |         "@inquirer/prompts": "^7.8.1",
 6920 |         "@inquirer/type": "^3.0.8",
 6921 |         "ansi-escapes": "^4.3.2",
 6922 |         "mute-stream": "^2.0.0",
 6923 |         "run-async": "^4.0.5",
 6924 |         "rxjs": "^7.8.2"
 6925 |       },
 6926 |       "engines": {
 6927 |         "node": ">=18"
 6928 |       },
 6929 |       "peerDependencies": {
 6930 |         "@types/node": ">=18"
 6931 |       },
 6932 |       "peerDependenciesMeta": {
 6933 |         "@types/node": {
 6934 |           "optional": true
 6935 |         }
 6936 |       }
 6937 |     },
 6938 |     "node_modules/inquirer/node_modules/ansi-escapes": {
 6939 |       "version": "4.3.2",
 6940 |       "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
 6941 |       "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
 6942 |       "dev": true,
 6943 |       "license": "MIT",
 6944 |       "dependencies": {
 6945 |         "type-fest": "^0.21.3"
 6946 |       },
 6947 |       "engines": {
 6948 |         "node": ">=8"
 6949 |       },
 6950 |       "funding": {
 6951 |         "url": "https://github.com/sponsors/sindresorhus"
 6952 |       }
 6953 |     },
 6954 |     "node_modules/inquirer/node_modules/type-fest": {
 6955 |       "version": "0.21.3",
 6956 |       "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
 6957 |       "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
 6958 |       "dev": true,
 6959 |       "license": "(MIT OR CC0-1.0)",
 6960 |       "engines": {
 6961 |         "node": ">=10"
 6962 |       },
 6963 |       "funding": {
 6964 |         "url": "https://github.com/sponsors/sindresorhus"
 6965 |       }
 6966 |     },
 6967 |     "node_modules/internal-slot": {
 6968 |       "version": "1.1.0",
 6969 |       "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.1.0.tgz",
 6970 |       "integrity": "sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==",
 6971 |       "dev": true,
 6972 |       "license": "MIT",
 6973 |       "dependencies": {
 6974 |         "es-errors": "^1.3.0",
 6975 |         "hasown": "^2.0.2",
 6976 |         "side-channel": "^1.1.0"
 6977 |       },
 6978 |       "engines": {
 6979 |         "node": ">= 0.4"
 6980 |       }
 6981 |     },
 6982 |     "node_modules/ip-address": {
 6983 |       "version": "9.0.5",
 6984 |       "resolved": "https://registry.npmjs.org/ip-address/-/ip-address-9.0.5.tgz",
 6985 |       "integrity": "sha512-zHtQzGojZXTwZTHQqra+ETKd4Sn3vgi7uBmlPoXVWZqYvuKmtI0l/VZTjqGmJY9x88GGOaZ9+G9ES8hC4T4X8g==",
 6986 |       "dev": true,
 6987 |       "license": "MIT",
 6988 |       "dependencies": {
 6989 |         "jsbn": "1.1.0",
 6990 |         "sprintf-js": "^1.1.3"
 6991 |       },
 6992 |       "engines": {
 6993 |         "node": ">= 12"
 6994 |       }
 6995 |     },
 6996 |     "node_modules/ip-regex": {
 6997 |       "version": "4.3.0",
 6998 |       "resolved": "https://registry.npmjs.org/ip-regex/-/ip-regex-4.3.0.tgz",
 6999 |       "integrity": "sha512-B9ZWJxHHOHUhUjCPrMpLD4xEq35bUTClHM1S6CBU5ixQnkZmwipwgc96vAd7AAGM9TGHvJR+Uss+/Ak6UphK+Q==",
 7000 |       "dev": true,
 7001 |       "license": "MIT",
 7002 |       "engines": {
 7003 |         "node": ">=8"
 7004 |       }
 7005 |     },
 7006 |     "node_modules/ipaddr.js": {
 7007 |       "version": "1.9.1",
 7008 |       "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
 7009 |       "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
 7010 |       "dev": true,
 7011 |       "license": "MIT",
 7012 |       "engines": {
 7013 |         "node": ">= 0.10"
 7014 |       }
 7015 |     },
 7016 |     "node_modules/is-alphabetical": {
 7017 |       "version": "2.0.1",
 7018 |       "resolved": "https://registry.npmjs.org/is-alphabetical/-/is-alphabetical-2.0.1.tgz",
 7019 |       "integrity": "sha512-FWyyY60MeTNyeSRpkM2Iry0G9hpr7/9kD40mD/cGQEuilcZYS4okz8SN2Q6rLCJ8gbCt6fN+rC+6tMGS99LaxQ==",
 7020 |       "dev": true,
 7021 |       "license": "MIT",
 7022 |       "funding": {
 7023 |         "type": "github",
 7024 |         "url": "https://github.com/sponsors/wooorm"
 7025 |       }
 7026 |     },
 7027 |     "node_modules/is-alphanumerical": {
 7028 |       "version": "2.0.1",
 7029 |       "resolved": "https://registry.npmjs.org/is-alphanumerical/-/is-alphanumerical-2.0.1.tgz",
 7030 |       "integrity": "sha512-hmbYhX/9MUMF5uh7tOXyK/n0ZvWpad5caBA17GsC6vyuCqaWliRG5K1qS9inmUhEMaOBIW7/whAnSwveW/LtZw==",
 7031 |       "dev": true,
 7032 |       "license": "MIT",
 7033 |       "dependencies": {
 7034 |         "is-alphabetical": "^2.0.0",
 7035 |         "is-decimal": "^2.0.0"
 7036 |       },
 7037 |       "funding": {
 7038 |         "type": "github",
 7039 |         "url": "https://github.com/sponsors/wooorm"
 7040 |       }
 7041 |     },
 7042 |     "node_modules/is-array-buffer": {
 7043 |       "version": "3.0.5",
 7044 |       "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.5.tgz",
 7045 |       "integrity": "sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==",
 7046 |       "dev": true,
 7047 |       "license": "MIT",
 7048 |       "dependencies": {
 7049 |         "call-bind": "^1.0.8",
 7050 |         "call-bound": "^1.0.3",
 7051 |         "get-intrinsic": "^1.2.6"
 7052 |       },
 7053 |       "engines": {
 7054 |         "node": ">= 0.4"
 7055 |       },
 7056 |       "funding": {
 7057 |         "url": "https://github.com/sponsors/ljharb"
 7058 |       }
 7059 |     },
 7060 |     "node_modules/is-arrayish": {
 7061 |       "version": "0.2.1",
 7062 |       "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
 7063 |       "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
 7064 |       "dev": true,
 7065 |       "license": "MIT"
 7066 |     },
 7067 |     "node_modules/is-async-function": {
 7068 |       "version": "2.1.1",
 7069 |       "resolved": "https://registry.npmjs.org/is-async-function/-/is-async-function-2.1.1.tgz",
 7070 |       "integrity": "sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==",
 7071 |       "dev": true,
 7072 |       "license": "MIT",
 7073 |       "dependencies": {
 7074 |         "async-function": "^1.0.0",
 7075 |         "call-bound": "^1.0.3",
 7076 |         "get-proto": "^1.0.1",
 7077 |         "has-tostringtag": "^1.0.2",
 7078 |         "safe-regex-test": "^1.1.0"
 7079 |       },
 7080 |       "engines": {
 7081 |         "node": ">= 0.4"
 7082 |       },
 7083 |       "funding": {
 7084 |         "url": "https://github.com/sponsors/ljharb"
 7085 |       }
 7086 |     },
 7087 |     "node_modules/is-bigint": {
 7088 |       "version": "1.1.0",
 7089 |       "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.1.0.tgz",
 7090 |       "integrity": "sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==",
 7091 |       "dev": true,
 7092 |       "license": "MIT",
 7093 |       "dependencies": {
 7094 |         "has-bigints": "^1.0.2"
 7095 |       },
 7096 |       "engines": {
 7097 |         "node": ">= 0.4"
 7098 |       },
 7099 |       "funding": {
 7100 |         "url": "https://github.com/sponsors/ljharb"
 7101 |       }
 7102 |     },
 7103 |     "node_modules/is-binary-path": {
 7104 |       "version": "2.1.0",
 7105 |       "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
 7106 |       "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
 7107 |       "dev": true,
 7108 |       "license": "MIT",
 7109 |       "dependencies": {
 7110 |         "binary-extensions": "^2.0.0"
 7111 |       },
 7112 |       "engines": {
 7113 |         "node": ">=8"
 7114 |       }
 7115 |     },
 7116 |     "node_modules/is-boolean-object": {
 7117 |       "version": "1.2.2",
 7118 |       "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.2.2.tgz",
 7119 |       "integrity": "sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==",
 7120 |       "dev": true,
 7121 |       "license": "MIT",
 7122 |       "dependencies": {
 7123 |         "call-bound": "^1.0.3",
 7124 |         "has-tostringtag": "^1.0.2"
 7125 |       },
 7126 |       "engines": {
 7127 |         "node": ">= 0.4"
 7128 |       },
 7129 |       "funding": {
 7130 |         "url": "https://github.com/sponsors/ljharb"
 7131 |       }
 7132 |     },
 7133 |     "node_modules/is-callable": {
 7134 |       "version": "1.2.7",
 7135 |       "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
 7136 |       "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
 7137 |       "dev": true,
 7138 |       "license": "MIT",
 7139 |       "engines": {
 7140 |         "node": ">= 0.4"
 7141 |       },
 7142 |       "funding": {
 7143 |         "url": "https://github.com/sponsors/ljharb"
 7144 |       }
 7145 |     },
 7146 |     "node_modules/is-core-module": {
 7147 |       "version": "2.16.1",
 7148 |       "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
 7149 |       "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
 7150 |       "dev": true,
 7151 |       "license": "MIT",
 7152 |       "dependencies": {
 7153 |         "hasown": "^2.0.2"
 7154 |       },
 7155 |       "engines": {
 7156 |         "node": ">= 0.4"
 7157 |       },
 7158 |       "funding": {
 7159 |         "url": "https://github.com/sponsors/ljharb"
 7160 |       }
 7161 |     },
 7162 |     "node_modules/is-data-view": {
 7163 |       "version": "1.0.2",
 7164 |       "resolved": "https://registry.npmjs.org/is-data-view/-/is-data-view-1.0.2.tgz",
 7165 |       "integrity": "sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==",
 7166 |       "dev": true,
 7167 |       "license": "MIT",
 7168 |       "dependencies": {
 7169 |         "call-bound": "^1.0.2",
 7170 |         "get-intrinsic": "^1.2.6",
 7171 |         "is-typed-array": "^1.1.13"
 7172 |       },
 7173 |       "engines": {
 7174 |         "node": ">= 0.4"
 7175 |       },
 7176 |       "funding": {
 7177 |         "url": "https://github.com/sponsors/ljharb"
 7178 |       }
 7179 |     },
 7180 |     "node_modules/is-date-object": {
 7181 |       "version": "1.1.0",
 7182 |       "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.1.0.tgz",
 7183 |       "integrity": "sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==",
 7184 |       "dev": true,
 7185 |       "license": "MIT",
 7186 |       "dependencies": {
 7187 |         "call-bound": "^1.0.2",
 7188 |         "has-tostringtag": "^1.0.2"
 7189 |       },
 7190 |       "engines": {
 7191 |         "node": ">= 0.4"
 7192 |       },
 7193 |       "funding": {
 7194 |         "url": "https://github.com/sponsors/ljharb"
 7195 |       }
 7196 |     },
 7197 |     "node_modules/is-decimal": {
 7198 |       "version": "2.0.1",
 7199 |       "resolved": "https://registry.npmjs.org/is-decimal/-/is-decimal-2.0.1.tgz",
 7200 |       "integrity": "sha512-AAB9hiomQs5DXWcRB1rqsxGUstbRroFOPPVAomNk/3XHR5JyEZChOyTWe2oayKnsSsr/kcGqF+z6yuH6HHpN0A==",
 7201 |       "dev": true,
 7202 |       "license": "MIT",
 7203 |       "funding": {
 7204 |         "type": "github",
 7205 |         "url": "https://github.com/sponsors/wooorm"
 7206 |       }
 7207 |     },
 7208 |     "node_modules/is-docker": {
 7209 |       "version": "2.2.1",
 7210 |       "resolved": "https://registry.npmjs.org/is-docker/-/is-docker-2.2.1.tgz",
 7211 |       "integrity": "sha512-F+i2BKsFrH66iaUFc0woD8sLy8getkwTwtOBjvs56Cx4CgJDeKQeqfz8wAYiSb8JOprWhHH5p77PbmYCvvUuXQ==",
 7212 |       "dev": true,
 7213 |       "license": "MIT",
 7214 |       "bin": {
 7215 |         "is-docker": "cli.js"
 7216 |       },
 7217 |       "engines": {
 7218 |         "node": ">=8"
 7219 |       },
 7220 |       "funding": {
 7221 |         "url": "https://github.com/sponsors/sindresorhus"
 7222 |       }
 7223 |     },
 7224 |     "node_modules/is-extendable": {
 7225 |       "version": "0.1.1",
 7226 |       "resolved": "https://registry.npmjs.org/is-extendable/-/is-extendable-0.1.1.tgz",
 7227 |       "integrity": "sha512-5BMULNob1vgFX6EjQw5izWDxrecWK9AM72rugNr0TFldMOi0fj6Jk+zeKIt0xGj4cEfQIJth4w3OKWOJ4f+AFw==",
 7228 |       "dev": true,
 7229 |       "license": "MIT",
 7230 |       "engines": {
 7231 |         "node": ">=0.10.0"
 7232 |       }
 7233 |     },
 7234 |     "node_modules/is-extglob": {
 7235 |       "version": "2.1.1",
 7236 |       "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
 7237 |       "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
 7238 |       "dev": true,
 7239 |       "license": "MIT",
 7240 |       "engines": {
 7241 |         "node": ">=0.10.0"
 7242 |       }
 7243 |     },
 7244 |     "node_modules/is-finalizationregistry": {
 7245 |       "version": "1.1.1",
 7246 |       "resolved": "https://registry.npmjs.org/is-finalizationregistry/-/is-finalizationregistry-1.1.1.tgz",
 7247 |       "integrity": "sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==",
 7248 |       "dev": true,
 7249 |       "license": "MIT",
 7250 |       "dependencies": {
 7251 |         "call-bound": "^1.0.3"
 7252 |       },
 7253 |       "engines": {
 7254 |         "node": ">= 0.4"
 7255 |       },
 7256 |       "funding": {
 7257 |         "url": "https://github.com/sponsors/ljharb"
 7258 |       }
 7259 |     },
 7260 |     "node_modules/is-fullwidth-code-point": {
 7261 |       "version": "4.0.0",
 7262 |       "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-4.0.0.tgz",
 7263 |       "integrity": "sha512-O4L094N2/dZ7xqVdrXhh9r1KODPJpFms8B5sGdJLPy664AgvXsreZUyCQQNItZRDlYug4xStLjNp/sz3HvBowQ==",
 7264 |       "dev": true,
 7265 |       "license": "MIT",
 7266 |       "engines": {
 7267 |         "node": ">=12"
 7268 |       },
 7269 |       "funding": {
 7270 |         "url": "https://github.com/sponsors/sindresorhus"
 7271 |       }
 7272 |     },
 7273 |     "node_modules/is-generator-function": {
 7274 |       "version": "1.1.0",
 7275 |       "resolved": "https://registry.npmjs.org/is-generator-function/-/is-generator-function-1.1.0.tgz",
 7276 |       "integrity": "sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==",
 7277 |       "dev": true,
 7278 |       "license": "MIT",
 7279 |       "dependencies": {
 7280 |         "call-bound": "^1.0.3",
 7281 |         "get-proto": "^1.0.0",
 7282 |         "has-tostringtag": "^1.0.2",
 7283 |         "safe-regex-test": "^1.1.0"
 7284 |       },
 7285 |       "engines": {
 7286 |         "node": ">= 0.4"
 7287 |       },
 7288 |       "funding": {
 7289 |         "url": "https://github.com/sponsors/ljharb"
 7290 |       }
 7291 |     },
 7292 |     "node_modules/is-glob": {
 7293 |       "version": "4.0.3",
 7294 |       "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
 7295 |       "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
 7296 |       "dev": true,
 7297 |       "license": "MIT",
 7298 |       "dependencies": {
 7299 |         "is-extglob": "^2.1.1"
 7300 |       },
 7301 |       "engines": {
 7302 |         "node": ">=0.10.0"
 7303 |       }
 7304 |     },
 7305 |     "node_modules/is-hexadecimal": {
 7306 |       "version": "2.0.1",
 7307 |       "resolved": "https://registry.npmjs.org/is-hexadecimal/-/is-hexadecimal-2.0.1.tgz",
 7308 |       "integrity": "sha512-DgZQp241c8oO6cA1SbTEWiXeoxV42vlcJxgH+B3hi1AiqqKruZR3ZGF8In3fj4+/y/7rHvlOZLZtgJ/4ttYGZg==",
 7309 |       "dev": true,
 7310 |       "license": "MIT",
 7311 |       "funding": {
 7312 |         "type": "github",
 7313 |         "url": "https://github.com/sponsors/wooorm"
 7314 |       }
 7315 |     },
 7316 |     "node_modules/is-in-ci": {
 7317 |       "version": "1.0.0",
 7318 |       "resolved": "https://registry.npmjs.org/is-in-ci/-/is-in-ci-1.0.0.tgz",
 7319 |       "integrity": "sha512-eUuAjybVTHMYWm/U+vBO1sY/JOCgoPCXRxzdju0K+K0BiGW0SChEL1MLC0PoCIR1OlPo5YAp8HuQoUlsWEICwg==",
 7320 |       "dev": true,
 7321 |       "license": "MIT",
 7322 |       "bin": {
 7323 |         "is-in-ci": "cli.js"
 7324 |       },
 7325 |       "engines": {
 7326 |         "node": ">=18"
 7327 |       },
 7328 |       "funding": {
 7329 |         "url": "https://github.com/sponsors/sindresorhus"
 7330 |       }
 7331 |     },
 7332 |     "node_modules/is-ip": {
 7333 |       "version": "3.1.0",
 7334 |       "resolved": "https://registry.npmjs.org/is-ip/-/is-ip-3.1.0.tgz",
 7335 |       "integrity": "sha512-35vd5necO7IitFPjd/YBeqwWnyDWbuLH9ZXQdMfDA8TEo7pv5X8yfrvVO3xbJbLUlERCMvf6X0hTUamQxCYJ9Q==",
 7336 |       "dev": true,
 7337 |       "license": "MIT",
 7338 |       "dependencies": {
 7339 |         "ip-regex": "^4.0.0"
 7340 |       },
 7341 |       "engines": {
 7342 |         "node": ">=8"
 7343 |       }
 7344 |     },
 7345 |     "node_modules/is-map": {
 7346 |       "version": "2.0.3",
 7347 |       "resolved": "https://registry.npmjs.org/is-map/-/is-map-2.0.3.tgz",
 7348 |       "integrity": "sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==",
 7349 |       "dev": true,
 7350 |       "license": "MIT",
 7351 |       "engines": {
 7352 |         "node": ">= 0.4"
 7353 |       },
 7354 |       "funding": {
 7355 |         "url": "https://github.com/sponsors/ljharb"
 7356 |       }
 7357 |     },
 7358 |     "node_modules/is-negative-zero": {
 7359 |       "version": "2.0.3",
 7360 |       "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.3.tgz",
 7361 |       "integrity": "sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==",
 7362 |       "dev": true,
 7363 |       "license": "MIT",
 7364 |       "engines": {
 7365 |         "node": ">= 0.4"
 7366 |       },
 7367 |       "funding": {
 7368 |         "url": "https://github.com/sponsors/ljharb"
 7369 |       }
 7370 |     },
 7371 |     "node_modules/is-number": {
 7372 |       "version": "7.0.0",
 7373 |       "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
 7374 |       "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
 7375 |       "dev": true,
 7376 |       "license": "MIT",
 7377 |       "engines": {
 7378 |         "node": ">=0.12.0"
 7379 |       }
 7380 |     },
 7381 |     "node_modules/is-number-object": {
 7382 |       "version": "1.1.1",
 7383 |       "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.1.1.tgz",
 7384 |       "integrity": "sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==",
 7385 |       "dev": true,
 7386 |       "license": "MIT",
 7387 |       "dependencies": {
 7388 |         "call-bound": "^1.0.3",
 7389 |         "has-tostringtag": "^1.0.2"
 7390 |       },
 7391 |       "engines": {
 7392 |         "node": ">= 0.4"
 7393 |       },
 7394 |       "funding": {
 7395 |         "url": "https://github.com/sponsors/ljharb"
 7396 |       }
 7397 |     },
 7398 |     "node_modules/is-online": {
 7399 |       "version": "10.0.0",
 7400 |       "resolved": "https://registry.npmjs.org/is-online/-/is-online-10.0.0.tgz",
 7401 |       "integrity": "sha512-WCPdKwNDjXJJmUubf2VHLMDBkUZEtuOvpXUfUnUFbEnM6In9ByiScL4f4jKACz/fsb2qDkesFerW3snf/AYz3A==",
 7402 |       "dev": true,
 7403 |       "license": "MIT",
 7404 |       "dependencies": {
 7405 |         "got": "^12.1.0",
 7406 |         "p-any": "^4.0.0",
 7407 |         "p-timeout": "^5.1.0",
 7408 |         "public-ip": "^5.0.0"
 7409 |       },
 7410 |       "engines": {
 7411 |         "node": ">=14.16"
 7412 |       },
 7413 |       "funding": {
 7414 |         "url": "https://github.com/sponsors/sindresorhus"
 7415 |       }
 7416 |     },
 7417 |     "node_modules/is-online/node_modules/got": {
 7418 |       "version": "12.6.1",
 7419 |       "resolved": "https://registry.npmjs.org/got/-/got-12.6.1.tgz",
 7420 |       "integrity": "sha512-mThBblvlAF1d4O5oqyvN+ZxLAYwIJK7bpMxgYqPD9okW0C3qm5FFn7k811QrcuEBwaogR3ngOFoCfs6mRv7teQ==",
 7421 |       "dev": true,
 7422 |       "license": "MIT",
 7423 |       "dependencies": {
 7424 |         "@sindresorhus/is": "^5.2.0",
 7425 |         "@szmarczak/http-timer": "^5.0.1",
 7426 |         "cacheable-lookup": "^7.0.0",
 7427 |         "cacheable-request": "^10.2.8",
 7428 |         "decompress-response": "^6.0.0",
 7429 |         "form-data-encoder": "^2.1.2",
 7430 |         "get-stream": "^6.0.1",
 7431 |         "http2-wrapper": "^2.1.10",
 7432 |         "lowercase-keys": "^3.0.0",
 7433 |         "p-cancelable": "^3.0.0",
 7434 |         "responselike": "^3.0.0"
 7435 |       },
 7436 |       "engines": {
 7437 |         "node": ">=14.16"
 7438 |       },
 7439 |       "funding": {
 7440 |         "url": "https://github.com/sindresorhus/got?sponsor=1"
 7441 |       }
 7442 |     },
 7443 |     "node_modules/is-plain-obj": {
 7444 |       "version": "4.1.0",
 7445 |       "resolved": "https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-4.1.0.tgz",
 7446 |       "integrity": "sha512-+Pgi+vMuUNkJyExiMBt5IlFoMyKnr5zhJ4Uspz58WOhBF5QoIZkFyNHIbBAtHwzVAgk5RtndVNsDRN61/mmDqg==",
 7447 |       "dev": true,
 7448 |       "license": "MIT",
 7449 |       "engines": {
 7450 |         "node": ">=12"
 7451 |       },
 7452 |       "funding": {
 7453 |         "url": "https://github.com/sponsors/sindresorhus"
 7454 |       }
 7455 |     },
 7456 |     "node_modules/is-regex": {
 7457 |       "version": "1.2.1",
 7458 |       "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.2.1.tgz",
 7459 |       "integrity": "sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==",
 7460 |       "dev": true,
 7461 |       "license": "MIT",
 7462 |       "dependencies": {
 7463 |         "call-bound": "^1.0.2",
 7464 |         "gopd": "^1.2.0",
 7465 |         "has-tostringtag": "^1.0.2",
 7466 |         "hasown": "^2.0.2"
 7467 |       },
 7468 |       "engines": {
 7469 |         "node": ">= 0.4"
 7470 |       },
 7471 |       "funding": {
 7472 |         "url": "https://github.com/sponsors/ljharb"
 7473 |       }
 7474 |     },
 7475 |     "node_modules/is-set": {
 7476 |       "version": "2.0.3",
 7477 |       "resolved": "https://registry.npmjs.org/is-set/-/is-set-2.0.3.tgz",
 7478 |       "integrity": "sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==",
 7479 |       "dev": true,
 7480 |       "license": "MIT",
 7481 |       "engines": {
 7482 |         "node": ">= 0.4"
 7483 |       },
 7484 |       "funding": {
 7485 |         "url": "https://github.com/sponsors/ljharb"
 7486 |       }
 7487 |     },
 7488 |     "node_modules/is-shared-array-buffer": {
 7489 |       "version": "1.0.4",
 7490 |       "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.4.tgz",
 7491 |       "integrity": "sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==",
 7492 |       "dev": true,
 7493 |       "license": "MIT",
 7494 |       "dependencies": {
 7495 |         "call-bound": "^1.0.3"
 7496 |       },
 7497 |       "engines": {
 7498 |         "node": ">= 0.4"
 7499 |       },
 7500 |       "funding": {
 7501 |         "url": "https://github.com/sponsors/ljharb"
 7502 |       }
 7503 |     },
 7504 |     "node_modules/is-string": {
 7505 |       "version": "1.1.1",
 7506 |       "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.1.1.tgz",
 7507 |       "integrity": "sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==",
 7508 |       "dev": true,
 7509 |       "license": "MIT",
 7510 |       "dependencies": {
 7511 |         "call-bound": "^1.0.3",
 7512 |         "has-tostringtag": "^1.0.2"
 7513 |       },
 7514 |       "engines": {
 7515 |         "node": ">= 0.4"
 7516 |       },
 7517 |       "funding": {
 7518 |         "url": "https://github.com/sponsors/ljharb"
 7519 |       }
 7520 |     },
 7521 |     "node_modules/is-symbol": {
 7522 |       "version": "1.1.1",
 7523 |       "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.1.1.tgz",
 7524 |       "integrity": "sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==",
 7525 |       "dev": true,
 7526 |       "license": "MIT",
 7527 |       "dependencies": {
 7528 |         "call-bound": "^1.0.2",
 7529 |         "has-symbols": "^1.1.0",
 7530 |         "safe-regex-test": "^1.1.0"
 7531 |       },
 7532 |       "engines": {
 7533 |         "node": ">= 0.4"
 7534 |       },
 7535 |       "funding": {
 7536 |         "url": "https://github.com/sponsors/ljharb"
 7537 |       }
 7538 |     },
 7539 |     "node_modules/is-typed-array": {
 7540 |       "version": "1.1.15",
 7541 |       "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.15.tgz",
 7542 |       "integrity": "sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==",
 7543 |       "dev": true,
 7544 |       "license": "MIT",
 7545 |       "dependencies": {
 7546 |         "which-typed-array": "^1.1.16"
 7547 |       },
 7548 |       "engines": {
 7549 |         "node": ">= 0.4"
 7550 |       },
 7551 |       "funding": {
 7552 |         "url": "https://github.com/sponsors/ljharb"
 7553 |       }
 7554 |     },
 7555 |     "node_modules/is-weakmap": {
 7556 |       "version": "2.0.2",
 7557 |       "resolved": "https://registry.npmjs.org/is-weakmap/-/is-weakmap-2.0.2.tgz",
 7558 |       "integrity": "sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==",
 7559 |       "dev": true,
 7560 |       "license": "MIT",
 7561 |       "engines": {
 7562 |         "node": ">= 0.4"
 7563 |       },
 7564 |       "funding": {
 7565 |         "url": "https://github.com/sponsors/ljharb"
 7566 |       }
 7567 |     },
 7568 |     "node_modules/is-weakref": {
 7569 |       "version": "1.1.1",
 7570 |       "resolved": "https://registry.npmjs.org/is-weakref/-/is-weakref-1.1.1.tgz",
 7571 |       "integrity": "sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==",
 7572 |       "dev": true,
 7573 |       "license": "MIT",
 7574 |       "dependencies": {
 7575 |         "call-bound": "^1.0.3"
 7576 |       },
 7577 |       "engines": {
 7578 |         "node": ">= 0.4"
 7579 |       },
 7580 |       "funding": {
 7581 |         "url": "https://github.com/sponsors/ljharb"
 7582 |       }
 7583 |     },
 7584 |     "node_modules/is-weakset": {
 7585 |       "version": "2.0.4",
 7586 |       "resolved": "https://registry.npmjs.org/is-weakset/-/is-weakset-2.0.4.tgz",
 7587 |       "integrity": "sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==",
 7588 |       "dev": true,
 7589 |       "license": "MIT",
 7590 |       "dependencies": {
 7591 |         "call-bound": "^1.0.3",
 7592 |         "get-intrinsic": "^1.2.6"
 7593 |       },
 7594 |       "engines": {
 7595 |         "node": ">= 0.4"
 7596 |       },
 7597 |       "funding": {
 7598 |         "url": "https://github.com/sponsors/ljharb"
 7599 |       }
 7600 |     },
 7601 |     "node_modules/is-wsl": {
 7602 |       "version": "2.2.0",
 7603 |       "resolved": "https://registry.npmjs.org/is-wsl/-/is-wsl-2.2.0.tgz",
 7604 |       "integrity": "sha512-fKzAra0rGJUUBwGBgNkHZuToZcn+TtXHpeCgmkMJMMYx1sQDYaCSyjJBSCa2nH1DGm7s3n1oBnohoVTBaN7Lww==",
 7605 |       "dev": true,
 7606 |       "license": "MIT",
 7607 |       "dependencies": {
 7608 |         "is-docker": "^2.0.0"
 7609 |       },
 7610 |       "engines": {
 7611 |         "node": ">=8"
 7612 |       }
 7613 |     },
 7614 |     "node_modules/isarray": {
 7615 |       "version": "2.0.5",
 7616 |       "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
 7617 |       "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
 7618 |       "dev": true,
 7619 |       "license": "MIT"
 7620 |     },
 7621 |     "node_modules/isexe": {
 7622 |       "version": "2.0.0",
 7623 |       "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
 7624 |       "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
 7625 |       "dev": true,
 7626 |       "license": "ISC"
 7627 |     },
 7628 |     "node_modules/jackspeak": {
 7629 |       "version": "4.1.1",
 7630 |       "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-4.1.1.tgz",
 7631 |       "integrity": "sha512-zptv57P3GpL+O0I7VdMJNBZCu+BPHVQUk55Ft8/QCJjTVxrnJHuVuX/0Bl2A6/+2oyR/ZMEuFKwmzqqZ/U5nPQ==",
 7632 |       "dev": true,
 7633 |       "license": "BlueOak-1.0.0",
 7634 |       "dependencies": {
 7635 |         "@isaacs/cliui": "^8.0.2"
 7636 |       },
 7637 |       "engines": {
 7638 |         "node": "20 || >=22"
 7639 |       },
 7640 |       "funding": {
 7641 |         "url": "https://github.com/sponsors/isaacs"
 7642 |       }
 7643 |     },
 7644 |     "node_modules/jiti": {
 7645 |       "version": "1.21.7",
 7646 |       "resolved": "https://registry.npmjs.org/jiti/-/jiti-1.21.7.tgz",
 7647 |       "integrity": "sha512-/imKNG4EbWNrVjoNC/1H5/9GFy+tqjGBHCaSsN+P2RnPqjsLmv6UD3Ej+Kj8nBWaRAwyk7kK5ZUc+OEatnTR3A==",
 7648 |       "dev": true,
 7649 |       "license": "MIT",
 7650 |       "bin": {
 7651 |         "jiti": "bin/jiti.js"
 7652 |       }
 7653 |     },
 7654 |     "node_modules/js-tokens": {
 7655 |       "version": "4.0.0",
 7656 |       "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
 7657 |       "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
 7658 |       "dev": true,
 7659 |       "license": "MIT"
 7660 |     },
 7661 |     "node_modules/js-yaml": {
 7662 |       "version": "4.1.0",
 7663 |       "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
 7664 |       "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
 7665 |       "dev": true,
 7666 |       "license": "MIT",
 7667 |       "dependencies": {
 7668 |         "argparse": "^2.0.1"
 7669 |       },
 7670 |       "bin": {
 7671 |         "js-yaml": "bin/js-yaml.js"
 7672 |       }
 7673 |     },
 7674 |     "node_modules/jsbn": {
 7675 |       "version": "1.1.0",
 7676 |       "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-1.1.0.tgz",
 7677 |       "integrity": "sha512-4bYVV3aAMtDTTu4+xsDYa6sy9GyJ69/amsu9sYF2zqjiEoZA5xJi3BrfX3uY+/IekIu7MwdObdbDWpoZdBv3/A==",
 7678 |       "dev": true,
 7679 |       "license": "MIT"
 7680 |     },
 7681 |     "node_modules/jsep": {
 7682 |       "version": "1.4.0",
 7683 |       "resolved": "https://registry.npmjs.org/jsep/-/jsep-1.4.0.tgz",
 7684 |       "integrity": "sha512-B7qPcEVE3NVkmSJbaYxvv4cHkVW7DQsZz13pUMrfS8z8Q/BuShN+gcTXrUlPiGqM2/t/EEaI030bpxMqY8gMlw==",
 7685 |       "dev": true,
 7686 |       "license": "MIT",
 7687 |       "engines": {
 7688 |         "node": ">= 10.16.0"
 7689 |       }
 7690 |     },
 7691 |     "node_modules/json-buffer": {
 7692 |       "version": "3.0.1",
 7693 |       "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
 7694 |       "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
 7695 |       "dev": true,
 7696 |       "license": "MIT"
 7697 |     },
 7698 |     "node_modules/json-parse-even-better-errors": {
 7699 |       "version": "2.3.1",
 7700 |       "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
 7701 |       "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
 7702 |       "dev": true,
 7703 |       "license": "MIT"
 7704 |     },
 7705 |     "node_modules/json-schema-traverse": {
 7706 |       "version": "1.0.0",
 7707 |       "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
 7708 |       "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
 7709 |       "dev": true,
 7710 |       "license": "MIT"
 7711 |     },
 7712 |     "node_modules/jsonc-parser": {
 7713 |       "version": "2.2.1",
 7714 |       "resolved": "https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-2.2.1.tgz",
 7715 |       "integrity": "sha512-o6/yDBYccGvTz1+QFevz6l6OBZ2+fMVu2JZ9CIhzsYRX4mjaK5IyX9eldUdCmga16zlgQxyrj5pt9kzuj2C02w==",
 7716 |       "dev": true,
 7717 |       "license": "MIT"
 7718 |     },
 7719 |     "node_modules/jsonfile": {
 7720 |       "version": "6.1.0",
 7721 |       "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
 7722 |       "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
 7723 |       "dev": true,
 7724 |       "license": "MIT",
 7725 |       "dependencies": {
 7726 |         "universalify": "^2.0.0"
 7727 |       },
 7728 |       "optionalDependencies": {
 7729 |         "graceful-fs": "^4.1.6"
 7730 |       }
 7731 |     },
 7732 |     "node_modules/jsonpath-plus": {
 7733 |       "version": "10.3.0",
 7734 |       "resolved": "https://registry.npmjs.org/jsonpath-plus/-/jsonpath-plus-10.3.0.tgz",
 7735 |       "integrity": "sha512-8TNmfeTCk2Le33A3vRRwtuworG/L5RrgMvdjhKZxvyShO+mBu2fP50OWUjRLNtvw344DdDarFh9buFAZs5ujeA==",
 7736 |       "dev": true,
 7737 |       "license": "MIT",
 7738 |       "dependencies": {
 7739 |         "@jsep-plugin/assignment": "^1.3.0",
 7740 |         "@jsep-plugin/regex": "^1.0.4",
 7741 |         "jsep": "^1.4.0"
 7742 |       },
 7743 |       "bin": {
 7744 |         "jsonpath": "bin/jsonpath-cli.js",
 7745 |         "jsonpath-plus": "bin/jsonpath-cli.js"
 7746 |       },
 7747 |       "engines": {
 7748 |         "node": ">=18.0.0"
 7749 |       }
 7750 |     },
 7751 |     "node_modules/jsonpointer": {
 7752 |       "version": "5.0.1",
 7753 |       "resolved": "https://registry.npmjs.org/jsonpointer/-/jsonpointer-5.0.1.tgz",
 7754 |       "integrity": "sha512-p/nXbhSEcu3pZRdkW1OfJhpsVtW1gd4Wa1fnQc9YLiTfAjn0312eMKimbdIQzuZl9aa9xUGaRlP9T/CJE/ditQ==",
 7755 |       "dev": true,
 7756 |       "license": "MIT",
 7757 |       "engines": {
 7758 |         "node": ">=0.10.0"
 7759 |       }
 7760 |     },
 7761 |     "node_modules/katex": {
 7762 |       "version": "0.16.22",
 7763 |       "resolved": "https://registry.npmjs.org/katex/-/katex-0.16.22.tgz",
 7764 |       "integrity": "sha512-XCHRdUw4lf3SKBaJe4EvgqIuWwkPSo9XoeO8GjQW94Bp7TWv9hNhzZjZ+OH9yf1UmLygb7DIT5GSFQiyt16zYg==",
 7765 |       "dev": true,
 7766 |       "funding": [
 7767 |         "https://opencollective.com/katex",
 7768 |         "https://github.com/sponsors/katex"
 7769 |       ],
 7770 |       "license": "MIT",
 7771 |       "dependencies": {
 7772 |         "commander": "^8.3.0"
 7773 |       },
 7774 |       "bin": {
 7775 |         "katex": "cli.js"
 7776 |       }
 7777 |     },
 7778 |     "node_modules/keyv": {
 7779 |       "version": "4.5.4",
 7780 |       "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
 7781 |       "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
 7782 |       "dev": true,
 7783 |       "license": "MIT",
 7784 |       "dependencies": {
 7785 |         "json-buffer": "3.0.1"
 7786 |       }
 7787 |     },
 7788 |     "node_modules/kind-of": {
 7789 |       "version": "6.0.3",
 7790 |       "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz",
 7791 |       "integrity": "sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==",
 7792 |       "dev": true,
 7793 |       "license": "MIT",
 7794 |       "engines": {
 7795 |         "node": ">=0.10.0"
 7796 |       }
 7797 |     },
 7798 |     "node_modules/lcm": {
 7799 |       "version": "0.0.3",
 7800 |       "resolved": "https://registry.npmjs.org/lcm/-/lcm-0.0.3.tgz",
 7801 |       "integrity": "sha512-TB+ZjoillV6B26Vspf9l2L/vKaRY/4ep3hahcyVkCGFgsTNRUQdc24bQeNFiZeoxH0vr5+7SfNRMQuPHv/1IrQ==",
 7802 |       "dev": true,
 7803 |       "license": "MIT",
 7804 |       "dependencies": {
 7805 |         "gcd": "^0.0.1"
 7806 |       }
 7807 |     },
 7808 |     "node_modules/leven": {
 7809 |       "version": "4.0.0",
 7810 |       "resolved": "https://registry.npmjs.org/leven/-/leven-4.0.0.tgz",
 7811 |       "integrity": "sha512-puehA3YKku3osqPlNuzGDUHq8WpwXupUg1V6NXdV38G+gr+gkBwFC8g1b/+YcIvp8gnqVIus+eJCH/eGsRmJNw==",
 7812 |       "dev": true,
 7813 |       "license": "MIT",
 7814 |       "engines": {
 7815 |         "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
 7816 |       },
 7817 |       "funding": {
 7818 |         "url": "https://github.com/sponsors/sindresorhus"
 7819 |       }
 7820 |     },
 7821 |     "node_modules/lilconfig": {
 7822 |       "version": "3.1.3",
 7823 |       "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.3.tgz",
 7824 |       "integrity": "sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==",
 7825 |       "dev": true,
 7826 |       "license": "MIT",
 7827 |       "engines": {
 7828 |         "node": ">=14"
 7829 |       },
 7830 |       "funding": {
 7831 |         "url": "https://github.com/sponsors/antonk52"
 7832 |       }
 7833 |     },
 7834 |     "node_modules/lines-and-columns": {
 7835 |       "version": "1.2.4",
 7836 |       "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
 7837 |       "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
 7838 |       "dev": true,
 7839 |       "license": "MIT"
 7840 |     },
 7841 |     "node_modules/linkify-it": {
 7842 |       "version": "5.0.0",
 7843 |       "resolved": "https://registry.npmjs.org/linkify-it/-/linkify-it-5.0.0.tgz",
 7844 |       "integrity": "sha512-5aHCbzQRADcdP+ATqnDuhhJ/MRIqDkZX5pyjFHRRysS8vZ5AbqGEoFIb6pYHPZ+L/OC2Lc+xT8uHVVR5CAK/wQ==",
 7845 |       "dev": true,
 7846 |       "license": "MIT",
 7847 |       "dependencies": {
 7848 |         "uc.micro": "^2.0.0"
 7849 |       }
 7850 |     },
 7851 |     "node_modules/lodash": {
 7852 |       "version": "4.17.21",
 7853 |       "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
 7854 |       "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
 7855 |       "dev": true,
 7856 |       "license": "MIT"
 7857 |     },
 7858 |     "node_modules/lodash.topath": {
 7859 |       "version": "4.5.2",
 7860 |       "resolved": "https://registry.npmjs.org/lodash.topath/-/lodash.topath-4.5.2.tgz",
 7861 |       "integrity": "sha512-1/W4dM+35DwvE/iEd1M9ekewOSTlpFekhw9mhAtrwjVqUr83/ilQiyAvmg4tVX7Unkcfl1KC+i9WdaT4B6aQcg==",
 7862 |       "dev": true,
 7863 |       "license": "MIT"
 7864 |     },
 7865 |     "node_modules/longest-streak": {
 7866 |       "version": "3.1.0",
 7867 |       "resolved": "https://registry.npmjs.org/longest-streak/-/longest-streak-3.1.0.tgz",
 7868 |       "integrity": "sha512-9Ri+o0JYgehTaVBBDoMqIl8GXtbWg711O3srftcHhZ0dqnETqLaoIK0x17fUw9rFSlK/0NlsKe0Ahhyl5pXE2g==",
 7869 |       "dev": true,
 7870 |       "license": "MIT",
 7871 |       "funding": {
 7872 |         "type": "github",
 7873 |         "url": "https://github.com/sponsors/wooorm"
 7874 |       }
 7875 |     },
 7876 |     "node_modules/loose-envify": {
 7877 |       "version": "1.4.0",
 7878 |       "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
 7879 |       "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
 7880 |       "dev": true,
 7881 |       "license": "MIT",
 7882 |       "dependencies": {
 7883 |         "js-tokens": "^3.0.0 || ^4.0.0"
 7884 |       },
 7885 |       "bin": {
 7886 |         "loose-envify": "cli.js"
 7887 |       }
 7888 |     },
 7889 |     "node_modules/lowercase-keys": {
 7890 |       "version": "3.0.0",
 7891 |       "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-3.0.0.tgz",
 7892 |       "integrity": "sha512-ozCC6gdQ+glXOQsveKD0YsDy8DSQFjDTz4zyzEHNV5+JP5D62LmfDZ6o1cycFx9ouG940M5dE8C8CTewdj2YWQ==",
 7893 |       "dev": true,
 7894 |       "license": "MIT",
 7895 |       "engines": {
 7896 |         "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
 7897 |       },
 7898 |       "funding": {
 7899 |         "url": "https://github.com/sponsors/sindresorhus"
 7900 |       }
 7901 |     },
 7902 |     "node_modules/lru-cache": {
 7903 |       "version": "11.1.0",
 7904 |       "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-11.1.0.tgz",
 7905 |       "integrity": "sha512-QIXZUBJUx+2zHUdQujWejBkcD9+cs94tLn0+YL8UrCh+D5sCXZ4c7LaEH48pNwRY3MLDgqUFyhlCyjJPf1WP0A==",
 7906 |       "dev": true,
 7907 |       "license": "ISC",
 7908 |       "engines": {
 7909 |         "node": "20 || >=22"
 7910 |       }
 7911 |     },
 7912 |     "node_modules/lunr": {
 7913 |       "version": "2.3.9",
 7914 |       "resolved": "https://registry.npmjs.org/lunr/-/lunr-2.3.9.tgz",
 7915 |       "integrity": "sha512-zTU3DaZaF3Rt9rhN3uBMGQD3dD2/vFQqnvZCDv4dl5iOzq2IZQqTxu90r4E5J+nP70J3ilqVCrbho2eWaeW8Ow==",
 7916 |       "dev": true,
 7917 |       "license": "MIT"
 7918 |     },
 7919 |     "node_modules/make-error": {
 7920 |       "version": "1.3.6",
 7921 |       "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
 7922 |       "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==",
 7923 |       "dev": true,
 7924 |       "license": "ISC"
 7925 |     },
 7926 |     "node_modules/markdown-extensions": {
 7927 |       "version": "2.0.0",
 7928 |       "resolved": "https://registry.npmjs.org/markdown-extensions/-/markdown-extensions-2.0.0.tgz",
 7929 |       "integrity": "sha512-o5vL7aDWatOTX8LzaS1WMoaoxIiLRQJuIKKe2wAw6IeULDHaqbiqiggmx+pKvZDb1Sj+pE46Sn1T7lCqfFtg1Q==",
 7930 |       "dev": true,
 7931 |       "license": "MIT",
 7932 |       "engines": {
 7933 |         "node": ">=16"
 7934 |       },
 7935 |       "funding": {
 7936 |         "url": "https://github.com/sponsors/sindresorhus"
 7937 |       }
 7938 |     },
 7939 |     "node_modules/markdown-it": {
 7940 |       "version": "14.1.0",
 7941 |       "resolved": "https://registry.npmjs.org/markdown-it/-/markdown-it-14.1.0.tgz",
 7942 |       "integrity": "sha512-a54IwgWPaeBCAAsv13YgmALOF1elABB08FxO9i+r4VFk5Vl4pKokRPeX8u5TCgSsPi6ec1otfLjdOpVcgbpshg==",
 7943 |       "dev": true,
 7944 |       "license": "MIT",
 7945 |       "dependencies": {
 7946 |         "argparse": "^2.0.1",
 7947 |         "entities": "^4.4.0",
 7948 |         "linkify-it": "^5.0.0",
 7949 |         "mdurl": "^2.0.0",
 7950 |         "punycode.js": "^2.3.1",
 7951 |         "uc.micro": "^2.1.0"
 7952 |       },
 7953 |       "bin": {
 7954 |         "markdown-it": "bin/markdown-it.mjs"
 7955 |       }
 7956 |     },
 7957 |     "node_modules/markdown-it/node_modules/entities": {
 7958 |       "version": "4.5.0",
 7959 |       "resolved": "https://registry.npmjs.org/entities/-/entities-4.5.0.tgz",
 7960 |       "integrity": "sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==",
 7961 |       "dev": true,
 7962 |       "license": "BSD-2-Clause",
 7963 |       "engines": {
 7964 |         "node": ">=0.12"
 7965 |       },
 7966 |       "funding": {
 7967 |         "url": "https://github.com/fb55/entities?sponsor=1"
 7968 |       }
 7969 |     },
 7970 |     "node_modules/markdown-table": {
 7971 |       "version": "3.0.4",
 7972 |       "resolved": "https://registry.npmjs.org/markdown-table/-/markdown-table-3.0.4.tgz",
 7973 |       "integrity": "sha512-wiYz4+JrLyb/DqW2hkFJxP7Vd7JuTDm77fvbM8VfEQdmSMqcImWeeRbHwZjBjIFki/VaMK2BhFi7oUUZeM5bqw==",
 7974 |       "dev": true,
 7975 |       "license": "MIT",
 7976 |       "funding": {
 7977 |         "type": "github",
 7978 |         "url": "https://github.com/sponsors/wooorm"
 7979 |       }
 7980 |     },
 7981 |     "node_modules/math-intrinsics": {
 7982 |       "version": "1.1.0",
 7983 |       "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
 7984 |       "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
 7985 |       "dev": true,
 7986 |       "license": "MIT",
 7987 |       "engines": {
 7988 |         "node": ">= 0.4"
 7989 |       }
 7990 |     },
 7991 |     "node_modules/mdast": {
 7992 |       "version": "3.0.0",
 7993 |       "resolved": "https://registry.npmjs.org/mdast/-/mdast-3.0.0.tgz",
 7994 |       "integrity": "sha512-xySmf8g4fPKMeC07jXGz971EkLbWAJ83s4US2Tj9lEdnZ142UP5grN73H1Xd3HzrdbU5o9GYYP/y8F9ZSwLE9g==",
 7995 |       "deprecated": "`mdast` was renamed to `remark`",
 7996 |       "dev": true,
 7997 |       "license": "MIT"
 7998 |     },
 7999 |     "node_modules/mdast-util-find-and-replace": {
 8000 |       "version": "3.0.2",
 8001 |       "resolved": "https://registry.npmjs.org/mdast-util-find-and-replace/-/mdast-util-find-and-replace-3.0.2.tgz",
 8002 |       "integrity": "sha512-Tmd1Vg/m3Xz43afeNxDIhWRtFZgM2VLyaf4vSTYwudTyeuTneoL3qtWMA5jeLyz/O1vDJmmV4QuScFCA2tBPwg==",
 8003 |       "dev": true,
 8004 |       "license": "MIT",
 8005 |       "dependencies": {
 8006 |         "@types/mdast": "^4.0.0",
 8007 |         "escape-string-regexp": "^5.0.0",
 8008 |         "unist-util-is": "^6.0.0",
 8009 |         "unist-util-visit-parents": "^6.0.0"
 8010 |       },
 8011 |       "funding": {
 8012 |         "type": "opencollective",
 8013 |         "url": "https://opencollective.com/unified"
 8014 |       }
 8015 |     },
 8016 |     "node_modules/mdast-util-from-markdown": {
 8017 |       "version": "2.0.2",
 8018 |       "resolved": "https://registry.npmjs.org/mdast-util-from-markdown/-/mdast-util-from-markdown-2.0.2.tgz",
 8019 |       "integrity": "sha512-uZhTV/8NBuw0WHkPTrCqDOl0zVe1BIng5ZtHoDk49ME1qqcjYmmLmOf0gELgcRMxN4w2iuIeVso5/6QymSrgmA==",
 8020 |       "dev": true,
 8021 |       "license": "MIT",
 8022 |       "dependencies": {
 8023 |         "@types/mdast": "^4.0.0",
 8024 |         "@types/unist": "^3.0.0",
 8025 |         "decode-named-character-reference": "^1.0.0",
 8026 |         "devlop": "^1.0.0",
 8027 |         "mdast-util-to-string": "^4.0.0",
 8028 |         "micromark": "^4.0.0",
 8029 |         "micromark-util-decode-numeric-character-reference": "^2.0.0",
 8030 |         "micromark-util-decode-string": "^2.0.0",
 8031 |         "micromark-util-normalize-identifier": "^2.0.0",
 8032 |         "micromark-util-symbol": "^2.0.0",
 8033 |         "micromark-util-types": "^2.0.0",
 8034 |         "unist-util-stringify-position": "^4.0.0"
 8035 |       },
 8036 |       "funding": {
 8037 |         "type": "opencollective",
 8038 |         "url": "https://opencollective.com/unified"
 8039 |       }
 8040 |     },
 8041 |     "node_modules/mdast-util-frontmatter": {
 8042 |       "version": "2.0.1",
 8043 |       "resolved": "https://registry.npmjs.org/mdast-util-frontmatter/-/mdast-util-frontmatter-2.0.1.tgz",
 8044 |       "integrity": "sha512-LRqI9+wdgC25P0URIJY9vwocIzCcksduHQ9OF2joxQoyTNVduwLAFUzjoopuRJbJAReaKrNQKAZKL3uCMugWJA==",
 8045 |       "dev": true,
 8046 |       "license": "MIT",
 8047 |       "dependencies": {
 8048 |         "@types/mdast": "^4.0.0",
 8049 |         "devlop": "^1.0.0",
 8050 |         "escape-string-regexp": "^5.0.0",
 8051 |         "mdast-util-from-markdown": "^2.0.0",
 8052 |         "mdast-util-to-markdown": "^2.0.0",
 8053 |         "micromark-extension-frontmatter": "^2.0.0"
 8054 |       },
 8055 |       "funding": {
 8056 |         "type": "opencollective",
 8057 |         "url": "https://opencollective.com/unified"
 8058 |       }
 8059 |     },
 8060 |     "node_modules/mdast-util-gfm": {
 8061 |       "version": "3.1.0",
 8062 |       "resolved": "https://registry.npmjs.org/mdast-util-gfm/-/mdast-util-gfm-3.1.0.tgz",
 8063 |       "integrity": "sha512-0ulfdQOM3ysHhCJ1p06l0b0VKlhU0wuQs3thxZQagjcjPrlFRqY215uZGHHJan9GEAXd9MbfPjFJz+qMkVR6zQ==",
 8064 |       "dev": true,
 8065 |       "license": "MIT",
 8066 |       "dependencies": {
 8067 |         "mdast-util-from-markdown": "^2.0.0",
 8068 |         "mdast-util-gfm-autolink-literal": "^2.0.0",
 8069 |         "mdast-util-gfm-footnote": "^2.0.0",
 8070 |         "mdast-util-gfm-strikethrough": "^2.0.0",
 8071 |         "mdast-util-gfm-table": "^2.0.0",
 8072 |         "mdast-util-gfm-task-list-item": "^2.0.0",
 8073 |         "mdast-util-to-markdown": "^2.0.0"
 8074 |       },
 8075 |       "funding": {
 8076 |         "type": "opencollective",
 8077 |         "url": "https://opencollective.com/unified"
 8078 |       }
 8079 |     },
 8080 |     "node_modules/mdast-util-gfm-autolink-literal": {
 8081 |       "version": "2.0.1",
 8082 |       "resolved": "https://registry.npmjs.org/mdast-util-gfm-autolink-literal/-/mdast-util-gfm-autolink-literal-2.0.1.tgz",
 8083 |       "integrity": "sha512-5HVP2MKaP6L+G6YaxPNjuL0BPrq9orG3TsrZ9YXbA3vDw/ACI4MEsnoDpn6ZNm7GnZgtAcONJyPhOP8tNJQavQ==",
 8084 |       "dev": true,
 8085 |       "license": "MIT",
 8086 |       "dependencies": {
 8087 |         "@types/mdast": "^4.0.0",
 8088 |         "ccount": "^2.0.0",
 8089 |         "devlop": "^1.0.0",
 8090 |         "mdast-util-find-and-replace": "^3.0.0",
 8091 |         "micromark-util-character": "^2.0.0"
 8092 |       },
 8093 |       "funding": {
 8094 |         "type": "opencollective",
 8095 |         "url": "https://opencollective.com/unified"
 8096 |       }
 8097 |     },
 8098 |     "node_modules/mdast-util-gfm-footnote": {
 8099 |       "version": "2.1.0",
 8100 |       "resolved": "https://registry.npmjs.org/mdast-util-gfm-footnote/-/mdast-util-gfm-footnote-2.1.0.tgz",
 8101 |       "integrity": "sha512-sqpDWlsHn7Ac9GNZQMeUzPQSMzR6Wv0WKRNvQRg0KqHh02fpTz69Qc1QSseNX29bhz1ROIyNyxExfawVKTm1GQ==",
 8102 |       "dev": true,
 8103 |       "license": "MIT",
 8104 |       "dependencies": {
 8105 |         "@types/mdast": "^4.0.0",
 8106 |         "devlop": "^1.1.0",
 8107 |         "mdast-util-from-markdown": "^2.0.0",
 8108 |         "mdast-util-to-markdown": "^2.0.0",
 8109 |         "micromark-util-normalize-identifier": "^2.0.0"
 8110 |       },
 8111 |       "funding": {
 8112 |         "type": "opencollective",
 8113 |         "url": "https://opencollective.com/unified"
 8114 |       }
 8115 |     },
 8116 |     "node_modules/mdast-util-gfm-strikethrough": {
 8117 |       "version": "2.0.0",
 8118 |       "resolved": "https://registry.npmjs.org/mdast-util-gfm-strikethrough/-/mdast-util-gfm-strikethrough-2.0.0.tgz",
 8119 |       "integrity": "sha512-mKKb915TF+OC5ptj5bJ7WFRPdYtuHv0yTRxK2tJvi+BDqbkiG7h7u/9SI89nRAYcmap2xHQL9D+QG/6wSrTtXg==",
 8120 |       "dev": true,
 8121 |       "license": "MIT",
 8122 |       "dependencies": {
 8123 |         "@types/mdast": "^4.0.0",
 8124 |         "mdast-util-from-markdown": "^2.0.0",
 8125 |         "mdast-util-to-markdown": "^2.0.0"
 8126 |       },
 8127 |       "funding": {
 8128 |         "type": "opencollective",
 8129 |         "url": "https://opencollective.com/unified"
 8130 |       }
 8131 |     },
 8132 |     "node_modules/mdast-util-gfm-table": {
 8133 |       "version": "2.0.0",
 8134 |       "resolved": "https://registry.npmjs.org/mdast-util-gfm-table/-/mdast-util-gfm-table-2.0.0.tgz",
 8135 |       "integrity": "sha512-78UEvebzz/rJIxLvE7ZtDd/vIQ0RHv+3Mh5DR96p7cS7HsBhYIICDBCu8csTNWNO6tBWfqXPWekRuj2FNOGOZg==",
 8136 |       "dev": true,
 8137 |       "license": "MIT",
 8138 |       "dependencies": {
 8139 |         "@types/mdast": "^4.0.0",
 8140 |         "devlop": "^1.0.0",
 8141 |         "markdown-table": "^3.0.0",
 8142 |         "mdast-util-from-markdown": "^2.0.0",
 8143 |         "mdast-util-to-markdown": "^2.0.0"
 8144 |       },
 8145 |       "funding": {
 8146 |         "type": "opencollective",
 8147 |         "url": "https://opencollective.com/unified"
 8148 |       }
 8149 |     },
 8150 |     "node_modules/mdast-util-gfm-task-list-item": {
 8151 |       "version": "2.0.0",
 8152 |       "resolved": "https://registry.npmjs.org/mdast-util-gfm-task-list-item/-/mdast-util-gfm-task-list-item-2.0.0.tgz",
 8153 |       "integrity": "sha512-IrtvNvjxC1o06taBAVJznEnkiHxLFTzgonUdy8hzFVeDun0uTjxxrRGVaNFqkU1wJR3RBPEfsxmU6jDWPofrTQ==",
 8154 |       "dev": true,
 8155 |       "license": "MIT",
 8156 |       "dependencies": {
 8157 |         "@types/mdast": "^4.0.0",
 8158 |         "devlop": "^1.0.0",
 8159 |         "mdast-util-from-markdown": "^2.0.0",
 8160 |         "mdast-util-to-markdown": "^2.0.0"
 8161 |       },
 8162 |       "funding": {
 8163 |         "type": "opencollective",
 8164 |         "url": "https://opencollective.com/unified"
 8165 |       }
 8166 |     },
 8167 |     "node_modules/mdast-util-math": {
 8168 |       "version": "3.0.0",
 8169 |       "resolved": "https://registry.npmjs.org/mdast-util-math/-/mdast-util-math-3.0.0.tgz",
 8170 |       "integrity": "sha512-Tl9GBNeG/AhJnQM221bJR2HPvLOSnLE/T9cJI9tlc6zwQk2nPk/4f0cHkOdEixQPC/j8UtKDdITswvLAy1OZ1w==",
 8171 |       "dev": true,
 8172 |       "license": "MIT",
 8173 |       "dependencies": {
 8174 |         "@types/hast": "^3.0.0",
 8175 |         "@types/mdast": "^4.0.0",
 8176 |         "devlop": "^1.0.0",
 8177 |         "longest-streak": "^3.0.0",
 8178 |         "mdast-util-from-markdown": "^2.0.0",
 8179 |         "mdast-util-to-markdown": "^2.1.0",
 8180 |         "unist-util-remove-position": "^5.0.0"
 8181 |       },
 8182 |       "funding": {
 8183 |         "type": "opencollective",
 8184 |         "url": "https://opencollective.com/unified"
 8185 |       }
 8186 |     },
 8187 |     "node_modules/mdast-util-mdx": {
 8188 |       "version": "3.0.0",
 8189 |       "resolved": "https://registry.npmjs.org/mdast-util-mdx/-/mdast-util-mdx-3.0.0.tgz",
 8190 |       "integrity": "sha512-JfbYLAW7XnYTTbUsmpu0kdBUVe+yKVJZBItEjwyYJiDJuZ9w4eeaqks4HQO+R7objWgS2ymV60GYpI14Ug554w==",
 8191 |       "dev": true,
 8192 |       "license": "MIT",
 8193 |       "dependencies": {
 8194 |         "mdast-util-from-markdown": "^2.0.0",
 8195 |         "mdast-util-mdx-expression": "^2.0.0",
 8196 |         "mdast-util-mdx-jsx": "^3.0.0",
 8197 |         "mdast-util-mdxjs-esm": "^2.0.0",
 8198 |         "mdast-util-to-markdown": "^2.0.0"
 8199 |       },
 8200 |       "funding": {
 8201 |         "type": "opencollective",
 8202 |         "url": "https://opencollective.com/unified"
 8203 |       }
 8204 |     },
 8205 |     "node_modules/mdast-util-mdx-expression": {
 8206 |       "version": "2.0.1",
 8207 |       "resolved": "https://registry.npmjs.org/mdast-util-mdx-expression/-/mdast-util-mdx-expression-2.0.1.tgz",
 8208 |       "integrity": "sha512-J6f+9hUp+ldTZqKRSg7Vw5V6MqjATc+3E4gf3CFNcuZNWD8XdyI6zQ8GqH7f8169MM6P7hMBRDVGnn7oHB9kXQ==",
 8209 |       "dev": true,
 8210 |       "license": "MIT",
 8211 |       "dependencies": {
 8212 |         "@types/estree-jsx": "^1.0.0",
 8213 |         "@types/hast": "^3.0.0",
 8214 |         "@types/mdast": "^4.0.0",
 8215 |         "devlop": "^1.0.0",
 8216 |         "mdast-util-from-markdown": "^2.0.0",
 8217 |         "mdast-util-to-markdown": "^2.0.0"
 8218 |       },
 8219 |       "funding": {
 8220 |         "type": "opencollective",
 8221 |         "url": "https://opencollective.com/unified"
 8222 |       }
 8223 |     },
 8224 |     "node_modules/mdast-util-mdx-jsx": {
 8225 |       "version": "3.2.0",
 8226 |       "resolved": "https://registry.npmjs.org/mdast-util-mdx-jsx/-/mdast-util-mdx-jsx-3.2.0.tgz",
 8227 |       "integrity": "sha512-lj/z8v0r6ZtsN/cGNNtemmmfoLAFZnjMbNyLzBafjzikOM+glrjNHPlf6lQDOTccj9n5b0PPihEBbhneMyGs1Q==",
 8228 |       "dev": true,
 8229 |       "license": "MIT",
 8230 |       "dependencies": {
 8231 |         "@types/estree-jsx": "^1.0.0",
 8232 |         "@types/hast": "^3.0.0",
 8233 |         "@types/mdast": "^4.0.0",
 8234 |         "@types/unist": "^3.0.0",
 8235 |         "ccount": "^2.0.0",
 8236 |         "devlop": "^1.1.0",
 8237 |         "mdast-util-from-markdown": "^2.0.0",
 8238 |         "mdast-util-to-markdown": "^2.0.0",
 8239 |         "parse-entities": "^4.0.0",
 8240 |         "stringify-entities": "^4.0.0",
 8241 |         "unist-util-stringify-position": "^4.0.0",
 8242 |         "vfile-message": "^4.0.0"
 8243 |       },
 8244 |       "funding": {
 8245 |         "type": "opencollective",
 8246 |         "url": "https://opencollective.com/unified"
 8247 |       }
 8248 |     },
 8249 |     "node_modules/mdast-util-mdxjs-esm": {
 8250 |       "version": "2.0.1",
 8251 |       "resolved": "https://registry.npmjs.org/mdast-util-mdxjs-esm/-/mdast-util-mdxjs-esm-2.0.1.tgz",
 8252 |       "integrity": "sha512-EcmOpxsZ96CvlP03NghtH1EsLtr0n9Tm4lPUJUBccV9RwUOneqSycg19n5HGzCf+10LozMRSObtVr3ee1WoHtg==",
 8253 |       "dev": true,
 8254 |       "license": "MIT",
 8255 |       "dependencies": {
 8256 |         "@types/estree-jsx": "^1.0.0",
 8257 |         "@types/hast": "^3.0.0",
 8258 |         "@types/mdast": "^4.0.0",
 8259 |         "devlop": "^1.0.0",
 8260 |         "mdast-util-from-markdown": "^2.0.0",
 8261 |         "mdast-util-to-markdown": "^2.0.0"
 8262 |       },
 8263 |       "funding": {
 8264 |         "type": "opencollective",
 8265 |         "url": "https://opencollective.com/unified"
 8266 |       }
 8267 |     },
 8268 |     "node_modules/mdast-util-phrasing": {
 8269 |       "version": "4.1.0",
 8270 |       "resolved": "https://registry.npmjs.org/mdast-util-phrasing/-/mdast-util-phrasing-4.1.0.tgz",
 8271 |       "integrity": "sha512-TqICwyvJJpBwvGAMZjj4J2n0X8QWp21b9l0o7eXyVJ25YNWYbJDVIyD1bZXE6WtV6RmKJVYmQAKWa0zWOABz2w==",
 8272 |       "dev": true,
 8273 |       "license": "MIT",
 8274 |       "dependencies": {
 8275 |         "@types/mdast": "^4.0.0",
 8276 |         "unist-util-is": "^6.0.0"
 8277 |       },
 8278 |       "funding": {
 8279 |         "type": "opencollective",
 8280 |         "url": "https://opencollective.com/unified"
 8281 |       }
 8282 |     },
 8283 |     "node_modules/mdast-util-to-hast": {
 8284 |       "version": "13.2.0",
 8285 |       "resolved": "https://registry.npmjs.org/mdast-util-to-hast/-/mdast-util-to-hast-13.2.0.tgz",
 8286 |       "integrity": "sha512-QGYKEuUsYT9ykKBCMOEDLsU5JRObWQusAolFMeko/tYPufNkRffBAQjIE+99jbA87xv6FgmjLtwjh9wBWajwAA==",
 8287 |       "dev": true,
 8288 |       "license": "MIT",
 8289 |       "dependencies": {
 8290 |         "@types/hast": "^3.0.0",
 8291 |         "@types/mdast": "^4.0.0",
 8292 |         "@ungap/structured-clone": "^1.0.0",
 8293 |         "devlop": "^1.0.0",
 8294 |         "micromark-util-sanitize-uri": "^2.0.0",
 8295 |         "trim-lines": "^3.0.0",
 8296 |         "unist-util-position": "^5.0.0",
 8297 |         "unist-util-visit": "^5.0.0",
 8298 |         "vfile": "^6.0.0"
 8299 |       },
 8300 |       "funding": {
 8301 |         "type": "opencollective",
 8302 |         "url": "https://opencollective.com/unified"
 8303 |       }
 8304 |     },
 8305 |     "node_modules/mdast-util-to-markdown": {
 8306 |       "version": "2.1.2",
 8307 |       "resolved": "https://registry.npmjs.org/mdast-util-to-markdown/-/mdast-util-to-markdown-2.1.2.tgz",
 8308 |       "integrity": "sha512-xj68wMTvGXVOKonmog6LwyJKrYXZPvlwabaryTjLh9LuvovB/KAH+kvi8Gjj+7rJjsFi23nkUxRQv1KqSroMqA==",
 8309 |       "dev": true,
 8310 |       "license": "MIT",
 8311 |       "dependencies": {
 8312 |         "@types/mdast": "^4.0.0",
 8313 |         "@types/unist": "^3.0.0",
 8314 |         "longest-streak": "^3.0.0",
 8315 |         "mdast-util-phrasing": "^4.0.0",
 8316 |         "mdast-util-to-string": "^4.0.0",
 8317 |         "micromark-util-classify-character": "^2.0.0",
 8318 |         "micromark-util-decode-string": "^2.0.0",
 8319 |         "unist-util-visit": "^5.0.0",
 8320 |         "zwitch": "^2.0.0"
 8321 |       },
 8322 |       "funding": {
 8323 |         "type": "opencollective",
 8324 |         "url": "https://opencollective.com/unified"
 8325 |       }
 8326 |     },
 8327 |     "node_modules/mdast-util-to-string": {
 8328 |       "version": "4.0.0",
 8329 |       "resolved": "https://registry.npmjs.org/mdast-util-to-string/-/mdast-util-to-string-4.0.0.tgz",
 8330 |       "integrity": "sha512-0H44vDimn51F0YwvxSJSm0eCDOJTRlmN0R1yBh4HLj9wiV1Dn0QoXGbvFAWj2hSItVTlCmBF1hqKlIyUBVFLPg==",
 8331 |       "dev": true,
 8332 |       "license": "MIT",
 8333 |       "dependencies": {
 8334 |         "@types/mdast": "^4.0.0"
 8335 |       },
 8336 |       "funding": {
 8337 |         "type": "opencollective",
 8338 |         "url": "https://opencollective.com/unified"
 8339 |       }
 8340 |     },
 8341 |     "node_modules/mdurl": {
 8342 |       "version": "2.0.0",
 8343 |       "resolved": "https://registry.npmjs.org/mdurl/-/mdurl-2.0.0.tgz",
 8344 |       "integrity": "sha512-Lf+9+2r+Tdp5wXDXC4PcIBjTDtq4UKjCPMQhKIuzpJNW0b96kVqSwW0bT7FhRSfmAiFYgP+SCRvdrDozfh0U5w==",
 8345 |       "dev": true,
 8346 |       "license": "MIT"
 8347 |     },
 8348 |     "node_modules/media-typer": {
 8349 |       "version": "0.3.0",
 8350 |       "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
 8351 |       "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
 8352 |       "dev": true,
 8353 |       "license": "MIT",
 8354 |       "engines": {
 8355 |         "node": ">= 0.6"
 8356 |       }
 8357 |     },
 8358 |     "node_modules/merge-descriptors": {
 8359 |       "version": "1.0.3",
 8360 |       "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
 8361 |       "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
 8362 |       "dev": true,
 8363 |       "license": "MIT",
 8364 |       "funding": {
 8365 |         "url": "https://github.com/sponsors/sindresorhus"
 8366 |       }
 8367 |     },
 8368 |     "node_modules/merge2": {
 8369 |       "version": "1.4.1",
 8370 |       "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
 8371 |       "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
 8372 |       "dev": true,
 8373 |       "license": "MIT",
 8374 |       "engines": {
 8375 |         "node": ">= 8"
 8376 |       }
 8377 |     },
 8378 |     "node_modules/methods": {
 8379 |       "version": "1.1.2",
 8380 |       "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
 8381 |       "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
 8382 |       "dev": true,
 8383 |       "license": "MIT",
 8384 |       "engines": {
 8385 |         "node": ">= 0.6"
 8386 |       }
 8387 |     },
 8388 |     "node_modules/micromark": {
 8389 |       "version": "4.0.2",
 8390 |       "resolved": "https://registry.npmjs.org/micromark/-/micromark-4.0.2.tgz",
 8391 |       "integrity": "sha512-zpe98Q6kvavpCr1NPVSCMebCKfD7CA2NqZ+rykeNhONIJBpc1tFKt9hucLGwha3jNTNI8lHpctWJWoimVF4PfA==",
 8392 |       "dev": true,
 8393 |       "funding": [
 8394 |         {
 8395 |           "type": "GitHub Sponsors",
 8396 |           "url": "https://github.com/sponsors/unifiedjs"
 8397 |         },
 8398 |         {
 8399 |           "type": "OpenCollective",
 8400 |           "url": "https://opencollective.com/unified"
 8401 |         }
 8402 |       ],
 8403 |       "license": "MIT",
 8404 |       "dependencies": {
 8405 |         "@types/debug": "^4.0.0",
 8406 |         "debug": "^4.0.0",
 8407 |         "decode-named-character-reference": "^1.0.0",
 8408 |         "devlop": "^1.0.0",
 8409 |         "micromark-core-commonmark": "^2.0.0",
 8410 |         "micromark-factory-space": "^2.0.0",
 8411 |         "micromark-util-character": "^2.0.0",
 8412 |         "micromark-util-chunked": "^2.0.0",
 8413 |         "micromark-util-combine-extensions": "^2.0.0",
 8414 |         "micromark-util-decode-numeric-character-reference": "^2.0.0",
 8415 |         "micromark-util-encode": "^2.0.0",
 8416 |         "micromark-util-normalize-identifier": "^2.0.0",
 8417 |         "micromark-util-resolve-all": "^2.0.0",
 8418 |         "micromark-util-sanitize-uri": "^2.0.0",
 8419 |         "micromark-util-subtokenize": "^2.0.0",
 8420 |         "micromark-util-symbol": "^2.0.0",
 8421 |         "micromark-util-types": "^2.0.0"
 8422 |       }
 8423 |     },
 8424 |     "node_modules/micromark-core-commonmark": {
 8425 |       "version": "2.0.3",
 8426 |       "resolved": "https://registry.npmjs.org/micromark-core-commonmark/-/micromark-core-commonmark-2.0.3.tgz",
 8427 |       "integrity": "sha512-RDBrHEMSxVFLg6xvnXmb1Ayr2WzLAWjeSATAoxwKYJV94TeNavgoIdA0a9ytzDSVzBy2YKFK+emCPOEibLeCrg==",
 8428 |       "dev": true,
 8429 |       "funding": [
 8430 |         {
 8431 |           "type": "GitHub Sponsors",
 8432 |           "url": "https://github.com/sponsors/unifiedjs"
 8433 |         },
 8434 |         {
 8435 |           "type": "OpenCollective",
 8436 |           "url": "https://opencollective.com/unified"
 8437 |         }
 8438 |       ],
 8439 |       "license": "MIT",
 8440 |       "dependencies": {
 8441 |         "decode-named-character-reference": "^1.0.0",
 8442 |         "devlop": "^1.0.0",
 8443 |         "micromark-factory-destination": "^2.0.0",
 8444 |         "micromark-factory-label": "^2.0.0",
 8445 |         "micromark-factory-space": "^2.0.0",
 8446 |         "micromark-factory-title": "^2.0.0",
 8447 |         "micromark-factory-whitespace": "^2.0.0",
 8448 |         "micromark-util-character": "^2.0.0",
 8449 |         "micromark-util-chunked": "^2.0.0",
 8450 |         "micromark-util-classify-character": "^2.0.0",
 8451 |         "micromark-util-html-tag-name": "^2.0.0",
 8452 |         "micromark-util-normalize-identifier": "^2.0.0",
 8453 |         "micromark-util-resolve-all": "^2.0.0",
 8454 |         "micromark-util-subtokenize": "^2.0.0",
 8455 |         "micromark-util-symbol": "^2.0.0",
 8456 |         "micromark-util-types": "^2.0.0"
 8457 |       }
 8458 |     },
 8459 |     "node_modules/micromark-extension-frontmatter": {
 8460 |       "version": "2.0.0",
 8461 |       "resolved": "https://registry.npmjs.org/micromark-extension-frontmatter/-/micromark-extension-frontmatter-2.0.0.tgz",
 8462 |       "integrity": "sha512-C4AkuM3dA58cgZha7zVnuVxBhDsbttIMiytjgsM2XbHAB2faRVaHRle40558FBN+DJcrLNCoqG5mlrpdU4cRtg==",
 8463 |       "dev": true,
 8464 |       "license": "MIT",
 8465 |       "dependencies": {
 8466 |         "fault": "^2.0.0",
 8467 |         "micromark-util-character": "^2.0.0",
 8468 |         "micromark-util-symbol": "^2.0.0",
 8469 |         "micromark-util-types": "^2.0.0"
 8470 |       },
 8471 |       "funding": {
 8472 |         "type": "opencollective",
 8473 |         "url": "https://opencollective.com/unified"
 8474 |       }
 8475 |     },
 8476 |     "node_modules/micromark-extension-gfm": {
 8477 |       "version": "3.0.0",
 8478 |       "resolved": "https://registry.npmjs.org/micromark-extension-gfm/-/micromark-extension-gfm-3.0.0.tgz",
 8479 |       "integrity": "sha512-vsKArQsicm7t0z2GugkCKtZehqUm31oeGBV/KVSorWSy8ZlNAv7ytjFhvaryUiCUJYqs+NoE6AFhpQvBTM6Q4w==",
 8480 |       "dev": true,
 8481 |       "license": "MIT",
 8482 |       "dependencies": {
 8483 |         "micromark-extension-gfm-autolink-literal": "^2.0.0",
 8484 |         "micromark-extension-gfm-footnote": "^2.0.0",
 8485 |         "micromark-extension-gfm-strikethrough": "^2.0.0",
 8486 |         "micromark-extension-gfm-table": "^2.0.0",
 8487 |         "micromark-extension-gfm-tagfilter": "^2.0.0",
 8488 |         "micromark-extension-gfm-task-list-item": "^2.0.0",
 8489 |         "micromark-util-combine-extensions": "^2.0.0",
 8490 |         "micromark-util-types": "^2.0.0"
 8491 |       },
 8492 |       "funding": {
 8493 |         "type": "opencollective",
 8494 |         "url": "https://opencollective.com/unified"
 8495 |       }
 8496 |     },
 8497 |     "node_modules/micromark-extension-gfm-autolink-literal": {
 8498 |       "version": "2.1.0",
 8499 |       "resolved": "https://registry.npmjs.org/micromark-extension-gfm-autolink-literal/-/micromark-extension-gfm-autolink-literal-2.1.0.tgz",
 8500 |       "integrity": "sha512-oOg7knzhicgQ3t4QCjCWgTmfNhvQbDDnJeVu9v81r7NltNCVmhPy1fJRX27pISafdjL+SVc4d3l48Gb6pbRypw==",
 8501 |       "dev": true,
 8502 |       "license": "MIT",
 8503 |       "dependencies": {
 8504 |         "micromark-util-character": "^2.0.0",
 8505 |         "micromark-util-sanitize-uri": "^2.0.0",
 8506 |         "micromark-util-symbol": "^2.0.0",
 8507 |         "micromark-util-types": "^2.0.0"
 8508 |       },
 8509 |       "funding": {
 8510 |         "type": "opencollective",
 8511 |         "url": "https://opencollective.com/unified"
 8512 |       }
 8513 |     },
 8514 |     "node_modules/micromark-extension-gfm-footnote": {
 8515 |       "version": "2.1.0",
 8516 |       "resolved": "https://registry.npmjs.org/micromark-extension-gfm-footnote/-/micromark-extension-gfm-footnote-2.1.0.tgz",
 8517 |       "integrity": "sha512-/yPhxI1ntnDNsiHtzLKYnE3vf9JZ6cAisqVDauhp4CEHxlb4uoOTxOCJ+9s51bIB8U1N1FJ1RXOKTIlD5B/gqw==",
 8518 |       "dev": true,
 8519 |       "license": "MIT",
 8520 |       "dependencies": {
 8521 |         "devlop": "^1.0.0",
 8522 |         "micromark-core-commonmark": "^2.0.0",
 8523 |         "micromark-factory-space": "^2.0.0",
 8524 |         "micromark-util-character": "^2.0.0",
 8525 |         "micromark-util-normalize-identifier": "^2.0.0",
 8526 |         "micromark-util-sanitize-uri": "^2.0.0",
 8527 |         "micromark-util-symbol": "^2.0.0",
 8528 |         "micromark-util-types": "^2.0.0"
 8529 |       },
 8530 |       "funding": {
 8531 |         "type": "opencollective",
 8532 |         "url": "https://opencollective.com/unified"
 8533 |       }
 8534 |     },
 8535 |     "node_modules/micromark-extension-gfm-strikethrough": {
 8536 |       "version": "2.1.0",
 8537 |       "resolved": "https://registry.npmjs.org/micromark-extension-gfm-strikethrough/-/micromark-extension-gfm-strikethrough-2.1.0.tgz",
 8538 |       "integrity": "sha512-ADVjpOOkjz1hhkZLlBiYA9cR2Anf8F4HqZUO6e5eDcPQd0Txw5fxLzzxnEkSkfnD0wziSGiv7sYhk/ktvbf1uw==",
 8539 |       "dev": true,
 8540 |       "license": "MIT",
 8541 |       "dependencies": {
 8542 |         "devlop": "^1.0.0",
 8543 |         "micromark-util-chunked": "^2.0.0",
 8544 |         "micromark-util-classify-character": "^2.0.0",
 8545 |         "micromark-util-resolve-all": "^2.0.0",
 8546 |         "micromark-util-symbol": "^2.0.0",
 8547 |         "micromark-util-types": "^2.0.0"
 8548 |       },
 8549 |       "funding": {
 8550 |         "type": "opencollective",
 8551 |         "url": "https://opencollective.com/unified"
 8552 |       }
 8553 |     },
 8554 |     "node_modules/micromark-extension-gfm-table": {
 8555 |       "version": "2.1.1",
 8556 |       "resolved": "https://registry.npmjs.org/micromark-extension-gfm-table/-/micromark-extension-gfm-table-2.1.1.tgz",
 8557 |       "integrity": "sha512-t2OU/dXXioARrC6yWfJ4hqB7rct14e8f7m0cbI5hUmDyyIlwv5vEtooptH8INkbLzOatzKuVbQmAYcbWoyz6Dg==",
 8558 |       "dev": true,
 8559 |       "license": "MIT",
 8560 |       "dependencies": {
 8561 |         "devlop": "^1.0.0",
 8562 |         "micromark-factory-space": "^2.0.0",
 8563 |         "micromark-util-character": "^2.0.0",
 8564 |         "micromark-util-symbol": "^2.0.0",
 8565 |         "micromark-util-types": "^2.0.0"
 8566 |       },
 8567 |       "funding": {
 8568 |         "type": "opencollective",
 8569 |         "url": "https://opencollective.com/unified"
 8570 |       }
 8571 |     },
 8572 |     "node_modules/micromark-extension-gfm-tagfilter": {
 8573 |       "version": "2.0.0",
 8574 |       "resolved": "https://registry.npmjs.org/micromark-extension-gfm-tagfilter/-/micromark-extension-gfm-tagfilter-2.0.0.tgz",
 8575 |       "integrity": "sha512-xHlTOmuCSotIA8TW1mDIM6X2O1SiX5P9IuDtqGonFhEK0qgRI4yeC6vMxEV2dgyr2TiD+2PQ10o+cOhdVAcwfg==",
 8576 |       "dev": true,
 8577 |       "license": "MIT",
 8578 |       "dependencies": {
 8579 |         "micromark-util-types": "^2.0.0"
 8580 |       },
 8581 |       "funding": {
 8582 |         "type": "opencollective",
 8583 |         "url": "https://opencollective.com/unified"
 8584 |       }
 8585 |     },
 8586 |     "node_modules/micromark-extension-gfm-task-list-item": {
 8587 |       "version": "2.1.0",
 8588 |       "resolved": "https://registry.npmjs.org/micromark-extension-gfm-task-list-item/-/micromark-extension-gfm-task-list-item-2.1.0.tgz",
 8589 |       "integrity": "sha512-qIBZhqxqI6fjLDYFTBIa4eivDMnP+OZqsNwmQ3xNLE4Cxwc+zfQEfbs6tzAo2Hjq+bh6q5F+Z8/cksrLFYWQQw==",
 8590 |       "dev": true,
 8591 |       "license": "MIT",
 8592 |       "dependencies": {
 8593 |         "devlop": "^1.0.0",
 8594 |         "micromark-factory-space": "^2.0.0",
 8595 |         "micromark-util-character": "^2.0.0",
 8596 |         "micromark-util-symbol": "^2.0.0",
 8597 |         "micromark-util-types": "^2.0.0"
 8598 |       },
 8599 |       "funding": {
 8600 |         "type": "opencollective",
 8601 |         "url": "https://opencollective.com/unified"
 8602 |       }
 8603 |     },
 8604 |     "node_modules/micromark-extension-math": {
 8605 |       "version": "3.1.0",
 8606 |       "resolved": "https://registry.npmjs.org/micromark-extension-math/-/micromark-extension-math-3.1.0.tgz",
 8607 |       "integrity": "sha512-lvEqd+fHjATVs+2v/8kg9i5Q0AP2k85H0WUOwpIVvUML8BapsMvh1XAogmQjOCsLpoKRCVQqEkQBB3NhVBcsOg==",
 8608 |       "dev": true,
 8609 |       "license": "MIT",
 8610 |       "dependencies": {
 8611 |         "@types/katex": "^0.16.0",
 8612 |         "devlop": "^1.0.0",
 8613 |         "katex": "^0.16.0",
 8614 |         "micromark-factory-space": "^2.0.0",
 8615 |         "micromark-util-character": "^2.0.0",
 8616 |         "micromark-util-symbol": "^2.0.0",
 8617 |         "micromark-util-types": "^2.0.0"
 8618 |       },
 8619 |       "funding": {
 8620 |         "type": "opencollective",
 8621 |         "url": "https://opencollective.com/unified"
 8622 |       }
 8623 |     },
 8624 |     "node_modules/micromark-extension-mdx-expression": {
 8625 |       "version": "3.0.1",
 8626 |       "resolved": "https://registry.npmjs.org/micromark-extension-mdx-expression/-/micromark-extension-mdx-expression-3.0.1.tgz",
 8627 |       "integrity": "sha512-dD/ADLJ1AeMvSAKBwO22zG22N4ybhe7kFIZ3LsDI0GlsNr2A3KYxb0LdC1u5rj4Nw+CHKY0RVdnHX8vj8ejm4Q==",
 8628 |       "dev": true,
 8629 |       "funding": [
 8630 |         {
 8631 |           "type": "GitHub Sponsors",
 8632 |           "url": "https://github.com/sponsors/unifiedjs"
 8633 |         },
 8634 |         {
 8635 |           "type": "OpenCollective",
 8636 |           "url": "https://opencollective.com/unified"
 8637 |         }
 8638 |       ],
 8639 |       "license": "MIT",
 8640 |       "dependencies": {
 8641 |         "@types/estree": "^1.0.0",
 8642 |         "devlop": "^1.0.0",
 8643 |         "micromark-factory-mdx-expression": "^2.0.0",
 8644 |         "micromark-factory-space": "^2.0.0",
 8645 |         "micromark-util-character": "^2.0.0",
 8646 |         "micromark-util-events-to-acorn": "^2.0.0",
 8647 |         "micromark-util-symbol": "^2.0.0",
 8648 |         "micromark-util-types": "^2.0.0"
 8649 |       }
 8650 |     },
 8651 |     "node_modules/micromark-extension-mdx-jsx": {
 8652 |       "version": "3.0.2",
 8653 |       "resolved": "https://registry.npmjs.org/micromark-extension-mdx-jsx/-/micromark-extension-mdx-jsx-3.0.2.tgz",
 8654 |       "integrity": "sha512-e5+q1DjMh62LZAJOnDraSSbDMvGJ8x3cbjygy2qFEi7HCeUT4BDKCvMozPozcD6WmOt6sVvYDNBKhFSz3kjOVQ==",
 8655 |       "dev": true,
 8656 |       "license": "MIT",
 8657 |       "dependencies": {
 8658 |         "@types/estree": "^1.0.0",
 8659 |         "devlop": "^1.0.0",
 8660 |         "estree-util-is-identifier-name": "^3.0.0",
 8661 |         "micromark-factory-mdx-expression": "^2.0.0",
 8662 |         "micromark-factory-space": "^2.0.0",
 8663 |         "micromark-util-character": "^2.0.0",
 8664 |         "micromark-util-events-to-acorn": "^2.0.0",
 8665 |         "micromark-util-symbol": "^2.0.0",
 8666 |         "micromark-util-types": "^2.0.0",
 8667 |         "vfile-message": "^4.0.0"
 8668 |       },
 8669 |       "funding": {
 8670 |         "type": "opencollective",
 8671 |         "url": "https://opencollective.com/unified"
 8672 |       }
 8673 |     },
 8674 |     "node_modules/micromark-extension-mdx-md": {
 8675 |       "version": "2.0.0",
 8676 |       "resolved": "https://registry.npmjs.org/micromark-extension-mdx-md/-/micromark-extension-mdx-md-2.0.0.tgz",
 8677 |       "integrity": "sha512-EpAiszsB3blw4Rpba7xTOUptcFeBFi+6PY8VnJ2hhimH+vCQDirWgsMpz7w1XcZE7LVrSAUGb9VJpG9ghlYvYQ==",
 8678 |       "dev": true,
 8679 |       "license": "MIT",
 8680 |       "dependencies": {
 8681 |         "micromark-util-types": "^2.0.0"
 8682 |       },
 8683 |       "funding": {
 8684 |         "type": "opencollective",
 8685 |         "url": "https://opencollective.com/unified"
 8686 |       }
 8687 |     },
 8688 |     "node_modules/micromark-extension-mdxjs": {
 8689 |       "version": "3.0.0",
 8690 |       "resolved": "https://registry.npmjs.org/micromark-extension-mdxjs/-/micromark-extension-mdxjs-3.0.0.tgz",
 8691 |       "integrity": "sha512-A873fJfhnJ2siZyUrJ31l34Uqwy4xIFmvPY1oj+Ean5PHcPBYzEsvqvWGaWcfEIr11O5Dlw3p2y0tZWpKHDejQ==",
 8692 |       "dev": true,
 8693 |       "license": "MIT",
 8694 |       "dependencies": {
 8695 |         "acorn": "^8.0.0",
 8696 |         "acorn-jsx": "^5.0.0",
 8697 |         "micromark-extension-mdx-expression": "^3.0.0",
 8698 |         "micromark-extension-mdx-jsx": "^3.0.0",
 8699 |         "micromark-extension-mdx-md": "^2.0.0",
 8700 |         "micromark-extension-mdxjs-esm": "^3.0.0",
 8701 |         "micromark-util-combine-extensions": "^2.0.0",
 8702 |         "micromark-util-types": "^2.0.0"
 8703 |       },
 8704 |       "funding": {
 8705 |         "type": "opencollective",
 8706 |         "url": "https://opencollective.com/unified"
 8707 |       }
 8708 |     },
 8709 |     "node_modules/micromark-extension-mdxjs-esm": {
 8710 |       "version": "3.0.0",
 8711 |       "resolved": "https://registry.npmjs.org/micromark-extension-mdxjs-esm/-/micromark-extension-mdxjs-esm-3.0.0.tgz",
 8712 |       "integrity": "sha512-DJFl4ZqkErRpq/dAPyeWp15tGrcrrJho1hKK5uBS70BCtfrIFg81sqcTVu3Ta+KD1Tk5vAtBNElWxtAa+m8K9A==",
 8713 |       "dev": true,
 8714 |       "license": "MIT",
 8715 |       "dependencies": {
 8716 |         "@types/estree": "^1.0.0",
 8717 |         "devlop": "^1.0.0",
 8718 |         "micromark-core-commonmark": "^2.0.0",
 8719 |         "micromark-util-character": "^2.0.0",
 8720 |         "micromark-util-events-to-acorn": "^2.0.0",
 8721 |         "micromark-util-symbol": "^2.0.0",
 8722 |         "micromark-util-types": "^2.0.0",
 8723 |         "unist-util-position-from-estree": "^2.0.0",
 8724 |         "vfile-message": "^4.0.0"
 8725 |       },
 8726 |       "funding": {
 8727 |         "type": "opencollective",
 8728 |         "url": "https://opencollective.com/unified"
 8729 |       }
 8730 |     },
 8731 |     "node_modules/micromark-factory-destination": {
 8732 |       "version": "2.0.1",
 8733 |       "resolved": "https://registry.npmjs.org/micromark-factory-destination/-/micromark-factory-destination-2.0.1.tgz",
 8734 |       "integrity": "sha512-Xe6rDdJlkmbFRExpTOmRj9N3MaWmbAgdpSrBQvCFqhezUn4AHqJHbaEnfbVYYiexVSs//tqOdY/DxhjdCiJnIA==",
 8735 |       "dev": true,
 8736 |       "funding": [
 8737 |         {
 8738 |           "type": "GitHub Sponsors",
 8739 |           "url": "https://github.com/sponsors/unifiedjs"
 8740 |         },
 8741 |         {
 8742 |           "type": "OpenCollective",
 8743 |           "url": "https://opencollective.com/unified"
 8744 |         }
 8745 |       ],
 8746 |       "license": "MIT",
 8747 |       "dependencies": {
 8748 |         "micromark-util-character": "^2.0.0",
 8749 |         "micromark-util-symbol": "^2.0.0",
 8750 |         "micromark-util-types": "^2.0.0"
 8751 |       }
 8752 |     },
 8753 |     "node_modules/micromark-factory-label": {
 8754 |       "version": "2.0.1",
 8755 |       "resolved": "https://registry.npmjs.org/micromark-factory-label/-/micromark-factory-label-2.0.1.tgz",
 8756 |       "integrity": "sha512-VFMekyQExqIW7xIChcXn4ok29YE3rnuyveW3wZQWWqF4Nv9Wk5rgJ99KzPvHjkmPXF93FXIbBp6YdW3t71/7Vg==",
 8757 |       "dev": true,
 8758 |       "funding": [
 8759 |         {
 8760 |           "type": "GitHub Sponsors",
 8761 |           "url": "https://github.com/sponsors/unifiedjs"
 8762 |         },
 8763 |         {
 8764 |           "type": "OpenCollective",
 8765 |           "url": "https://opencollective.com/unified"
 8766 |         }
 8767 |       ],
 8768 |       "license": "MIT",
 8769 |       "dependencies": {
 8770 |         "devlop": "^1.0.0",
 8771 |         "micromark-util-character": "^2.0.0",
 8772 |         "micromark-util-symbol": "^2.0.0",
 8773 |         "micromark-util-types": "^2.0.0"
 8774 |       }
 8775 |     },
 8776 |     "node_modules/micromark-factory-mdx-expression": {
 8777 |       "version": "2.0.3",
 8778 |       "resolved": "https://registry.npmjs.org/micromark-factory-mdx-expression/-/micromark-factory-mdx-expression-2.0.3.tgz",
 8779 |       "integrity": "sha512-kQnEtA3vzucU2BkrIa8/VaSAsP+EJ3CKOvhMuJgOEGg9KDC6OAY6nSnNDVRiVNRqj7Y4SlSzcStaH/5jge8JdQ==",
 8780 |       "dev": true,
 8781 |       "funding": [
 8782 |         {
 8783 |           "type": "GitHub Sponsors",
 8784 |           "url": "https://github.com/sponsors/unifiedjs"
 8785 |         },
 8786 |         {
 8787 |           "type": "OpenCollective",
 8788 |           "url": "https://opencollective.com/unified"
 8789 |         }
 8790 |       ],
 8791 |       "license": "MIT",
 8792 |       "dependencies": {
 8793 |         "@types/estree": "^1.0.0",
 8794 |         "devlop": "^1.0.0",
 8795 |         "micromark-factory-space": "^2.0.0",
 8796 |         "micromark-util-character": "^2.0.0",
 8797 |         "micromark-util-events-to-acorn": "^2.0.0",
 8798 |         "micromark-util-symbol": "^2.0.0",
 8799 |         "micromark-util-types": "^2.0.0",
 8800 |         "unist-util-position-from-estree": "^2.0.0",
 8801 |         "vfile-message": "^4.0.0"
 8802 |       }
 8803 |     },
 8804 |     "node_modules/micromark-factory-space": {
 8805 |       "version": "2.0.1",
 8806 |       "resolved": "https://registry.npmjs.org/micromark-factory-space/-/micromark-factory-space-2.0.1.tgz",
 8807 |       "integrity": "sha512-zRkxjtBxxLd2Sc0d+fbnEunsTj46SWXgXciZmHq0kDYGnck/ZSGj9/wULTV95uoeYiK5hRXP2mJ98Uo4cq/LQg==",
 8808 |       "dev": true,
 8809 |       "funding": [
 8810 |         {
 8811 |           "type": "GitHub Sponsors",
 8812 |           "url": "https://github.com/sponsors/unifiedjs"
 8813 |         },
 8814 |         {
 8815 |           "type": "OpenCollective",
 8816 |           "url": "https://opencollective.com/unified"
 8817 |         }
 8818 |       ],
 8819 |       "license": "MIT",
 8820 |       "dependencies": {
 8821 |         "micromark-util-character": "^2.0.0",
 8822 |         "micromark-util-types": "^2.0.0"
 8823 |       }
 8824 |     },
 8825 |     "node_modules/micromark-factory-title": {
 8826 |       "version": "2.0.1",
 8827 |       "resolved": "https://registry.npmjs.org/micromark-factory-title/-/micromark-factory-title-2.0.1.tgz",
 8828 |       "integrity": "sha512-5bZ+3CjhAd9eChYTHsjy6TGxpOFSKgKKJPJxr293jTbfry2KDoWkhBb6TcPVB4NmzaPhMs1Frm9AZH7OD4Cjzw==",
 8829 |       "dev": true,
 8830 |       "funding": [
 8831 |         {
 8832 |           "type": "GitHub Sponsors",
 8833 |           "url": "https://github.com/sponsors/unifiedjs"
 8834 |         },
 8835 |         {
 8836 |           "type": "OpenCollective",
 8837 |           "url": "https://opencollective.com/unified"
 8838 |         }
 8839 |       ],
 8840 |       "license": "MIT",
 8841 |       "dependencies": {
 8842 |         "micromark-factory-space": "^2.0.0",
 8843 |         "micromark-util-character": "^2.0.0",
 8844 |         "micromark-util-symbol": "^2.0.0",
 8845 |         "micromark-util-types": "^2.0.0"
 8846 |       }
 8847 |     },
 8848 |     "node_modules/micromark-factory-whitespace": {
 8849 |       "version": "2.0.1",
 8850 |       "resolved": "https://registry.npmjs.org/micromark-factory-whitespace/-/micromark-factory-whitespace-2.0.1.tgz",
 8851 |       "integrity": "sha512-Ob0nuZ3PKt/n0hORHyvoD9uZhr+Za8sFoP+OnMcnWK5lngSzALgQYKMr9RJVOWLqQYuyn6ulqGWSXdwf6F80lQ==",
 8852 |       "dev": true,
 8853 |       "funding": [
 8854 |         {
 8855 |           "type": "GitHub Sponsors",
 8856 |           "url": "https://github.com/sponsors/unifiedjs"
 8857 |         },
 8858 |         {
 8859 |           "type": "OpenCollective",
 8860 |           "url": "https://opencollective.com/unified"
 8861 |         }
 8862 |       ],
 8863 |       "license": "MIT",
 8864 |       "dependencies": {
 8865 |         "micromark-factory-space": "^2.0.0",
 8866 |         "micromark-util-character": "^2.0.0",
 8867 |         "micromark-util-symbol": "^2.0.0",
 8868 |         "micromark-util-types": "^2.0.0"
 8869 |       }
 8870 |     },
 8871 |     "node_modules/micromark-util-character": {
 8872 |       "version": "2.1.1",
 8873 |       "resolved": "https://registry.npmjs.org/micromark-util-character/-/micromark-util-character-2.1.1.tgz",
 8874 |       "integrity": "sha512-wv8tdUTJ3thSFFFJKtpYKOYiGP2+v96Hvk4Tu8KpCAsTMs6yi+nVmGh1syvSCsaxz45J6Jbw+9DD6g97+NV67Q==",
 8875 |       "dev": true,
 8876 |       "funding": [
 8877 |         {
 8878 |           "type": "GitHub Sponsors",
 8879 |           "url": "https://github.com/sponsors/unifiedjs"
 8880 |         },
 8881 |         {
 8882 |           "type": "OpenCollective",
 8883 |           "url": "https://opencollective.com/unified"
 8884 |         }
 8885 |       ],
 8886 |       "license": "MIT",
 8887 |       "dependencies": {
 8888 |         "micromark-util-symbol": "^2.0.0",
 8889 |         "micromark-util-types": "^2.0.0"
 8890 |       }
 8891 |     },
 8892 |     "node_modules/micromark-util-chunked": {
 8893 |       "version": "2.0.1",
 8894 |       "resolved": "https://registry.npmjs.org/micromark-util-chunked/-/micromark-util-chunked-2.0.1.tgz",
 8895 |       "integrity": "sha512-QUNFEOPELfmvv+4xiNg2sRYeS/P84pTW0TCgP5zc9FpXetHY0ab7SxKyAQCNCc1eK0459uoLI1y5oO5Vc1dbhA==",
 8896 |       "dev": true,
 8897 |       "funding": [
 8898 |         {
 8899 |           "type": "GitHub Sponsors",
 8900 |           "url": "https://github.com/sponsors/unifiedjs"
 8901 |         },
 8902 |         {
 8903 |           "type": "OpenCollective",
 8904 |           "url": "https://opencollective.com/unified"
 8905 |         }
 8906 |       ],
 8907 |       "license": "MIT",
 8908 |       "dependencies": {
 8909 |         "micromark-util-symbol": "^2.0.0"
 8910 |       }
 8911 |     },
 8912 |     "node_modules/micromark-util-classify-character": {
 8913 |       "version": "2.0.1",
 8914 |       "resolved": "https://registry.npmjs.org/micromark-util-classify-character/-/micromark-util-classify-character-2.0.1.tgz",
 8915 |       "integrity": "sha512-K0kHzM6afW/MbeWYWLjoHQv1sgg2Q9EccHEDzSkxiP/EaagNzCm7T/WMKZ3rjMbvIpvBiZgwR3dKMygtA4mG1Q==",
 8916 |       "dev": true,
 8917 |       "funding": [
 8918 |         {
 8919 |           "type": "GitHub Sponsors",
 8920 |           "url": "https://github.com/sponsors/unifiedjs"
 8921 |         },
 8922 |         {
 8923 |           "type": "OpenCollective",
 8924 |           "url": "https://opencollective.com/unified"
 8925 |         }
 8926 |       ],
 8927 |       "license": "MIT",
 8928 |       "dependencies": {
 8929 |         "micromark-util-character": "^2.0.0",
 8930 |         "micromark-util-symbol": "^2.0.0",
 8931 |         "micromark-util-types": "^2.0.0"
 8932 |       }
 8933 |     },
 8934 |     "node_modules/micromark-util-combine-extensions": {
 8935 |       "version": "2.0.1",
 8936 |       "resolved": "https://registry.npmjs.org/micromark-util-combine-extensions/-/micromark-util-combine-extensions-2.0.1.tgz",
 8937 |       "integrity": "sha512-OnAnH8Ujmy59JcyZw8JSbK9cGpdVY44NKgSM7E9Eh7DiLS2E9RNQf0dONaGDzEG9yjEl5hcqeIsj4hfRkLH/Bg==",
 8938 |       "dev": true,
 8939 |       "funding": [
 8940 |         {
 8941 |           "type": "GitHub Sponsors",
 8942 |           "url": "https://github.com/sponsors/unifiedjs"
 8943 |         },
 8944 |         {
 8945 |           "type": "OpenCollective",
 8946 |           "url": "https://opencollective.com/unified"
 8947 |         }
 8948 |       ],
 8949 |       "license": "MIT",
 8950 |       "dependencies": {
 8951 |         "micromark-util-chunked": "^2.0.0",
 8952 |         "micromark-util-types": "^2.0.0"
 8953 |       }
 8954 |     },
 8955 |     "node_modules/micromark-util-decode-numeric-character-reference": {
 8956 |       "version": "2.0.2",
 8957 |       "resolved": "https://registry.npmjs.org/micromark-util-decode-numeric-character-reference/-/micromark-util-decode-numeric-character-reference-2.0.2.tgz",
 8958 |       "integrity": "sha512-ccUbYk6CwVdkmCQMyr64dXz42EfHGkPQlBj5p7YVGzq8I7CtjXZJrubAYezf7Rp+bjPseiROqe7G6foFd+lEuw==",
 8959 |       "dev": true,
 8960 |       "funding": [
 8961 |         {
 8962 |           "type": "GitHub Sponsors",
 8963 |           "url": "https://github.com/sponsors/unifiedjs"
 8964 |         },
 8965 |         {
 8966 |           "type": "OpenCollective",
 8967 |           "url": "https://opencollective.com/unified"
 8968 |         }
 8969 |       ],
 8970 |       "license": "MIT",
 8971 |       "dependencies": {
 8972 |         "micromark-util-symbol": "^2.0.0"
 8973 |       }
 8974 |     },
 8975 |     "node_modules/micromark-util-decode-string": {
 8976 |       "version": "2.0.1",
 8977 |       "resolved": "https://registry.npmjs.org/micromark-util-decode-string/-/micromark-util-decode-string-2.0.1.tgz",
 8978 |       "integrity": "sha512-nDV/77Fj6eH1ynwscYTOsbK7rR//Uj0bZXBwJZRfaLEJ1iGBR6kIfNmlNqaqJf649EP0F3NWNdeJi03elllNUQ==",
 8979 |       "dev": true,
 8980 |       "funding": [
 8981 |         {
 8982 |           "type": "GitHub Sponsors",
 8983 |           "url": "https://github.com/sponsors/unifiedjs"
 8984 |         },
 8985 |         {
 8986 |           "type": "OpenCollective",
 8987 |           "url": "https://opencollective.com/unified"
 8988 |         }
 8989 |       ],
 8990 |       "license": "MIT",
 8991 |       "dependencies": {
 8992 |         "decode-named-character-reference": "^1.0.0",
 8993 |         "micromark-util-character": "^2.0.0",
 8994 |         "micromark-util-decode-numeric-character-reference": "^2.0.0",
 8995 |         "micromark-util-symbol": "^2.0.0"
 8996 |       }
 8997 |     },
 8998 |     "node_modules/micromark-util-encode": {
 8999 |       "version": "2.0.1",
 9000 |       "resolved": "https://registry.npmjs.org/micromark-util-encode/-/micromark-util-encode-2.0.1.tgz",
 9001 |       "integrity": "sha512-c3cVx2y4KqUnwopcO9b/SCdo2O67LwJJ/UyqGfbigahfegL9myoEFoDYZgkT7f36T0bLrM9hZTAaAyH+PCAXjw==",
 9002 |       "dev": true,
 9003 |       "funding": [
 9004 |         {
 9005 |           "type": "GitHub Sponsors",
 9006 |           "url": "https://github.com/sponsors/unifiedjs"
 9007 |         },
 9008 |         {
 9009 |           "type": "OpenCollective",
 9010 |           "url": "https://opencollective.com/unified"
 9011 |         }
 9012 |       ],
 9013 |       "license": "MIT"
 9014 |     },
 9015 |     "node_modules/micromark-util-events-to-acorn": {
 9016 |       "version": "2.0.3",
 9017 |       "resolved": "https://registry.npmjs.org/micromark-util-events-to-acorn/-/micromark-util-events-to-acorn-2.0.3.tgz",
 9018 |       "integrity": "sha512-jmsiEIiZ1n7X1Rr5k8wVExBQCg5jy4UXVADItHmNk1zkwEVhBuIUKRu3fqv+hs4nxLISi2DQGlqIOGiFxgbfHg==",
 9019 |       "dev": true,
 9020 |       "funding": [
 9021 |         {
 9022 |           "type": "GitHub Sponsors",
 9023 |           "url": "https://github.com/sponsors/unifiedjs"
 9024 |         },
 9025 |         {
 9026 |           "type": "OpenCollective",
 9027 |           "url": "https://opencollective.com/unified"
 9028 |         }
 9029 |       ],
 9030 |       "license": "MIT",
 9031 |       "dependencies": {
 9032 |         "@types/estree": "^1.0.0",
 9033 |         "@types/unist": "^3.0.0",
 9034 |         "devlop": "^1.0.0",
 9035 |         "estree-util-visit": "^2.0.0",
 9036 |         "micromark-util-symbol": "^2.0.0",
 9037 |         "micromark-util-types": "^2.0.0",
 9038 |         "vfile-message": "^4.0.0"
 9039 |       }
 9040 |     },
 9041 |     "node_modules/micromark-util-html-tag-name": {
 9042 |       "version": "2.0.1",
 9043 |       "resolved": "https://registry.npmjs.org/micromark-util-html-tag-name/-/micromark-util-html-tag-name-2.0.1.tgz",
 9044 |       "integrity": "sha512-2cNEiYDhCWKI+Gs9T0Tiysk136SnR13hhO8yW6BGNyhOC4qYFnwF1nKfD3HFAIXA5c45RrIG1ub11GiXeYd1xA==",
 9045 |       "dev": true,
 9046 |       "funding": [
 9047 |         {
 9048 |           "type": "GitHub Sponsors",
 9049 |           "url": "https://github.com/sponsors/unifiedjs"
 9050 |         },
 9051 |         {
 9052 |           "type": "OpenCollective",
 9053 |           "url": "https://opencollective.com/unified"
 9054 |         }
 9055 |       ],
 9056 |       "license": "MIT"
 9057 |     },
 9058 |     "node_modules/micromark-util-normalize-identifier": {
 9059 |       "version": "2.0.1",
 9060 |       "resolved": "https://registry.npmjs.org/micromark-util-normalize-identifier/-/micromark-util-normalize-identifier-2.0.1.tgz",
 9061 |       "integrity": "sha512-sxPqmo70LyARJs0w2UclACPUUEqltCkJ6PhKdMIDuJ3gSf/Q+/GIe3WKl0Ijb/GyH9lOpUkRAO2wp0GVkLvS9Q==",
 9062 |       "dev": true,
 9063 |       "funding": [
 9064 |         {
 9065 |           "type": "GitHub Sponsors",
 9066 |           "url": "https://github.com/sponsors/unifiedjs"
 9067 |         },
 9068 |         {
 9069 |           "type": "OpenCollective",
 9070 |           "url": "https://opencollective.com/unified"
 9071 |         }
 9072 |       ],
 9073 |       "license": "MIT",
 9074 |       "dependencies": {
 9075 |         "micromark-util-symbol": "^2.0.0"
 9076 |       }
 9077 |     },
 9078 |     "node_modules/micromark-util-resolve-all": {
 9079 |       "version": "2.0.1",
 9080 |       "resolved": "https://registry.npmjs.org/micromark-util-resolve-all/-/micromark-util-resolve-all-2.0.1.tgz",
 9081 |       "integrity": "sha512-VdQyxFWFT2/FGJgwQnJYbe1jjQoNTS4RjglmSjTUlpUMa95Htx9NHeYW4rGDJzbjvCsl9eLjMQwGeElsqmzcHg==",
 9082 |       "dev": true,
 9083 |       "funding": [
 9084 |         {
 9085 |           "type": "GitHub Sponsors",
 9086 |           "url": "https://github.com/sponsors/unifiedjs"
 9087 |         },
 9088 |         {
 9089 |           "type": "OpenCollective",
 9090 |           "url": "https://opencollective.com/unified"
 9091 |         }
 9092 |       ],
 9093 |       "license": "MIT",
 9094 |       "dependencies": {
 9095 |         "micromark-util-types": "^2.0.0"
 9096 |       }
 9097 |     },
 9098 |     "node_modules/micromark-util-sanitize-uri": {
 9099 |       "version": "2.0.1",
 9100 |       "resolved": "https://registry.npmjs.org/micromark-util-sanitize-uri/-/micromark-util-sanitize-uri-2.0.1.tgz",
 9101 |       "integrity": "sha512-9N9IomZ/YuGGZZmQec1MbgxtlgougxTodVwDzzEouPKo3qFWvymFHWcnDi2vzV1ff6kas9ucW+o3yzJK9YB1AQ==",
 9102 |       "dev": true,
 9103 |       "funding": [
 9104 |         {
 9105 |           "type": "GitHub Sponsors",
 9106 |           "url": "https://github.com/sponsors/unifiedjs"
 9107 |         },
 9108 |         {
 9109 |           "type": "OpenCollective",
 9110 |           "url": "https://opencollective.com/unified"
 9111 |         }
 9112 |       ],
 9113 |       "license": "MIT",
 9114 |       "dependencies": {
 9115 |         "micromark-util-character": "^2.0.0",
 9116 |         "micromark-util-encode": "^2.0.0",
 9117 |         "micromark-util-symbol": "^2.0.0"
 9118 |       }
 9119 |     },
 9120 |     "node_modules/micromark-util-subtokenize": {
 9121 |       "version": "2.1.0",
 9122 |       "resolved": "https://registry.npmjs.org/micromark-util-subtokenize/-/micromark-util-subtokenize-2.1.0.tgz",
 9123 |       "integrity": "sha512-XQLu552iSctvnEcgXw6+Sx75GflAPNED1qx7eBJ+wydBb2KCbRZe+NwvIEEMM83uml1+2WSXpBAcp9IUCgCYWA==",
 9124 |       "dev": true,
 9125 |       "funding": [
 9126 |         {
 9127 |           "type": "GitHub Sponsors",
 9128 |           "url": "https://github.com/sponsors/unifiedjs"
 9129 |         },
 9130 |         {
 9131 |           "type": "OpenCollective",
 9132 |           "url": "https://opencollective.com/unified"
 9133 |         }
 9134 |       ],
 9135 |       "license": "MIT",
 9136 |       "dependencies": {
 9137 |         "devlop": "^1.0.0",
 9138 |         "micromark-util-chunked": "^2.0.0",
 9139 |         "micromark-util-symbol": "^2.0.0",
 9140 |         "micromark-util-types": "^2.0.0"
 9141 |       }
 9142 |     },
 9143 |     "node_modules/micromark-util-symbol": {
 9144 |       "version": "2.0.1",
 9145 |       "resolved": "https://registry.npmjs.org/micromark-util-symbol/-/micromark-util-symbol-2.0.1.tgz",
 9146 |       "integrity": "sha512-vs5t8Apaud9N28kgCrRUdEed4UJ+wWNvicHLPxCa9ENlYuAY31M0ETy5y1vA33YoNPDFTghEbnh6efaE8h4x0Q==",
 9147 |       "dev": true,
 9148 |       "funding": [
 9149 |         {
 9150 |           "type": "GitHub Sponsors",
 9151 |           "url": "https://github.com/sponsors/unifiedjs"
 9152 |         },
 9153 |         {
 9154 |           "type": "OpenCollective",
 9155 |           "url": "https://opencollective.com/unified"
 9156 |         }
 9157 |       ],
 9158 |       "license": "MIT"
 9159 |     },
 9160 |     "node_modules/micromark-util-types": {
 9161 |       "version": "2.0.2",
 9162 |       "resolved": "https://registry.npmjs.org/micromark-util-types/-/micromark-util-types-2.0.2.tgz",
 9163 |       "integrity": "sha512-Yw0ECSpJoViF1qTU4DC6NwtC4aWGt1EkzaQB8KPPyCRR8z9TWeV0HbEFGTO+ZY1wB22zmxnJqhPyTpOVCpeHTA==",
 9164 |       "dev": true,
 9165 |       "funding": [
 9166 |         {
 9167 |           "type": "GitHub Sponsors",
 9168 |           "url": "https://github.com/sponsors/unifiedjs"
 9169 |         },
 9170 |         {
 9171 |           "type": "OpenCollective",
 9172 |           "url": "https://opencollective.com/unified"
 9173 |         }
 9174 |       ],
 9175 |       "license": "MIT"
 9176 |     },
 9177 |     "node_modules/micromatch": {
 9178 |       "version": "4.0.8",
 9179 |       "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
 9180 |       "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
 9181 |       "dev": true,
 9182 |       "license": "MIT",
 9183 |       "dependencies": {
 9184 |         "braces": "^3.0.3",
 9185 |         "picomatch": "^2.3.1"
 9186 |       },
 9187 |       "engines": {
 9188 |         "node": ">=8.6"
 9189 |       }
 9190 |     },
 9191 |     "node_modules/mime": {
 9192 |       "version": "1.6.0",
 9193 |       "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
 9194 |       "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
 9195 |       "dev": true,
 9196 |       "license": "MIT",
 9197 |       "bin": {
 9198 |         "mime": "cli.js"
 9199 |       },
 9200 |       "engines": {
 9201 |         "node": ">=4"
 9202 |       }
 9203 |     },
 9204 |     "node_modules/mime-db": {
 9205 |       "version": "1.52.0",
 9206 |       "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
 9207 |       "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
 9208 |       "dev": true,
 9209 |       "license": "MIT",
 9210 |       "engines": {
 9211 |         "node": ">= 0.6"
 9212 |       }
 9213 |     },
 9214 |     "node_modules/mime-types": {
 9215 |       "version": "2.1.35",
 9216 |       "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
 9217 |       "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
 9218 |       "dev": true,
 9219 |       "license": "MIT",
 9220 |       "dependencies": {
 9221 |         "mime-db": "1.52.0"
 9222 |       },
 9223 |       "engines": {
 9224 |         "node": ">= 0.6"
 9225 |       }
 9226 |     },
 9227 |     "node_modules/mimic-fn": {
 9228 |       "version": "2.1.0",
 9229 |       "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
 9230 |       "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
 9231 |       "dev": true,
 9232 |       "license": "MIT",
 9233 |       "engines": {
 9234 |         "node": ">=6"
 9235 |       }
 9236 |     },
 9237 |     "node_modules/mimic-response": {
 9238 |       "version": "4.0.0",
 9239 |       "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-4.0.0.tgz",
 9240 |       "integrity": "sha512-e5ISH9xMYU0DzrT+jl8q2ze9D6eWBto+I8CNpe+VI+K2J/F/k3PdkdTdz4wvGVH4NTpo+NRYTVIuMQEMMcsLqg==",
 9241 |       "dev": true,
 9242 |       "license": "MIT",
 9243 |       "engines": {
 9244 |         "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
 9245 |       },
 9246 |       "funding": {
 9247 |         "url": "https://github.com/sponsors/sindresorhus"
 9248 |       }
 9249 |     },
 9250 |     "node_modules/minimatch": {
 9251 |       "version": "10.0.3",
 9252 |       "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-10.0.3.tgz",
 9253 |       "integrity": "sha512-IPZ167aShDZZUMdRk66cyQAW3qr0WzbHkPdMYa8bzZhlHhO3jALbKdxcaak7W9FfT2rZNpQuUu4Od7ILEpXSaw==",
 9254 |       "dev": true,
 9255 |       "license": "ISC",
 9256 |       "dependencies": {
 9257 |         "@isaacs/brace-expansion": "^5.0.0"
 9258 |       },
 9259 |       "engines": {
 9260 |         "node": "20 || >=22"
 9261 |       },
 9262 |       "funding": {
 9263 |         "url": "https://github.com/sponsors/isaacs"
 9264 |       }
 9265 |     },
 9266 |     "node_modules/minipass": {
 9267 |       "version": "7.1.2",
 9268 |       "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
 9269 |       "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
 9270 |       "dev": true,
 9271 |       "license": "ISC",
 9272 |       "engines": {
 9273 |         "node": ">=16 || 14 >=14.17"
 9274 |       }
 9275 |     },
 9276 |     "node_modules/minizlib": {
 9277 |       "version": "2.1.2",
 9278 |       "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
 9279 |       "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
 9280 |       "dev": true,
 9281 |       "license": "MIT",
 9282 |       "dependencies": {
 9283 |         "minipass": "^3.0.0",
 9284 |         "yallist": "^4.0.0"
 9285 |       },
 9286 |       "engines": {
 9287 |         "node": ">= 8"
 9288 |       }
 9289 |     },
 9290 |     "node_modules/minizlib/node_modules/minipass": {
 9291 |       "version": "3.3.6",
 9292 |       "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
 9293 |       "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
 9294 |       "dev": true,
 9295 |       "license": "ISC",
 9296 |       "dependencies": {
 9297 |         "yallist": "^4.0.0"
 9298 |       },
 9299 |       "engines": {
 9300 |         "node": ">=8"
 9301 |       }
 9302 |     },
 9303 |     "node_modules/mintlify": {
 9304 |       "version": "4.2.65",
 9305 |       "resolved": "https://registry.npmjs.org/mintlify/-/mintlify-4.2.65.tgz",
 9306 |       "integrity": "sha512-eSNcrN7ESjmw4SW3I1GilU5L8EvHZxTFzd+uVHb8zQF0BKTI1gmOvECjz4shl2Jmyap5UI/3xmQdaqw9Y/ibMw==",
 9307 |       "dev": true,
 9308 |       "license": "Elastic-2.0",
 9309 |       "dependencies": {
 9310 |         "@mintlify/cli": "4.0.669"
 9311 |       },
 9312 |       "bin": {
 9313 |         "mint": "index.js",
 9314 |         "mintlify": "index.js"
 9315 |       },
 9316 |       "engines": {
 9317 |         "node": ">=18.0.0"
 9318 |       }
 9319 |     },
 9320 |     "node_modules/mitt": {
 9321 |       "version": "3.0.1",
 9322 |       "resolved": "https://registry.npmjs.org/mitt/-/mitt-3.0.1.tgz",
 9323 |       "integrity": "sha512-vKivATfr97l2/QBCYAkXYDbrIWPM2IIKEl7YPhjCvKlG3kE2gm+uBo6nEXK3M5/Ffh/FLpKExzOQ3JJoJGFKBw==",
 9324 |       "dev": true,
 9325 |       "license": "MIT"
 9326 |     },
 9327 |     "node_modules/mkdirp": {
 9328 |       "version": "1.0.4",
 9329 |       "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
 9330 |       "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
 9331 |       "dev": true,
 9332 |       "license": "MIT",
 9333 |       "bin": {
 9334 |         "mkdirp": "bin/cmd.js"
 9335 |       },
 9336 |       "engines": {
 9337 |         "node": ">=10"
 9338 |       }
 9339 |     },
 9340 |     "node_modules/ms": {
 9341 |       "version": "2.1.3",
 9342 |       "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
 9343 |       "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
 9344 |       "dev": true,
 9345 |       "license": "MIT"
 9346 |     },
 9347 |     "node_modules/mute-stream": {
 9348 |       "version": "2.0.0",
 9349 |       "resolved": "https://registry.npmjs.org/mute-stream/-/mute-stream-2.0.0.tgz",
 9350 |       "integrity": "sha512-WWdIxpyjEn+FhQJQQv9aQAYlHoNVdzIzUySNV1gHUPDSdZJ3yZn7pAAbQcV7B56Mvu881q9FZV+0Vx2xC44VWA==",
 9351 |       "dev": true,
 9352 |       "license": "ISC",
 9353 |       "engines": {
 9354 |         "node": "^18.17.0 || >=20.5.0"
 9355 |       }
 9356 |     },
 9357 |     "node_modules/mz": {
 9358 |       "version": "2.7.0",
 9359 |       "resolved": "https://registry.npmjs.org/mz/-/mz-2.7.0.tgz",
 9360 |       "integrity": "sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==",
 9361 |       "dev": true,
 9362 |       "license": "MIT",
 9363 |       "dependencies": {
 9364 |         "any-promise": "^1.0.0",
 9365 |         "object-assign": "^4.0.1",
 9366 |         "thenify-all": "^1.0.0"
 9367 |       }
 9368 |     },
 9369 |     "node_modules/nanoid": {
 9370 |       "version": "3.3.11",
 9371 |       "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
 9372 |       "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
 9373 |       "dev": true,
 9374 |       "funding": [
 9375 |         {
 9376 |           "type": "github",
 9377 |           "url": "https://github.com/sponsors/ai"
 9378 |         }
 9379 |       ],
 9380 |       "license": "MIT",
 9381 |       "bin": {
 9382 |         "nanoid": "bin/nanoid.cjs"
 9383 |       },
 9384 |       "engines": {
 9385 |         "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
 9386 |       }
 9387 |     },
 9388 |     "node_modules/negotiator": {
 9389 |       "version": "0.6.3",
 9390 |       "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
 9391 |       "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
 9392 |       "dev": true,
 9393 |       "license": "MIT",
 9394 |       "engines": {
 9395 |         "node": ">= 0.6"
 9396 |       }
 9397 |     },
 9398 |     "node_modules/neotraverse": {
 9399 |       "version": "0.6.18",
 9400 |       "resolved": "https://registry.npmjs.org/neotraverse/-/neotraverse-0.6.18.tgz",
 9401 |       "integrity": "sha512-Z4SmBUweYa09+o6pG+eASabEpP6QkQ70yHj351pQoEXIs8uHbaU2DWVmzBANKgflPa47A50PtB2+NgRpQvr7vA==",
 9402 |       "dev": true,
 9403 |       "license": "MIT",
 9404 |       "engines": {
 9405 |         "node": ">= 10"
 9406 |       }
 9407 |     },
 9408 |     "node_modules/netmask": {
 9409 |       "version": "2.0.2",
 9410 |       "resolved": "https://registry.npmjs.org/netmask/-/netmask-2.0.2.tgz",
 9411 |       "integrity": "sha512-dBpDMdxv9Irdq66304OLfEmQ9tbNRFnFTuZiLo+bD+r332bBmMJ8GBLXklIXXgxd3+v9+KUnZaUR5PJMa75Gsg==",
 9412 |       "dev": true,
 9413 |       "license": "MIT",
 9414 |       "engines": {
 9415 |         "node": ">= 0.4.0"
 9416 |       }
 9417 |     },
 9418 |     "node_modules/next-mdx-remote-client": {
 9419 |       "version": "1.1.2",
 9420 |       "resolved": "https://registry.npmjs.org/next-mdx-remote-client/-/next-mdx-remote-client-1.1.2.tgz",
 9421 |       "integrity": "sha512-LZJxBU420dTZsbWOrNYZXkahGJu8lNKxLTrQrZl4JUsKeFtp91yA78dHMTfOcp7UAud3txhM1tayyoKFq4tw7A==",
 9422 |       "dev": true,
 9423 |       "license": "MPL 2.0",
 9424 |       "dependencies": {
 9425 |         "@babel/code-frame": "^7.27.1",
 9426 |         "@mdx-js/mdx": "^3.1.0",
 9427 |         "@mdx-js/react": "^3.1.0",
 9428 |         "remark-mdx-remove-esm": "^1.2.0",
 9429 |         "serialize-error": "^12.0.0",
 9430 |         "vfile": "^6.0.3",
 9431 |         "vfile-matter": "^5.0.1"
 9432 |       },
 9433 |       "engines": {
 9434 |         "node": ">=18.18.0"
 9435 |       },
 9436 |       "peerDependencies": {
 9437 |         "react": ">= 18.3.0 < 19.0.0",
 9438 |         "react-dom": ">= 18.3.0 < 19.0.0"
 9439 |       }
 9440 |     },
 9441 |     "node_modules/nimma": {
 9442 |       "version": "0.2.3",
 9443 |       "resolved": "https://registry.npmjs.org/nimma/-/nimma-0.2.3.tgz",
 9444 |       "integrity": "sha512-1ZOI8J+1PKKGceo/5CT5GfQOG6H8I2BencSK06YarZ2wXwH37BSSUWldqJmMJYA5JfqDqffxDXynt6f11AyKcA==",
 9445 |       "dev": true,
 9446 |       "license": "Apache-2.0",
 9447 |       "dependencies": {
 9448 |         "@jsep-plugin/regex": "^1.0.1",
 9449 |         "@jsep-plugin/ternary": "^1.0.2",
 9450 |         "astring": "^1.8.1",
 9451 |         "jsep": "^1.2.0"
 9452 |       },
 9453 |       "engines": {
 9454 |         "node": "^12.20 || >=14.13"
 9455 |       },
 9456 |       "optionalDependencies": {
 9457 |         "jsonpath-plus": "^6.0.1 || ^10.1.0",
 9458 |         "lodash.topath": "^4.5.2"
 9459 |       }
 9460 |     },
 9461 |     "node_modules/nlcst-to-string": {
 9462 |       "version": "4.0.0",
 9463 |       "resolved": "https://registry.npmjs.org/nlcst-to-string/-/nlcst-to-string-4.0.0.tgz",
 9464 |       "integrity": "sha512-YKLBCcUYKAg0FNlOBT6aI91qFmSiFKiluk655WzPF+DDMA02qIyy8uiRqI8QXtcFpEvll12LpL5MXqEmAZ+dcA==",
 9465 |       "dev": true,
 9466 |       "license": "MIT",
 9467 |       "dependencies": {
 9468 |         "@types/nlcst": "^2.0.0"
 9469 |       },
 9470 |       "funding": {
 9471 |         "type": "opencollective",
 9472 |         "url": "https://opencollective.com/unified"
 9473 |       }
 9474 |     },
 9475 |     "node_modules/node-fetch": {
 9476 |       "version": "2.6.7",
 9477 |       "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
 9478 |       "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
 9479 |       "dev": true,
 9480 |       "license": "MIT",
 9481 |       "dependencies": {
 9482 |         "whatwg-url": "^5.0.0"
 9483 |       },
 9484 |       "engines": {
 9485 |         "node": "4.x || >=6.0.0"
 9486 |       },
 9487 |       "peerDependencies": {
 9488 |         "encoding": "^0.1.0"
 9489 |       },
 9490 |       "peerDependenciesMeta": {
 9491 |         "encoding": {
 9492 |           "optional": true
 9493 |         }
 9494 |       }
 9495 |     },
 9496 |     "node_modules/normalize-path": {
 9497 |       "version": "3.0.0",
 9498 |       "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
 9499 |       "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
 9500 |       "dev": true,
 9501 |       "license": "MIT",
 9502 |       "engines": {
 9503 |         "node": ">=0.10.0"
 9504 |       }
 9505 |     },
 9506 |     "node_modules/normalize-url": {
 9507 |       "version": "8.0.2",
 9508 |       "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-8.0.2.tgz",
 9509 |       "integrity": "sha512-Ee/R3SyN4BuynXcnTaekmaVdbDAEiNrHqjQIA37mHU8G9pf7aaAD4ZX3XjBLo6rsdcxA/gtkcNYZLt30ACgynw==",
 9510 |       "dev": true,
 9511 |       "license": "MIT",
 9512 |       "engines": {
 9513 |         "node": ">=14.16"
 9514 |       },
 9515 |       "funding": {
 9516 |         "url": "https://github.com/sponsors/sindresorhus"
 9517 |       }
 9518 |     },
 9519 |     "node_modules/object-assign": {
 9520 |       "version": "4.1.1",
 9521 |       "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
 9522 |       "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
 9523 |       "dev": true,
 9524 |       "license": "MIT",
 9525 |       "engines": {
 9526 |         "node": ">=0.10.0"
 9527 |       }
 9528 |     },
 9529 |     "node_modules/object-hash": {
 9530 |       "version": "3.0.0",
 9531 |       "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
 9532 |       "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
 9533 |       "dev": true,
 9534 |       "license": "MIT",
 9535 |       "engines": {
 9536 |         "node": ">= 6"
 9537 |       }
 9538 |     },
 9539 |     "node_modules/object-inspect": {
 9540 |       "version": "1.13.4",
 9541 |       "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
 9542 |       "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
 9543 |       "dev": true,
 9544 |       "license": "MIT",
 9545 |       "engines": {
 9546 |         "node": ">= 0.4"
 9547 |       },
 9548 |       "funding": {
 9549 |         "url": "https://github.com/sponsors/ljharb"
 9550 |       }
 9551 |     },
 9552 |     "node_modules/object-keys": {
 9553 |       "version": "1.1.1",
 9554 |       "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
 9555 |       "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
 9556 |       "dev": true,
 9557 |       "license": "MIT",
 9558 |       "engines": {
 9559 |         "node": ">= 0.4"
 9560 |       }
 9561 |     },
 9562 |     "node_modules/object.assign": {
 9563 |       "version": "4.1.7",
 9564 |       "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",
 9565 |       "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",
 9566 |       "dev": true,
 9567 |       "license": "MIT",
 9568 |       "dependencies": {
 9569 |         "call-bind": "^1.0.8",
 9570 |         "call-bound": "^1.0.3",
 9571 |         "define-properties": "^1.2.1",
 9572 |         "es-object-atoms": "^1.0.0",
 9573 |         "has-symbols": "^1.1.0",
 9574 |         "object-keys": "^1.1.1"
 9575 |       },
 9576 |       "engines": {
 9577 |         "node": ">= 0.4"
 9578 |       },
 9579 |       "funding": {
 9580 |         "url": "https://github.com/sponsors/ljharb"
 9581 |       }
 9582 |     },
 9583 |     "node_modules/on-finished": {
 9584 |       "version": "2.4.1",
 9585 |       "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
 9586 |       "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
 9587 |       "dev": true,
 9588 |       "license": "MIT",
 9589 |       "dependencies": {
 9590 |         "ee-first": "1.1.1"
 9591 |       },
 9592 |       "engines": {
 9593 |         "node": ">= 0.8"
 9594 |       }
 9595 |     },
 9596 |     "node_modules/once": {
 9597 |       "version": "1.4.0",
 9598 |       "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
 9599 |       "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
 9600 |       "dev": true,
 9601 |       "license": "ISC",
 9602 |       "dependencies": {
 9603 |         "wrappy": "1"
 9604 |       }
 9605 |     },
 9606 |     "node_modules/onetime": {
 9607 |       "version": "5.1.2",
 9608 |       "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
 9609 |       "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
 9610 |       "dev": true,
 9611 |       "license": "MIT",
 9612 |       "dependencies": {
 9613 |         "mimic-fn": "^2.1.0"
 9614 |       },
 9615 |       "engines": {
 9616 |         "node": ">=6"
 9617 |       },
 9618 |       "funding": {
 9619 |         "url": "https://github.com/sponsors/sindresorhus"
 9620 |       }
 9621 |     },
 9622 |     "node_modules/oniguruma-parser": {
 9623 |       "version": "0.12.1",
 9624 |       "resolved": "https://registry.npmjs.org/oniguruma-parser/-/oniguruma-parser-0.12.1.tgz",
 9625 |       "integrity": "sha512-8Unqkvk1RYc6yq2WBYRj4hdnsAxVze8i7iPfQr8e4uSP3tRv0rpZcbGUDvxfQQcdwHt/e9PrMvGCsa8OqG9X3w==",
 9626 |       "dev": true,
 9627 |       "license": "MIT"
 9628 |     },
 9629 |     "node_modules/oniguruma-to-es": {
 9630 |       "version": "4.3.3",
 9631 |       "resolved": "https://registry.npmjs.org/oniguruma-to-es/-/oniguruma-to-es-4.3.3.tgz",
 9632 |       "integrity": "sha512-rPiZhzC3wXwE59YQMRDodUwwT9FZ9nNBwQQfsd1wfdtlKEyCdRV0avrTcSZ5xlIvGRVPd/cx6ZN45ECmS39xvg==",
 9633 |       "dev": true,
 9634 |       "license": "MIT",
 9635 |       "dependencies": {
 9636 |         "oniguruma-parser": "^0.12.1",
 9637 |         "regex": "^6.0.1",
 9638 |         "regex-recursion": "^6.0.2"
 9639 |       }
 9640 |     },
 9641 |     "node_modules/open": {
 9642 |       "version": "8.4.2",
 9643 |       "resolved": "https://registry.npmjs.org/open/-/open-8.4.2.tgz",
 9644 |       "integrity": "sha512-7x81NCL719oNbsq/3mh+hVrAWmFuEYUqrq/Iw3kUzH8ReypT9QQ0BLoJS7/G9k6N81XjW4qHWtjWwe/9eLy1EQ==",
 9645 |       "dev": true,
 9646 |       "license": "MIT",
 9647 |       "dependencies": {
 9648 |         "define-lazy-prop": "^2.0.0",
 9649 |         "is-docker": "^2.1.1",
 9650 |         "is-wsl": "^2.2.0"
 9651 |       },
 9652 |       "engines": {
 9653 |         "node": ">=12"
 9654 |       },
 9655 |       "funding": {
 9656 |         "url": "https://github.com/sponsors/sindresorhus"
 9657 |       }
 9658 |     },
 9659 |     "node_modules/openapi-types": {
 9660 |       "version": "12.1.3",
 9661 |       "resolved": "https://registry.npmjs.org/openapi-types/-/openapi-types-12.1.3.tgz",
 9662 |       "integrity": "sha512-N4YtSYJqghVu4iek2ZUvcN/0aqH1kRDuNqzcycDxhOUpg7GdvLa2F3DgS6yBNhInhv2r/6I0Flkn7CqL8+nIcw==",
 9663 |       "dev": true,
 9664 |       "license": "MIT"
 9665 |     },
 9666 |     "node_modules/own-keys": {
 9667 |       "version": "1.0.1",
 9668 |       "resolved": "https://registry.npmjs.org/own-keys/-/own-keys-1.0.1.tgz",
 9669 |       "integrity": "sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==",
 9670 |       "dev": true,
 9671 |       "license": "MIT",
 9672 |       "dependencies": {
 9673 |         "get-intrinsic": "^1.2.6",
 9674 |         "object-keys": "^1.1.1",
 9675 |         "safe-push-apply": "^1.0.0"
 9676 |       },
 9677 |       "engines": {
 9678 |         "node": ">= 0.4"
 9679 |       },
 9680 |       "funding": {
 9681 |         "url": "https://github.com/sponsors/ljharb"
 9682 |       }
 9683 |     },
 9684 |     "node_modules/p-any": {
 9685 |       "version": "4.0.0",
 9686 |       "resolved": "https://registry.npmjs.org/p-any/-/p-any-4.0.0.tgz",
 9687 |       "integrity": "sha512-S/B50s+pAVe0wmEZHmBs/9yJXeZ5KhHzOsgKzt0hRdgkoR3DxW9ts46fcsWi/r3VnzsnkKS7q4uimze+zjdryw==",
 9688 |       "dev": true,
 9689 |       "license": "MIT",
 9690 |       "dependencies": {
 9691 |         "p-cancelable": "^3.0.0",
 9692 |         "p-some": "^6.0.0"
 9693 |       },
 9694 |       "engines": {
 9695 |         "node": ">=12.20"
 9696 |       },
 9697 |       "funding": {
 9698 |         "url": "https://github.com/sponsors/sindresorhus"
 9699 |       }
 9700 |     },
 9701 |     "node_modules/p-cancelable": {
 9702 |       "version": "3.0.0",
 9703 |       "resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-3.0.0.tgz",
 9704 |       "integrity": "sha512-mlVgR3PGuzlo0MmTdk4cXqXWlwQDLnONTAg6sm62XkMJEiRxN3GL3SffkYvqwonbkJBcrI7Uvv5Zh9yjvn2iUw==",
 9705 |       "dev": true,
 9706 |       "license": "MIT",
 9707 |       "engines": {
 9708 |         "node": ">=12.20"
 9709 |       }
 9710 |     },
 9711 |     "node_modules/p-some": {
 9712 |       "version": "6.0.0",
 9713 |       "resolved": "https://registry.npmjs.org/p-some/-/p-some-6.0.0.tgz",
 9714 |       "integrity": "sha512-CJbQCKdfSX3fIh8/QKgS+9rjm7OBNUTmwWswAFQAhc8j1NR1dsEDETUEuVUtQHZpV+J03LqWBEwvu0g1Yn+TYg==",
 9715 |       "dev": true,
 9716 |       "license": "MIT",
 9717 |       "dependencies": {
 9718 |         "aggregate-error": "^4.0.0",
 9719 |         "p-cancelable": "^3.0.0"
 9720 |       },
 9721 |       "engines": {
 9722 |         "node": ">=12.20"
 9723 |       },
 9724 |       "funding": {
 9725 |         "url": "https://github.com/sponsors/sindresorhus"
 9726 |       }
 9727 |     },
 9728 |     "node_modules/p-timeout": {
 9729 |       "version": "5.1.0",
 9730 |       "resolved": "https://registry.npmjs.org/p-timeout/-/p-timeout-5.1.0.tgz",
 9731 |       "integrity": "sha512-auFDyzzzGZZZdHz3BtET9VEz0SE/uMEAx7uWfGPucfzEwwe/xH0iVeZibQmANYE/hp9T2+UUZT5m+BKyrDp3Ew==",
 9732 |       "dev": true,
 9733 |       "license": "MIT",
 9734 |       "engines": {
 9735 |         "node": ">=12"
 9736 |       },
 9737 |       "funding": {
 9738 |         "url": "https://github.com/sponsors/sindresorhus"
 9739 |       }
 9740 |     },
 9741 |     "node_modules/pac-proxy-agent": {
 9742 |       "version": "7.2.0",
 9743 |       "resolved": "https://registry.npmjs.org/pac-proxy-agent/-/pac-proxy-agent-7.2.0.tgz",
 9744 |       "integrity": "sha512-TEB8ESquiLMc0lV8vcd5Ql/JAKAoyzHFXaStwjkzpOpC5Yv+pIzLfHvjTSdf3vpa2bMiUQrg9i6276yn8666aA==",
 9745 |       "dev": true,
 9746 |       "license": "MIT",
 9747 |       "dependencies": {
 9748 |         "@tootallnate/quickjs-emscripten": "^0.23.0",
 9749 |         "agent-base": "^7.1.2",
 9750 |         "debug": "^4.3.4",
 9751 |         "get-uri": "^6.0.1",
 9752 |         "http-proxy-agent": "^7.0.0",
 9753 |         "https-proxy-agent": "^7.0.6",
 9754 |         "pac-resolver": "^7.0.1",
 9755 |         "socks-proxy-agent": "^8.0.5"
 9756 |       },
 9757 |       "engines": {
 9758 |         "node": ">= 14"
 9759 |       }
 9760 |     },
 9761 |     "node_modules/pac-resolver": {
 9762 |       "version": "7.0.1",
 9763 |       "resolved": "https://registry.npmjs.org/pac-resolver/-/pac-resolver-7.0.1.tgz",
 9764 |       "integrity": "sha512-5NPgf87AT2STgwa2ntRMr45jTKrYBGkVU36yT0ig/n/GMAa3oPqhZfIQ2kMEimReg0+t9kZViDVZ83qfVUlckg==",
 9765 |       "dev": true,
 9766 |       "license": "MIT",
 9767 |       "dependencies": {
 9768 |         "degenerator": "^5.0.0",
 9769 |         "netmask": "^2.0.2"
 9770 |       },
 9771 |       "engines": {
 9772 |         "node": ">= 14"
 9773 |       }
 9774 |     },
 9775 |     "node_modules/package-json-from-dist": {
 9776 |       "version": "1.0.1",
 9777 |       "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
 9778 |       "integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
 9779 |       "dev": true,
 9780 |       "license": "BlueOak-1.0.0"
 9781 |     },
 9782 |     "node_modules/parent-module": {
 9783 |       "version": "1.0.1",
 9784 |       "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
 9785 |       "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
 9786 |       "dev": true,
 9787 |       "license": "MIT",
 9788 |       "dependencies": {
 9789 |         "callsites": "^3.0.0"
 9790 |       },
 9791 |       "engines": {
 9792 |         "node": ">=6"
 9793 |       }
 9794 |     },
 9795 |     "node_modules/parse-entities": {
 9796 |       "version": "4.0.2",
 9797 |       "resolved": "https://registry.npmjs.org/parse-entities/-/parse-entities-4.0.2.tgz",
 9798 |       "integrity": "sha512-GG2AQYWoLgL877gQIKeRPGO1xF9+eG1ujIb5soS5gPvLQ1y2o8FL90w2QWNdf9I361Mpp7726c+lj3U0qK1uGw==",
 9799 |       "dev": true,
 9800 |       "license": "MIT",
 9801 |       "dependencies": {
 9802 |         "@types/unist": "^2.0.0",
 9803 |         "character-entities-legacy": "^3.0.0",
 9804 |         "character-reference-invalid": "^2.0.0",
 9805 |         "decode-named-character-reference": "^1.0.0",
 9806 |         "is-alphanumerical": "^2.0.0",
 9807 |         "is-decimal": "^2.0.0",
 9808 |         "is-hexadecimal": "^2.0.0"
 9809 |       },
 9810 |       "funding": {
 9811 |         "type": "github",
 9812 |         "url": "https://github.com/sponsors/wooorm"
 9813 |       }
 9814 |     },
 9815 |     "node_modules/parse-entities/node_modules/@types/unist": {
 9816 |       "version": "2.0.11",
 9817 |       "resolved": "https://registry.npmjs.org/@types/unist/-/unist-2.0.11.tgz",
 9818 |       "integrity": "sha512-CmBKiL6NNo/OqgmMn95Fk9Whlp2mtvIv+KNpQKN2F4SjvrEesubTRWGYSg+BnWZOnlCaSTU1sMpsBOzgbYhnsA==",
 9819 |       "dev": true,
 9820 |       "license": "MIT"
 9821 |     },
 9822 |     "node_modules/parse-json": {
 9823 |       "version": "5.2.0",
 9824 |       "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
 9825 |       "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
 9826 |       "dev": true,
 9827 |       "license": "MIT",
 9828 |       "dependencies": {
 9829 |         "@babel/code-frame": "^7.0.0",
 9830 |         "error-ex": "^1.3.1",
 9831 |         "json-parse-even-better-errors": "^2.3.0",
 9832 |         "lines-and-columns": "^1.1.6"
 9833 |       },
 9834 |       "engines": {
 9835 |         "node": ">=8"
 9836 |       },
 9837 |       "funding": {
 9838 |         "url": "https://github.com/sponsors/sindresorhus"
 9839 |       }
 9840 |     },
 9841 |     "node_modules/parse-latin": {
 9842 |       "version": "7.0.0",
 9843 |       "resolved": "https://registry.npmjs.org/parse-latin/-/parse-latin-7.0.0.tgz",
 9844 |       "integrity": "sha512-mhHgobPPua5kZ98EF4HWiH167JWBfl4pvAIXXdbaVohtK7a6YBOy56kvhCqduqyo/f3yrHFWmqmiMg/BkBkYYQ==",
 9845 |       "dev": true,
 9846 |       "license": "MIT",
 9847 |       "dependencies": {
 9848 |         "@types/nlcst": "^2.0.0",
 9849 |         "@types/unist": "^3.0.0",
 9850 |         "nlcst-to-string": "^4.0.0",
 9851 |         "unist-util-modify-children": "^4.0.0",
 9852 |         "unist-util-visit-children": "^3.0.0",
 9853 |         "vfile": "^6.0.0"
 9854 |       },
 9855 |       "funding": {
 9856 |         "type": "github",
 9857 |         "url": "https://github.com/sponsors/wooorm"
 9858 |       }
 9859 |     },
 9860 |     "node_modules/parse5": {
 9861 |       "version": "7.3.0",
 9862 |       "resolved": "https://registry.npmjs.org/parse5/-/parse5-7.3.0.tgz",
 9863 |       "integrity": "sha512-IInvU7fabl34qmi9gY8XOVxhYyMyuH2xUNpb2q8/Y+7552KlejkRvqvD19nMoUW/uQGGbqNpA6Tufu5FL5BZgw==",
 9864 |       "dev": true,
 9865 |       "license": "MIT",
 9866 |       "dependencies": {
 9867 |         "entities": "^6.0.0"
 9868 |       },
 9869 |       "funding": {
 9870 |         "url": "https://github.com/inikulin/parse5?sponsor=1"
 9871 |       }
 9872 |     },
 9873 |     "node_modules/parseurl": {
 9874 |       "version": "1.3.3",
 9875 |       "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
 9876 |       "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
 9877 |       "dev": true,
 9878 |       "license": "MIT",
 9879 |       "engines": {
 9880 |         "node": ">= 0.8"
 9881 |       }
 9882 |     },
 9883 |     "node_modules/patch-console": {
 9884 |       "version": "2.0.0",
 9885 |       "resolved": "https://registry.npmjs.org/patch-console/-/patch-console-2.0.0.tgz",
 9886 |       "integrity": "sha512-0YNdUceMdaQwoKce1gatDScmMo5pu/tfABfnzEqeG0gtTmd7mh/WcwgUjtAeOU7N8nFFlbQBnFK2gXW5fGvmMA==",
 9887 |       "dev": true,
 9888 |       "license": "MIT",
 9889 |       "engines": {
 9890 |         "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
 9891 |       }
 9892 |     },
 9893 |     "node_modules/path-equal": {
 9894 |       "version": "1.2.5",
 9895 |       "resolved": "https://registry.npmjs.org/path-equal/-/path-equal-1.2.5.tgz",
 9896 |       "integrity": "sha512-i73IctDr3F2W+bsOWDyyVm/lqsXO47aY9nsFZUjTT/aljSbkxHxxCoyZ9UUrM8jK0JVod+An+rl48RCsvWM+9g==",
 9897 |       "dev": true,
 9898 |       "license": "MIT"
 9899 |     },
 9900 |     "node_modules/path-is-absolute": {
 9901 |       "version": "1.0.1",
 9902 |       "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
 9903 |       "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
 9904 |       "dev": true,
 9905 |       "license": "MIT",
 9906 |       "engines": {
 9907 |         "node": ">=0.10.0"
 9908 |       }
 9909 |     },
 9910 |     "node_modules/path-key": {
 9911 |       "version": "3.1.1",
 9912 |       "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
 9913 |       "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
 9914 |       "dev": true,
 9915 |       "license": "MIT",
 9916 |       "engines": {
 9917 |         "node": ">=8"
 9918 |       }
 9919 |     },
 9920 |     "node_modules/path-parse": {
 9921 |       "version": "1.0.7",
 9922 |       "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
 9923 |       "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
 9924 |       "dev": true,
 9925 |       "license": "MIT"
 9926 |     },
 9927 |     "node_modules/path-scurry": {
 9928 |       "version": "2.0.0",
 9929 |       "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-2.0.0.tgz",
 9930 |       "integrity": "sha512-ypGJsmGtdXUOeM5u93TyeIEfEhM6s+ljAhrk5vAvSx8uyY/02OvrZnA0YNGUrPXfpJMgI1ODd3nwz8Npx4O4cg==",
 9931 |       "dev": true,
 9932 |       "license": "BlueOak-1.0.0",
 9933 |       "dependencies": {
 9934 |         "lru-cache": "^11.0.0",
 9935 |         "minipass": "^7.1.2"
 9936 |       },
 9937 |       "engines": {
 9938 |         "node": "20 || >=22"
 9939 |       },
 9940 |       "funding": {
 9941 |         "url": "https://github.com/sponsors/isaacs"
 9942 |       }
 9943 |     },
 9944 |     "node_modules/path-to-regexp": {
 9945 |       "version": "0.1.12",
 9946 |       "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
 9947 |       "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
 9948 |       "dev": true,
 9949 |       "license": "MIT"
 9950 |     },
 9951 |     "node_modules/pend": {
 9952 |       "version": "1.2.0",
 9953 |       "resolved": "https://registry.npmjs.org/pend/-/pend-1.2.0.tgz",
 9954 |       "integrity": "sha512-F3asv42UuXchdzt+xXqfW1OGlVBe+mxa2mqI0pg5yAHZPvFmY3Y6drSf/GQ1A86WgWEN9Kzh/WrgKa6iGcHXLg==",
 9955 |       "dev": true,
 9956 |       "license": "MIT"
 9957 |     },
 9958 |     "node_modules/picocolors": {
 9959 |       "version": "1.1.1",
 9960 |       "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
 9961 |       "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
 9962 |       "dev": true,
 9963 |       "license": "ISC"
 9964 |     },
 9965 |     "node_modules/picomatch": {
 9966 |       "version": "2.3.1",
 9967 |       "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
 9968 |       "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
 9969 |       "dev": true,
 9970 |       "license": "MIT",
 9971 |       "engines": {
 9972 |         "node": ">=8.6"
 9973 |       },
 9974 |       "funding": {
 9975 |         "url": "https://github.com/sponsors/jonschlinkert"
 9976 |       }
 9977 |     },
 9978 |     "node_modules/pify": {
 9979 |       "version": "2.3.0",
 9980 |       "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
 9981 |       "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
 9982 |       "dev": true,
 9983 |       "license": "MIT",
 9984 |       "engines": {
 9985 |         "node": ">=0.10.0"
 9986 |       }
 9987 |     },
 9988 |     "node_modules/pirates": {
 9989 |       "version": "4.0.7",
 9990 |       "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.7.tgz",
 9991 |       "integrity": "sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==",
 9992 |       "dev": true,
 9993 |       "license": "MIT",
 9994 |       "engines": {
 9995 |         "node": ">= 6"
 9996 |       }
 9997 |     },
 9998 |     "node_modules/pony-cause": {
 9999 |       "version": "1.1.1",
10000 |       "resolved": "https://registry.npmjs.org/pony-cause/-/pony-cause-1.1.1.tgz",
10001 |       "integrity": "sha512-PxkIc/2ZpLiEzQXu5YRDOUgBlfGYBY8156HY5ZcRAwwonMk5W/MrJP2LLkG/hF7GEQzaHo2aS7ho6ZLCOvf+6g==",
10002 |       "dev": true,
10003 |       "license": "0BSD",
10004 |       "engines": {
10005 |         "node": ">=12.0.0"
10006 |       }
10007 |     },
10008 |     "node_modules/possible-typed-array-names": {
10009 |       "version": "1.1.0",
10010 |       "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.1.0.tgz",
10011 |       "integrity": "sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==",
10012 |       "dev": true,
10013 |       "license": "MIT",
10014 |       "engines": {
10015 |         "node": ">= 0.4"
10016 |       }
10017 |     },
10018 |     "node_modules/postcss": {
10019 |       "version": "8.5.6",
10020 |       "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
10021 |       "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
10022 |       "dev": true,
10023 |       "funding": [
10024 |         {
10025 |           "type": "opencollective",
10026 |           "url": "https://opencollective.com/postcss/"
10027 |         },
10028 |         {
10029 |           "type": "tidelift",
10030 |           "url": "https://tidelift.com/funding/github/npm/postcss"
10031 |         },
10032 |         {
10033 |           "type": "github",
10034 |           "url": "https://github.com/sponsors/ai"
10035 |         }
10036 |       ],
10037 |       "license": "MIT",
10038 |       "dependencies": {
10039 |         "nanoid": "^3.3.11",
10040 |         "picocolors": "^1.1.1",
10041 |         "source-map-js": "^1.2.1"
10042 |       },
10043 |       "engines": {
10044 |         "node": "^10 || ^12 || >=14"
10045 |       }
10046 |     },
10047 |     "node_modules/postcss-import": {
10048 |       "version": "15.1.0",
10049 |       "resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-15.1.0.tgz",
10050 |       "integrity": "sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==",
10051 |       "dev": true,
10052 |       "license": "MIT",
10053 |       "dependencies": {
10054 |         "postcss-value-parser": "^4.0.0",
10055 |         "read-cache": "^1.0.0",
10056 |         "resolve": "^1.1.7"
10057 |       },
10058 |       "engines": {
10059 |         "node": ">=14.0.0"
10060 |       },
10061 |       "peerDependencies": {
10062 |         "postcss": "^8.0.0"
10063 |       }
10064 |     },
10065 |     "node_modules/postcss-js": {
10066 |       "version": "4.0.1",
10067 |       "resolved": "https://registry.npmjs.org/postcss-js/-/postcss-js-4.0.1.tgz",
10068 |       "integrity": "sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==",
10069 |       "dev": true,
10070 |       "license": "MIT",
10071 |       "dependencies": {
10072 |         "camelcase-css": "^2.0.1"
10073 |       },
10074 |       "engines": {
10075 |         "node": "^12 || ^14 || >= 16"
10076 |       },
10077 |       "funding": {
10078 |         "type": "opencollective",
10079 |         "url": "https://opencollective.com/postcss/"
10080 |       },
10081 |       "peerDependencies": {
10082 |         "postcss": "^8.4.21"
10083 |       }
10084 |     },
10085 |     "node_modules/postcss-load-config": {
10086 |       "version": "4.0.2",
10087 |       "resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-4.0.2.tgz",
10088 |       "integrity": "sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==",
10089 |       "dev": true,
10090 |       "funding": [
10091 |         {
10092 |           "type": "opencollective",
10093 |           "url": "https://opencollective.com/postcss/"
10094 |         },
10095 |         {
10096 |           "type": "github",
10097 |           "url": "https://github.com/sponsors/ai"
10098 |         }
10099 |       ],
10100 |       "license": "MIT",
10101 |       "dependencies": {
10102 |         "lilconfig": "^3.0.0",
10103 |         "yaml": "^2.3.4"
10104 |       },
10105 |       "engines": {
10106 |         "node": ">= 14"
10107 |       },
10108 |       "peerDependencies": {
10109 |         "postcss": ">=8.0.9",
10110 |         "ts-node": ">=9.0.0"
10111 |       },
10112 |       "peerDependenciesMeta": {
10113 |         "postcss": {
10114 |           "optional": true
10115 |         },
10116 |         "ts-node": {
10117 |           "optional": true
10118 |         }
10119 |       }
10120 |     },
10121 |     "node_modules/postcss-nested": {
10122 |       "version": "6.2.0",
10123 |       "resolved": "https://registry.npmjs.org/postcss-nested/-/postcss-nested-6.2.0.tgz",
10124 |       "integrity": "sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==",
10125 |       "dev": true,
10126 |       "funding": [
10127 |         {
10128 |           "type": "opencollective",
10129 |           "url": "https://opencollective.com/postcss/"
10130 |         },
10131 |         {
10132 |           "type": "github",
10133 |           "url": "https://github.com/sponsors/ai"
10134 |         }
10135 |       ],
10136 |       "license": "MIT",
10137 |       "dependencies": {
10138 |         "postcss-selector-parser": "^6.1.1"
10139 |       },
10140 |       "engines": {
10141 |         "node": ">=12.0"
10142 |       },
10143 |       "peerDependencies": {
10144 |         "postcss": "^8.2.14"
10145 |       }
10146 |     },
10147 |     "node_modules/postcss-selector-parser": {
10148 |       "version": "6.1.2",
10149 |       "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
10150 |       "integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
10151 |       "dev": true,
10152 |       "license": "MIT",
10153 |       "dependencies": {
10154 |         "cssesc": "^3.0.0",
10155 |         "util-deprecate": "^1.0.2"
10156 |       },
10157 |       "engines": {
10158 |         "node": ">=4"
10159 |       }
10160 |     },
10161 |     "node_modules/postcss-value-parser": {
10162 |       "version": "4.2.0",
10163 |       "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
10164 |       "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
10165 |       "dev": true,
10166 |       "license": "MIT"
10167 |     },
10168 |     "node_modules/prettier": {
10169 |       "version": "3.6.2",
10170 |       "resolved": "https://registry.npmjs.org/prettier/-/prettier-3.6.2.tgz",
10171 |       "integrity": "sha512-I7AIg5boAr5R0FFtJ6rCfD+LFsWHp81dolrFD8S79U9tb8Az2nGrJncnMSnys+bpQJfRUzqs9hnA81OAA3hCuQ==",
10172 |       "dev": true,
10173 |       "license": "MIT",
10174 |       "bin": {
10175 |         "prettier": "bin/prettier.cjs"
10176 |       },
10177 |       "engines": {
10178 |         "node": ">=14"
10179 |       },
10180 |       "funding": {
10181 |         "url": "https://github.com/prettier/prettier?sponsor=1"
10182 |       }
10183 |     },
10184 |     "node_modules/progress": {
10185 |       "version": "2.0.3",
10186 |       "resolved": "https://registry.npmjs.org/progress/-/progress-2.0.3.tgz",
10187 |       "integrity": "sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==",
10188 |       "dev": true,
10189 |       "license": "MIT",
10190 |       "engines": {
10191 |         "node": ">=0.4.0"
10192 |       }
10193 |     },
10194 |     "node_modules/property-information": {
10195 |       "version": "7.1.0",
10196 |       "resolved": "https://registry.npmjs.org/property-information/-/property-information-7.1.0.tgz",
10197 |       "integrity": "sha512-TwEZ+X+yCJmYfL7TPUOcvBZ4QfoT5YenQiJuX//0th53DE6w0xxLEtfK3iyryQFddXuvkIk51EEgrJQ0WJkOmQ==",
10198 |       "dev": true,
10199 |       "license": "MIT",
10200 |       "funding": {
10201 |         "type": "github",
10202 |         "url": "https://github.com/sponsors/wooorm"
10203 |       }
10204 |     },
10205 |     "node_modules/proxy-addr": {
10206 |       "version": "2.0.7",
10207 |       "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
10208 |       "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
10209 |       "dev": true,
10210 |       "license": "MIT",
10211 |       "dependencies": {
10212 |         "forwarded": "0.2.0",
10213 |         "ipaddr.js": "1.9.1"
10214 |       },
10215 |       "engines": {
10216 |         "node": ">= 0.10"
10217 |       }
10218 |     },
10219 |     "node_modules/proxy-agent": {
10220 |       "version": "6.5.0",
10221 |       "resolved": "https://registry.npmjs.org/proxy-agent/-/proxy-agent-6.5.0.tgz",
10222 |       "integrity": "sha512-TmatMXdr2KlRiA2CyDu8GqR8EjahTG3aY3nXjdzFyoZbmB8hrBsTyMezhULIXKnC0jpfjlmiZ3+EaCzoInSu/A==",
10223 |       "dev": true,
10224 |       "license": "MIT",
10225 |       "dependencies": {
10226 |         "agent-base": "^7.1.2",
10227 |         "debug": "^4.3.4",
10228 |         "http-proxy-agent": "^7.0.1",
10229 |         "https-proxy-agent": "^7.0.6",
10230 |         "lru-cache": "^7.14.1",
10231 |         "pac-proxy-agent": "^7.1.0",
10232 |         "proxy-from-env": "^1.1.0",
10233 |         "socks-proxy-agent": "^8.0.5"
10234 |       },
10235 |       "engines": {
10236 |         "node": ">= 14"
10237 |       }
10238 |     },
10239 |     "node_modules/proxy-agent/node_modules/lru-cache": {
10240 |       "version": "7.18.3",
10241 |       "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-7.18.3.tgz",
10242 |       "integrity": "sha512-jumlc0BIUrS3qJGgIkWZsyfAM7NCWiBcCDhnd+3NNM5KbBmLTgHVfWBcg6W+rLUsIpzpERPsvwUP7CckAQSOoA==",
10243 |       "dev": true,
10244 |       "license": "ISC",
10245 |       "engines": {
10246 |         "node": ">=12"
10247 |       }
10248 |     },
10249 |     "node_modules/proxy-from-env": {
10250 |       "version": "1.1.0",
10251 |       "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
10252 |       "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
10253 |       "dev": true,
10254 |       "license": "MIT"
10255 |     },
10256 |     "node_modules/public-ip": {
10257 |       "version": "5.0.0",
10258 |       "resolved": "https://registry.npmjs.org/public-ip/-/public-ip-5.0.0.tgz",
10259 |       "integrity": "sha512-xaH3pZMni/R2BG7ZXXaWS9Wc9wFlhyDVJF47IJ+3ali0TGv+2PsckKxbmo+rnx3ZxiV2wblVhtdS3bohAP6GGw==",
10260 |       "dev": true,
10261 |       "license": "MIT",
10262 |       "dependencies": {
10263 |         "dns-socket": "^4.2.2",
10264 |         "got": "^12.0.0",
10265 |         "is-ip": "^3.1.0"
10266 |       },
10267 |       "engines": {
10268 |         "node": "^14.13.1 || >=16.0.0"
10269 |       },
10270 |       "funding": {
10271 |         "url": "https://github.com/sponsors/sindresorhus"
10272 |       }
10273 |     },
10274 |     "node_modules/public-ip/node_modules/got": {
10275 |       "version": "12.6.1",
10276 |       "resolved": "https://registry.npmjs.org/got/-/got-12.6.1.tgz",
10277 |       "integrity": "sha512-mThBblvlAF1d4O5oqyvN+ZxLAYwIJK7bpMxgYqPD9okW0C3qm5FFn7k811QrcuEBwaogR3ngOFoCfs6mRv7teQ==",
10278 |       "dev": true,
10279 |       "license": "MIT",
10280 |       "dependencies": {
10281 |         "@sindresorhus/is": "^5.2.0",
10282 |         "@szmarczak/http-timer": "^5.0.1",
10283 |         "cacheable-lookup": "^7.0.0",
10284 |         "cacheable-request": "^10.2.8",
10285 |         "decompress-response": "^6.0.0",
10286 |         "form-data-encoder": "^2.1.2",
10287 |         "get-stream": "^6.0.1",
10288 |         "http2-wrapper": "^2.1.10",
10289 |         "lowercase-keys": "^3.0.0",
10290 |         "p-cancelable": "^3.0.0",
10291 |         "responselike": "^3.0.0"
10292 |       },
10293 |       "engines": {
10294 |         "node": ">=14.16"
10295 |       },
10296 |       "funding": {
10297 |         "url": "https://github.com/sindresorhus/got?sponsor=1"
10298 |       }
10299 |     },
10300 |     "node_modules/pump": {
10301 |       "version": "3.0.3",
10302 |       "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.3.tgz",
10303 |       "integrity": "sha512-todwxLMY7/heScKmntwQG8CXVkWUOdYxIvY2s0VWAAMh/nd8SoYiRaKjlr7+iCs984f2P8zvrfWcDDYVb73NfA==",
10304 |       "dev": true,
10305 |       "license": "MIT",
10306 |       "dependencies": {
10307 |         "end-of-stream": "^1.1.0",
10308 |         "once": "^1.3.1"
10309 |       }
10310 |     },
10311 |     "node_modules/punycode.js": {
10312 |       "version": "2.3.1",
10313 |       "resolved": "https://registry.npmjs.org/punycode.js/-/punycode.js-2.3.1.tgz",
10314 |       "integrity": "sha512-uxFIHU0YlHYhDQtV4R9J6a52SLx28BCjT+4ieh7IGbgwVJWO+km431c4yRlREUAsAmt/uMjQUyQHNEPf0M39CA==",
10315 |       "dev": true,
10316 |       "license": "MIT",
10317 |       "engines": {
10318 |         "node": ">=6"
10319 |       }
10320 |     },
10321 |     "node_modules/puppeteer": {
10322 |       "version": "22.15.0",
10323 |       "resolved": "https://registry.npmjs.org/puppeteer/-/puppeteer-22.15.0.tgz",
10324 |       "integrity": "sha512-XjCY1SiSEi1T7iSYuxS82ft85kwDJUS7wj1Z0eGVXKdtr5g4xnVcbjwxhq5xBnpK/E7x1VZZoJDxpjAOasHT4Q==",
10325 |       "deprecated": "< 24.9.0 is no longer supported",
10326 |       "dev": true,
10327 |       "hasInstallScript": true,
10328 |       "license": "Apache-2.0",
10329 |       "dependencies": {
10330 |         "@puppeteer/browsers": "2.3.0",
10331 |         "cosmiconfig": "^9.0.0",
10332 |         "devtools-protocol": "0.0.1312386",
10333 |         "puppeteer-core": "22.15.0"
10334 |       },
10335 |       "bin": {
10336 |         "puppeteer": "lib/esm/puppeteer/node/cli.js"
10337 |       },
10338 |       "engines": {
10339 |         "node": ">=18"
10340 |       }
10341 |     },
10342 |     "node_modules/puppeteer-core": {
10343 |       "version": "22.15.0",
10344 |       "resolved": "https://registry.npmjs.org/puppeteer-core/-/puppeteer-core-22.15.0.tgz",
10345 |       "integrity": "sha512-cHArnywCiAAVXa3t4GGL2vttNxh7GqXtIYGym99egkNJ3oG//wL9LkvO4WE8W1TJe95t1F1ocu9X4xWaGsOKOA==",
10346 |       "dev": true,
10347 |       "license": "Apache-2.0",
10348 |       "dependencies": {
10349 |         "@puppeteer/browsers": "2.3.0",
10350 |         "chromium-bidi": "0.6.3",
10351 |         "debug": "^4.3.6",
10352 |         "devtools-protocol": "0.0.1312386",
10353 |         "ws": "^8.18.0"
10354 |       },
10355 |       "engines": {
10356 |         "node": ">=18"
10357 |       }
10358 |     },
10359 |     "node_modules/qs": {
10360 |       "version": "6.13.0",
10361 |       "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
10362 |       "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
10363 |       "dev": true,
10364 |       "license": "BSD-3-Clause",
10365 |       "dependencies": {
10366 |         "side-channel": "^1.0.6"
10367 |       },
10368 |       "engines": {
10369 |         "node": ">=0.6"
10370 |       },
10371 |       "funding": {
10372 |         "url": "https://github.com/sponsors/ljharb"
10373 |       }
10374 |     },
10375 |     "node_modules/queue-microtask": {
10376 |       "version": "1.2.3",
10377 |       "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
10378 |       "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
10379 |       "dev": true,
10380 |       "funding": [
10381 |         {
10382 |           "type": "github",
10383 |           "url": "https://github.com/sponsors/feross"
10384 |         },
10385 |         {
10386 |           "type": "patreon",
10387 |           "url": "https://www.patreon.com/feross"
10388 |         },
10389 |         {
10390 |           "type": "consulting",
10391 |           "url": "https://feross.org/support"
10392 |         }
10393 |       ],
10394 |       "license": "MIT"
10395 |     },
10396 |     "node_modules/quick-lru": {
10397 |       "version": "5.1.1",
10398 |       "resolved": "https://registry.npmjs.org/quick-lru/-/quick-lru-5.1.1.tgz",
10399 |       "integrity": "sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==",
10400 |       "dev": true,
10401 |       "license": "MIT",
10402 |       "engines": {
10403 |         "node": ">=10"
10404 |       },
10405 |       "funding": {
10406 |         "url": "https://github.com/sponsors/sindresorhus"
10407 |       }
10408 |     },
10409 |     "node_modules/range-parser": {
10410 |       "version": "1.2.1",
10411 |       "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
10412 |       "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
10413 |       "dev": true,
10414 |       "license": "MIT",
10415 |       "engines": {
10416 |         "node": ">= 0.6"
10417 |       }
10418 |     },
10419 |     "node_modules/raw-body": {
10420 |       "version": "2.5.2",
10421 |       "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
10422 |       "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
10423 |       "dev": true,
10424 |       "license": "MIT",
10425 |       "dependencies": {
10426 |         "bytes": "3.1.2",
10427 |         "http-errors": "2.0.0",
10428 |         "iconv-lite": "0.4.24",
10429 |         "unpipe": "1.0.0"
10430 |       },
10431 |       "engines": {
10432 |         "node": ">= 0.8"
10433 |       }
10434 |     },
10435 |     "node_modules/react": {
10436 |       "version": "18.3.1",
10437 |       "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
10438 |       "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
10439 |       "dev": true,
10440 |       "license": "MIT",
10441 |       "dependencies": {
10442 |         "loose-envify": "^1.1.0"
10443 |       },
10444 |       "engines": {
10445 |         "node": ">=0.10.0"
10446 |       }
10447 |     },
10448 |     "node_modules/react-dom": {
10449 |       "version": "18.3.1",
10450 |       "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
10451 |       "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
10452 |       "dev": true,
10453 |       "license": "MIT",
10454 |       "peer": true,
10455 |       "dependencies": {
10456 |         "loose-envify": "^1.1.0",
10457 |         "scheduler": "^0.23.2"
10458 |       },
10459 |       "peerDependencies": {
10460 |         "react": "^18.3.1"
10461 |       }
10462 |     },
10463 |     "node_modules/react-reconciler": {
10464 |       "version": "0.29.2",
10465 |       "resolved": "https://registry.npmjs.org/react-reconciler/-/react-reconciler-0.29.2.tgz",
10466 |       "integrity": "sha512-zZQqIiYgDCTP/f1N/mAR10nJGrPD2ZR+jDSEsKWJHYC7Cm2wodlwbR3upZRdC3cjIjSlTLNVyO7Iu0Yy7t2AYg==",
10467 |       "dev": true,
10468 |       "license": "MIT",
10469 |       "dependencies": {
10470 |         "loose-envify": "^1.1.0",
10471 |         "scheduler": "^0.23.2"
10472 |       },
10473 |       "engines": {
10474 |         "node": ">=0.10.0"
10475 |       },
10476 |       "peerDependencies": {
10477 |         "react": "^18.3.1"
10478 |       }
10479 |     },
10480 |     "node_modules/read-cache": {
10481 |       "version": "1.0.0",
10482 |       "resolved": "https://registry.npmjs.org/read-cache/-/read-cache-1.0.0.tgz",
10483 |       "integrity": "sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==",
10484 |       "dev": true,
10485 |       "license": "MIT",
10486 |       "dependencies": {
10487 |         "pify": "^2.3.0"
10488 |       }
10489 |     },
10490 |     "node_modules/readdirp": {
10491 |       "version": "3.6.0",
10492 |       "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
10493 |       "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
10494 |       "dev": true,
10495 |       "license": "MIT",
10496 |       "dependencies": {
10497 |         "picomatch": "^2.2.1"
10498 |       },
10499 |       "engines": {
10500 |         "node": ">=8.10.0"
10501 |       }
10502 |     },
10503 |     "node_modules/recma-build-jsx": {
10504 |       "version": "1.0.0",
10505 |       "resolved": "https://registry.npmjs.org/recma-build-jsx/-/recma-build-jsx-1.0.0.tgz",
10506 |       "integrity": "sha512-8GtdyqaBcDfva+GUKDr3nev3VpKAhup1+RvkMvUxURHpW7QyIvk9F5wz7Vzo06CEMSilw6uArgRqhpiUcWp8ew==",
10507 |       "dev": true,
10508 |       "license": "MIT",
10509 |       "dependencies": {
10510 |         "@types/estree": "^1.0.0",
10511 |         "estree-util-build-jsx": "^3.0.0",
10512 |         "vfile": "^6.0.0"
10513 |       },
10514 |       "funding": {
10515 |         "type": "opencollective",
10516 |         "url": "https://opencollective.com/unified"
10517 |       }
10518 |     },
10519 |     "node_modules/recma-jsx": {
10520 |       "version": "1.0.1",
10521 |       "resolved": "https://registry.npmjs.org/recma-jsx/-/recma-jsx-1.0.1.tgz",
10522 |       "integrity": "sha512-huSIy7VU2Z5OLv6oFLosQGGDqPqdO1iq6bWNAdhzMxSJP7RAso4fCZ1cKu8j9YHCZf3TPrq4dw3okhrylgcd7w==",
10523 |       "dev": true,
10524 |       "license": "MIT",
10525 |       "dependencies": {
10526 |         "acorn-jsx": "^5.0.0",
10527 |         "estree-util-to-js": "^2.0.0",
10528 |         "recma-parse": "^1.0.0",
10529 |         "recma-stringify": "^1.0.0",
10530 |         "unified": "^11.0.0"
10531 |       },
10532 |       "funding": {
10533 |         "type": "opencollective",
10534 |         "url": "https://opencollective.com/unified"
10535 |       },
10536 |       "peerDependencies": {
10537 |         "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
10538 |       }
10539 |     },
10540 |     "node_modules/recma-parse": {
10541 |       "version": "1.0.0",
10542 |       "resolved": "https://registry.npmjs.org/recma-parse/-/recma-parse-1.0.0.tgz",
10543 |       "integrity": "sha512-OYLsIGBB5Y5wjnSnQW6t3Xg7q3fQ7FWbw/vcXtORTnyaSFscOtABg+7Pnz6YZ6c27fG1/aN8CjfwoUEUIdwqWQ==",
10544 |       "dev": true,
10545 |       "license": "MIT",
10546 |       "dependencies": {
10547 |         "@types/estree": "^1.0.0",
10548 |         "esast-util-from-js": "^2.0.0",
10549 |         "unified": "^11.0.0",
10550 |         "vfile": "^6.0.0"
10551 |       },
10552 |       "funding": {
10553 |         "type": "opencollective",
10554 |         "url": "https://opencollective.com/unified"
10555 |       }
10556 |     },
10557 |     "node_modules/recma-stringify": {
10558 |       "version": "1.0.0",
10559 |       "resolved": "https://registry.npmjs.org/recma-stringify/-/recma-stringify-1.0.0.tgz",
10560 |       "integrity": "sha512-cjwII1MdIIVloKvC9ErQ+OgAtwHBmcZ0Bg4ciz78FtbT8In39aAYbaA7zvxQ61xVMSPE8WxhLwLbhif4Js2C+g==",
10561 |       "dev": true,
10562 |       "license": "MIT",
10563 |       "dependencies": {
10564 |         "@types/estree": "^1.0.0",
10565 |         "estree-util-to-js": "^2.0.0",
10566 |         "unified": "^11.0.0",
10567 |         "vfile": "^6.0.0"
10568 |       },
10569 |       "funding": {
10570 |         "type": "opencollective",
10571 |         "url": "https://opencollective.com/unified"
10572 |       }
10573 |     },
10574 |     "node_modules/reflect.getprototypeof": {
10575 |       "version": "1.0.10",
10576 |       "resolved": "https://registry.npmjs.org/reflect.getprototypeof/-/reflect.getprototypeof-1.0.10.tgz",
10577 |       "integrity": "sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==",
10578 |       "dev": true,
10579 |       "license": "MIT",
10580 |       "dependencies": {
10581 |         "call-bind": "^1.0.8",
10582 |         "define-properties": "^1.2.1",
10583 |         "es-abstract": "^1.23.9",
10584 |         "es-errors": "^1.3.0",
10585 |         "es-object-atoms": "^1.0.0",
10586 |         "get-intrinsic": "^1.2.7",
10587 |         "get-proto": "^1.0.1",
10588 |         "which-builtin-type": "^1.2.1"
10589 |       },
10590 |       "engines": {
10591 |         "node": ">= 0.4"
10592 |       },
10593 |       "funding": {
10594 |         "url": "https://github.com/sponsors/ljharb"
10595 |       }
10596 |     },
10597 |     "node_modules/regex": {
10598 |       "version": "6.0.1",
10599 |       "resolved": "https://registry.npmjs.org/regex/-/regex-6.0.1.tgz",
10600 |       "integrity": "sha512-uorlqlzAKjKQZ5P+kTJr3eeJGSVroLKoHmquUj4zHWuR+hEyNqlXsSKlYYF5F4NI6nl7tWCs0apKJ0lmfsXAPA==",
10601 |       "dev": true,
10602 |       "license": "MIT",
10603 |       "dependencies": {
10604 |         "regex-utilities": "^2.3.0"
10605 |       }
10606 |     },
10607 |     "node_modules/regex-recursion": {
10608 |       "version": "6.0.2",
10609 |       "resolved": "https://registry.npmjs.org/regex-recursion/-/regex-recursion-6.0.2.tgz",
10610 |       "integrity": "sha512-0YCaSCq2VRIebiaUviZNs0cBz1kg5kVS2UKUfNIx8YVs1cN3AV7NTctO5FOKBA+UT2BPJIWZauYHPqJODG50cg==",
10611 |       "dev": true,
10612 |       "license": "MIT",
10613 |       "dependencies": {
10614 |         "regex-utilities": "^2.3.0"
10615 |       }
10616 |     },
10617 |     "node_modules/regex-utilities": {
10618 |       "version": "2.3.0",
10619 |       "resolved": "https://registry.npmjs.org/regex-utilities/-/regex-utilities-2.3.0.tgz",
10620 |       "integrity": "sha512-8VhliFJAWRaUiVvREIiW2NXXTmHs4vMNnSzuJVhscgmGav3g9VDxLrQndI3dZZVVdp0ZO/5v0xmX516/7M9cng==",
10621 |       "dev": true,
10622 |       "license": "MIT"
10623 |     },
10624 |     "node_modules/regexp.prototype.flags": {
10625 |       "version": "1.5.4",
10626 |       "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.4.tgz",
10627 |       "integrity": "sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==",
10628 |       "dev": true,
10629 |       "license": "MIT",
10630 |       "dependencies": {
10631 |         "call-bind": "^1.0.8",
10632 |         "define-properties": "^1.2.1",
10633 |         "es-errors": "^1.3.0",
10634 |         "get-proto": "^1.0.1",
10635 |         "gopd": "^1.2.0",
10636 |         "set-function-name": "^2.0.2"
10637 |       },
10638 |       "engines": {
10639 |         "node": ">= 0.4"
10640 |       },
10641 |       "funding": {
10642 |         "url": "https://github.com/sponsors/ljharb"
10643 |       }
10644 |     },
10645 |     "node_modules/rehype-katex": {
10646 |       "version": "7.0.1",
10647 |       "resolved": "https://registry.npmjs.org/rehype-katex/-/rehype-katex-7.0.1.tgz",
10648 |       "integrity": "sha512-OiM2wrZ/wuhKkigASodFoo8wimG3H12LWQaH8qSPVJn9apWKFSH3YOCtbKpBorTVw/eI7cuT21XBbvwEswbIOA==",
10649 |       "dev": true,
10650 |       "license": "MIT",
10651 |       "dependencies": {
10652 |         "@types/hast": "^3.0.0",
10653 |         "@types/katex": "^0.16.0",
10654 |         "hast-util-from-html-isomorphic": "^2.0.0",
10655 |         "hast-util-to-text": "^4.0.0",
10656 |         "katex": "^0.16.0",
10657 |         "unist-util-visit-parents": "^6.0.0",
10658 |         "vfile": "^6.0.0"
10659 |       },
10660 |       "funding": {
10661 |         "type": "opencollective",
10662 |         "url": "https://opencollective.com/unified"
10663 |       }
10664 |     },
10665 |     "node_modules/rehype-minify-whitespace": {
10666 |       "version": "6.0.2",
10667 |       "resolved": "https://registry.npmjs.org/rehype-minify-whitespace/-/rehype-minify-whitespace-6.0.2.tgz",
10668 |       "integrity": "sha512-Zk0pyQ06A3Lyxhe9vGtOtzz3Z0+qZ5+7icZ/PL/2x1SHPbKao5oB/g/rlc6BCTajqBb33JcOe71Ye1oFsuYbnw==",
10669 |       "dev": true,
10670 |       "license": "MIT",
10671 |       "dependencies": {
10672 |         "@types/hast": "^3.0.0",
10673 |         "hast-util-minify-whitespace": "^1.0.0"
10674 |       },
10675 |       "funding": {
10676 |         "type": "opencollective",
10677 |         "url": "https://opencollective.com/unified"
10678 |       }
10679 |     },
10680 |     "node_modules/rehype-parse": {
10681 |       "version": "9.0.1",
10682 |       "resolved": "https://registry.npmjs.org/rehype-parse/-/rehype-parse-9.0.1.tgz",
10683 |       "integrity": "sha512-ksCzCD0Fgfh7trPDxr2rSylbwq9iYDkSn8TCDmEJ49ljEUBxDVCzCHv7QNzZOfODanX4+bWQ4WZqLCRWYLfhag==",
10684 |       "dev": true,
10685 |       "license": "MIT",
10686 |       "dependencies": {
10687 |         "@types/hast": "^3.0.0",
10688 |         "hast-util-from-html": "^2.0.0",
10689 |         "unified": "^11.0.0"
10690 |       },
10691 |       "funding": {
10692 |         "type": "opencollective",
10693 |         "url": "https://opencollective.com/unified"
10694 |       }
10695 |     },
10696 |     "node_modules/rehype-recma": {
10697 |       "version": "1.0.0",
10698 |       "resolved": "https://registry.npmjs.org/rehype-recma/-/rehype-recma-1.0.0.tgz",
10699 |       "integrity": "sha512-lqA4rGUf1JmacCNWWZx0Wv1dHqMwxzsDWYMTowuplHF3xH0N/MmrZ/G3BDZnzAkRmxDadujCjaKM2hqYdCBOGw==",
10700 |       "dev": true,
10701 |       "license": "MIT",
10702 |       "dependencies": {
10703 |         "@types/estree": "^1.0.0",
10704 |         "@types/hast": "^3.0.0",
10705 |         "hast-util-to-estree": "^3.0.0"
10706 |       },
10707 |       "funding": {
10708 |         "type": "opencollective",
10709 |         "url": "https://opencollective.com/unified"
10710 |       }
10711 |     },
10712 |     "node_modules/remark": {
10713 |       "version": "15.0.1",
10714 |       "resolved": "https://registry.npmjs.org/remark/-/remark-15.0.1.tgz",
10715 |       "integrity": "sha512-Eht5w30ruCXgFmxVUSlNWQ9iiimq07URKeFS3hNc8cUWy1llX4KDWfyEDZRycMc+znsN9Ux5/tJ/BFdgdOwA3A==",
10716 |       "dev": true,
10717 |       "license": "MIT",
10718 |       "dependencies": {
10719 |         "@types/mdast": "^4.0.0",
10720 |         "remark-parse": "^11.0.0",
10721 |         "remark-stringify": "^11.0.0",
10722 |         "unified": "^11.0.0"
10723 |       },
10724 |       "funding": {
10725 |         "type": "opencollective",
10726 |         "url": "https://opencollective.com/unified"
10727 |       }
10728 |     },
10729 |     "node_modules/remark-frontmatter": {
10730 |       "version": "5.0.0",
10731 |       "resolved": "https://registry.npmjs.org/remark-frontmatter/-/remark-frontmatter-5.0.0.tgz",
10732 |       "integrity": "sha512-XTFYvNASMe5iPN0719nPrdItC9aU0ssC4v14mH1BCi1u0n1gAocqcujWUrByftZTbLhRtiKRyjYTSIOcr69UVQ==",
10733 |       "dev": true,
10734 |       "license": "MIT",
10735 |       "dependencies": {
10736 |         "@types/mdast": "^4.0.0",
10737 |         "mdast-util-frontmatter": "^2.0.0",
10738 |         "micromark-extension-frontmatter": "^2.0.0",
10739 |         "unified": "^11.0.0"
10740 |       },
10741 |       "funding": {
10742 |         "type": "opencollective",
10743 |         "url": "https://opencollective.com/unified"
10744 |       }
10745 |     },
10746 |     "node_modules/remark-gfm": {
10747 |       "version": "4.0.1",
10748 |       "resolved": "https://registry.npmjs.org/remark-gfm/-/remark-gfm-4.0.1.tgz",
10749 |       "integrity": "sha512-1quofZ2RQ9EWdeN34S79+KExV1764+wCUGop5CPL1WGdD0ocPpu91lzPGbwWMECpEpd42kJGQwzRfyov9j4yNg==",
10750 |       "dev": true,
10751 |       "license": "MIT",
10752 |       "dependencies": {
10753 |         "@types/mdast": "^4.0.0",
10754 |         "mdast-util-gfm": "^3.0.0",
10755 |         "micromark-extension-gfm": "^3.0.0",
10756 |         "remark-parse": "^11.0.0",
10757 |         "remark-stringify": "^11.0.0",
10758 |         "unified": "^11.0.0"
10759 |       },
10760 |       "funding": {
10761 |         "type": "opencollective",
10762 |         "url": "https://opencollective.com/unified"
10763 |       }
10764 |     },
10765 |     "node_modules/remark-math": {
10766 |       "version": "6.0.0",
10767 |       "resolved": "https://registry.npmjs.org/remark-math/-/remark-math-6.0.0.tgz",
10768 |       "integrity": "sha512-MMqgnP74Igy+S3WwnhQ7kqGlEerTETXMvJhrUzDikVZ2/uogJCb+WHUg97hK9/jcfc0dkD73s3LN8zU49cTEtA==",
10769 |       "dev": true,
10770 |       "license": "MIT",
10771 |       "dependencies": {
10772 |         "@types/mdast": "^4.0.0",
10773 |         "mdast-util-math": "^3.0.0",
10774 |         "micromark-extension-math": "^3.0.0",
10775 |         "unified": "^11.0.0"
10776 |       },
10777 |       "funding": {
10778 |         "type": "opencollective",
10779 |         "url": "https://opencollective.com/unified"
10780 |       }
10781 |     },
10782 |     "node_modules/remark-mdx": {
10783 |       "version": "3.1.0",
10784 |       "resolved": "https://registry.npmjs.org/remark-mdx/-/remark-mdx-3.1.0.tgz",
10785 |       "integrity": "sha512-Ngl/H3YXyBV9RcRNdlYsZujAmhsxwzxpDzpDEhFBVAGthS4GDgnctpDjgFl/ULx5UEDzqtW1cyBSNKqYYrqLBA==",
10786 |       "dev": true,
10787 |       "license": "MIT",
10788 |       "dependencies": {
10789 |         "mdast-util-mdx": "^3.0.0",
10790 |         "micromark-extension-mdxjs": "^3.0.0"
10791 |       },
10792 |       "funding": {
10793 |         "type": "opencollective",
10794 |         "url": "https://opencollective.com/unified"
10795 |       }
10796 |     },
10797 |     "node_modules/remark-mdx-remove-esm": {
10798 |       "version": "1.2.0",
10799 |       "resolved": "https://registry.npmjs.org/remark-mdx-remove-esm/-/remark-mdx-remove-esm-1.2.0.tgz",
10800 |       "integrity": "sha512-BOZDeA9EuHDxQsvX7y4ovdlP8dk2/ToDGjOTrT5gs57OqTZuH4J1Tn8XjUFa221xvfXxiKaWrKT04waQ+tYydg==",
10801 |       "dev": true,
10802 |       "license": "MIT",
10803 |       "dependencies": {
10804 |         "@types/mdast": "^4.0.4",
10805 |         "mdast-util-mdxjs-esm": "^2.0.1",
10806 |         "unist-util-remove": "^4.0.0"
10807 |       },
10808 |       "peerDependencies": {
10809 |         "unified": "^11"
10810 |       }
10811 |     },
10812 |     "node_modules/remark-parse": {
10813 |       "version": "11.0.0",
10814 |       "resolved": "https://registry.npmjs.org/remark-parse/-/remark-parse-11.0.0.tgz",
10815 |       "integrity": "sha512-FCxlKLNGknS5ba/1lmpYijMUzX2esxW5xQqjWxw2eHFfS2MSdaHVINFmhjo+qN1WhZhNimq0dZATN9pH0IDrpA==",
10816 |       "dev": true,
10817 |       "license": "MIT",
10818 |       "dependencies": {
10819 |         "@types/mdast": "^4.0.0",
10820 |         "mdast-util-from-markdown": "^2.0.0",
10821 |         "micromark-util-types": "^2.0.0",
10822 |         "unified": "^11.0.0"
10823 |       },
10824 |       "funding": {
10825 |         "type": "opencollective",
10826 |         "url": "https://opencollective.com/unified"
10827 |       }
10828 |     },
10829 |     "node_modules/remark-rehype": {
10830 |       "version": "11.1.2",
10831 |       "resolved": "https://registry.npmjs.org/remark-rehype/-/remark-rehype-11.1.2.tgz",
10832 |       "integrity": "sha512-Dh7l57ianaEoIpzbp0PC9UKAdCSVklD8E5Rpw7ETfbTl3FqcOOgq5q2LVDhgGCkaBv7p24JXikPdvhhmHvKMsw==",
10833 |       "dev": true,
10834 |       "license": "MIT",
10835 |       "dependencies": {
10836 |         "@types/hast": "^3.0.0",
10837 |         "@types/mdast": "^4.0.0",
10838 |         "mdast-util-to-hast": "^13.0.0",
10839 |         "unified": "^11.0.0",
10840 |         "vfile": "^6.0.0"
10841 |       },
10842 |       "funding": {
10843 |         "type": "opencollective",
10844 |         "url": "https://opencollective.com/unified"
10845 |       }
10846 |     },
10847 |     "node_modules/remark-smartypants": {
10848 |       "version": "3.0.2",
10849 |       "resolved": "https://registry.npmjs.org/remark-smartypants/-/remark-smartypants-3.0.2.tgz",
10850 |       "integrity": "sha512-ILTWeOriIluwEvPjv67v7Blgrcx+LZOkAUVtKI3putuhlZm84FnqDORNXPPm+HY3NdZOMhyDwZ1E+eZB/Df5dA==",
10851 |       "dev": true,
10852 |       "license": "MIT",
10853 |       "dependencies": {
10854 |         "retext": "^9.0.0",
10855 |         "retext-smartypants": "^6.0.0",
10856 |         "unified": "^11.0.4",
10857 |         "unist-util-visit": "^5.0.0"
10858 |       },
10859 |       "engines": {
10860 |         "node": ">=16.0.0"
10861 |       }
10862 |     },
10863 |     "node_modules/remark-stringify": {
10864 |       "version": "11.0.0",
10865 |       "resolved": "https://registry.npmjs.org/remark-stringify/-/remark-stringify-11.0.0.tgz",
10866 |       "integrity": "sha512-1OSmLd3awB/t8qdoEOMazZkNsfVTeY4fTsgzcQFdXNq8ToTN4ZGwrMnlda4K6smTFKD+GRV6O48i6Z4iKgPPpw==",
10867 |       "dev": true,
10868 |       "license": "MIT",
10869 |       "dependencies": {
10870 |         "@types/mdast": "^4.0.0",
10871 |         "mdast-util-to-markdown": "^2.0.0",
10872 |         "unified": "^11.0.0"
10873 |       },
10874 |       "funding": {
10875 |         "type": "opencollective",
10876 |         "url": "https://opencollective.com/unified"
10877 |       }
10878 |     },
10879 |     "node_modules/require-directory": {
10880 |       "version": "2.1.1",
10881 |       "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
10882 |       "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
10883 |       "dev": true,
10884 |       "license": "MIT",
10885 |       "engines": {
10886 |         "node": ">=0.10.0"
10887 |       }
10888 |     },
10889 |     "node_modules/require-from-string": {
10890 |       "version": "2.0.2",
10891 |       "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
10892 |       "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
10893 |       "dev": true,
10894 |       "license": "MIT",
10895 |       "engines": {
10896 |         "node": ">=0.10.0"
10897 |       }
10898 |     },
10899 |     "node_modules/resolve": {
10900 |       "version": "1.22.10",
10901 |       "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
10902 |       "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
10903 |       "dev": true,
10904 |       "license": "MIT",
10905 |       "dependencies": {
10906 |         "is-core-module": "^2.16.0",
10907 |         "path-parse": "^1.0.7",
10908 |         "supports-preserve-symlinks-flag": "^1.0.0"
10909 |       },
10910 |       "bin": {
10911 |         "resolve": "bin/resolve"
10912 |       },
10913 |       "engines": {
10914 |         "node": ">= 0.4"
10915 |       },
10916 |       "funding": {
10917 |         "url": "https://github.com/sponsors/ljharb"
10918 |       }
10919 |     },
10920 |     "node_modules/resolve-alpn": {
10921 |       "version": "1.2.1",
10922 |       "resolved": "https://registry.npmjs.org/resolve-alpn/-/resolve-alpn-1.2.1.tgz",
10923 |       "integrity": "sha512-0a1F4l73/ZFZOakJnQ3FvkJ2+gSTQWz/r2KE5OdDY0TxPm5h4GkqkWWfM47T7HsbnOtcJVEF4epCVy6u7Q3K+g==",
10924 |       "dev": true,
10925 |       "license": "MIT"
10926 |     },
10927 |     "node_modules/resolve-from": {
10928 |       "version": "4.0.0",
10929 |       "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
10930 |       "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
10931 |       "dev": true,
10932 |       "license": "MIT",
10933 |       "engines": {
10934 |         "node": ">=4"
10935 |       }
10936 |     },
10937 |     "node_modules/resolve-pkg-maps": {
10938 |       "version": "1.0.0",
10939 |       "resolved": "https://registry.npmjs.org/resolve-pkg-maps/-/resolve-pkg-maps-1.0.0.tgz",
10940 |       "integrity": "sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==",
10941 |       "dev": true,
10942 |       "license": "MIT",
10943 |       "funding": {
10944 |         "url": "https://github.com/privatenumber/resolve-pkg-maps?sponsor=1"
10945 |       }
10946 |     },
10947 |     "node_modules/responselike": {
10948 |       "version": "3.0.0",
10949 |       "resolved": "https://registry.npmjs.org/responselike/-/responselike-3.0.0.tgz",
10950 |       "integrity": "sha512-40yHxbNcl2+rzXvZuVkrYohathsSJlMTXKryG5y8uciHv1+xDLHQpgjG64JUO9nrEq2jGLH6IZ8BcZyw3wrweg==",
10951 |       "dev": true,
10952 |       "license": "MIT",
10953 |       "dependencies": {
10954 |         "lowercase-keys": "^3.0.0"
10955 |       },
10956 |       "engines": {
10957 |         "node": ">=14.16"
10958 |       },
10959 |       "funding": {
10960 |         "url": "https://github.com/sponsors/sindresorhus"
10961 |       }
10962 |     },
10963 |     "node_modules/restore-cursor": {
10964 |       "version": "4.0.0",
10965 |       "resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-4.0.0.tgz",
10966 |       "integrity": "sha512-I9fPXU9geO9bHOt9pHHOhOkYerIMsmVaWB0rA2AI9ERh/+x/i7MV5HKBNrg+ljO5eoPVgCcnFuRjJ9uH6I/3eg==",
10967 |       "dev": true,
10968 |       "license": "MIT",
10969 |       "dependencies": {
10970 |         "onetime": "^5.1.0",
10971 |         "signal-exit": "^3.0.2"
10972 |       },
10973 |       "engines": {
10974 |         "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
10975 |       },
10976 |       "funding": {
10977 |         "url": "https://github.com/sponsors/sindresorhus"
10978 |       }
10979 |     },
10980 |     "node_modules/restore-cursor/node_modules/signal-exit": {
10981 |       "version": "3.0.7",
10982 |       "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
10983 |       "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
10984 |       "dev": true,
10985 |       "license": "ISC"
10986 |     },
10987 |     "node_modules/retext": {
10988 |       "version": "9.0.0",
10989 |       "resolved": "https://registry.npmjs.org/retext/-/retext-9.0.0.tgz",
10990 |       "integrity": "sha512-sbMDcpHCNjvlheSgMfEcVrZko3cDzdbe1x/e7G66dFp0Ff7Mldvi2uv6JkJQzdRcvLYE8CA8Oe8siQx8ZOgTcA==",
10991 |       "dev": true,
10992 |       "license": "MIT",
10993 |       "dependencies": {
10994 |         "@types/nlcst": "^2.0.0",
10995 |         "retext-latin": "^4.0.0",
10996 |         "retext-stringify": "^4.0.0",
10997 |         "unified": "^11.0.0"
10998 |       },
10999 |       "funding": {
11000 |         "type": "opencollective",
11001 |         "url": "https://opencollective.com/unified"
11002 |       }
11003 |     },
11004 |     "node_modules/retext-latin": {
11005 |       "version": "4.0.0",
11006 |       "resolved": "https://registry.npmjs.org/retext-latin/-/retext-latin-4.0.0.tgz",
11007 |       "integrity": "sha512-hv9woG7Fy0M9IlRQloq/N6atV82NxLGveq+3H2WOi79dtIYWN8OaxogDm77f8YnVXJL2VD3bbqowu5E3EMhBYA==",
11008 |       "dev": true,
11009 |       "license": "MIT",
11010 |       "dependencies": {
11011 |         "@types/nlcst": "^2.0.0",
11012 |         "parse-latin": "^7.0.0",
11013 |         "unified": "^11.0.0"
11014 |       },
11015 |       "funding": {
11016 |         "type": "opencollective",
11017 |         "url": "https://opencollective.com/unified"
11018 |       }
11019 |     },
11020 |     "node_modules/retext-smartypants": {
11021 |       "version": "6.2.0",
11022 |       "resolved": "https://registry.npmjs.org/retext-smartypants/-/retext-smartypants-6.2.0.tgz",
11023 |       "integrity": "sha512-kk0jOU7+zGv//kfjXEBjdIryL1Acl4i9XNkHxtM7Tm5lFiCog576fjNC9hjoR7LTKQ0DsPWy09JummSsH1uqfQ==",
11024 |       "dev": true,
11025 |       "license": "MIT",
11026 |       "dependencies": {
11027 |         "@types/nlcst": "^2.0.0",
11028 |         "nlcst-to-string": "^4.0.0",
11029 |         "unist-util-visit": "^5.0.0"
11030 |       },
11031 |       "funding": {
11032 |         "type": "opencollective",
11033 |         "url": "https://opencollective.com/unified"
11034 |       }
11035 |     },
11036 |     "node_modules/retext-stringify": {
11037 |       "version": "4.0.0",
11038 |       "resolved": "https://registry.npmjs.org/retext-stringify/-/retext-stringify-4.0.0.tgz",
11039 |       "integrity": "sha512-rtfN/0o8kL1e+78+uxPTqu1Klt0yPzKuQ2BfWwwfgIUSayyzxpM1PJzkKt4V8803uB9qSy32MvI7Xep9khTpiA==",
11040 |       "dev": true,
11041 |       "license": "MIT",
11042 |       "dependencies": {
11043 |         "@types/nlcst": "^2.0.0",
11044 |         "nlcst-to-string": "^4.0.0",
11045 |         "unified": "^11.0.0"
11046 |       },
11047 |       "funding": {
11048 |         "type": "opencollective",
11049 |         "url": "https://opencollective.com/unified"
11050 |       }
11051 |     },
11052 |     "node_modules/reusify": {
11053 |       "version": "1.1.0",
11054 |       "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
11055 |       "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
11056 |       "dev": true,
11057 |       "license": "MIT",
11058 |       "engines": {
11059 |         "iojs": ">=1.0.0",
11060 |         "node": ">=0.10.0"
11061 |       }
11062 |     },
11063 |     "node_modules/run-async": {
11064 |       "version": "4.0.6",
11065 |       "resolved": "https://registry.npmjs.org/run-async/-/run-async-4.0.6.tgz",
11066 |       "integrity": "sha512-IoDlSLTs3Yq593mb3ZoKWKXMNu3UpObxhgA/Xuid5p4bbfi2jdY1Hj0m1K+0/tEuQTxIGMhQDqGjKb7RuxGpAQ==",
11067 |       "dev": true,
11068 |       "license": "MIT",
11069 |       "engines": {
11070 |         "node": ">=0.12.0"
11071 |       }
11072 |     },
11073 |     "node_modules/run-parallel": {
11074 |       "version": "1.2.0",
11075 |       "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
11076 |       "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
11077 |       "dev": true,
11078 |       "funding": [
11079 |         {
11080 |           "type": "github",
11081 |           "url": "https://github.com/sponsors/feross"
11082 |         },
11083 |         {
11084 |           "type": "patreon",
11085 |           "url": "https://www.patreon.com/feross"
11086 |         },
11087 |         {
11088 |           "type": "consulting",
11089 |           "url": "https://feross.org/support"
11090 |         }
11091 |       ],
11092 |       "license": "MIT",
11093 |       "dependencies": {
11094 |         "queue-microtask": "^1.2.2"
11095 |       }
11096 |     },
11097 |     "node_modules/rxjs": {
11098 |       "version": "7.8.2",
11099 |       "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-7.8.2.tgz",
11100 |       "integrity": "sha512-dhKf903U/PQZY6boNNtAGdWbG85WAbjT/1xYoZIC7FAY0yWapOBQVsVrDl58W86//e1VpMNBtRV4MaXfdMySFA==",
11101 |       "dev": true,
11102 |       "license": "Apache-2.0",
11103 |       "dependencies": {
11104 |         "tslib": "^2.1.0"
11105 |       }
11106 |     },
11107 |     "node_modules/rxjs/node_modules/tslib": {
11108 |       "version": "2.8.1",
11109 |       "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
11110 |       "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
11111 |       "dev": true,
11112 |       "license": "0BSD"
11113 |     },
11114 |     "node_modules/safe-array-concat": {
11115 |       "version": "1.1.3",
11116 |       "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.1.3.tgz",
11117 |       "integrity": "sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==",
11118 |       "dev": true,
11119 |       "license": "MIT",
11120 |       "dependencies": {
11121 |         "call-bind": "^1.0.8",
11122 |         "call-bound": "^1.0.2",
11123 |         "get-intrinsic": "^1.2.6",
11124 |         "has-symbols": "^1.1.0",
11125 |         "isarray": "^2.0.5"
11126 |       },
11127 |       "engines": {
11128 |         "node": ">=0.4"
11129 |       },
11130 |       "funding": {
11131 |         "url": "https://github.com/sponsors/ljharb"
11132 |       }
11133 |     },
11134 |     "node_modules/safe-buffer": {
11135 |       "version": "5.2.1",
11136 |       "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
11137 |       "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
11138 |       "dev": true,
11139 |       "funding": [
11140 |         {
11141 |           "type": "github",
11142 |           "url": "https://github.com/sponsors/feross"
11143 |         },
11144 |         {
11145 |           "type": "patreon",
11146 |           "url": "https://www.patreon.com/feross"
11147 |         },
11148 |         {
11149 |           "type": "consulting",
11150 |           "url": "https://feross.org/support"
11151 |         }
11152 |       ],
11153 |       "license": "MIT"
11154 |     },
11155 |     "node_modules/safe-push-apply": {
11156 |       "version": "1.0.0",
11157 |       "resolved": "https://registry.npmjs.org/safe-push-apply/-/safe-push-apply-1.0.0.tgz",
11158 |       "integrity": "sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==",
11159 |       "dev": true,
11160 |       "license": "MIT",
11161 |       "dependencies": {
11162 |         "es-errors": "^1.3.0",
11163 |         "isarray": "^2.0.5"
11164 |       },
11165 |       "engines": {
11166 |         "node": ">= 0.4"
11167 |       },
11168 |       "funding": {
11169 |         "url": "https://github.com/sponsors/ljharb"
11170 |       }
11171 |     },
11172 |     "node_modules/safe-regex-test": {
11173 |       "version": "1.1.0",
11174 |       "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
11175 |       "integrity": "sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==",
11176 |       "dev": true,
11177 |       "license": "MIT",
11178 |       "dependencies": {
11179 |         "call-bound": "^1.0.2",
11180 |         "es-errors": "^1.3.0",
11181 |         "is-regex": "^1.2.1"
11182 |       },
11183 |       "engines": {
11184 |         "node": ">= 0.4"
11185 |       },
11186 |       "funding": {
11187 |         "url": "https://github.com/sponsors/ljharb"
11188 |       }
11189 |     },
11190 |     "node_modules/safe-stable-stringify": {
11191 |       "version": "1.1.1",
11192 |       "resolved": "https://registry.npmjs.org/safe-stable-stringify/-/safe-stable-stringify-1.1.1.tgz",
11193 |       "integrity": "sha512-ERq4hUjKDbJfE4+XtZLFPCDi8Vb1JqaxAPTxWFLBx8XcAlf9Bda/ZJdVezs/NAfsMQScyIlUMx+Yeu7P7rx5jw==",
11194 |       "dev": true,
11195 |       "license": "MIT"
11196 |     },
11197 |     "node_modules/safer-buffer": {
11198 |       "version": "2.1.2",
11199 |       "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
11200 |       "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
11201 |       "dev": true,
11202 |       "license": "MIT"
11203 |     },
11204 |     "node_modules/sax": {
11205 |       "version": "1.4.1",
11206 |       "resolved": "https://registry.npmjs.org/sax/-/sax-1.4.1.tgz",
11207 |       "integrity": "sha512-+aWOz7yVScEGoKNd4PA10LZ8sk0A/z5+nXQG5giUO5rprX9jgYsTdov9qCchZiPIZezbZH+jRut8nPodFAX4Jg==",
11208 |       "dev": true,
11209 |       "license": "ISC"
11210 |     },
11211 |     "node_modules/scheduler": {
11212 |       "version": "0.23.2",
11213 |       "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
11214 |       "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
11215 |       "dev": true,
11216 |       "license": "MIT",
11217 |       "dependencies": {
11218 |         "loose-envify": "^1.1.0"
11219 |       }
11220 |     },
11221 |     "node_modules/section-matter": {
11222 |       "version": "1.0.0",
11223 |       "resolved": "https://registry.npmjs.org/section-matter/-/section-matter-1.0.0.tgz",
11224 |       "integrity": "sha512-vfD3pmTzGpufjScBh50YHKzEu2lxBWhVEHsNGoEXmCmn2hKGfeNLYMzCJpe8cD7gqX7TJluOVpBkAequ6dgMmA==",
11225 |       "dev": true,
11226 |       "license": "MIT",
11227 |       "dependencies": {
11228 |         "extend-shallow": "^2.0.1",
11229 |         "kind-of": "^6.0.0"
11230 |       },
11231 |       "engines": {
11232 |         "node": ">=4"
11233 |       }
11234 |     },
11235 |     "node_modules/semver": {
11236 |       "version": "7.7.2",
11237 |       "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
11238 |       "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
11239 |       "dev": true,
11240 |       "license": "ISC",
11241 |       "bin": {
11242 |         "semver": "bin/semver.js"
11243 |       },
11244 |       "engines": {
11245 |         "node": ">=10"
11246 |       }
11247 |     },
11248 |     "node_modules/send": {
11249 |       "version": "0.19.0",
11250 |       "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
11251 |       "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
11252 |       "dev": true,
11253 |       "license": "MIT",
11254 |       "dependencies": {
11255 |         "debug": "2.6.9",
11256 |         "depd": "2.0.0",
11257 |         "destroy": "1.2.0",
11258 |         "encodeurl": "~1.0.2",
11259 |         "escape-html": "~1.0.3",
11260 |         "etag": "~1.8.1",
11261 |         "fresh": "0.5.2",
11262 |         "http-errors": "2.0.0",
11263 |         "mime": "1.6.0",
11264 |         "ms": "2.1.3",
11265 |         "on-finished": "2.4.1",
11266 |         "range-parser": "~1.2.1",
11267 |         "statuses": "2.0.1"
11268 |       },
11269 |       "engines": {
11270 |         "node": ">= 0.8.0"
11271 |       }
11272 |     },
11273 |     "node_modules/send/node_modules/debug": {
11274 |       "version": "2.6.9",
11275 |       "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
11276 |       "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
11277 |       "dev": true,
11278 |       "license": "MIT",
11279 |       "dependencies": {
11280 |         "ms": "2.0.0"
11281 |       }
11282 |     },
11283 |     "node_modules/send/node_modules/debug/node_modules/ms": {
11284 |       "version": "2.0.0",
11285 |       "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
11286 |       "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
11287 |       "dev": true,
11288 |       "license": "MIT"
11289 |     },
11290 |     "node_modules/send/node_modules/encodeurl": {
11291 |       "version": "1.0.2",
11292 |       "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
11293 |       "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
11294 |       "dev": true,
11295 |       "license": "MIT",
11296 |       "engines": {
11297 |         "node": ">= 0.8"
11298 |       }
11299 |     },
11300 |     "node_modules/serialize-error": {
11301 |       "version": "12.0.0",
11302 |       "resolved": "https://registry.npmjs.org/serialize-error/-/serialize-error-12.0.0.tgz",
11303 |       "integrity": "sha512-ZYkZLAvKTKQXWuh5XpBw7CdbSzagarX39WyZ2H07CDLC5/KfsRGlIXV8d4+tfqX1M7916mRqR1QfNHSij+c9Pw==",
11304 |       "dev": true,
11305 |       "license": "MIT",
11306 |       "dependencies": {
11307 |         "type-fest": "^4.31.0"
11308 |       },
11309 |       "engines": {
11310 |         "node": ">=18"
11311 |       },
11312 |       "funding": {
11313 |         "url": "https://github.com/sponsors/sindresorhus"
11314 |       }
11315 |     },
11316 |     "node_modules/serve-static": {
11317 |       "version": "1.16.2",
11318 |       "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
11319 |       "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
11320 |       "dev": true,
11321 |       "license": "MIT",
11322 |       "dependencies": {
11323 |         "encodeurl": "~2.0.0",
11324 |         "escape-html": "~1.0.3",
11325 |         "parseurl": "~1.3.3",
11326 |         "send": "0.19.0"
11327 |       },
11328 |       "engines": {
11329 |         "node": ">= 0.8.0"
11330 |       }
11331 |     },
11332 |     "node_modules/set-function-length": {
11333 |       "version": "1.2.2",
11334 |       "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
11335 |       "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
11336 |       "dev": true,
11337 |       "license": "MIT",
11338 |       "dependencies": {
11339 |         "define-data-property": "^1.1.4",
11340 |         "es-errors": "^1.3.0",
11341 |         "function-bind": "^1.1.2",
11342 |         "get-intrinsic": "^1.2.4",
11343 |         "gopd": "^1.0.1",
11344 |         "has-property-descriptors": "^1.0.2"
11345 |       },
11346 |       "engines": {
11347 |         "node": ">= 0.4"
11348 |       }
11349 |     },
11350 |     "node_modules/set-function-name": {
11351 |       "version": "2.0.2",
11352 |       "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
11353 |       "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
11354 |       "dev": true,
11355 |       "license": "MIT",
11356 |       "dependencies": {
11357 |         "define-data-property": "^1.1.4",
11358 |         "es-errors": "^1.3.0",
11359 |         "functions-have-names": "^1.2.3",
11360 |         "has-property-descriptors": "^1.0.2"
11361 |       },
11362 |       "engines": {
11363 |         "node": ">= 0.4"
11364 |       }
11365 |     },
11366 |     "node_modules/set-proto": {
11367 |       "version": "1.0.0",
11368 |       "resolved": "https://registry.npmjs.org/set-proto/-/set-proto-1.0.0.tgz",
11369 |       "integrity": "sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==",
11370 |       "dev": true,
11371 |       "license": "MIT",
11372 |       "dependencies": {
11373 |         "dunder-proto": "^1.0.1",
11374 |         "es-errors": "^1.3.0",
11375 |         "es-object-atoms": "^1.0.0"
11376 |       },
11377 |       "engines": {
11378 |         "node": ">= 0.4"
11379 |       }
11380 |     },
11381 |     "node_modules/setprototypeof": {
11382 |       "version": "1.2.0",
11383 |       "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
11384 |       "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
11385 |       "dev": true,
11386 |       "license": "ISC"
11387 |     },
11388 |     "node_modules/sharp": {
11389 |       "version": "0.33.5",
11390 |       "resolved": "https://registry.npmjs.org/sharp/-/sharp-0.33.5.tgz",
11391 |       "integrity": "sha512-haPVm1EkS9pgvHrQ/F3Xy+hgcuMV0Wm9vfIBSiwZ05k+xgb0PkBQpGsAA/oWdDobNaZTH5ppvHtzCFbnSEwHVw==",
11392 |       "dev": true,
11393 |       "hasInstallScript": true,
11394 |       "license": "Apache-2.0",
11395 |       "dependencies": {
11396 |         "color": "^4.2.3",
11397 |         "detect-libc": "^2.0.3",
11398 |         "semver": "^7.6.3"
11399 |       },
11400 |       "engines": {
11401 |         "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
11402 |       },
11403 |       "funding": {
11404 |         "url": "https://opencollective.com/libvips"
11405 |       },
11406 |       "optionalDependencies": {
11407 |         "@img/sharp-darwin-arm64": "0.33.5",
11408 |         "@img/sharp-darwin-x64": "0.33.5",
11409 |         "@img/sharp-libvips-darwin-arm64": "1.0.4",
11410 |         "@img/sharp-libvips-darwin-x64": "1.0.4",
11411 |         "@img/sharp-libvips-linux-arm": "1.0.5",
11412 |         "@img/sharp-libvips-linux-arm64": "1.0.4",
11413 |         "@img/sharp-libvips-linux-s390x": "1.0.4",
11414 |         "@img/sharp-libvips-linux-x64": "1.0.4",
11415 |         "@img/sharp-libvips-linuxmusl-arm64": "1.0.4",
11416 |         "@img/sharp-libvips-linuxmusl-x64": "1.0.4",
11417 |         "@img/sharp-linux-arm": "0.33.5",
11418 |         "@img/sharp-linux-arm64": "0.33.5",
11419 |         "@img/sharp-linux-s390x": "0.33.5",
11420 |         "@img/sharp-linux-x64": "0.33.5",
11421 |         "@img/sharp-linuxmusl-arm64": "0.33.5",
11422 |         "@img/sharp-linuxmusl-x64": "0.33.5",
11423 |         "@img/sharp-wasm32": "0.33.5",
11424 |         "@img/sharp-win32-ia32": "0.33.5",
11425 |         "@img/sharp-win32-x64": "0.33.5"
11426 |       }
11427 |     },
11428 |     "node_modules/shebang-command": {
11429 |       "version": "2.0.0",
11430 |       "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
11431 |       "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
11432 |       "dev": true,
11433 |       "license": "MIT",
11434 |       "dependencies": {
11435 |         "shebang-regex": "^3.0.0"
11436 |       },
11437 |       "engines": {
11438 |         "node": ">=8"
11439 |       }
11440 |     },
11441 |     "node_modules/shebang-regex": {
11442 |       "version": "3.0.0",
11443 |       "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
11444 |       "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
11445 |       "dev": true,
11446 |       "license": "MIT",
11447 |       "engines": {
11448 |         "node": ">=8"
11449 |       }
11450 |     },
11451 |     "node_modules/shiki": {
11452 |       "version": "3.9.2",
11453 |       "resolved": "https://registry.npmjs.org/shiki/-/shiki-3.9.2.tgz",
11454 |       "integrity": "sha512-t6NKl5e/zGTvw/IyftLcumolgOczhuroqwXngDeMqJ3h3EQiTY/7wmfgPlsmloD8oYfqkEDqxiaH37Pjm1zUhQ==",
11455 |       "dev": true,
11456 |       "license": "MIT",
11457 |       "dependencies": {
11458 |         "@shikijs/core": "3.9.2",
11459 |         "@shikijs/engine-javascript": "3.9.2",
11460 |         "@shikijs/engine-oniguruma": "3.9.2",
11461 |         "@shikijs/langs": "3.9.2",
11462 |         "@shikijs/themes": "3.9.2",
11463 |         "@shikijs/types": "3.9.2",
11464 |         "@shikijs/vscode-textmate": "^10.0.2",
11465 |         "@types/hast": "^3.0.4"
11466 |       }
11467 |     },
11468 |     "node_modules/side-channel": {
11469 |       "version": "1.1.0",
11470 |       "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
11471 |       "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
11472 |       "dev": true,
11473 |       "license": "MIT",
11474 |       "dependencies": {
11475 |         "es-errors": "^1.3.0",
11476 |         "object-inspect": "^1.13.3",
11477 |         "side-channel-list": "^1.0.0",
11478 |         "side-channel-map": "^1.0.1",
11479 |         "side-channel-weakmap": "^1.0.2"
11480 |       },
11481 |       "engines": {
11482 |         "node": ">= 0.4"
11483 |       },
11484 |       "funding": {
11485 |         "url": "https://github.com/sponsors/ljharb"
11486 |       }
11487 |     },
11488 |     "node_modules/side-channel-list": {
11489 |       "version": "1.0.0",
11490 |       "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
11491 |       "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
11492 |       "dev": true,
11493 |       "license": "MIT",
11494 |       "dependencies": {
11495 |         "es-errors": "^1.3.0",
11496 |         "object-inspect": "^1.13.3"
11497 |       },
11498 |       "engines": {
11499 |         "node": ">= 0.4"
11500 |       },
11501 |       "funding": {
11502 |         "url": "https://github.com/sponsors/ljharb"
11503 |       }
11504 |     },
11505 |     "node_modules/side-channel-map": {
11506 |       "version": "1.0.1",
11507 |       "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
11508 |       "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
11509 |       "dev": true,
11510 |       "license": "MIT",
11511 |       "dependencies": {
11512 |         "call-bound": "^1.0.2",
11513 |         "es-errors": "^1.3.0",
11514 |         "get-intrinsic": "^1.2.5",
11515 |         "object-inspect": "^1.13.3"
11516 |       },
11517 |       "engines": {
11518 |         "node": ">= 0.4"
11519 |       },
11520 |       "funding": {
11521 |         "url": "https://github.com/sponsors/ljharb"
11522 |       }
11523 |     },
11524 |     "node_modules/side-channel-weakmap": {
11525 |       "version": "1.0.2",
11526 |       "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
11527 |       "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
11528 |       "dev": true,
11529 |       "license": "MIT",
11530 |       "dependencies": {
11531 |         "call-bound": "^1.0.2",
11532 |         "es-errors": "^1.3.0",
11533 |         "get-intrinsic": "^1.2.5",
11534 |         "object-inspect": "^1.13.3",
11535 |         "side-channel-map": "^1.0.1"
11536 |       },
11537 |       "engines": {
11538 |         "node": ">= 0.4"
11539 |       },
11540 |       "funding": {
11541 |         "url": "https://github.com/sponsors/ljharb"
11542 |       }
11543 |     },
11544 |     "node_modules/signal-exit": {
11545 |       "version": "4.1.0",
11546 |       "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
11547 |       "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
11548 |       "dev": true,
11549 |       "license": "ISC",
11550 |       "engines": {
11551 |         "node": ">=14"
11552 |       },
11553 |       "funding": {
11554 |         "url": "https://github.com/sponsors/isaacs"
11555 |       }
11556 |     },
11557 |     "node_modules/simple-eval": {
11558 |       "version": "1.0.1",
11559 |       "resolved": "https://registry.npmjs.org/simple-eval/-/simple-eval-1.0.1.tgz",
11560 |       "integrity": "sha512-LH7FpTAkeD+y5xQC4fzS+tFtaNlvt3Ib1zKzvhjv/Y+cioV4zIuw4IZr2yhRLu67CWL7FR9/6KXKnjRoZTvGGQ==",
11561 |       "dev": true,
11562 |       "license": "MIT",
11563 |       "dependencies": {
11564 |         "jsep": "^1.3.6"
11565 |       },
11566 |       "engines": {
11567 |         "node": ">=12"
11568 |       }
11569 |     },
11570 |     "node_modules/simple-swizzle": {
11571 |       "version": "0.2.2",
11572 |       "resolved": "https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz",
11573 |       "integrity": "sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==",
11574 |       "dev": true,
11575 |       "license": "MIT",
11576 |       "dependencies": {
11577 |         "is-arrayish": "^0.3.1"
11578 |       }
11579 |     },
11580 |     "node_modules/simple-swizzle/node_modules/is-arrayish": {
11581 |       "version": "0.3.2",
11582 |       "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
11583 |       "integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==",
11584 |       "dev": true,
11585 |       "license": "MIT"
11586 |     },
11587 |     "node_modules/slice-ansi": {
11588 |       "version": "7.1.0",
11589 |       "resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-7.1.0.tgz",
11590 |       "integrity": "sha512-bSiSngZ/jWeX93BqeIAbImyTbEihizcwNjFoRUIY/T1wWQsfsm2Vw1agPKylXvQTU7iASGdHhyqRlqQzfz+Htg==",
11591 |       "dev": true,
11592 |       "license": "MIT",
11593 |       "dependencies": {
11594 |         "ansi-styles": "^6.2.1",
11595 |         "is-fullwidth-code-point": "^5.0.0"
11596 |       },
11597 |       "engines": {
11598 |         "node": ">=18"
11599 |       },
11600 |       "funding": {
11601 |         "url": "https://github.com/chalk/slice-ansi?sponsor=1"
11602 |       }
11603 |     },
11604 |     "node_modules/slice-ansi/node_modules/is-fullwidth-code-point": {
11605 |       "version": "5.0.0",
11606 |       "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-5.0.0.tgz",
11607 |       "integrity": "sha512-OVa3u9kkBbw7b8Xw5F9P+D/T9X+Z4+JruYVNapTjPYZYUznQ5YfWeFkOj606XYYW8yugTfC8Pj0hYqvi4ryAhA==",
11608 |       "dev": true,
11609 |       "license": "MIT",
11610 |       "dependencies": {
11611 |         "get-east-asian-width": "^1.0.0"
11612 |       },
11613 |       "engines": {
11614 |         "node": ">=18"
11615 |       },
11616 |       "funding": {
11617 |         "url": "https://github.com/sponsors/sindresorhus"
11618 |       }
11619 |     },
11620 |     "node_modules/smart-buffer": {
11621 |       "version": "4.2.0",
11622 |       "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
11623 |       "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==",
11624 |       "dev": true,
11625 |       "license": "MIT",
11626 |       "engines": {
11627 |         "node": ">= 6.0.0",
11628 |         "npm": ">= 3.0.0"
11629 |       }
11630 |     },
11631 |     "node_modules/socket.io": {
11632 |       "version": "4.8.1",
11633 |       "resolved": "https://registry.npmjs.org/socket.io/-/socket.io-4.8.1.tgz",
11634 |       "integrity": "sha512-oZ7iUCxph8WYRHHcjBEc9unw3adt5CmSNlppj/5Q4k2RIrhl8Z5yY2Xr4j9zj0+wzVZ0bxmYoGSzKJnRl6A4yg==",
11635 |       "dev": true,
11636 |       "license": "MIT",
11637 |       "dependencies": {
11638 |         "accepts": "~1.3.4",
11639 |         "base64id": "~2.0.0",
11640 |         "cors": "~2.8.5",
11641 |         "debug": "~4.3.2",
11642 |         "engine.io": "~6.6.0",
11643 |         "socket.io-adapter": "~2.5.2",
11644 |         "socket.io-parser": "~4.2.4"
11645 |       },
11646 |       "engines": {
11647 |         "node": ">=10.2.0"
11648 |       }
11649 |     },
11650 |     "node_modules/socket.io-adapter": {
11651 |       "version": "2.5.5",
11652 |       "resolved": "https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-2.5.5.tgz",
11653 |       "integrity": "sha512-eLDQas5dzPgOWCk9GuuJC2lBqItuhKI4uxGgo9aIV7MYbk2h9Q6uULEh8WBzThoI7l+qU9Ast9fVUmkqPP9wYg==",
11654 |       "dev": true,
11655 |       "license": "MIT",
11656 |       "dependencies": {
11657 |         "debug": "~4.3.4",
11658 |         "ws": "~8.17.1"
11659 |       }
11660 |     },
11661 |     "node_modules/socket.io-adapter/node_modules/debug": {
11662 |       "version": "4.3.7",
11663 |       "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
11664 |       "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
11665 |       "dev": true,
11666 |       "license": "MIT",
11667 |       "dependencies": {
11668 |         "ms": "^2.1.3"
11669 |       },
11670 |       "engines": {
11671 |         "node": ">=6.0"
11672 |       },
11673 |       "peerDependenciesMeta": {
11674 |         "supports-color": {
11675 |           "optional": true
11676 |         }
11677 |       }
11678 |     },
11679 |     "node_modules/socket.io-adapter/node_modules/ws": {
11680 |       "version": "8.17.1",
11681 |       "resolved": "https://registry.npmjs.org/ws/-/ws-8.17.1.tgz",
11682 |       "integrity": "sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==",
11683 |       "dev": true,
11684 |       "license": "MIT",
11685 |       "engines": {
11686 |         "node": ">=10.0.0"
11687 |       },
11688 |       "peerDependencies": {
11689 |         "bufferutil": "^4.0.1",
11690 |         "utf-8-validate": ">=5.0.2"
11691 |       },
11692 |       "peerDependenciesMeta": {
11693 |         "bufferutil": {
11694 |           "optional": true
11695 |         },
11696 |         "utf-8-validate": {
11697 |           "optional": true
11698 |         }
11699 |       }
11700 |     },
11701 |     "node_modules/socket.io-parser": {
11702 |       "version": "4.2.4",
11703 |       "resolved": "https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.2.4.tgz",
11704 |       "integrity": "sha512-/GbIKmo8ioc+NIWIhwdecY0ge+qVBSMdgxGygevmdHj24bsfgtCmcUUcQ5ZzcylGFHsN3k4HB4Cgkl96KVnuew==",
11705 |       "dev": true,
11706 |       "license": "MIT",
11707 |       "dependencies": {
11708 |         "@socket.io/component-emitter": "~3.1.0",
11709 |         "debug": "~4.3.1"
11710 |       },
11711 |       "engines": {
11712 |         "node": ">=10.0.0"
11713 |       }
11714 |     },
11715 |     "node_modules/socket.io-parser/node_modules/debug": {
11716 |       "version": "4.3.7",
11717 |       "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
11718 |       "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
11719 |       "dev": true,
11720 |       "license": "MIT",
11721 |       "dependencies": {
11722 |         "ms": "^2.1.3"
11723 |       },
11724 |       "engines": {
11725 |         "node": ">=6.0"
11726 |       },
11727 |       "peerDependenciesMeta": {
11728 |         "supports-color": {
11729 |           "optional": true
11730 |         }
11731 |       }
11732 |     },
11733 |     "node_modules/socket.io/node_modules/debug": {
11734 |       "version": "4.3.7",
11735 |       "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
11736 |       "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
11737 |       "dev": true,
11738 |       "license": "MIT",
11739 |       "dependencies": {
11740 |         "ms": "^2.1.3"
11741 |       },
11742 |       "engines": {
11743 |         "node": ">=6.0"
11744 |       },
11745 |       "peerDependenciesMeta": {
11746 |         "supports-color": {
11747 |           "optional": true
11748 |         }
11749 |       }
11750 |     },
11751 |     "node_modules/socks": {
11752 |       "version": "2.8.6",
11753 |       "resolved": "https://registry.npmjs.org/socks/-/socks-2.8.6.tgz",
11754 |       "integrity": "sha512-pe4Y2yzru68lXCb38aAqRf5gvN8YdjP1lok5o0J7BOHljkyCGKVz7H3vpVIXKD27rj2giOJ7DwVyk/GWrPHDWA==",
11755 |       "dev": true,
11756 |       "license": "MIT",
11757 |       "dependencies": {
11758 |         "ip-address": "^9.0.5",
11759 |         "smart-buffer": "^4.2.0"
11760 |       },
11761 |       "engines": {
11762 |         "node": ">= 10.0.0",
11763 |         "npm": ">= 3.0.0"
11764 |       }
11765 |     },
11766 |     "node_modules/socks-proxy-agent": {
11767 |       "version": "8.0.5",
11768 |       "resolved": "https://registry.npmjs.org/socks-proxy-agent/-/socks-proxy-agent-8.0.5.tgz",
11769 |       "integrity": "sha512-HehCEsotFqbPW9sJ8WVYB6UbmIMv7kUUORIF2Nncq4VQvBfNBLibW9YZR5dlYCSUhwcD628pRllm7n+E+YTzJw==",
11770 |       "dev": true,
11771 |       "license": "MIT",
11772 |       "dependencies": {
11773 |         "agent-base": "^7.1.2",
11774 |         "debug": "^4.3.4",
11775 |         "socks": "^2.8.3"
11776 |       },
11777 |       "engines": {
11778 |         "node": ">= 14"
11779 |       }
11780 |     },
11781 |     "node_modules/source-map": {
11782 |       "version": "0.7.6",
11783 |       "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.7.6.tgz",
11784 |       "integrity": "sha512-i5uvt8C3ikiWeNZSVZNWcfZPItFQOsYTUAOkcUPGd8DqDy1uOUikjt5dG+uRlwyvR108Fb9DOd4GvXfT0N2/uQ==",
11785 |       "dev": true,
11786 |       "license": "BSD-3-Clause",
11787 |       "engines": {
11788 |         "node": ">= 12"
11789 |       }
11790 |     },
11791 |     "node_modules/source-map-js": {
11792 |       "version": "1.2.1",
11793 |       "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
11794 |       "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
11795 |       "dev": true,
11796 |       "license": "BSD-3-Clause",
11797 |       "engines": {
11798 |         "node": ">=0.10.0"
11799 |       }
11800 |     },
11801 |     "node_modules/space-separated-tokens": {
11802 |       "version": "2.0.2",
11803 |       "resolved": "https://registry.npmjs.org/space-separated-tokens/-/space-separated-tokens-2.0.2.tgz",
11804 |       "integrity": "sha512-PEGlAwrG8yXGXRjW32fGbg66JAlOAwbObuqVoJpv/mRgoWDQfgH1wDPvtzWyUSNAXBGSk8h755YDbbcEy3SH2Q==",
11805 |       "dev": true,
11806 |       "license": "MIT",
11807 |       "funding": {
11808 |         "type": "github",
11809 |         "url": "https://github.com/sponsors/wooorm"
11810 |       }
11811 |     },
11812 |     "node_modules/sprintf-js": {
11813 |       "version": "1.1.3",
11814 |       "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.1.3.tgz",
11815 |       "integrity": "sha512-Oo+0REFV59/rz3gfJNKQiBlwfHaSESl1pcGyABQsnnIfWOFt6JNj5gCog2U6MLZ//IGYD+nA8nI+mTShREReaA==",
11816 |       "dev": true,
11817 |       "license": "BSD-3-Clause"
11818 |     },
11819 |     "node_modules/stack-utils": {
11820 |       "version": "2.0.6",
11821 |       "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
11822 |       "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
11823 |       "dev": true,
11824 |       "license": "MIT",
11825 |       "dependencies": {
11826 |         "escape-string-regexp": "^2.0.0"
11827 |       },
11828 |       "engines": {
11829 |         "node": ">=10"
11830 |       }
11831 |     },
11832 |     "node_modules/stack-utils/node_modules/escape-string-regexp": {
11833 |       "version": "2.0.0",
11834 |       "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
11835 |       "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
11836 |       "dev": true,
11837 |       "license": "MIT",
11838 |       "engines": {
11839 |         "node": ">=8"
11840 |       }
11841 |     },
11842 |     "node_modules/statuses": {
11843 |       "version": "2.0.1",
11844 |       "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
11845 |       "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
11846 |       "dev": true,
11847 |       "license": "MIT",
11848 |       "engines": {
11849 |         "node": ">= 0.8"
11850 |       }
11851 |     },
11852 |     "node_modules/stop-iteration-iterator": {
11853 |       "version": "1.1.0",
11854 |       "resolved": "https://registry.npmjs.org/stop-iteration-iterator/-/stop-iteration-iterator-1.1.0.tgz",
11855 |       "integrity": "sha512-eLoXW/DHyl62zxY4SCaIgnRhuMr6ri4juEYARS8E6sCEqzKpOiE521Ucofdx+KnDZl5xmvGYaaKCk5FEOxJCoQ==",
11856 |       "dev": true,
11857 |       "license": "MIT",
11858 |       "dependencies": {
11859 |         "es-errors": "^1.3.0",
11860 |         "internal-slot": "^1.1.0"
11861 |       },
11862 |       "engines": {
11863 |         "node": ">= 0.4"
11864 |       }
11865 |     },
11866 |     "node_modules/streamx": {
11867 |       "version": "2.22.1",
11868 |       "resolved": "https://registry.npmjs.org/streamx/-/streamx-2.22.1.tgz",
11869 |       "integrity": "sha512-znKXEBxfatz2GBNK02kRnCXjV+AA4kjZIUxeWSr3UGirZMJfTE9uiwKHobnbgxWyL/JWro8tTq+vOqAK1/qbSA==",
11870 |       "dev": true,
11871 |       "license": "MIT",
11872 |       "dependencies": {
11873 |         "fast-fifo": "^1.3.2",
11874 |         "text-decoder": "^1.1.0"
11875 |       },
11876 |       "optionalDependencies": {
11877 |         "bare-events": "^2.2.0"
11878 |       }
11879 |     },
11880 |     "node_modules/string-width": {
11881 |       "version": "5.1.2",
11882 |       "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
11883 |       "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
11884 |       "dev": true,
11885 |       "license": "MIT",
11886 |       "dependencies": {
11887 |         "eastasianwidth": "^0.2.0",
11888 |         "emoji-regex": "^9.2.2",
11889 |         "strip-ansi": "^7.0.1"
11890 |       },
11891 |       "engines": {
11892 |         "node": ">=12"
11893 |       },
11894 |       "funding": {
11895 |         "url": "https://github.com/sponsors/sindresorhus"
11896 |       }
11897 |     },
11898 |     "node_modules/string-width-cjs": {
11899 |       "name": "string-width",
11900 |       "version": "4.2.3",
11901 |       "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
11902 |       "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
11903 |       "dev": true,
11904 |       "license": "MIT",
11905 |       "dependencies": {
11906 |         "emoji-regex": "^8.0.0",
11907 |         "is-fullwidth-code-point": "^3.0.0",
11908 |         "strip-ansi": "^6.0.1"
11909 |       },
11910 |       "engines": {
11911 |         "node": ">=8"
11912 |       }
11913 |     },
11914 |     "node_modules/string-width-cjs/node_modules/ansi-regex": {
11915 |       "version": "5.0.1",
11916 |       "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
11917 |       "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
11918 |       "dev": true,
11919 |       "license": "MIT",
11920 |       "engines": {
11921 |         "node": ">=8"
11922 |       }
11923 |     },
11924 |     "node_modules/string-width-cjs/node_modules/emoji-regex": {
11925 |       "version": "8.0.0",
11926 |       "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
11927 |       "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
11928 |       "dev": true,
11929 |       "license": "MIT"
11930 |     },
11931 |     "node_modules/string-width-cjs/node_modules/is-fullwidth-code-point": {
11932 |       "version": "3.0.0",
11933 |       "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
11934 |       "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
11935 |       "dev": true,
11936 |       "license": "MIT",
11937 |       "engines": {
11938 |         "node": ">=8"
11939 |       }
11940 |     },
11941 |     "node_modules/string-width-cjs/node_modules/strip-ansi": {
11942 |       "version": "6.0.1",
11943 |       "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
11944 |       "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
11945 |       "dev": true,
11946 |       "license": "MIT",
11947 |       "dependencies": {
11948 |         "ansi-regex": "^5.0.1"
11949 |       },
11950 |       "engines": {
11951 |         "node": ">=8"
11952 |       }
11953 |     },
11954 |     "node_modules/string.prototype.trim": {
11955 |       "version": "1.2.10",
11956 |       "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.10.tgz",
11957 |       "integrity": "sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==",
11958 |       "dev": true,
11959 |       "license": "MIT",
11960 |       "dependencies": {
11961 |         "call-bind": "^1.0.8",
11962 |         "call-bound": "^1.0.2",
11963 |         "define-data-property": "^1.1.4",
11964 |         "define-properties": "^1.2.1",
11965 |         "es-abstract": "^1.23.5",
11966 |         "es-object-atoms": "^1.0.0",
11967 |         "has-property-descriptors": "^1.0.2"
11968 |       },
11969 |       "engines": {
11970 |         "node": ">= 0.4"
11971 |       },
11972 |       "funding": {
11973 |         "url": "https://github.com/sponsors/ljharb"
11974 |       }
11975 |     },
11976 |     "node_modules/string.prototype.trimend": {
11977 |       "version": "1.0.9",
11978 |       "resolved": "https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.9.tgz",
11979 |       "integrity": "sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==",
11980 |       "dev": true,
11981 |       "license": "MIT",
11982 |       "dependencies": {
11983 |         "call-bind": "^1.0.8",
11984 |         "call-bound": "^1.0.2",
11985 |         "define-properties": "^1.2.1",
11986 |         "es-object-atoms": "^1.0.0"
11987 |       },
11988 |       "engines": {
11989 |         "node": ">= 0.4"
11990 |       },
11991 |       "funding": {
11992 |         "url": "https://github.com/sponsors/ljharb"
11993 |       }
11994 |     },
11995 |     "node_modules/string.prototype.trimstart": {
11996 |       "version": "1.0.8",
11997 |       "resolved": "https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.8.tgz",
11998 |       "integrity": "sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==",
11999 |       "dev": true,
12000 |       "license": "MIT",
12001 |       "dependencies": {
12002 |         "call-bind": "^1.0.7",
12003 |         "define-properties": "^1.2.1",
12004 |         "es-object-atoms": "^1.0.0"
12005 |       },
12006 |       "engines": {
12007 |         "node": ">= 0.4"
12008 |       },
12009 |       "funding": {
12010 |         "url": "https://github.com/sponsors/ljharb"
12011 |       }
12012 |     },
12013 |     "node_modules/stringify-entities": {
12014 |       "version": "4.0.4",
12015 |       "resolved": "https://registry.npmjs.org/stringify-entities/-/stringify-entities-4.0.4.tgz",
12016 |       "integrity": "sha512-IwfBptatlO+QCJUo19AqvrPNqlVMpW9YEL2LIVY+Rpv2qsjCGxaDLNRgeGsQWJhfItebuJhsGSLjaBbNSQ+ieg==",
12017 |       "dev": true,
12018 |       "license": "MIT",
12019 |       "dependencies": {
12020 |         "character-entities-html4": "^2.0.0",
12021 |         "character-entities-legacy": "^3.0.0"
12022 |       },
12023 |       "funding": {
12024 |         "type": "github",
12025 |         "url": "https://github.com/sponsors/wooorm"
12026 |       }
12027 |     },
12028 |     "node_modules/strip-ansi": {
12029 |       "version": "7.1.0",
12030 |       "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
12031 |       "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
12032 |       "dev": true,
12033 |       "license": "MIT",
12034 |       "dependencies": {
12035 |         "ansi-regex": "^6.0.1"
12036 |       },
12037 |       "engines": {
12038 |         "node": ">=12"
12039 |       },
12040 |       "funding": {
12041 |         "url": "https://github.com/chalk/strip-ansi?sponsor=1"
12042 |       }
12043 |     },
12044 |     "node_modules/strip-ansi-cjs": {
12045 |       "name": "strip-ansi",
12046 |       "version": "6.0.1",
12047 |       "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
12048 |       "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
12049 |       "dev": true,
12050 |       "license": "MIT",
12051 |       "dependencies": {
12052 |         "ansi-regex": "^5.0.1"
12053 |       },
12054 |       "engines": {
12055 |         "node": ">=8"
12056 |       }
12057 |     },
12058 |     "node_modules/strip-ansi-cjs/node_modules/ansi-regex": {
12059 |       "version": "5.0.1",
12060 |       "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
12061 |       "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
12062 |       "dev": true,
12063 |       "license": "MIT",
12064 |       "engines": {
12065 |         "node": ">=8"
12066 |       }
12067 |     },
12068 |     "node_modules/strip-bom-string": {
12069 |       "version": "1.0.0",
12070 |       "resolved": "https://registry.npmjs.org/strip-bom-string/-/strip-bom-string-1.0.0.tgz",
12071 |       "integrity": "sha512-uCC2VHvQRYu+lMh4My/sFNmF2klFymLX1wHJeXnbEJERpV/ZsVuonzerjfrGpIGF7LBVa1O7i9kjiWvJiFck8g==",
12072 |       "dev": true,
12073 |       "license": "MIT",
12074 |       "engines": {
12075 |         "node": ">=0.10.0"
12076 |       }
12077 |     },
12078 |     "node_modules/style-to-js": {
12079 |       "version": "1.1.17",
12080 |       "resolved": "https://registry.npmjs.org/style-to-js/-/style-to-js-1.1.17.tgz",
12081 |       "integrity": "sha512-xQcBGDxJb6jjFCTzvQtfiPn6YvvP2O8U1MDIPNfJQlWMYfktPy+iGsHE7cssjs7y84d9fQaK4UF3RIJaAHSoYA==",
12082 |       "dev": true,
12083 |       "license": "MIT",
12084 |       "dependencies": {
12085 |         "style-to-object": "1.0.9"
12086 |       }
12087 |     },
12088 |     "node_modules/style-to-object": {
12089 |       "version": "1.0.9",
12090 |       "resolved": "https://registry.npmjs.org/style-to-object/-/style-to-object-1.0.9.tgz",
12091 |       "integrity": "sha512-G4qppLgKu/k6FwRpHiGiKPaPTFcG3g4wNVX/Qsfu+RqQM30E7Tyu/TEgxcL9PNLF5pdRLwQdE3YKKf+KF2Dzlw==",
12092 |       "dev": true,
12093 |       "license": "MIT",
12094 |       "dependencies": {
12095 |         "inline-style-parser": "0.2.4"
12096 |       }
12097 |     },
12098 |     "node_modules/sucrase": {
12099 |       "version": "3.35.0",
12100 |       "resolved": "https://registry.npmjs.org/sucrase/-/sucrase-3.35.0.tgz",
12101 |       "integrity": "sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==",
12102 |       "dev": true,
12103 |       "license": "MIT",
12104 |       "dependencies": {
12105 |         "@jridgewell/gen-mapping": "^0.3.2",
12106 |         "commander": "^4.0.0",
12107 |         "glob": "^10.3.10",
12108 |         "lines-and-columns": "^1.1.6",
12109 |         "mz": "^2.7.0",
12110 |         "pirates": "^4.0.1",
12111 |         "ts-interface-checker": "^0.1.9"
12112 |       },
12113 |       "bin": {
12114 |         "sucrase": "bin/sucrase",
12115 |         "sucrase-node": "bin/sucrase-node"
12116 |       },
12117 |       "engines": {
12118 |         "node": ">=16 || 14 >=14.17"
12119 |       }
12120 |     },
12121 |     "node_modules/sucrase/node_modules/brace-expansion": {
12122 |       "version": "2.0.2",
12123 |       "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
12124 |       "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
12125 |       "dev": true,
12126 |       "license": "MIT",
12127 |       "dependencies": {
12128 |         "balanced-match": "^1.0.0"
12129 |       }
12130 |     },
12131 |     "node_modules/sucrase/node_modules/commander": {
12132 |       "version": "4.1.1",
12133 |       "resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
12134 |       "integrity": "sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==",
12135 |       "dev": true,
12136 |       "license": "MIT",
12137 |       "engines": {
12138 |         "node": ">= 6"
12139 |       }
12140 |     },
12141 |     "node_modules/sucrase/node_modules/glob": {
12142 |       "version": "10.4.5",
12143 |       "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
12144 |       "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
12145 |       "dev": true,
12146 |       "license": "ISC",
12147 |       "dependencies": {
12148 |         "foreground-child": "^3.1.0",
12149 |         "jackspeak": "^3.1.2",
12150 |         "minimatch": "^9.0.4",
12151 |         "minipass": "^7.1.2",
12152 |         "package-json-from-dist": "^1.0.0",
12153 |         "path-scurry": "^1.11.1"
12154 |       },
12155 |       "bin": {
12156 |         "glob": "dist/esm/bin.mjs"
12157 |       },
12158 |       "funding": {
12159 |         "url": "https://github.com/sponsors/isaacs"
12160 |       }
12161 |     },
12162 |     "node_modules/sucrase/node_modules/jackspeak": {
12163 |       "version": "3.4.3",
12164 |       "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
12165 |       "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
12166 |       "dev": true,
12167 |       "license": "BlueOak-1.0.0",
12168 |       "dependencies": {
12169 |         "@isaacs/cliui": "^8.0.2"
12170 |       },
12171 |       "funding": {
12172 |         "url": "https://github.com/sponsors/isaacs"
12173 |       },
12174 |       "optionalDependencies": {
12175 |         "@pkgjs/parseargs": "^0.11.0"
12176 |       }
12177 |     },
12178 |     "node_modules/sucrase/node_modules/lru-cache": {
12179 |       "version": "10.4.3",
12180 |       "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
12181 |       "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
12182 |       "dev": true,
12183 |       "license": "ISC"
12184 |     },
12185 |     "node_modules/sucrase/node_modules/minimatch": {
12186 |       "version": "9.0.5",
12187 |       "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
12188 |       "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
12189 |       "dev": true,
12190 |       "license": "ISC",
12191 |       "dependencies": {
12192 |         "brace-expansion": "^2.0.1"
12193 |       },
12194 |       "engines": {
12195 |         "node": ">=16 || 14 >=14.17"
12196 |       },
12197 |       "funding": {
12198 |         "url": "https://github.com/sponsors/isaacs"
12199 |       }
12200 |     },
12201 |     "node_modules/sucrase/node_modules/path-scurry": {
12202 |       "version": "1.11.1",
12203 |       "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
12204 |       "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
12205 |       "dev": true,
12206 |       "license": "BlueOak-1.0.0",
12207 |       "dependencies": {
12208 |         "lru-cache": "^10.2.0",
12209 |         "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
12210 |       },
12211 |       "engines": {
12212 |         "node": ">=16 || 14 >=14.18"
12213 |       },
12214 |       "funding": {
12215 |         "url": "https://github.com/sponsors/isaacs"
12216 |       }
12217 |     },
12218 |     "node_modules/supports-preserve-symlinks-flag": {
12219 |       "version": "1.0.0",
12220 |       "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
12221 |       "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
12222 |       "dev": true,
12223 |       "license": "MIT",
12224 |       "engines": {
12225 |         "node": ">= 0.4"
12226 |       },
12227 |       "funding": {
12228 |         "url": "https://github.com/sponsors/ljharb"
12229 |       }
12230 |     },
12231 |     "node_modules/tailwindcss": {
12232 |       "version": "3.4.17",
12233 |       "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-3.4.17.tgz",
12234 |       "integrity": "sha512-w33E2aCvSDP0tW9RZuNXadXlkHXqFzSkQew/aIa2i/Sj8fThxwovwlXHSPXTbAHwEIhBFXAedUhP2tueAKP8Og==",
12235 |       "dev": true,
12236 |       "license": "MIT",
12237 |       "dependencies": {
12238 |         "@alloc/quick-lru": "^5.2.0",
12239 |         "arg": "^5.0.2",
12240 |         "chokidar": "^3.6.0",
12241 |         "didyoumean": "^1.2.2",
12242 |         "dlv": "^1.1.3",
12243 |         "fast-glob": "^3.3.2",
12244 |         "glob-parent": "^6.0.2",
12245 |         "is-glob": "^4.0.3",
12246 |         "jiti": "^1.21.6",
12247 |         "lilconfig": "^3.1.3",
12248 |         "micromatch": "^4.0.8",
12249 |         "normalize-path": "^3.0.0",
12250 |         "object-hash": "^3.0.0",
12251 |         "picocolors": "^1.1.1",
12252 |         "postcss": "^8.4.47",
12253 |         "postcss-import": "^15.1.0",
12254 |         "postcss-js": "^4.0.1",
12255 |         "postcss-load-config": "^4.0.2",
12256 |         "postcss-nested": "^6.2.0",
12257 |         "postcss-selector-parser": "^6.1.2",
12258 |         "resolve": "^1.22.8",
12259 |         "sucrase": "^3.35.0"
12260 |       },
12261 |       "bin": {
12262 |         "tailwind": "lib/cli.js",
12263 |         "tailwindcss": "lib/cli.js"
12264 |       },
12265 |       "engines": {
12266 |         "node": ">=14.0.0"
12267 |       }
12268 |     },
12269 |     "node_modules/tailwindcss/node_modules/glob-parent": {
12270 |       "version": "6.0.2",
12271 |       "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
12272 |       "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
12273 |       "dev": true,
12274 |       "license": "ISC",
12275 |       "dependencies": {
12276 |         "is-glob": "^4.0.3"
12277 |       },
12278 |       "engines": {
12279 |         "node": ">=10.13.0"
12280 |       }
12281 |     },
12282 |     "node_modules/tar": {
12283 |       "version": "6.2.1",
12284 |       "resolved": "https://registry.npmjs.org/tar/-/tar-6.2.1.tgz",
12285 |       "integrity": "sha512-DZ4yORTwrbTj/7MZYq2w+/ZFdI6OZ/f9SFHR+71gIVUZhOQPHzVCLpvRnPgyaMpfWxxk/4ONva3GQSyNIKRv6A==",
12286 |       "dev": true,
12287 |       "license": "ISC",
12288 |       "dependencies": {
12289 |         "chownr": "^2.0.0",
12290 |         "fs-minipass": "^2.0.0",
12291 |         "minipass": "^5.0.0",
12292 |         "minizlib": "^2.1.1",
12293 |         "mkdirp": "^1.0.3",
12294 |         "yallist": "^4.0.0"
12295 |       },
12296 |       "engines": {
12297 |         "node": ">=10"
12298 |       }
12299 |     },
12300 |     "node_modules/tar-fs": {
12301 |       "version": "3.1.0",
12302 |       "resolved": "https://registry.npmjs.org/tar-fs/-/tar-fs-3.1.0.tgz",
12303 |       "integrity": "sha512-5Mty5y/sOF1YWj1J6GiBodjlDc05CUR8PKXrsnFAiSG0xA+GHeWLovaZPYUDXkH/1iKRf2+M5+OrRgzC7O9b7w==",
12304 |       "dev": true,
12305 |       "license": "MIT",
12306 |       "dependencies": {
12307 |         "pump": "^3.0.0",
12308 |         "tar-stream": "^3.1.5"
12309 |       },
12310 |       "optionalDependencies": {
12311 |         "bare-fs": "^4.0.1",
12312 |         "bare-path": "^3.0.0"
12313 |       }
12314 |     },
12315 |     "node_modules/tar-stream": {
12316 |       "version": "3.1.7",
12317 |       "resolved": "https://registry.npmjs.org/tar-stream/-/tar-stream-3.1.7.tgz",
12318 |       "integrity": "sha512-qJj60CXt7IU1Ffyc3NJMjh6EkuCFej46zUqJ4J7pqYlThyd9bO0XBTmcOIhSzZJVWfsLks0+nle/j538YAW9RQ==",
12319 |       "dev": true,
12320 |       "license": "MIT",
12321 |       "dependencies": {
12322 |         "b4a": "^1.6.4",
12323 |         "fast-fifo": "^1.2.0",
12324 |         "streamx": "^2.15.0"
12325 |       }
12326 |     },
12327 |     "node_modules/tar/node_modules/minipass": {
12328 |       "version": "5.0.0",
12329 |       "resolved": "https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz",
12330 |       "integrity": "sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==",
12331 |       "dev": true,
12332 |       "license": "ISC",
12333 |       "engines": {
12334 |         "node": ">=8"
12335 |       }
12336 |     },
12337 |     "node_modules/text-decoder": {
12338 |       "version": "1.2.3",
12339 |       "resolved": "https://registry.npmjs.org/text-decoder/-/text-decoder-1.2.3.tgz",
12340 |       "integrity": "sha512-3/o9z3X0X0fTupwsYvR03pJ/DjWuqqrfwBgTQzdWDiQSm9KitAyz/9WqsT2JQW7KV2m+bC2ol/zqpW37NHxLaA==",
12341 |       "dev": true,
12342 |       "license": "Apache-2.0",
12343 |       "dependencies": {
12344 |         "b4a": "^1.6.4"
12345 |       }
12346 |     },
12347 |     "node_modules/thenify": {
12348 |       "version": "3.3.1",
12349 |       "resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz",
12350 |       "integrity": "sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==",
12351 |       "dev": true,
12352 |       "license": "MIT",
12353 |       "dependencies": {
12354 |         "any-promise": "^1.0.0"
12355 |       }
12356 |     },
12357 |     "node_modules/thenify-all": {
12358 |       "version": "1.6.0",
12359 |       "resolved": "https://registry.npmjs.org/thenify-all/-/thenify-all-1.6.0.tgz",
12360 |       "integrity": "sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==",
12361 |       "dev": true,
12362 |       "license": "MIT",
12363 |       "dependencies": {
12364 |         "thenify": ">= 3.1.0 < 4"
12365 |       },
12366 |       "engines": {
12367 |         "node": ">=0.8"
12368 |       }
12369 |     },
12370 |     "node_modules/through": {
12371 |       "version": "2.3.8",
12372 |       "resolved": "https://registry.npmjs.org/through/-/through-2.3.8.tgz",
12373 |       "integrity": "sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg==",
12374 |       "dev": true,
12375 |       "license": "MIT"
12376 |     },
12377 |     "node_modules/to-regex-range": {
12378 |       "version": "5.0.1",
12379 |       "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
12380 |       "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
12381 |       "dev": true,
12382 |       "license": "MIT",
12383 |       "dependencies": {
12384 |         "is-number": "^7.0.0"
12385 |       },
12386 |       "engines": {
12387 |         "node": ">=8.0"
12388 |       }
12389 |     },
12390 |     "node_modules/toidentifier": {
12391 |       "version": "1.0.1",
12392 |       "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
12393 |       "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
12394 |       "dev": true,
12395 |       "license": "MIT",
12396 |       "engines": {
12397 |         "node": ">=0.6"
12398 |       }
12399 |     },
12400 |     "node_modules/tr46": {
12401 |       "version": "0.0.3",
12402 |       "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
12403 |       "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
12404 |       "dev": true,
12405 |       "license": "MIT"
12406 |     },
12407 |     "node_modules/trim-lines": {
12408 |       "version": "3.0.1",
12409 |       "resolved": "https://registry.npmjs.org/trim-lines/-/trim-lines-3.0.1.tgz",
12410 |       "integrity": "sha512-kRj8B+YHZCc9kQYdWfJB2/oUl9rA99qbowYYBtr4ui4mZyAQ2JpvVBd/6U2YloATfqBhBTSMhTpgBHtU0Mf3Rg==",
12411 |       "dev": true,
12412 |       "license": "MIT",
12413 |       "funding": {
12414 |         "type": "github",
12415 |         "url": "https://github.com/sponsors/wooorm"
12416 |       }
12417 |     },
12418 |     "node_modules/trim-trailing-lines": {
12419 |       "version": "2.1.0",
12420 |       "resolved": "https://registry.npmjs.org/trim-trailing-lines/-/trim-trailing-lines-2.1.0.tgz",
12421 |       "integrity": "sha512-5UR5Biq4VlVOtzqkm2AZlgvSlDJtME46uV0br0gENbwN4l5+mMKT4b9gJKqWtuL2zAIqajGJGuvbCbcAJUZqBg==",
12422 |       "dev": true,
12423 |       "license": "MIT",
12424 |       "funding": {
12425 |         "type": "github",
12426 |         "url": "https://github.com/sponsors/wooorm"
12427 |       }
12428 |     },
12429 |     "node_modules/trough": {
12430 |       "version": "2.2.0",
12431 |       "resolved": "https://registry.npmjs.org/trough/-/trough-2.2.0.tgz",
12432 |       "integrity": "sha512-tmMpK00BjZiUyVyvrBK7knerNgmgvcV/KLVyuma/SC+TQN167GrMRciANTz09+k3zW8L8t60jWO1GpfkZdjTaw==",
12433 |       "dev": true,
12434 |       "license": "MIT",
12435 |       "funding": {
12436 |         "type": "github",
12437 |         "url": "https://github.com/sponsors/wooorm"
12438 |       }
12439 |     },
12440 |     "node_modules/ts-interface-checker": {
12441 |       "version": "0.1.13",
12442 |       "resolved": "https://registry.npmjs.org/ts-interface-checker/-/ts-interface-checker-0.1.13.tgz",
12443 |       "integrity": "sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==",
12444 |       "dev": true,
12445 |       "license": "Apache-2.0"
12446 |     },
12447 |     "node_modules/ts-node": {
12448 |       "version": "10.9.2",
12449 |       "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.2.tgz",
12450 |       "integrity": "sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ==",
12451 |       "dev": true,
12452 |       "license": "MIT",
12453 |       "dependencies": {
12454 |         "@cspotcode/source-map-support": "^0.8.0",
12455 |         "@tsconfig/node10": "^1.0.7",
12456 |         "@tsconfig/node12": "^1.0.7",
12457 |         "@tsconfig/node14": "^1.0.0",
12458 |         "@tsconfig/node16": "^1.0.2",
12459 |         "acorn": "^8.4.1",
12460 |         "acorn-walk": "^8.1.1",
12461 |         "arg": "^4.1.0",
12462 |         "create-require": "^1.1.0",
12463 |         "diff": "^4.0.1",
12464 |         "make-error": "^1.1.1",
12465 |         "v8-compile-cache-lib": "^3.0.1",
12466 |         "yn": "3.1.1"
12467 |       },
12468 |       "bin": {
12469 |         "ts-node": "dist/bin.js",
12470 |         "ts-node-cwd": "dist/bin-cwd.js",
12471 |         "ts-node-esm": "dist/bin-esm.js",
12472 |         "ts-node-script": "dist/bin-script.js",
12473 |         "ts-node-transpile-only": "dist/bin-transpile.js",
12474 |         "ts-script": "dist/bin-script-deprecated.js"
12475 |       },
12476 |       "peerDependencies": {
12477 |         "@swc/core": ">=1.2.50",
12478 |         "@swc/wasm": ">=1.2.50",
12479 |         "@types/node": "*",
12480 |         "typescript": ">=2.7"
12481 |       },
12482 |       "peerDependenciesMeta": {
12483 |         "@swc/core": {
12484 |           "optional": true
12485 |         },
12486 |         "@swc/wasm": {
12487 |           "optional": true
12488 |         }
12489 |       }
12490 |     },
12491 |     "node_modules/ts-node/node_modules/arg": {
12492 |       "version": "4.1.3",
12493 |       "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
12494 |       "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==",
12495 |       "dev": true,
12496 |       "license": "MIT"
12497 |     },
12498 |     "node_modules/tslib": {
12499 |       "version": "1.14.1",
12500 |       "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
12501 |       "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
12502 |       "dev": true,
12503 |       "license": "0BSD"
12504 |     },
12505 |     "node_modules/tsx": {
12506 |       "version": "4.20.3",
12507 |       "resolved": "https://registry.npmjs.org/tsx/-/tsx-4.20.3.tgz",
12508 |       "integrity": "sha512-qjbnuR9Tr+FJOMBqJCW5ehvIo/buZq7vH7qD7JziU98h6l3qGy0a/yPFjwO+y0/T7GFpNgNAvEcPPVfyT8rrPQ==",
12509 |       "dev": true,
12510 |       "license": "MIT",
12511 |       "dependencies": {
12512 |         "esbuild": "~0.25.0",
12513 |         "get-tsconfig": "^4.7.5"
12514 |       },
12515 |       "bin": {
12516 |         "tsx": "dist/cli.mjs"
12517 |       },
12518 |       "engines": {
12519 |         "node": ">=18.0.0"
12520 |       },
12521 |       "optionalDependencies": {
12522 |         "fsevents": "~2.3.3"
12523 |       }
12524 |     },
12525 |     "node_modules/type-fest": {
12526 |       "version": "4.41.0",
12527 |       "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-4.41.0.tgz",
12528 |       "integrity": "sha512-TeTSQ6H5YHvpqVwBRcnLDCBnDOHWYu7IvGbHT6N8AOymcr9PJGjc1GTtiWZTYg0NCgYwvnYWEkVChQAr9bjfwA==",
12529 |       "dev": true,
12530 |       "license": "(MIT OR CC0-1.0)",
12531 |       "engines": {
12532 |         "node": ">=16"
12533 |       },
12534 |       "funding": {
12535 |         "url": "https://github.com/sponsors/sindresorhus"
12536 |       }
12537 |     },
12538 |     "node_modules/type-is": {
12539 |       "version": "1.6.18",
12540 |       "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
12541 |       "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
12542 |       "dev": true,
12543 |       "license": "MIT",
12544 |       "dependencies": {
12545 |         "media-typer": "0.3.0",
12546 |         "mime-types": "~2.1.24"
12547 |       },
12548 |       "engines": {
12549 |         "node": ">= 0.6"
12550 |       }
12551 |     },
12552 |     "node_modules/typed-array-buffer": {
12553 |       "version": "1.0.3",
12554 |       "resolved": "https://registry.npmjs.org/typed-array-buffer/-/typed-array-buffer-1.0.3.tgz",
12555 |       "integrity": "sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==",
12556 |       "dev": true,
12557 |       "license": "MIT",
12558 |       "dependencies": {
12559 |         "call-bound": "^1.0.3",
12560 |         "es-errors": "^1.3.0",
12561 |         "is-typed-array": "^1.1.14"
12562 |       },
12563 |       "engines": {
12564 |         "node": ">= 0.4"
12565 |       }
12566 |     },
12567 |     "node_modules/typed-array-byte-length": {
12568 |       "version": "1.0.3",
12569 |       "resolved": "https://registry.npmjs.org/typed-array-byte-length/-/typed-array-byte-length-1.0.3.tgz",
12570 |       "integrity": "sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==",
12571 |       "dev": true,
12572 |       "license": "MIT",
12573 |       "dependencies": {
12574 |         "call-bind": "^1.0.8",
12575 |         "for-each": "^0.3.3",
12576 |         "gopd": "^1.2.0",
12577 |         "has-proto": "^1.2.0",
12578 |         "is-typed-array": "^1.1.14"
12579 |       },
12580 |       "engines": {
12581 |         "node": ">= 0.4"
12582 |       },
12583 |       "funding": {
12584 |         "url": "https://github.com/sponsors/ljharb"
12585 |       }
12586 |     },
12587 |     "node_modules/typed-array-byte-offset": {
12588 |       "version": "1.0.4",
12589 |       "resolved": "https://registry.npmjs.org/typed-array-byte-offset/-/typed-array-byte-offset-1.0.4.tgz",
12590 |       "integrity": "sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==",
12591 |       "dev": true,
12592 |       "license": "MIT",
12593 |       "dependencies": {
12594 |         "available-typed-arrays": "^1.0.7",
12595 |         "call-bind": "^1.0.8",
12596 |         "for-each": "^0.3.3",
12597 |         "gopd": "^1.2.0",
12598 |         "has-proto": "^1.2.0",
12599 |         "is-typed-array": "^1.1.15",
12600 |         "reflect.getprototypeof": "^1.0.9"
12601 |       },
12602 |       "engines": {
12603 |         "node": ">= 0.4"
12604 |       },
12605 |       "funding": {
12606 |         "url": "https://github.com/sponsors/ljharb"
12607 |       }
12608 |     },
12609 |     "node_modules/typed-array-length": {
12610 |       "version": "1.0.7",
12611 |       "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.7.tgz",
12612 |       "integrity": "sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==",
12613 |       "dev": true,
12614 |       "license": "MIT",
12615 |       "dependencies": {
12616 |         "call-bind": "^1.0.7",
12617 |         "for-each": "^0.3.3",
12618 |         "gopd": "^1.0.1",
12619 |         "is-typed-array": "^1.1.13",
12620 |         "possible-typed-array-names": "^1.0.0",
12621 |         "reflect.getprototypeof": "^1.0.6"
12622 |       },
12623 |       "engines": {
12624 |         "node": ">= 0.4"
12625 |       },
12626 |       "funding": {
12627 |         "url": "https://github.com/sponsors/ljharb"
12628 |       }
12629 |     },
12630 |     "node_modules/typedoc": {
12631 |       "version": "0.28.10",
12632 |       "resolved": "https://registry.npmjs.org/typedoc/-/typedoc-0.28.10.tgz",
12633 |       "integrity": "sha512-zYvpjS2bNJ30SoNYfHSRaFpBMZAsL7uwKbWwqoCNFWjcPnI3e/mPLh2SneH9mX7SJxtDpvDgvd9/iZxGbo7daw==",
12634 |       "dev": true,
12635 |       "license": "Apache-2.0",
12636 |       "dependencies": {
12637 |         "@gerrit0/mini-shiki": "^3.9.0",
12638 |         "lunr": "^2.3.9",
12639 |         "markdown-it": "^14.1.0",
12640 |         "minimatch": "^9.0.5",
12641 |         "yaml": "^2.8.0"
12642 |       },
12643 |       "bin": {
12644 |         "typedoc": "bin/typedoc"
12645 |       },
12646 |       "engines": {
12647 |         "node": ">= 18",
12648 |         "pnpm": ">= 10"
12649 |       },
12650 |       "peerDependencies": {
12651 |         "typescript": "5.0.x || 5.1.x || 5.2.x || 5.3.x || 5.4.x || 5.5.x || 5.6.x || 5.7.x || 5.8.x || 5.9.x"
12652 |       }
12653 |     },
12654 |     "node_modules/typedoc/node_modules/brace-expansion": {
12655 |       "version": "2.0.2",
12656 |       "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
12657 |       "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
12658 |       "dev": true,
12659 |       "license": "MIT",
12660 |       "dependencies": {
12661 |         "balanced-match": "^1.0.0"
12662 |       }
12663 |     },
12664 |     "node_modules/typedoc/node_modules/minimatch": {
12665 |       "version": "9.0.5",
12666 |       "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
12667 |       "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
12668 |       "dev": true,
12669 |       "license": "ISC",
12670 |       "dependencies": {
12671 |         "brace-expansion": "^2.0.1"
12672 |       },
12673 |       "engines": {
12674 |         "node": ">=16 || 14 >=14.17"
12675 |       },
12676 |       "funding": {
12677 |         "url": "https://github.com/sponsors/isaacs"
12678 |       }
12679 |     },
12680 |     "node_modules/typescript": {
12681 |       "version": "5.9.2",
12682 |       "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.9.2.tgz",
12683 |       "integrity": "sha512-CWBzXQrc/qOkhidw1OzBTQuYRbfyxDXJMVJ1XNwUHGROVmuaeiEm3OslpZ1RV96d7SKKjZKrSJu3+t/xlw3R9A==",
12684 |       "dev": true,
12685 |       "license": "Apache-2.0",
12686 |       "bin": {
12687 |         "tsc": "bin/tsc",
12688 |         "tsserver": "bin/tsserver"
12689 |       },
12690 |       "engines": {
12691 |         "node": ">=14.17"
12692 |       }
12693 |     },
12694 |     "node_modules/typescript-json-schema": {
12695 |       "version": "0.65.1",
12696 |       "resolved": "https://registry.npmjs.org/typescript-json-schema/-/typescript-json-schema-0.65.1.tgz",
12697 |       "integrity": "sha512-tuGH7ff2jPaUYi6as3lHyHcKpSmXIqN7/mu50x3HlYn0EHzLpmt3nplZ7EuhUkO0eqDRc9GqWNkfjgBPIS9kxg==",
12698 |       "dev": true,
12699 |       "license": "BSD-3-Clause",
12700 |       "dependencies": {
12701 |         "@types/json-schema": "^7.0.9",
12702 |         "@types/node": "^18.11.9",
12703 |         "glob": "^7.1.7",
12704 |         "path-equal": "^1.2.5",
12705 |         "safe-stable-stringify": "^2.2.0",
12706 |         "ts-node": "^10.9.1",
12707 |         "typescript": "~5.5.0",
12708 |         "yargs": "^17.1.1"
12709 |       },
12710 |       "bin": {
12711 |         "typescript-json-schema": "bin/typescript-json-schema"
12712 |       }
12713 |     },
12714 |     "node_modules/typescript-json-schema/node_modules/@types/node": {
12715 |       "version": "18.19.122",
12716 |       "resolved": "https://registry.npmjs.org/@types/node/-/node-18.19.122.tgz",
12717 |       "integrity": "sha512-yzegtT82dwTNEe/9y+CM8cgb42WrUfMMCg2QqSddzO1J6uPmBD7qKCZ7dOHZP2Yrpm/kb0eqdNMn2MUyEiqBmA==",
12718 |       "dev": true,
12719 |       "license": "MIT",
12720 |       "dependencies": {
12721 |         "undici-types": "~5.26.4"
12722 |       }
12723 |     },
12724 |     "node_modules/typescript-json-schema/node_modules/glob": {
12725 |       "version": "7.2.3",
12726 |       "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
12727 |       "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
12728 |       "deprecated": "Glob versions prior to v9 are no longer supported",
12729 |       "dev": true,
12730 |       "license": "ISC",
12731 |       "dependencies": {
12732 |         "fs.realpath": "^1.0.0",
12733 |         "inflight": "^1.0.4",
12734 |         "inherits": "2",
12735 |         "minimatch": "^3.1.1",
12736 |         "once": "^1.3.0",
12737 |         "path-is-absolute": "^1.0.0"
12738 |       },
12739 |       "engines": {
12740 |         "node": "*"
12741 |       },
12742 |       "funding": {
12743 |         "url": "https://github.com/sponsors/isaacs"
12744 |       }
12745 |     },
12746 |     "node_modules/typescript-json-schema/node_modules/minimatch": {
12747 |       "version": "3.1.2",
12748 |       "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
12749 |       "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
12750 |       "dev": true,
12751 |       "license": "ISC",
12752 |       "dependencies": {
12753 |         "brace-expansion": "^1.1.7"
12754 |       },
12755 |       "engines": {
12756 |         "node": "*"
12757 |       }
12758 |     },
12759 |     "node_modules/typescript-json-schema/node_modules/safe-stable-stringify": {
12760 |       "version": "2.5.0",
12761 |       "resolved": "https://registry.npmjs.org/safe-stable-stringify/-/safe-stable-stringify-2.5.0.tgz",
12762 |       "integrity": "sha512-b3rppTKm9T+PsVCBEOUR46GWI7fdOs00VKZ1+9c1EWDaDMvjQc6tUwuFyIprgGgTcWoVHSKrU8H31ZHA2e0RHA==",
12763 |       "dev": true,
12764 |       "license": "MIT",
12765 |       "engines": {
12766 |         "node": ">=10"
12767 |       }
12768 |     },
12769 |     "node_modules/typescript-json-schema/node_modules/typescript": {
12770 |       "version": "5.5.4",
12771 |       "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.5.4.tgz",
12772 |       "integrity": "sha512-Mtq29sKDAEYP7aljRgtPOpTvOfbwRWlS6dPRzwjdE+C0R4brX/GUyhHSecbHMFLNBLcJIPt9nl9yG5TZ1weH+Q==",
12773 |       "dev": true,
12774 |       "license": "Apache-2.0",
12775 |       "bin": {
12776 |         "tsc": "bin/tsc",
12777 |         "tsserver": "bin/tsserver"
12778 |       },
12779 |       "engines": {
12780 |         "node": ">=14.17"
12781 |       }
12782 |     },
12783 |     "node_modules/typescript-json-schema/node_modules/undici-types": {
12784 |       "version": "5.26.5",
12785 |       "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz",
12786 |       "integrity": "sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==",
12787 |       "dev": true,
12788 |       "license": "MIT"
12789 |     },
12790 |     "node_modules/uc.micro": {
12791 |       "version": "2.1.0",
12792 |       "resolved": "https://registry.npmjs.org/uc.micro/-/uc.micro-2.1.0.tgz",
12793 |       "integrity": "sha512-ARDJmphmdvUk6Glw7y9DQ2bFkKBHwQHLi2lsaH6PPmz/Ka9sFOBsBluozhDltWmnv9u/cF6Rt87znRTPV+yp/A==",
12794 |       "dev": true,
12795 |       "license": "MIT"
12796 |     },
12797 |     "node_modules/unbox-primitive": {
12798 |       "version": "1.1.0",
12799 |       "resolved": "https://registry.npmjs.org/unbox-primitive/-/unbox-primitive-1.1.0.tgz",
12800 |       "integrity": "sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==",
12801 |       "dev": true,
12802 |       "license": "MIT",
12803 |       "dependencies": {
12804 |         "call-bound": "^1.0.3",
12805 |         "has-bigints": "^1.0.2",
12806 |         "has-symbols": "^1.1.0",
12807 |         "which-boxed-primitive": "^1.1.1"
12808 |       },
12809 |       "engines": {
12810 |         "node": ">= 0.4"
12811 |       },
12812 |       "funding": {
12813 |         "url": "https://github.com/sponsors/ljharb"
12814 |       }
12815 |     },
12816 |     "node_modules/unbzip2-stream": {
12817 |       "version": "1.4.3",
12818 |       "resolved": "https://registry.npmjs.org/unbzip2-stream/-/unbzip2-stream-1.4.3.tgz",
12819 |       "integrity": "sha512-mlExGW4w71ebDJviH16lQLtZS32VKqsSfk80GCfUlwT/4/hNRFsoscrF/c++9xinkMzECL1uL9DDwXqFWkruPg==",
12820 |       "dev": true,
12821 |       "license": "MIT",
12822 |       "dependencies": {
12823 |         "buffer": "^5.2.1",
12824 |         "through": "^2.3.8"
12825 |       }
12826 |     },
12827 |     "node_modules/undici-types": {
12828 |       "version": "7.10.0",
12829 |       "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-7.10.0.tgz",
12830 |       "integrity": "sha512-t5Fy/nfn+14LuOc2KNYg75vZqClpAiqscVvMygNnlsHBFpSXdJaYtXMcdNLpl/Qvc3P2cB3s6lOV51nqsFq4ag==",
12831 |       "dev": true,
12832 |       "license": "MIT"
12833 |     },
12834 |     "node_modules/unified": {
12835 |       "version": "11.0.5",
12836 |       "resolved": "https://registry.npmjs.org/unified/-/unified-11.0.5.tgz",
12837 |       "integrity": "sha512-xKvGhPWw3k84Qjh8bI3ZeJjqnyadK+GEFtazSfZv/rKeTkTjOJho6mFqh2SM96iIcZokxiOpg78GazTSg8+KHA==",
12838 |       "dev": true,
12839 |       "license": "MIT",
12840 |       "dependencies": {
12841 |         "@types/unist": "^3.0.0",
12842 |         "bail": "^2.0.0",
12843 |         "devlop": "^1.0.0",
12844 |         "extend": "^3.0.0",
12845 |         "is-plain-obj": "^4.0.0",
12846 |         "trough": "^2.0.0",
12847 |         "vfile": "^6.0.0"
12848 |       },
12849 |       "funding": {
12850 |         "type": "opencollective",
12851 |         "url": "https://opencollective.com/unified"
12852 |       }
12853 |     },
12854 |     "node_modules/unist-builder": {
12855 |       "version": "4.0.0",
12856 |       "resolved": "https://registry.npmjs.org/unist-builder/-/unist-builder-4.0.0.tgz",
12857 |       "integrity": "sha512-wmRFnH+BLpZnTKpc5L7O67Kac89s9HMrtELpnNaE6TAobq5DTZZs5YaTQfAZBA9bFPECx2uVAPO31c+GVug8mg==",
12858 |       "dev": true,
12859 |       "license": "MIT",
12860 |       "dependencies": {
12861 |         "@types/unist": "^3.0.0"
12862 |       },
12863 |       "funding": {
12864 |         "type": "opencollective",
12865 |         "url": "https://opencollective.com/unified"
12866 |       }
12867 |     },
12868 |     "node_modules/unist-util-find-after": {
12869 |       "version": "5.0.0",
12870 |       "resolved": "https://registry.npmjs.org/unist-util-find-after/-/unist-util-find-after-5.0.0.tgz",
12871 |       "integrity": "sha512-amQa0Ep2m6hE2g72AugUItjbuM8X8cGQnFoHk0pGfrFeT9GZhzN5SW8nRsiGKK7Aif4CrACPENkA6P/Lw6fHGQ==",
12872 |       "dev": true,
12873 |       "license": "MIT",
12874 |       "dependencies": {
12875 |         "@types/unist": "^3.0.0",
12876 |         "unist-util-is": "^6.0.0"
12877 |       },
12878 |       "funding": {
12879 |         "type": "opencollective",
12880 |         "url": "https://opencollective.com/unified"
12881 |       }
12882 |     },
12883 |     "node_modules/unist-util-is": {
12884 |       "version": "6.0.0",
12885 |       "resolved": "https://registry.npmjs.org/unist-util-is/-/unist-util-is-6.0.0.tgz",
12886 |       "integrity": "sha512-2qCTHimwdxLfz+YzdGfkqNlH0tLi9xjTnHddPmJwtIG9MGsdbutfTc4P+haPD7l7Cjxf/WZj+we5qfVPvvxfYw==",
12887 |       "dev": true,
12888 |       "license": "MIT",
12889 |       "dependencies": {
12890 |         "@types/unist": "^3.0.0"
12891 |       },
12892 |       "funding": {
12893 |         "type": "opencollective",
12894 |         "url": "https://opencollective.com/unified"
12895 |       }
12896 |     },
12897 |     "node_modules/unist-util-map": {
12898 |       "version": "4.0.0",
12899 |       "resolved": "https://registry.npmjs.org/unist-util-map/-/unist-util-map-4.0.0.tgz",
12900 |       "integrity": "sha512-HJs1tpkSmRJUzj6fskQrS5oYhBYlmtcvy4SepdDEEsL04FjBrgF0Mgggvxc1/qGBGgW7hRh9+UBK1aqTEnBpIA==",
12901 |       "dev": true,
12902 |       "license": "MIT",
12903 |       "dependencies": {
12904 |         "@types/unist": "^3.0.0"
12905 |       },
12906 |       "funding": {
12907 |         "type": "opencollective",
12908 |         "url": "https://opencollective.com/unified"
12909 |       }
12910 |     },
12911 |     "node_modules/unist-util-modify-children": {
12912 |       "version": "4.0.0",
12913 |       "resolved": "https://registry.npmjs.org/unist-util-modify-children/-/unist-util-modify-children-4.0.0.tgz",
12914 |       "integrity": "sha512-+tdN5fGNddvsQdIzUF3Xx82CU9sMM+fA0dLgR9vOmT0oPT2jH+P1nd5lSqfCfXAw+93NhcXNY2qqvTUtE4cQkw==",
12915 |       "dev": true,
12916 |       "license": "MIT",
12917 |       "dependencies": {
12918 |         "@types/unist": "^3.0.0",
12919 |         "array-iterate": "^2.0.0"
12920 |       },
12921 |       "funding": {
12922 |         "type": "opencollective",
12923 |         "url": "https://opencollective.com/unified"
12924 |       }
12925 |     },
12926 |     "node_modules/unist-util-position": {
12927 |       "version": "5.0.0",
12928 |       "resolved": "https://registry.npmjs.org/unist-util-position/-/unist-util-position-5.0.0.tgz",
12929 |       "integrity": "sha512-fucsC7HjXvkB5R3kTCO7kUjRdrS0BJt3M/FPxmHMBOm8JQi2BsHAHFsy27E0EolP8rp0NzXsJ+jNPyDWvOJZPA==",
12930 |       "dev": true,
12931 |       "license": "MIT",
12932 |       "dependencies": {
12933 |         "@types/unist": "^3.0.0"
12934 |       },
12935 |       "funding": {
12936 |         "type": "opencollective",
12937 |         "url": "https://opencollective.com/unified"
12938 |       }
12939 |     },
12940 |     "node_modules/unist-util-position-from-estree": {
12941 |       "version": "2.0.0",
12942 |       "resolved": "https://registry.npmjs.org/unist-util-position-from-estree/-/unist-util-position-from-estree-2.0.0.tgz",
12943 |       "integrity": "sha512-KaFVRjoqLyF6YXCbVLNad/eS4+OfPQQn2yOd7zF/h5T/CSL2v8NpN6a5TPvtbXthAGw5nG+PuTtq+DdIZr+cRQ==",
12944 |       "dev": true,
12945 |       "license": "MIT",
12946 |       "dependencies": {
12947 |         "@types/unist": "^3.0.0"
12948 |       },
12949 |       "funding": {
12950 |         "type": "opencollective",
12951 |         "url": "https://opencollective.com/unified"
12952 |       }
12953 |     },
12954 |     "node_modules/unist-util-remove": {
12955 |       "version": "4.0.0",
12956 |       "resolved": "https://registry.npmjs.org/unist-util-remove/-/unist-util-remove-4.0.0.tgz",
12957 |       "integrity": "sha512-b4gokeGId57UVRX/eVKej5gXqGlc9+trkORhFJpu9raqZkZhU0zm8Doi05+HaiBsMEIJowL+2WtQ5ItjsngPXg==",
12958 |       "dev": true,
12959 |       "license": "MIT",
12960 |       "dependencies": {
12961 |         "@types/unist": "^3.0.0",
12962 |         "unist-util-is": "^6.0.0",
12963 |         "unist-util-visit-parents": "^6.0.0"
12964 |       },
12965 |       "funding": {
12966 |         "type": "opencollective",
12967 |         "url": "https://opencollective.com/unified"
12968 |       }
12969 |     },
12970 |     "node_modules/unist-util-remove-position": {
12971 |       "version": "5.0.0",
12972 |       "resolved": "https://registry.npmjs.org/unist-util-remove-position/-/unist-util-remove-position-5.0.0.tgz",
12973 |       "integrity": "sha512-Hp5Kh3wLxv0PHj9m2yZhhLt58KzPtEYKQQ4yxfYFEO7EvHwzyDYnduhHnY1mDxoqr7VUwVuHXk9RXKIiYS1N8Q==",
12974 |       "dev": true,
12975 |       "license": "MIT",
12976 |       "dependencies": {
12977 |         "@types/unist": "^3.0.0",
12978 |         "unist-util-visit": "^5.0.0"
12979 |       },
12980 |       "funding": {
12981 |         "type": "opencollective",
12982 |         "url": "https://opencollective.com/unified"
12983 |       }
12984 |     },
12985 |     "node_modules/unist-util-stringify-position": {
12986 |       "version": "4.0.0",
12987 |       "resolved": "https://registry.npmjs.org/unist-util-stringify-position/-/unist-util-stringify-position-4.0.0.tgz",
12988 |       "integrity": "sha512-0ASV06AAoKCDkS2+xw5RXJywruurpbC4JZSm7nr7MOt1ojAzvyyaO+UxZf18j8FCF6kmzCZKcAgN/yu2gm2XgQ==",
12989 |       "dev": true,
12990 |       "license": "MIT",
12991 |       "dependencies": {
12992 |         "@types/unist": "^3.0.0"
12993 |       },
12994 |       "funding": {
12995 |         "type": "opencollective",
12996 |         "url": "https://opencollective.com/unified"
12997 |       }
12998 |     },
12999 |     "node_modules/unist-util-visit": {
13000 |       "version": "5.0.0",
13001 |       "resolved": "https://registry.npmjs.org/unist-util-visit/-/unist-util-visit-5.0.0.tgz",
13002 |       "integrity": "sha512-MR04uvD+07cwl/yhVuVWAtw+3GOR/knlL55Nd/wAdblk27GCVt3lqpTivy/tkJcZoNPzTwS1Y+KMojlLDhoTzg==",
13003 |       "dev": true,
13004 |       "license": "MIT",
13005 |       "dependencies": {
13006 |         "@types/unist": "^3.0.0",
13007 |         "unist-util-is": "^6.0.0",
13008 |         "unist-util-visit-parents": "^6.0.0"
13009 |       },
13010 |       "funding": {
13011 |         "type": "opencollective",
13012 |         "url": "https://opencollective.com/unified"
13013 |       }
13014 |     },
13015 |     "node_modules/unist-util-visit-children": {
13016 |       "version": "3.0.0",
13017 |       "resolved": "https://registry.npmjs.org/unist-util-visit-children/-/unist-util-visit-children-3.0.0.tgz",
13018 |       "integrity": "sha512-RgmdTfSBOg04sdPcpTSD1jzoNBjt9a80/ZCzp5cI9n1qPzLZWF9YdvWGN2zmTumP1HWhXKdUWexjy/Wy/lJ7tA==",
13019 |       "dev": true,
13020 |       "license": "MIT",
13021 |       "dependencies": {
13022 |         "@types/unist": "^3.0.0"
13023 |       },
13024 |       "funding": {
13025 |         "type": "opencollective",
13026 |         "url": "https://opencollective.com/unified"
13027 |       }
13028 |     },
13029 |     "node_modules/unist-util-visit-parents": {
13030 |       "version": "6.0.1",
13031 |       "resolved": "https://registry.npmjs.org/unist-util-visit-parents/-/unist-util-visit-parents-6.0.1.tgz",
13032 |       "integrity": "sha512-L/PqWzfTP9lzzEa6CKs0k2nARxTdZduw3zyh8d2NVBnsyvHjSX4TWse388YrrQKbvI8w20fGjGlhgT96WwKykw==",
13033 |       "dev": true,
13034 |       "license": "MIT",
13035 |       "dependencies": {
13036 |         "@types/unist": "^3.0.0",
13037 |         "unist-util-is": "^6.0.0"
13038 |       },
13039 |       "funding": {
13040 |         "type": "opencollective",
13041 |         "url": "https://opencollective.com/unified"
13042 |       }
13043 |     },
13044 |     "node_modules/universalify": {
13045 |       "version": "2.0.1",
13046 |       "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
13047 |       "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
13048 |       "dev": true,
13049 |       "license": "MIT",
13050 |       "engines": {
13051 |         "node": ">= 10.0.0"
13052 |       }
13053 |     },
13054 |     "node_modules/unpipe": {
13055 |       "version": "1.0.0",
13056 |       "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
13057 |       "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
13058 |       "dev": true,
13059 |       "license": "MIT",
13060 |       "engines": {
13061 |         "node": ">= 0.8"
13062 |       }
13063 |     },
13064 |     "node_modules/urijs": {
13065 |       "version": "1.19.11",
13066 |       "resolved": "https://registry.npmjs.org/urijs/-/urijs-1.19.11.tgz",
13067 |       "integrity": "sha512-HXgFDgDommxn5/bIv0cnQZsPhHDA90NPHD6+c/v21U5+Sx5hoP8+dP9IZXBU1gIfvdRfhG8cel9QNPeionfcCQ==",
13068 |       "dev": true,
13069 |       "license": "MIT"
13070 |     },
13071 |     "node_modules/urlpattern-polyfill": {
13072 |       "version": "10.0.0",
13073 |       "resolved": "https://registry.npmjs.org/urlpattern-polyfill/-/urlpattern-polyfill-10.0.0.tgz",
13074 |       "integrity": "sha512-H/A06tKD7sS1O1X2SshBVeA5FLycRpjqiBeqGKmBwBDBy28EnRjORxTNe269KSSr5un5qyWi1iL61wLxpd+ZOg==",
13075 |       "dev": true,
13076 |       "license": "MIT"
13077 |     },
13078 |     "node_modules/util-deprecate": {
13079 |       "version": "1.0.2",
13080 |       "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
13081 |       "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
13082 |       "dev": true,
13083 |       "license": "MIT"
13084 |     },
13085 |     "node_modules/utility-types": {
13086 |       "version": "3.11.0",
13087 |       "resolved": "https://registry.npmjs.org/utility-types/-/utility-types-3.11.0.tgz",
13088 |       "integrity": "sha512-6Z7Ma2aVEWisaL6TvBCy7P8rm2LQoPv6dJ7ecIaIixHcwfbJ0x7mWdbcwlIM5IGQxPZSFYeqRCqlOOeKoJYMkw==",
13089 |       "dev": true,
13090 |       "license": "MIT",
13091 |       "engines": {
13092 |         "node": ">= 4"
13093 |       }
13094 |     },
13095 |     "node_modules/utils-merge": {
13096 |       "version": "1.0.1",
13097 |       "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
13098 |       "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
13099 |       "dev": true,
13100 |       "license": "MIT",
13101 |       "engines": {
13102 |         "node": ">= 0.4.0"
13103 |       }
13104 |     },
13105 |     "node_modules/v8-compile-cache-lib": {
13106 |       "version": "3.0.1",
13107 |       "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
13108 |       "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==",
13109 |       "dev": true,
13110 |       "license": "MIT"
13111 |     },
13112 |     "node_modules/vary": {
13113 |       "version": "1.1.2",
13114 |       "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
13115 |       "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
13116 |       "dev": true,
13117 |       "license": "MIT",
13118 |       "engines": {
13119 |         "node": ">= 0.8"
13120 |       }
13121 |     },
13122 |     "node_modules/vfile": {
13123 |       "version": "6.0.3",
13124 |       "resolved": "https://registry.npmjs.org/vfile/-/vfile-6.0.3.tgz",
13125 |       "integrity": "sha512-KzIbH/9tXat2u30jf+smMwFCsno4wHVdNmzFyL+T/L3UGqqk6JKfVqOFOZEpZSHADH1k40ab6NUIXZq422ov3Q==",
13126 |       "dev": true,
13127 |       "license": "MIT",
13128 |       "dependencies": {
13129 |         "@types/unist": "^3.0.0",
13130 |         "vfile-message": "^4.0.0"
13131 |       },
13132 |       "funding": {
13133 |         "type": "opencollective",
13134 |         "url": "https://opencollective.com/unified"
13135 |       }
13136 |     },
13137 |     "node_modules/vfile-location": {
13138 |       "version": "5.0.3",
13139 |       "resolved": "https://registry.npmjs.org/vfile-location/-/vfile-location-5.0.3.tgz",
13140 |       "integrity": "sha512-5yXvWDEgqeiYiBe1lbxYF7UMAIm/IcopxMHrMQDq3nvKcjPKIhZklUKL+AE7J7uApI4kwe2snsK+eI6UTj9EHg==",
13141 |       "dev": true,
13142 |       "license": "MIT",
13143 |       "dependencies": {
13144 |         "@types/unist": "^3.0.0",
13145 |         "vfile": "^6.0.0"
13146 |       },
13147 |       "funding": {
13148 |         "type": "opencollective",
13149 |         "url": "https://opencollective.com/unified"
13150 |       }
13151 |     },
13152 |     "node_modules/vfile-matter": {
13153 |       "version": "5.0.1",
13154 |       "resolved": "https://registry.npmjs.org/vfile-matter/-/vfile-matter-5.0.1.tgz",
13155 |       "integrity": "sha512-o6roP82AiX0XfkyTHyRCMXgHfltUNlXSEqCIS80f+mbAyiQBE2fxtDVMtseyytGx75sihiJFo/zR6r/4LTs2Cw==",
13156 |       "dev": true,
13157 |       "license": "MIT",
13158 |       "dependencies": {
13159 |         "vfile": "^6.0.0",
13160 |         "yaml": "^2.0.0"
13161 |       },
13162 |       "funding": {
13163 |         "type": "opencollective",
13164 |         "url": "https://opencollective.com/unified"
13165 |       }
13166 |     },
13167 |     "node_modules/vfile-message": {
13168 |       "version": "4.0.3",
13169 |       "resolved": "https://registry.npmjs.org/vfile-message/-/vfile-message-4.0.3.tgz",
13170 |       "integrity": "sha512-QTHzsGd1EhbZs4AsQ20JX1rC3cOlt/IWJruk893DfLRr57lcnOeMaWG4K0JrRta4mIJZKth2Au3mM3u03/JWKw==",
13171 |       "dev": true,
13172 |       "license": "MIT",
13173 |       "dependencies": {
13174 |         "@types/unist": "^3.0.0",
13175 |         "unist-util-stringify-position": "^4.0.0"
13176 |       },
13177 |       "funding": {
13178 |         "type": "opencollective",
13179 |         "url": "https://opencollective.com/unified"
13180 |       }
13181 |     },
13182 |     "node_modules/web-namespaces": {
13183 |       "version": "2.0.1",
13184 |       "resolved": "https://registry.npmjs.org/web-namespaces/-/web-namespaces-2.0.1.tgz",
13185 |       "integrity": "sha512-bKr1DkiNa2krS7qxNtdrtHAmzuYGFQLiQ13TsorsdT6ULTkPLKuu5+GsFpDlg6JFjUTwX2DyhMPG2be8uPrqsQ==",
13186 |       "dev": true,
13187 |       "license": "MIT",
13188 |       "funding": {
13189 |         "type": "github",
13190 |         "url": "https://github.com/sponsors/wooorm"
13191 |       }
13192 |     },
13193 |     "node_modules/webidl-conversions": {
13194 |       "version": "3.0.1",
13195 |       "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
13196 |       "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
13197 |       "dev": true,
13198 |       "license": "BSD-2-Clause"
13199 |     },
13200 |     "node_modules/whatwg-url": {
13201 |       "version": "5.0.0",
13202 |       "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
13203 |       "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
13204 |       "dev": true,
13205 |       "license": "MIT",
13206 |       "dependencies": {
13207 |         "tr46": "~0.0.3",
13208 |         "webidl-conversions": "^3.0.0"
13209 |       }
13210 |     },
13211 |     "node_modules/which": {
13212 |       "version": "2.0.2",
13213 |       "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
13214 |       "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
13215 |       "dev": true,
13216 |       "license": "ISC",
13217 |       "dependencies": {
13218 |         "isexe": "^2.0.0"
13219 |       },
13220 |       "bin": {
13221 |         "node-which": "bin/node-which"
13222 |       },
13223 |       "engines": {
13224 |         "node": ">= 8"
13225 |       }
13226 |     },
13227 |     "node_modules/which-boxed-primitive": {
13228 |       "version": "1.1.1",
13229 |       "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.1.1.tgz",
13230 |       "integrity": "sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==",
13231 |       "dev": true,
13232 |       "license": "MIT",
13233 |       "dependencies": {
13234 |         "is-bigint": "^1.1.0",
13235 |         "is-boolean-object": "^1.2.1",
13236 |         "is-number-object": "^1.1.1",
13237 |         "is-string": "^1.1.1",
13238 |         "is-symbol": "^1.1.1"
13239 |       },
13240 |       "engines": {
13241 |         "node": ">= 0.4"
13242 |       },
13243 |       "funding": {
13244 |         "url": "https://github.com/sponsors/ljharb"
13245 |       }
13246 |     },
13247 |     "node_modules/which-builtin-type": {
13248 |       "version": "1.2.1",
13249 |       "resolved": "https://registry.npmjs.org/which-builtin-type/-/which-builtin-type-1.2.1.tgz",
13250 |       "integrity": "sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==",
13251 |       "dev": true,
13252 |       "license": "MIT",
13253 |       "dependencies": {
13254 |         "call-bound": "^1.0.2",
13255 |         "function.prototype.name": "^1.1.6",
13256 |         "has-tostringtag": "^1.0.2",
13257 |         "is-async-function": "^2.0.0",
13258 |         "is-date-object": "^1.1.0",
13259 |         "is-finalizationregistry": "^1.1.0",
13260 |         "is-generator-function": "^1.0.10",
13261 |         "is-regex": "^1.2.1",
13262 |         "is-weakref": "^1.0.2",
13263 |         "isarray": "^2.0.5",
13264 |         "which-boxed-primitive": "^1.1.0",
13265 |         "which-collection": "^1.0.2",
13266 |         "which-typed-array": "^1.1.16"
13267 |       },
13268 |       "engines": {
13269 |         "node": ">= 0.4"
13270 |       },
13271 |       "funding": {
13272 |         "url": "https://github.com/sponsors/ljharb"
13273 |       }
13274 |     },
13275 |     "node_modules/which-collection": {
13276 |       "version": "1.0.2",
13277 |       "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
13278 |       "integrity": "sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==",
13279 |       "dev": true,
13280 |       "license": "MIT",
13281 |       "dependencies": {
13282 |         "is-map": "^2.0.3",
13283 |         "is-set": "^2.0.3",
13284 |         "is-weakmap": "^2.0.2",
13285 |         "is-weakset": "^2.0.3"
13286 |       },
13287 |       "engines": {
13288 |         "node": ">= 0.4"
13289 |       },
13290 |       "funding": {
13291 |         "url": "https://github.com/sponsors/ljharb"
13292 |       }
13293 |     },
13294 |     "node_modules/which-typed-array": {
13295 |       "version": "1.1.19",
13296 |       "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.19.tgz",
13297 |       "integrity": "sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==",
13298 |       "dev": true,
13299 |       "license": "MIT",
13300 |       "dependencies": {
13301 |         "available-typed-arrays": "^1.0.7",
13302 |         "call-bind": "^1.0.8",
13303 |         "call-bound": "^1.0.4",
13304 |         "for-each": "^0.3.5",
13305 |         "get-proto": "^1.0.1",
13306 |         "gopd": "^1.2.0",
13307 |         "has-tostringtag": "^1.0.2"
13308 |       },
13309 |       "engines": {
13310 |         "node": ">= 0.4"
13311 |       },
13312 |       "funding": {
13313 |         "url": "https://github.com/sponsors/ljharb"
13314 |       }
13315 |     },
13316 |     "node_modules/widest-line": {
13317 |       "version": "5.0.0",
13318 |       "resolved": "https://registry.npmjs.org/widest-line/-/widest-line-5.0.0.tgz",
13319 |       "integrity": "sha512-c9bZp7b5YtRj2wOe6dlj32MK+Bx/M/d+9VB2SHM1OtsUHR0aV0tdP6DWh/iMt0kWi1t5g1Iudu6hQRNd1A4PVA==",
13320 |       "dev": true,
13321 |       "license": "MIT",
13322 |       "dependencies": {
13323 |         "string-width": "^7.0.0"
13324 |       },
13325 |       "engines": {
13326 |         "node": ">=18"
13327 |       },
13328 |       "funding": {
13329 |         "url": "https://github.com/sponsors/sindresorhus"
13330 |       }
13331 |     },
13332 |     "node_modules/widest-line/node_modules/emoji-regex": {
13333 |       "version": "10.4.0",
13334 |       "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-10.4.0.tgz",
13335 |       "integrity": "sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw==",
13336 |       "dev": true,
13337 |       "license": "MIT"
13338 |     },
13339 |     "node_modules/widest-line/node_modules/string-width": {
13340 |       "version": "7.2.0",
13341 |       "resolved": "https://registry.npmjs.org/string-width/-/string-width-7.2.0.tgz",
13342 |       "integrity": "sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==",
13343 |       "dev": true,
13344 |       "license": "MIT",
13345 |       "dependencies": {
13346 |         "emoji-regex": "^10.3.0",
13347 |         "get-east-asian-width": "^1.0.0",
13348 |         "strip-ansi": "^7.1.0"
13349 |       },
13350 |       "engines": {
13351 |         "node": ">=18"
13352 |       },
13353 |       "funding": {
13354 |         "url": "https://github.com/sponsors/sindresorhus"
13355 |       }
13356 |     },
13357 |     "node_modules/wrap-ansi": {
13358 |       "version": "8.1.0",
13359 |       "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
13360 |       "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
13361 |       "dev": true,
13362 |       "license": "MIT",
13363 |       "dependencies": {
13364 |         "ansi-styles": "^6.1.0",
13365 |         "string-width": "^5.0.1",
13366 |         "strip-ansi": "^7.0.1"
13367 |       },
13368 |       "engines": {
13369 |         "node": ">=12"
13370 |       },
13371 |       "funding": {
13372 |         "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
13373 |       }
13374 |     },
13375 |     "node_modules/wrap-ansi-cjs": {
13376 |       "name": "wrap-ansi",
13377 |       "version": "7.0.0",
13378 |       "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
13379 |       "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
13380 |       "dev": true,
13381 |       "license": "MIT",
13382 |       "dependencies": {
13383 |         "ansi-styles": "^4.0.0",
13384 |         "string-width": "^4.1.0",
13385 |         "strip-ansi": "^6.0.0"
13386 |       },
13387 |       "engines": {
13388 |         "node": ">=10"
13389 |       },
13390 |       "funding": {
13391 |         "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
13392 |       }
13393 |     },
13394 |     "node_modules/wrap-ansi-cjs/node_modules/ansi-regex": {
13395 |       "version": "5.0.1",
13396 |       "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
13397 |       "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
13398 |       "dev": true,
13399 |       "license": "MIT",
13400 |       "engines": {
13401 |         "node": ">=8"
13402 |       }
13403 |     },
13404 |     "node_modules/wrap-ansi-cjs/node_modules/ansi-styles": {
13405 |       "version": "4.3.0",
13406 |       "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
13407 |       "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
13408 |       "dev": true,
13409 |       "license": "MIT",
13410 |       "dependencies": {
13411 |         "color-convert": "^2.0.1"
13412 |       },
13413 |       "engines": {
13414 |         "node": ">=8"
13415 |       },
13416 |       "funding": {
13417 |         "url": "https://github.com/chalk/ansi-styles?sponsor=1"
13418 |       }
13419 |     },
13420 |     "node_modules/wrap-ansi-cjs/node_modules/emoji-regex": {
13421 |       "version": "8.0.0",
13422 |       "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
13423 |       "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
13424 |       "dev": true,
13425 |       "license": "MIT"
13426 |     },
13427 |     "node_modules/wrap-ansi-cjs/node_modules/is-fullwidth-code-point": {
13428 |       "version": "3.0.0",
13429 |       "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
13430 |       "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
13431 |       "dev": true,
13432 |       "license": "MIT",
13433 |       "engines": {
13434 |         "node": ">=8"
13435 |       }
13436 |     },
13437 |     "node_modules/wrap-ansi-cjs/node_modules/string-width": {
13438 |       "version": "4.2.3",
13439 |       "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
13440 |       "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
13441 |       "dev": true,
13442 |       "license": "MIT",
13443 |       "dependencies": {
13444 |         "emoji-regex": "^8.0.0",
13445 |         "is-fullwidth-code-point": "^3.0.0",
13446 |         "strip-ansi": "^6.0.1"
13447 |       },
13448 |       "engines": {
13449 |         "node": ">=8"
13450 |       }
13451 |     },
13452 |     "node_modules/wrap-ansi-cjs/node_modules/strip-ansi": {
13453 |       "version": "6.0.1",
13454 |       "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
13455 |       "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
13456 |       "dev": true,
13457 |       "license": "MIT",
13458 |       "dependencies": {
13459 |         "ansi-regex": "^5.0.1"
13460 |       },
13461 |       "engines": {
13462 |         "node": ">=8"
13463 |       }
13464 |     },
13465 |     "node_modules/wrappy": {
13466 |       "version": "1.0.2",
13467 |       "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
13468 |       "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
13469 |       "dev": true,
13470 |       "license": "ISC"
13471 |     },
13472 |     "node_modules/ws": {
13473 |       "version": "8.18.3",
13474 |       "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.3.tgz",
13475 |       "integrity": "sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==",
13476 |       "dev": true,
13477 |       "license": "MIT",
13478 |       "engines": {
13479 |         "node": ">=10.0.0"
13480 |       },
13481 |       "peerDependencies": {
13482 |         "bufferutil": "^4.0.1",
13483 |         "utf-8-validate": ">=5.0.2"
13484 |       },
13485 |       "peerDependenciesMeta": {
13486 |         "bufferutil": {
13487 |           "optional": true
13488 |         },
13489 |         "utf-8-validate": {
13490 |           "optional": true
13491 |         }
13492 |       }
13493 |     },
13494 |     "node_modules/xml2js": {
13495 |       "version": "0.6.2",
13496 |       "resolved": "https://registry.npmjs.org/xml2js/-/xml2js-0.6.2.tgz",
13497 |       "integrity": "sha512-T4rieHaC1EXcES0Kxxj4JWgaUQHDk+qwHcYOCFHfiwKz7tOVPLq7Hjq9dM1WCMhylqMEfP7hMcOIChvotiZegA==",
13498 |       "dev": true,
13499 |       "license": "MIT",
13500 |       "dependencies": {
13501 |         "sax": ">=0.6.0",
13502 |         "xmlbuilder": "~11.0.0"
13503 |       },
13504 |       "engines": {
13505 |         "node": ">=4.0.0"
13506 |       }
13507 |     },
13508 |     "node_modules/xmlbuilder": {
13509 |       "version": "11.0.1",
13510 |       "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-11.0.1.tgz",
13511 |       "integrity": "sha512-fDlsI/kFEx7gLvbecc0/ohLG50fugQp8ryHzMTuW9vSa1GJ0XYWKnhsUx7oie3G98+r56aTQIUB4kht42R3JvA==",
13512 |       "dev": true,
13513 |       "license": "MIT",
13514 |       "engines": {
13515 |         "node": ">=4.0"
13516 |       }
13517 |     },
13518 |     "node_modules/y18n": {
13519 |       "version": "5.0.8",
13520 |       "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
13521 |       "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
13522 |       "dev": true,
13523 |       "license": "ISC",
13524 |       "engines": {
13525 |         "node": ">=10"
13526 |       }
13527 |     },
13528 |     "node_modules/yallist": {
13529 |       "version": "4.0.0",
13530 |       "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
13531 |       "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
13532 |       "dev": true,
13533 |       "license": "ISC"
13534 |     },
13535 |     "node_modules/yaml": {
13536 |       "version": "2.8.1",
13537 |       "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.8.1.tgz",
13538 |       "integrity": "sha512-lcYcMxX2PO9XMGvAJkJ3OsNMw+/7FKes7/hgerGUYWIoWu5j/+YQqcZr5JnPZWzOsEBgMbSbiSTn/dv/69Mkpw==",
13539 |       "dev": true,
13540 |       "license": "ISC",
13541 |       "bin": {
13542 |         "yaml": "bin.mjs"
13543 |       },
13544 |       "engines": {
13545 |         "node": ">= 14.6"
13546 |       }
13547 |     },
13548 |     "node_modules/yargs": {
13549 |       "version": "17.7.2",
13550 |       "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
13551 |       "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
13552 |       "dev": true,
13553 |       "license": "MIT",
13554 |       "dependencies": {
13555 |         "cliui": "^8.0.1",
13556 |         "escalade": "^3.1.1",
13557 |         "get-caller-file": "^2.0.5",
13558 |         "require-directory": "^2.1.1",
13559 |         "string-width": "^4.2.3",
13560 |         "y18n": "^5.0.5",
13561 |         "yargs-parser": "^21.1.1"
13562 |       },
13563 |       "engines": {
13564 |         "node": ">=12"
13565 |       }
13566 |     },
13567 |     "node_modules/yargs-parser": {
13568 |       "version": "21.1.1",
13569 |       "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
13570 |       "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
13571 |       "dev": true,
13572 |       "license": "ISC",
13573 |       "engines": {
13574 |         "node": ">=12"
13575 |       }
13576 |     },
13577 |     "node_modules/yargs/node_modules/ansi-regex": {
13578 |       "version": "5.0.1",
13579 |       "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
13580 |       "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
13581 |       "dev": true,
13582 |       "license": "MIT",
13583 |       "engines": {
13584 |         "node": ">=8"
13585 |       }
13586 |     },
13587 |     "node_modules/yargs/node_modules/emoji-regex": {
13588 |       "version": "8.0.0",
13589 |       "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
13590 |       "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
13591 |       "dev": true,
13592 |       "license": "MIT"
13593 |     },
13594 |     "node_modules/yargs/node_modules/is-fullwidth-code-point": {
13595 |       "version": "3.0.0",
13596 |       "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
13597 |       "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
13598 |       "dev": true,
13599 |       "license": "MIT",
13600 |       "engines": {
13601 |         "node": ">=8"
13602 |       }
13603 |     },
13604 |     "node_modules/yargs/node_modules/string-width": {
13605 |       "version": "4.2.3",
13606 |       "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
13607 |       "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
13608 |       "dev": true,
13609 |       "license": "MIT",
13610 |       "dependencies": {
13611 |         "emoji-regex": "^8.0.0",
13612 |         "is-fullwidth-code-point": "^3.0.0",
13613 |         "strip-ansi": "^6.0.1"
13614 |       },
13615 |       "engines": {
13616 |         "node": ">=8"
13617 |       }
13618 |     },
13619 |     "node_modules/yargs/node_modules/strip-ansi": {
13620 |       "version": "6.0.1",
13621 |       "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
13622 |       "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
13623 |       "dev": true,
13624 |       "license": "MIT",
13625 |       "dependencies": {
13626 |         "ansi-regex": "^5.0.1"
13627 |       },
13628 |       "engines": {
13629 |         "node": ">=8"
13630 |       }
13631 |     },
13632 |     "node_modules/yauzl": {
13633 |       "version": "2.10.0",
13634 |       "resolved": "https://registry.npmjs.org/yauzl/-/yauzl-2.10.0.tgz",
13635 |       "integrity": "sha512-p4a9I6X6nu6IhoGmBqAcbJy1mlC4j27vEPZX9F4L4/vZT3Lyq1VkFHw/V/PUcB9Buo+DG3iHkT0x3Qya58zc3g==",
13636 |       "dev": true,
13637 |       "license": "MIT",
13638 |       "dependencies": {
13639 |         "buffer-crc32": "~0.2.3",
13640 |         "fd-slicer": "~1.1.0"
13641 |       }
13642 |     },
13643 |     "node_modules/yn": {
13644 |       "version": "3.1.1",
13645 |       "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
13646 |       "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
13647 |       "dev": true,
13648 |       "license": "MIT",
13649 |       "engines": {
13650 |         "node": ">=6"
13651 |       }
13652 |     },
13653 |     "node_modules/yoctocolors-cjs": {
13654 |       "version": "2.1.2",
13655 |       "resolved": "https://registry.npmjs.org/yoctocolors-cjs/-/yoctocolors-cjs-2.1.2.tgz",
13656 |       "integrity": "sha512-cYVsTjKl8b+FrnidjibDWskAv7UKOfcwaVZdp/it9n1s9fU3IkgDbhdIRKCW4JDsAlECJY0ytoVPT3sK6kideA==",
13657 |       "dev": true,
13658 |       "license": "MIT",
13659 |       "engines": {
13660 |         "node": ">=18"
13661 |       },
13662 |       "funding": {
13663 |         "url": "https://github.com/sponsors/sindresorhus"
13664 |       }
13665 |     },
13666 |     "node_modules/yoga-layout": {
13667 |       "version": "3.2.1",
13668 |       "resolved": "https://registry.npmjs.org/yoga-layout/-/yoga-layout-3.2.1.tgz",
13669 |       "integrity": "sha512-0LPOt3AxKqMdFBZA3HBAt/t/8vIKq7VaQYbuA8WxCgung+p9TVyKRYdpvCb80HcdTN2NkbIKbhNwKUfm3tQywQ==",
13670 |       "dev": true,
13671 |       "license": "MIT"
13672 |     },
13673 |     "node_modules/zod": {
13674 |       "version": "3.25.76",
13675 |       "resolved": "https://registry.npmjs.org/zod/-/zod-3.25.76.tgz",
13676 |       "integrity": "sha512-gzUt/qt81nXsFGKIFcC3YnfEAx5NkunCfnDlvuBSSFS02bcXu4Lmea0AFIUwbLWxWPx3d9p8S5QoaujKcNQxcQ==",
13677 |       "dev": true,
13678 |       "license": "MIT",
13679 |       "funding": {
13680 |         "url": "https://github.com/sponsors/colinhacks"
13681 |       }
13682 |     },
13683 |     "node_modules/zod-to-json-schema": {
13684 |       "version": "3.24.6",
13685 |       "resolved": "https://registry.npmjs.org/zod-to-json-schema/-/zod-to-json-schema-3.24.6.tgz",
13686 |       "integrity": "sha512-h/z3PKvcTcTetyjl1fkj79MHNEjm+HpD6NXheWjzOekY7kV+lwDYnHw+ivHkijnCSMz1yJaWBD9vu/Fcmk+vEg==",
13687 |       "dev": true,
13688 |       "license": "ISC",
13689 |       "peerDependencies": {
13690 |         "zod": "^3.24.1"
13691 |       }
13692 |     },
13693 |     "node_modules/zwitch": {
13694 |       "version": "2.0.4",
13695 |       "resolved": "https://registry.npmjs.org/zwitch/-/zwitch-2.0.4.tgz",
13696 |       "integrity": "sha512-bXE4cR/kVZhKZX/RjPEflHaKVhUVl85noU3v6b8apfQEc1x4A+zBxjZ4lN8LqGd6WZ3dl98pY4o717VFmoPp+A==",
13697 |       "dev": true,
13698 |       "license": "MIT",
13699 |       "funding": {
13700 |         "type": "github",
13701 |         "url": "https://github.com/sponsors/wooorm"
13702 |       }
13703 |     }
13704 |   }
13705 | }
13706 | 


--------------------------------------------------------------------------------
/package.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "name": "@modelcontextprotocol/specification",
 3 |   "private": true,
 4 |   "version": "0.1.0",
 5 |   "description": "Model Context Protocol specification and protocol schema",
 6 |   "license": "MIT",
 7 |   "author": "Anthropic, PBC (https://anthropic.com)",
 8 |   "homepage": "https://modelcontextprotocol.io",
 9 |   "bugs": "https://github.com/modelcontextprotocol/specification/issues",
10 |   "engines": {
11 |     "node": ">=20"
12 |   },
13 |   "prettier": {
14 |     "overrides": [
15 |       {
16 |         "files": "*.{md,mdx}",
17 |         "options": {
18 |           "proseWrap": "preserve"
19 |         }
20 |       }
21 |     ]
22 |   },
23 |   "scripts": {
24 |     "check": "npm run check:schema && npm run check:docs",
25 |     "check:schema": "npm run check:schema:ts && npm run check:schema:json && npm run check:schema:md",
26 |     "check:schema:ts": "tsc",
27 |     "check:schema:json": "for f in schema/*/schema.ts; do typescript-json-schema --defaultNumberType integer --required --skipLibCheck \"$f\" \"*\" | cat | cmp \"${f%.ts}.json\" - || exit 1; done",
28 |     "check:schema:md": "for f in docs/specification/*/schema.mdx; do typedoc --entryPoints \"schema/$(basename -- $(dirname -- \"$f\"))/schema.ts\" | cmp \"$f\" - || exit 1; done",
29 |     "check:docs": "npm run check:docs:format && npm run check:docs:links",
30 |     "check:docs:format": "prettier --check \"**/*.{md,mdx}\"",
31 |     "check:docs:links": "cd docs && mintlify broken-links",
32 |     "generate:schema": "npm run generate:schema:json && npm run generate:schema:md",
33 |     "generate:schema:json": "for f in schema/*/schema.ts; do typescript-json-schema --defaultNumberType integer --required --skipLibCheck \"$f\" \"*\" -o \"${f%.ts}.json\"; done",
34 |     "generate:schema:md": "for f in docs/specification/*/schema.mdx; do typedoc --entryPoints \"schema/$(basename -- $(dirname -- \"$f\"))/schema.ts\" > \"$f\"; done",
35 |     "format": "prettier --write \"**/*.{md,mdx}\" --ignore \"docs/specification/*/schema.mdx\" ",
36 |     "serve:docs": "cd docs && mintlify dev",
37 |     "serve:blog": "cd blog && hugo serve"
38 |   },
39 |   "devDependencies": {
40 |     "ajv": "^8.17.1",
41 |     "ajv-formats": "^3.0.1",
42 |     "glob": "^11.0.0",
43 |     "mintlify": "^4.0",
44 |     "prettier": "^3.4.2",
45 |     "tsx": "^4.19.1",
46 |     "typedoc": "^0.28.7",
47 |     "typescript": "^5.6.2",
48 |     "typescript-json-schema": "^0.65.1"
49 |   },
50 |   "resolutions": {
51 |     "fast-json-patch": "^3.1.1"
52 |   }
53 | }
54 | 


--------------------------------------------------------------------------------
/schema/2024-11-05/schema.json:
--------------------------------------------------------------------------------
   1 | {
   2 |     "$schema": "http://json-schema.org/draft-07/schema#",
   3 |     "definitions": {
   4 |         "Annotated": {
   5 |             "description": "Base for objects that include optional annotations for the client. The client can use annotations to inform how objects are used or displayed",
   6 |             "properties": {
   7 |                 "annotations": {
   8 |                     "properties": {
   9 |                         "audience": {
  10 |                             "description": "Describes who the intended customer of this object or data is.\n\nIt can include multiple entries to indicate content useful for multiple audiences (e.g., `[\"user\", \"assistant\"]`).",
  11 |                             "items": {
  12 |                                 "$ref": "#/definitions/Role"
  13 |                             },
  14 |                             "type": "array"
  15 |                         },
  16 |                         "priority": {
  17 |                             "description": "Describes how important this data is for operating the server.\n\nA value of 1 means \"most important,\" and indicates that the data is\neffectively required, while 0 means \"least important,\" and indicates that\nthe data is entirely optional.",
  18 |                             "maximum": 1,
  19 |                             "minimum": 0,
  20 |                             "type": "number"
  21 |                         }
  22 |                     },
  23 |                     "type": "object"
  24 |                 }
  25 |             },
  26 |             "type": "object"
  27 |         },
  28 |         "BlobResourceContents": {
  29 |             "properties": {
  30 |                 "blob": {
  31 |                     "description": "A base64-encoded string representing the binary data of the item.",
  32 |                     "format": "byte",
  33 |                     "type": "string"
  34 |                 },
  35 |                 "mimeType": {
  36 |                     "description": "The MIME type of this resource, if known.",
  37 |                     "type": "string"
  38 |                 },
  39 |                 "uri": {
  40 |                     "description": "The URI of this resource.",
  41 |                     "format": "uri",
  42 |                     "type": "string"
  43 |                 }
  44 |             },
  45 |             "required": [
  46 |                 "blob",
  47 |                 "uri"
  48 |             ],
  49 |             "type": "object"
  50 |         },
  51 |         "CallToolRequest": {
  52 |             "description": "Used by the client to invoke a tool provided by the server.",
  53 |             "properties": {
  54 |                 "method": {
  55 |                     "const": "tools/call",
  56 |                     "type": "string"
  57 |                 },
  58 |                 "params": {
  59 |                     "properties": {
  60 |                         "arguments": {
  61 |                             "additionalProperties": {},
  62 |                             "type": "object"
  63 |                         },
  64 |                         "name": {
  65 |                             "type": "string"
  66 |                         }
  67 |                     },
  68 |                     "required": [
  69 |                         "name"
  70 |                     ],
  71 |                     "type": "object"
  72 |                 }
  73 |             },
  74 |             "required": [
  75 |                 "method",
  76 |                 "params"
  77 |             ],
  78 |             "type": "object"
  79 |         },
  80 |         "CallToolResult": {
  81 |             "description": "The server's response to a tool call.\n\nAny errors that originate from the tool SHOULD be reported inside the result\nobject, with `isError` set to true, _not_ as an MCP protocol-level error\nresponse. Otherwise, the LLM would not be able to see that an error occurred\nand self-correct.\n\nHowever, any errors in _finding_ the tool, an error indicating that the\nserver does not support tool calls, or any other exceptional conditions,\nshould be reported as an MCP error response.",
  82 |             "properties": {
  83 |                 "_meta": {
  84 |                     "additionalProperties": {},
  85 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
  86 |                     "type": "object"
  87 |                 },
  88 |                 "content": {
  89 |                     "items": {
  90 |                         "anyOf": [
  91 |                             {
  92 |                                 "$ref": "#/definitions/TextContent"
  93 |                             },
  94 |                             {
  95 |                                 "$ref": "#/definitions/ImageContent"
  96 |                             },
  97 |                             {
  98 |                                 "$ref": "#/definitions/EmbeddedResource"
  99 |                             }
 100 |                         ]
 101 |                     },
 102 |                     "type": "array"
 103 |                 },
 104 |                 "isError": {
 105 |                     "description": "Whether the tool call ended in an error.\n\nIf not set, this is assumed to be false (the call was successful).",
 106 |                     "type": "boolean"
 107 |                 }
 108 |             },
 109 |             "required": [
 110 |                 "content"
 111 |             ],
 112 |             "type": "object"
 113 |         },
 114 |         "CancelledNotification": {
 115 |             "description": "This notification can be sent by either side to indicate that it is cancelling a previously-issued request.\n\nThe request SHOULD still be in-flight, but due to communication latency, it is always possible that this notification MAY arrive after the request has already finished.\n\nThis notification indicates that the result will be unused, so any associated processing SHOULD cease.\n\nA client MUST NOT attempt to cancel its `initialize` request.",
 116 |             "properties": {
 117 |                 "method": {
 118 |                     "const": "notifications/cancelled",
 119 |                     "type": "string"
 120 |                 },
 121 |                 "params": {
 122 |                     "properties": {
 123 |                         "reason": {
 124 |                             "description": "An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.",
 125 |                             "type": "string"
 126 |                         },
 127 |                         "requestId": {
 128 |                             "$ref": "#/definitions/RequestId",
 129 |                             "description": "The ID of the request to cancel.\n\nThis MUST correspond to the ID of a request previously issued in the same direction."
 130 |                         }
 131 |                     },
 132 |                     "required": [
 133 |                         "requestId"
 134 |                     ],
 135 |                     "type": "object"
 136 |                 }
 137 |             },
 138 |             "required": [
 139 |                 "method",
 140 |                 "params"
 141 |             ],
 142 |             "type": "object"
 143 |         },
 144 |         "ClientCapabilities": {
 145 |             "description": "Capabilities a client may support. Known capabilities are defined here, in this schema, but this is not a closed set: any client can define its own, additional capabilities.",
 146 |             "properties": {
 147 |                 "experimental": {
 148 |                     "additionalProperties": {
 149 |                         "additionalProperties": true,
 150 |                         "properties": {},
 151 |                         "type": "object"
 152 |                     },
 153 |                     "description": "Experimental, non-standard capabilities that the client supports.",
 154 |                     "type": "object"
 155 |                 },
 156 |                 "roots": {
 157 |                     "description": "Present if the client supports listing roots.",
 158 |                     "properties": {
 159 |                         "listChanged": {
 160 |                             "description": "Whether the client supports notifications for changes to the roots list.",
 161 |                             "type": "boolean"
 162 |                         }
 163 |                     },
 164 |                     "type": "object"
 165 |                 },
 166 |                 "sampling": {
 167 |                     "additionalProperties": true,
 168 |                     "description": "Present if the client supports sampling from an LLM.",
 169 |                     "properties": {},
 170 |                     "type": "object"
 171 |                 }
 172 |             },
 173 |             "type": "object"
 174 |         },
 175 |         "ClientNotification": {
 176 |             "anyOf": [
 177 |                 {
 178 |                     "$ref": "#/definitions/CancelledNotification"
 179 |                 },
 180 |                 {
 181 |                     "$ref": "#/definitions/InitializedNotification"
 182 |                 },
 183 |                 {
 184 |                     "$ref": "#/definitions/ProgressNotification"
 185 |                 },
 186 |                 {
 187 |                     "$ref": "#/definitions/RootsListChangedNotification"
 188 |                 }
 189 |             ]
 190 |         },
 191 |         "ClientRequest": {
 192 |             "anyOf": [
 193 |                 {
 194 |                     "$ref": "#/definitions/InitializeRequest"
 195 |                 },
 196 |                 {
 197 |                     "$ref": "#/definitions/PingRequest"
 198 |                 },
 199 |                 {
 200 |                     "$ref": "#/definitions/ListResourcesRequest"
 201 |                 },
 202 |                 {
 203 |                     "$ref": "#/definitions/ListResourceTemplatesRequest"
 204 |                 },
 205 |                 {
 206 |                     "$ref": "#/definitions/ReadResourceRequest"
 207 |                 },
 208 |                 {
 209 |                     "$ref": "#/definitions/SubscribeRequest"
 210 |                 },
 211 |                 {
 212 |                     "$ref": "#/definitions/UnsubscribeRequest"
 213 |                 },
 214 |                 {
 215 |                     "$ref": "#/definitions/ListPromptsRequest"
 216 |                 },
 217 |                 {
 218 |                     "$ref": "#/definitions/GetPromptRequest"
 219 |                 },
 220 |                 {
 221 |                     "$ref": "#/definitions/ListToolsRequest"
 222 |                 },
 223 |                 {
 224 |                     "$ref": "#/definitions/CallToolRequest"
 225 |                 },
 226 |                 {
 227 |                     "$ref": "#/definitions/SetLevelRequest"
 228 |                 },
 229 |                 {
 230 |                     "$ref": "#/definitions/CompleteRequest"
 231 |                 }
 232 |             ]
 233 |         },
 234 |         "ClientResult": {
 235 |             "anyOf": [
 236 |                 {
 237 |                     "$ref": "#/definitions/Result"
 238 |                 },
 239 |                 {
 240 |                     "$ref": "#/definitions/CreateMessageResult"
 241 |                 },
 242 |                 {
 243 |                     "$ref": "#/definitions/ListRootsResult"
 244 |                 }
 245 |             ]
 246 |         },
 247 |         "CompleteRequest": {
 248 |             "description": "A request from the client to the server, to ask for completion options.",
 249 |             "properties": {
 250 |                 "method": {
 251 |                     "const": "completion/complete",
 252 |                     "type": "string"
 253 |                 },
 254 |                 "params": {
 255 |                     "properties": {
 256 |                         "argument": {
 257 |                             "description": "The argument's information",
 258 |                             "properties": {
 259 |                                 "name": {
 260 |                                     "description": "The name of the argument",
 261 |                                     "type": "string"
 262 |                                 },
 263 |                                 "value": {
 264 |                                     "description": "The value of the argument to use for completion matching.",
 265 |                                     "type": "string"
 266 |                                 }
 267 |                             },
 268 |                             "required": [
 269 |                                 "name",
 270 |                                 "value"
 271 |                             ],
 272 |                             "type": "object"
 273 |                         },
 274 |                         "ref": {
 275 |                             "anyOf": [
 276 |                                 {
 277 |                                     "$ref": "#/definitions/PromptReference"
 278 |                                 },
 279 |                                 {
 280 |                                     "$ref": "#/definitions/ResourceReference"
 281 |                                 }
 282 |                             ]
 283 |                         }
 284 |                     },
 285 |                     "required": [
 286 |                         "argument",
 287 |                         "ref"
 288 |                     ],
 289 |                     "type": "object"
 290 |                 }
 291 |             },
 292 |             "required": [
 293 |                 "method",
 294 |                 "params"
 295 |             ],
 296 |             "type": "object"
 297 |         },
 298 |         "CompleteResult": {
 299 |             "description": "The server's response to a completion/complete request",
 300 |             "properties": {
 301 |                 "_meta": {
 302 |                     "additionalProperties": {},
 303 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
 304 |                     "type": "object"
 305 |                 },
 306 |                 "completion": {
 307 |                     "properties": {
 308 |                         "hasMore": {
 309 |                             "description": "Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.",
 310 |                             "type": "boolean"
 311 |                         },
 312 |                         "total": {
 313 |                             "description": "The total number of completion options available. This can exceed the number of values actually sent in the response.",
 314 |                             "type": "integer"
 315 |                         },
 316 |                         "values": {
 317 |                             "description": "An array of completion values. Must not exceed 100 items.",
 318 |                             "items": {
 319 |                                 "type": "string"
 320 |                             },
 321 |                             "type": "array"
 322 |                         }
 323 |                     },
 324 |                     "required": [
 325 |                         "values"
 326 |                     ],
 327 |                     "type": "object"
 328 |                 }
 329 |             },
 330 |             "required": [
 331 |                 "completion"
 332 |             ],
 333 |             "type": "object"
 334 |         },
 335 |         "CreateMessageRequest": {
 336 |             "description": "A request from the server to sample an LLM via the client. The client has full discretion over which model to select. The client should also inform the user before beginning sampling, to allow them to inspect the request (human in the loop) and decide whether to approve it.",
 337 |             "properties": {
 338 |                 "method": {
 339 |                     "const": "sampling/createMessage",
 340 |                     "type": "string"
 341 |                 },
 342 |                 "params": {
 343 |                     "properties": {
 344 |                         "includeContext": {
 345 |                             "description": "A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.",
 346 |                             "enum": [
 347 |                                 "allServers",
 348 |                                 "none",
 349 |                                 "thisServer"
 350 |                             ],
 351 |                             "type": "string"
 352 |                         },
 353 |                         "maxTokens": {
 354 |                             "description": "The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.",
 355 |                             "type": "integer"
 356 |                         },
 357 |                         "messages": {
 358 |                             "items": {
 359 |                                 "$ref": "#/definitions/SamplingMessage"
 360 |                             },
 361 |                             "type": "array"
 362 |                         },
 363 |                         "metadata": {
 364 |                             "additionalProperties": true,
 365 |                             "description": "Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.",
 366 |                             "properties": {},
 367 |                             "type": "object"
 368 |                         },
 369 |                         "modelPreferences": {
 370 |                             "$ref": "#/definitions/ModelPreferences",
 371 |                             "description": "The server's preferences for which model to select. The client MAY ignore these preferences."
 372 |                         },
 373 |                         "stopSequences": {
 374 |                             "items": {
 375 |                                 "type": "string"
 376 |                             },
 377 |                             "type": "array"
 378 |                         },
 379 |                         "systemPrompt": {
 380 |                             "description": "An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.",
 381 |                             "type": "string"
 382 |                         },
 383 |                         "temperature": {
 384 |                             "type": "number"
 385 |                         }
 386 |                     },
 387 |                     "required": [
 388 |                         "maxTokens",
 389 |                         "messages"
 390 |                     ],
 391 |                     "type": "object"
 392 |                 }
 393 |             },
 394 |             "required": [
 395 |                 "method",
 396 |                 "params"
 397 |             ],
 398 |             "type": "object"
 399 |         },
 400 |         "CreateMessageResult": {
 401 |             "description": "The client's response to a sampling/create_message request from the server. The client should inform the user before returning the sampled message, to allow them to inspect the response (human in the loop) and decide whether to allow the server to see it.",
 402 |             "properties": {
 403 |                 "_meta": {
 404 |                     "additionalProperties": {},
 405 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
 406 |                     "type": "object"
 407 |                 },
 408 |                 "content": {
 409 |                     "anyOf": [
 410 |                         {
 411 |                             "$ref": "#/definitions/TextContent"
 412 |                         },
 413 |                         {
 414 |                             "$ref": "#/definitions/ImageContent"
 415 |                         }
 416 |                     ]
 417 |                 },
 418 |                 "model": {
 419 |                     "description": "The name of the model that generated the message.",
 420 |                     "type": "string"
 421 |                 },
 422 |                 "role": {
 423 |                     "$ref": "#/definitions/Role"
 424 |                 },
 425 |                 "stopReason": {
 426 |                     "description": "The reason why sampling stopped, if known.",
 427 |                     "type": "string"
 428 |                 }
 429 |             },
 430 |             "required": [
 431 |                 "content",
 432 |                 "model",
 433 |                 "role"
 434 |             ],
 435 |             "type": "object"
 436 |         },
 437 |         "Cursor": {
 438 |             "description": "An opaque token used to represent a cursor for pagination.",
 439 |             "type": "string"
 440 |         },
 441 |         "EmbeddedResource": {
 442 |             "description": "The contents of a resource, embedded into a prompt or tool call result.\n\nIt is up to the client how best to render embedded resources for the benefit\nof the LLM and/or the user.",
 443 |             "properties": {
 444 |                 "annotations": {
 445 |                     "properties": {
 446 |                         "audience": {
 447 |                             "description": "Describes who the intended customer of this object or data is.\n\nIt can include multiple entries to indicate content useful for multiple audiences (e.g., `[\"user\", \"assistant\"]`).",
 448 |                             "items": {
 449 |                                 "$ref": "#/definitions/Role"
 450 |                             },
 451 |                             "type": "array"
 452 |                         },
 453 |                         "priority": {
 454 |                             "description": "Describes how important this data is for operating the server.\n\nA value of 1 means \"most important,\" and indicates that the data is\neffectively required, while 0 means \"least important,\" and indicates that\nthe data is entirely optional.",
 455 |                             "maximum": 1,
 456 |                             "minimum": 0,
 457 |                             "type": "number"
 458 |                         }
 459 |                     },
 460 |                     "type": "object"
 461 |                 },
 462 |                 "resource": {
 463 |                     "anyOf": [
 464 |                         {
 465 |                             "$ref": "#/definitions/TextResourceContents"
 466 |                         },
 467 |                         {
 468 |                             "$ref": "#/definitions/BlobResourceContents"
 469 |                         }
 470 |                     ]
 471 |                 },
 472 |                 "type": {
 473 |                     "const": "resource",
 474 |                     "type": "string"
 475 |                 }
 476 |             },
 477 |             "required": [
 478 |                 "resource",
 479 |                 "type"
 480 |             ],
 481 |             "type": "object"
 482 |         },
 483 |         "EmptyResult": {
 484 |             "$ref": "#/definitions/Result"
 485 |         },
 486 |         "GetPromptRequest": {
 487 |             "description": "Used by the client to get a prompt provided by the server.",
 488 |             "properties": {
 489 |                 "method": {
 490 |                     "const": "prompts/get",
 491 |                     "type": "string"
 492 |                 },
 493 |                 "params": {
 494 |                     "properties": {
 495 |                         "arguments": {
 496 |                             "additionalProperties": {
 497 |                                 "type": "string"
 498 |                             },
 499 |                             "description": "Arguments to use for templating the prompt.",
 500 |                             "type": "object"
 501 |                         },
 502 |                         "name": {
 503 |                             "description": "The name of the prompt or prompt template.",
 504 |                             "type": "string"
 505 |                         }
 506 |                     },
 507 |                     "required": [
 508 |                         "name"
 509 |                     ],
 510 |                     "type": "object"
 511 |                 }
 512 |             },
 513 |             "required": [
 514 |                 "method",
 515 |                 "params"
 516 |             ],
 517 |             "type": "object"
 518 |         },
 519 |         "GetPromptResult": {
 520 |             "description": "The server's response to a prompts/get request from the client.",
 521 |             "properties": {
 522 |                 "_meta": {
 523 |                     "additionalProperties": {},
 524 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
 525 |                     "type": "object"
 526 |                 },
 527 |                 "description": {
 528 |                     "description": "An optional description for the prompt.",
 529 |                     "type": "string"
 530 |                 },
 531 |                 "messages": {
 532 |                     "items": {
 533 |                         "$ref": "#/definitions/PromptMessage"
 534 |                     },
 535 |                     "type": "array"
 536 |                 }
 537 |             },
 538 |             "required": [
 539 |                 "messages"
 540 |             ],
 541 |             "type": "object"
 542 |         },
 543 |         "ImageContent": {
 544 |             "description": "An image provided to or from an LLM.",
 545 |             "properties": {
 546 |                 "annotations": {
 547 |                     "properties": {
 548 |                         "audience": {
 549 |                             "description": "Describes who the intended customer of this object or data is.\n\nIt can include multiple entries to indicate content useful for multiple audiences (e.g., `[\"user\", \"assistant\"]`).",
 550 |                             "items": {
 551 |                                 "$ref": "#/definitions/Role"
 552 |                             },
 553 |                             "type": "array"
 554 |                         },
 555 |                         "priority": {
 556 |                             "description": "Describes how important this data is for operating the server.\n\nA value of 1 means \"most important,\" and indicates that the data is\neffectively required, while 0 means \"least important,\" and indicates that\nthe data is entirely optional.",
 557 |                             "maximum": 1,
 558 |                             "minimum": 0,
 559 |                             "type": "number"
 560 |                         }
 561 |                     },
 562 |                     "type": "object"
 563 |                 },
 564 |                 "data": {
 565 |                     "description": "The base64-encoded image data.",
 566 |                     "format": "byte",
 567 |                     "type": "string"
 568 |                 },
 569 |                 "mimeType": {
 570 |                     "description": "The MIME type of the image. Different providers may support different image types.",
 571 |                     "type": "string"
 572 |                 },
 573 |                 "type": {
 574 |                     "const": "image",
 575 |                     "type": "string"
 576 |                 }
 577 |             },
 578 |             "required": [
 579 |                 "data",
 580 |                 "mimeType",
 581 |                 "type"
 582 |             ],
 583 |             "type": "object"
 584 |         },
 585 |         "Implementation": {
 586 |             "description": "Describes the name and version of an MCP implementation.",
 587 |             "properties": {
 588 |                 "name": {
 589 |                     "type": "string"
 590 |                 },
 591 |                 "version": {
 592 |                     "type": "string"
 593 |                 }
 594 |             },
 595 |             "required": [
 596 |                 "name",
 597 |                 "version"
 598 |             ],
 599 |             "type": "object"
 600 |         },
 601 |         "InitializeRequest": {
 602 |             "description": "This request is sent from the client to the server when it first connects, asking it to begin initialization.",
 603 |             "properties": {
 604 |                 "method": {
 605 |                     "const": "initialize",
 606 |                     "type": "string"
 607 |                 },
 608 |                 "params": {
 609 |                     "properties": {
 610 |                         "capabilities": {
 611 |                             "$ref": "#/definitions/ClientCapabilities"
 612 |                         },
 613 |                         "clientInfo": {
 614 |                             "$ref": "#/definitions/Implementation"
 615 |                         },
 616 |                         "protocolVersion": {
 617 |                             "description": "The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.",
 618 |                             "type": "string"
 619 |                         }
 620 |                     },
 621 |                     "required": [
 622 |                         "capabilities",
 623 |                         "clientInfo",
 624 |                         "protocolVersion"
 625 |                     ],
 626 |                     "type": "object"
 627 |                 }
 628 |             },
 629 |             "required": [
 630 |                 "method",
 631 |                 "params"
 632 |             ],
 633 |             "type": "object"
 634 |         },
 635 |         "InitializeResult": {
 636 |             "description": "After receiving an initialize request from the client, the server sends this response.",
 637 |             "properties": {
 638 |                 "_meta": {
 639 |                     "additionalProperties": {},
 640 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
 641 |                     "type": "object"
 642 |                 },
 643 |                 "capabilities": {
 644 |                     "$ref": "#/definitions/ServerCapabilities"
 645 |                 },
 646 |                 "instructions": {
 647 |                     "description": "Instructions describing how to use the server and its features.\n\nThis can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a \"hint\" to the model. For example, this information MAY be added to the system prompt.",
 648 |                     "type": "string"
 649 |                 },
 650 |                 "protocolVersion": {
 651 |                     "description": "The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.",
 652 |                     "type": "string"
 653 |                 },
 654 |                 "serverInfo": {
 655 |                     "$ref": "#/definitions/Implementation"
 656 |                 }
 657 |             },
 658 |             "required": [
 659 |                 "capabilities",
 660 |                 "protocolVersion",
 661 |                 "serverInfo"
 662 |             ],
 663 |             "type": "object"
 664 |         },
 665 |         "InitializedNotification": {
 666 |             "description": "This notification is sent from the client to the server after initialization has finished.",
 667 |             "properties": {
 668 |                 "method": {
 669 |                     "const": "notifications/initialized",
 670 |                     "type": "string"
 671 |                 },
 672 |                 "params": {
 673 |                     "additionalProperties": {},
 674 |                     "properties": {
 675 |                         "_meta": {
 676 |                             "additionalProperties": {},
 677 |                             "description": "This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.",
 678 |                             "type": "object"
 679 |                         }
 680 |                     },
 681 |                     "type": "object"
 682 |                 }
 683 |             },
 684 |             "required": [
 685 |                 "method"
 686 |             ],
 687 |             "type": "object"
 688 |         },
 689 |         "JSONRPCError": {
 690 |             "description": "A response to a request that indicates an error occurred.",
 691 |             "properties": {
 692 |                 "error": {
 693 |                     "properties": {
 694 |                         "code": {
 695 |                             "description": "The error type that occurred.",
 696 |                             "type": "integer"
 697 |                         },
 698 |                         "data": {
 699 |                             "description": "Additional information about the error. The value of this member is defined by the sender (e.g. detailed error information, nested errors etc.)."
 700 |                         },
 701 |                         "message": {
 702 |                             "description": "A short description of the error. The message SHOULD be limited to a concise single sentence.",
 703 |                             "type": "string"
 704 |                         }
 705 |                     },
 706 |                     "required": [
 707 |                         "code",
 708 |                         "message"
 709 |                     ],
 710 |                     "type": "object"
 711 |                 },
 712 |                 "id": {
 713 |                     "$ref": "#/definitions/RequestId"
 714 |                 },
 715 |                 "jsonrpc": {
 716 |                     "const": "2.0",
 717 |                     "type": "string"
 718 |                 }
 719 |             },
 720 |             "required": [
 721 |                 "error",
 722 |                 "id",
 723 |                 "jsonrpc"
 724 |             ],
 725 |             "type": "object"
 726 |         },
 727 |         "JSONRPCMessage": {
 728 |             "anyOf": [
 729 |                 {
 730 |                     "$ref": "#/definitions/JSONRPCRequest"
 731 |                 },
 732 |                 {
 733 |                     "$ref": "#/definitions/JSONRPCNotification"
 734 |                 },
 735 |                 {
 736 |                     "$ref": "#/definitions/JSONRPCResponse"
 737 |                 },
 738 |                 {
 739 |                     "$ref": "#/definitions/JSONRPCError"
 740 |                 }
 741 |             ]
 742 |         },
 743 |         "JSONRPCNotification": {
 744 |             "description": "A notification which does not expect a response.",
 745 |             "properties": {
 746 |                 "jsonrpc": {
 747 |                     "const": "2.0",
 748 |                     "type": "string"
 749 |                 },
 750 |                 "method": {
 751 |                     "type": "string"
 752 |                 },
 753 |                 "params": {
 754 |                     "additionalProperties": {},
 755 |                     "properties": {
 756 |                         "_meta": {
 757 |                             "additionalProperties": {},
 758 |                             "description": "This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.",
 759 |                             "type": "object"
 760 |                         }
 761 |                     },
 762 |                     "type": "object"
 763 |                 }
 764 |             },
 765 |             "required": [
 766 |                 "jsonrpc",
 767 |                 "method"
 768 |             ],
 769 |             "type": "object"
 770 |         },
 771 |         "JSONRPCRequest": {
 772 |             "description": "A request that expects a response.",
 773 |             "properties": {
 774 |                 "id": {
 775 |                     "$ref": "#/definitions/RequestId"
 776 |                 },
 777 |                 "jsonrpc": {
 778 |                     "const": "2.0",
 779 |                     "type": "string"
 780 |                 },
 781 |                 "method": {
 782 |                     "type": "string"
 783 |                 },
 784 |                 "params": {
 785 |                     "additionalProperties": {},
 786 |                     "properties": {
 787 |                         "_meta": {
 788 |                             "properties": {
 789 |                                 "progressToken": {
 790 |                                     "$ref": "#/definitions/ProgressToken",
 791 |                                     "description": "If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications."
 792 |                                 }
 793 |                             },
 794 |                             "type": "object"
 795 |                         }
 796 |                     },
 797 |                     "type": "object"
 798 |                 }
 799 |             },
 800 |             "required": [
 801 |                 "id",
 802 |                 "jsonrpc",
 803 |                 "method"
 804 |             ],
 805 |             "type": "object"
 806 |         },
 807 |         "JSONRPCResponse": {
 808 |             "description": "A successful (non-error) response to a request.",
 809 |             "properties": {
 810 |                 "id": {
 811 |                     "$ref": "#/definitions/RequestId"
 812 |                 },
 813 |                 "jsonrpc": {
 814 |                     "const": "2.0",
 815 |                     "type": "string"
 816 |                 },
 817 |                 "result": {
 818 |                     "$ref": "#/definitions/Result"
 819 |                 }
 820 |             },
 821 |             "required": [
 822 |                 "id",
 823 |                 "jsonrpc",
 824 |                 "result"
 825 |             ],
 826 |             "type": "object"
 827 |         },
 828 |         "ListPromptsRequest": {
 829 |             "description": "Sent from the client to request a list of prompts and prompt templates the server has.",
 830 |             "properties": {
 831 |                 "method": {
 832 |                     "const": "prompts/list",
 833 |                     "type": "string"
 834 |                 },
 835 |                 "params": {
 836 |                     "properties": {
 837 |                         "cursor": {
 838 |                             "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
 839 |                             "type": "string"
 840 |                         }
 841 |                     },
 842 |                     "type": "object"
 843 |                 }
 844 |             },
 845 |             "required": [
 846 |                 "method"
 847 |             ],
 848 |             "type": "object"
 849 |         },
 850 |         "ListPromptsResult": {
 851 |             "description": "The server's response to a prompts/list request from the client.",
 852 |             "properties": {
 853 |                 "_meta": {
 854 |                     "additionalProperties": {},
 855 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
 856 |                     "type": "object"
 857 |                 },
 858 |                 "nextCursor": {
 859 |                     "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
 860 |                     "type": "string"
 861 |                 },
 862 |                 "prompts": {
 863 |                     "items": {
 864 |                         "$ref": "#/definitions/Prompt"
 865 |                     },
 866 |                     "type": "array"
 867 |                 }
 868 |             },
 869 |             "required": [
 870 |                 "prompts"
 871 |             ],
 872 |             "type": "object"
 873 |         },
 874 |         "ListResourceTemplatesRequest": {
 875 |             "description": "Sent from the client to request a list of resource templates the server has.",
 876 |             "properties": {
 877 |                 "method": {
 878 |                     "const": "resources/templates/list",
 879 |                     "type": "string"
 880 |                 },
 881 |                 "params": {
 882 |                     "properties": {
 883 |                         "cursor": {
 884 |                             "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
 885 |                             "type": "string"
 886 |                         }
 887 |                     },
 888 |                     "type": "object"
 889 |                 }
 890 |             },
 891 |             "required": [
 892 |                 "method"
 893 |             ],
 894 |             "type": "object"
 895 |         },
 896 |         "ListResourceTemplatesResult": {
 897 |             "description": "The server's response to a resources/templates/list request from the client.",
 898 |             "properties": {
 899 |                 "_meta": {
 900 |                     "additionalProperties": {},
 901 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
 902 |                     "type": "object"
 903 |                 },
 904 |                 "nextCursor": {
 905 |                     "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
 906 |                     "type": "string"
 907 |                 },
 908 |                 "resourceTemplates": {
 909 |                     "items": {
 910 |                         "$ref": "#/definitions/ResourceTemplate"
 911 |                     },
 912 |                     "type": "array"
 913 |                 }
 914 |             },
 915 |             "required": [
 916 |                 "resourceTemplates"
 917 |             ],
 918 |             "type": "object"
 919 |         },
 920 |         "ListResourcesRequest": {
 921 |             "description": "Sent from the client to request a list of resources the server has.",
 922 |             "properties": {
 923 |                 "method": {
 924 |                     "const": "resources/list",
 925 |                     "type": "string"
 926 |                 },
 927 |                 "params": {
 928 |                     "properties": {
 929 |                         "cursor": {
 930 |                             "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
 931 |                             "type": "string"
 932 |                         }
 933 |                     },
 934 |                     "type": "object"
 935 |                 }
 936 |             },
 937 |             "required": [
 938 |                 "method"
 939 |             ],
 940 |             "type": "object"
 941 |         },
 942 |         "ListResourcesResult": {
 943 |             "description": "The server's response to a resources/list request from the client.",
 944 |             "properties": {
 945 |                 "_meta": {
 946 |                     "additionalProperties": {},
 947 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
 948 |                     "type": "object"
 949 |                 },
 950 |                 "nextCursor": {
 951 |                     "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
 952 |                     "type": "string"
 953 |                 },
 954 |                 "resources": {
 955 |                     "items": {
 956 |                         "$ref": "#/definitions/Resource"
 957 |                     },
 958 |                     "type": "array"
 959 |                 }
 960 |             },
 961 |             "required": [
 962 |                 "resources"
 963 |             ],
 964 |             "type": "object"
 965 |         },
 966 |         "ListRootsRequest": {
 967 |             "description": "Sent from the server to request a list of root URIs from the client. Roots allow\nservers to ask for specific directories or files to operate on. A common example\nfor roots is providing a set of repositories or directories a server should operate\non.\n\nThis request is typically used when the server needs to understand the file system\nstructure or access specific locations that the client has permission to read from.",
 968 |             "properties": {
 969 |                 "method": {
 970 |                     "const": "roots/list",
 971 |                     "type": "string"
 972 |                 },
 973 |                 "params": {
 974 |                     "additionalProperties": {},
 975 |                     "properties": {
 976 |                         "_meta": {
 977 |                             "properties": {
 978 |                                 "progressToken": {
 979 |                                     "$ref": "#/definitions/ProgressToken",
 980 |                                     "description": "If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications."
 981 |                                 }
 982 |                             },
 983 |                             "type": "object"
 984 |                         }
 985 |                     },
 986 |                     "type": "object"
 987 |                 }
 988 |             },
 989 |             "required": [
 990 |                 "method"
 991 |             ],
 992 |             "type": "object"
 993 |         },
 994 |         "ListRootsResult": {
 995 |             "description": "The client's response to a roots/list request from the server.\nThis result contains an array of Root objects, each representing a root directory\nor file that the server can operate on.",
 996 |             "properties": {
 997 |                 "_meta": {
 998 |                     "additionalProperties": {},
 999 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
1000 |                     "type": "object"
1001 |                 },
1002 |                 "roots": {
1003 |                     "items": {
1004 |                         "$ref": "#/definitions/Root"
1005 |                     },
1006 |                     "type": "array"
1007 |                 }
1008 |             },
1009 |             "required": [
1010 |                 "roots"
1011 |             ],
1012 |             "type": "object"
1013 |         },
1014 |         "ListToolsRequest": {
1015 |             "description": "Sent from the client to request a list of tools the server has.",
1016 |             "properties": {
1017 |                 "method": {
1018 |                     "const": "tools/list",
1019 |                     "type": "string"
1020 |                 },
1021 |                 "params": {
1022 |                     "properties": {
1023 |                         "cursor": {
1024 |                             "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
1025 |                             "type": "string"
1026 |                         }
1027 |                     },
1028 |                     "type": "object"
1029 |                 }
1030 |             },
1031 |             "required": [
1032 |                 "method"
1033 |             ],
1034 |             "type": "object"
1035 |         },
1036 |         "ListToolsResult": {
1037 |             "description": "The server's response to a tools/list request from the client.",
1038 |             "properties": {
1039 |                 "_meta": {
1040 |                     "additionalProperties": {},
1041 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
1042 |                     "type": "object"
1043 |                 },
1044 |                 "nextCursor": {
1045 |                     "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
1046 |                     "type": "string"
1047 |                 },
1048 |                 "tools": {
1049 |                     "items": {
1050 |                         "$ref": "#/definitions/Tool"
1051 |                     },
1052 |                     "type": "array"
1053 |                 }
1054 |             },
1055 |             "required": [
1056 |                 "tools"
1057 |             ],
1058 |             "type": "object"
1059 |         },
1060 |         "LoggingLevel": {
1061 |             "description": "The severity of a log message.\n\nThese map to syslog message severities, as specified in RFC-5424:\nhttps://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1",
1062 |             "enum": [
1063 |                 "alert",
1064 |                 "critical",
1065 |                 "debug",
1066 |                 "emergency",
1067 |                 "error",
1068 |                 "info",
1069 |                 "notice",
1070 |                 "warning"
1071 |             ],
1072 |             "type": "string"
1073 |         },
1074 |         "LoggingMessageNotification": {
1075 |             "description": "Notification of a log message passed from server to client. If no logging/setLevel request has been sent from the client, the server MAY decide which messages to send automatically.",
1076 |             "properties": {
1077 |                 "method": {
1078 |                     "const": "notifications/message",
1079 |                     "type": "string"
1080 |                 },
1081 |                 "params": {
1082 |                     "properties": {
1083 |                         "data": {
1084 |                             "description": "The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here."
1085 |                         },
1086 |                         "level": {
1087 |                             "$ref": "#/definitions/LoggingLevel",
1088 |                             "description": "The severity of this log message."
1089 |                         },
1090 |                         "logger": {
1091 |                             "description": "An optional name of the logger issuing this message.",
1092 |                             "type": "string"
1093 |                         }
1094 |                     },
1095 |                     "required": [
1096 |                         "data",
1097 |                         "level"
1098 |                     ],
1099 |                     "type": "object"
1100 |                 }
1101 |             },
1102 |             "required": [
1103 |                 "method",
1104 |                 "params"
1105 |             ],
1106 |             "type": "object"
1107 |         },
1108 |         "ModelHint": {
1109 |             "description": "Hints to use for model selection.\n\nKeys not declared here are currently left unspecified by the spec and are up\nto the client to interpret.",
1110 |             "properties": {
1111 |                 "name": {
1112 |                     "description": "A hint for a model name.\n\nThe client SHOULD treat this as a substring of a model name; for example:\n - `claude-3-5-sonnet` should match `claude-3-5-sonnet-20241022`\n - `sonnet` should match `claude-3-5-sonnet-20241022`, `claude-3-sonnet-20240229`, etc.\n - `claude` should match any Claude model\n\nThe client MAY also map the string to a different provider's model name or a different model family, as long as it fills a similar niche; for example:\n - `gemini-1.5-flash` could match `claude-3-haiku-20240307`",
1113 |                     "type": "string"
1114 |                 }
1115 |             },
1116 |             "type": "object"
1117 |         },
1118 |         "ModelPreferences": {
1119 |             "description": "The server's preferences for model selection, requested of the client during sampling.\n\nBecause LLMs can vary along multiple dimensions, choosing the \"best\" model is\nrarely straightforward.  Different models excel in different areas—some are\nfaster but less capable, others are more capable but more expensive, and so\non. This interface allows servers to express their priorities across multiple\ndimensions to help clients make an appropriate selection for their use case.\n\nThese preferences are always advisory. The client MAY ignore them. It is also\nup to the client to decide how to interpret these preferences and how to\nbalance them against other considerations.",
1120 |             "properties": {
1121 |                 "costPriority": {
1122 |                     "description": "How much to prioritize cost when selecting a model. A value of 0 means cost\nis not important, while a value of 1 means cost is the most important\nfactor.",
1123 |                     "maximum": 1,
1124 |                     "minimum": 0,
1125 |                     "type": "number"
1126 |                 },
1127 |                 "hints": {
1128 |                     "description": "Optional hints to use for model selection.\n\nIf multiple hints are specified, the client MUST evaluate them in order\n(such that the first match is taken).\n\nThe client SHOULD prioritize these hints over the numeric priorities, but\nMAY still use the priorities to select from ambiguous matches.",
1129 |                     "items": {
1130 |                         "$ref": "#/definitions/ModelHint"
1131 |                     },
1132 |                     "type": "array"
1133 |                 },
1134 |                 "intelligencePriority": {
1135 |                     "description": "How much to prioritize intelligence and capabilities when selecting a\nmodel. A value of 0 means intelligence is not important, while a value of 1\nmeans intelligence is the most important factor.",
1136 |                     "maximum": 1,
1137 |                     "minimum": 0,
1138 |                     "type": "number"
1139 |                 },
1140 |                 "speedPriority": {
1141 |                     "description": "How much to prioritize sampling speed (latency) when selecting a model. A\nvalue of 0 means speed is not important, while a value of 1 means speed is\nthe most important factor.",
1142 |                     "maximum": 1,
1143 |                     "minimum": 0,
1144 |                     "type": "number"
1145 |                 }
1146 |             },
1147 |             "type": "object"
1148 |         },
1149 |         "Notification": {
1150 |             "properties": {
1151 |                 "method": {
1152 |                     "type": "string"
1153 |                 },
1154 |                 "params": {
1155 |                     "additionalProperties": {},
1156 |                     "properties": {
1157 |                         "_meta": {
1158 |                             "additionalProperties": {},
1159 |                             "description": "This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.",
1160 |                             "type": "object"
1161 |                         }
1162 |                     },
1163 |                     "type": "object"
1164 |                 }
1165 |             },
1166 |             "required": [
1167 |                 "method"
1168 |             ],
1169 |             "type": "object"
1170 |         },
1171 |         "PaginatedRequest": {
1172 |             "properties": {
1173 |                 "method": {
1174 |                     "type": "string"
1175 |                 },
1176 |                 "params": {
1177 |                     "properties": {
1178 |                         "cursor": {
1179 |                             "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
1180 |                             "type": "string"
1181 |                         }
1182 |                     },
1183 |                     "type": "object"
1184 |                 }
1185 |             },
1186 |             "required": [
1187 |                 "method"
1188 |             ],
1189 |             "type": "object"
1190 |         },
1191 |         "PaginatedResult": {
1192 |             "properties": {
1193 |                 "_meta": {
1194 |                     "additionalProperties": {},
1195 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
1196 |                     "type": "object"
1197 |                 },
1198 |                 "nextCursor": {
1199 |                     "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
1200 |                     "type": "string"
1201 |                 }
1202 |             },
1203 |             "type": "object"
1204 |         },
1205 |         "PingRequest": {
1206 |             "description": "A ping, issued by either the server or the client, to check that the other party is still alive. The receiver must promptly respond, or else may be disconnected.",
1207 |             "properties": {
1208 |                 "method": {
1209 |                     "const": "ping",
1210 |                     "type": "string"
1211 |                 },
1212 |                 "params": {
1213 |                     "additionalProperties": {},
1214 |                     "properties": {
1215 |                         "_meta": {
1216 |                             "properties": {
1217 |                                 "progressToken": {
1218 |                                     "$ref": "#/definitions/ProgressToken",
1219 |                                     "description": "If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications."
1220 |                                 }
1221 |                             },
1222 |                             "type": "object"
1223 |                         }
1224 |                     },
1225 |                     "type": "object"
1226 |                 }
1227 |             },
1228 |             "required": [
1229 |                 "method"
1230 |             ],
1231 |             "type": "object"
1232 |         },
1233 |         "ProgressNotification": {
1234 |             "description": "An out-of-band notification used to inform the receiver of a progress update for a long-running request.",
1235 |             "properties": {
1236 |                 "method": {
1237 |                     "const": "notifications/progress",
1238 |                     "type": "string"
1239 |                 },
1240 |                 "params": {
1241 |                     "properties": {
1242 |                         "progress": {
1243 |                             "description": "The progress thus far. This should increase every time progress is made, even if the total is unknown.",
1244 |                             "type": "number"
1245 |                         },
1246 |                         "progressToken": {
1247 |                             "$ref": "#/definitions/ProgressToken",
1248 |                             "description": "The progress token which was given in the initial request, used to associate this notification with the request that is proceeding."
1249 |                         },
1250 |                         "total": {
1251 |                             "description": "Total number of items to process (or total progress required), if known.",
1252 |                             "type": "number"
1253 |                         }
1254 |                     },
1255 |                     "required": [
1256 |                         "progress",
1257 |                         "progressToken"
1258 |                     ],
1259 |                     "type": "object"
1260 |                 }
1261 |             },
1262 |             "required": [
1263 |                 "method",
1264 |                 "params"
1265 |             ],
1266 |             "type": "object"
1267 |         },
1268 |         "ProgressToken": {
1269 |             "description": "A progress token, used to associate progress notifications with the original request.",
1270 |             "type": [
1271 |                 "string",
1272 |                 "integer"
1273 |             ]
1274 |         },
1275 |         "Prompt": {
1276 |             "description": "A prompt or prompt template that the server offers.",
1277 |             "properties": {
1278 |                 "arguments": {
1279 |                     "description": "A list of arguments to use for templating the prompt.",
1280 |                     "items": {
1281 |                         "$ref": "#/definitions/PromptArgument"
1282 |                     },
1283 |                     "type": "array"
1284 |                 },
1285 |                 "description": {
1286 |                     "description": "An optional description of what this prompt provides",
1287 |                     "type": "string"
1288 |                 },
1289 |                 "name": {
1290 |                     "description": "The name of the prompt or prompt template.",
1291 |                     "type": "string"
1292 |                 }
1293 |             },
1294 |             "required": [
1295 |                 "name"
1296 |             ],
1297 |             "type": "object"
1298 |         },
1299 |         "PromptArgument": {
1300 |             "description": "Describes an argument that a prompt can accept.",
1301 |             "properties": {
1302 |                 "description": {
1303 |                     "description": "A human-readable description of the argument.",
1304 |                     "type": "string"
1305 |                 },
1306 |                 "name": {
1307 |                     "description": "The name of the argument.",
1308 |                     "type": "string"
1309 |                 },
1310 |                 "required": {
1311 |                     "description": "Whether this argument must be provided.",
1312 |                     "type": "boolean"
1313 |                 }
1314 |             },
1315 |             "required": [
1316 |                 "name"
1317 |             ],
1318 |             "type": "object"
1319 |         },
1320 |         "PromptListChangedNotification": {
1321 |             "description": "An optional notification from the server to the client, informing it that the list of prompts it offers has changed. This may be issued by servers without any previous subscription from the client.",
1322 |             "properties": {
1323 |                 "method": {
1324 |                     "const": "notifications/prompts/list_changed",
1325 |                     "type": "string"
1326 |                 },
1327 |                 "params": {
1328 |                     "additionalProperties": {},
1329 |                     "properties": {
1330 |                         "_meta": {
1331 |                             "additionalProperties": {},
1332 |                             "description": "This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.",
1333 |                             "type": "object"
1334 |                         }
1335 |                     },
1336 |                     "type": "object"
1337 |                 }
1338 |             },
1339 |             "required": [
1340 |                 "method"
1341 |             ],
1342 |             "type": "object"
1343 |         },
1344 |         "PromptMessage": {
1345 |             "description": "Describes a message returned as part of a prompt.\n\nThis is similar to `SamplingMessage`, but also supports the embedding of\nresources from the MCP server.",
1346 |             "properties": {
1347 |                 "content": {
1348 |                     "anyOf": [
1349 |                         {
1350 |                             "$ref": "#/definitions/TextContent"
1351 |                         },
1352 |                         {
1353 |                             "$ref": "#/definitions/ImageContent"
1354 |                         },
1355 |                         {
1356 |                             "$ref": "#/definitions/EmbeddedResource"
1357 |                         }
1358 |                     ]
1359 |                 },
1360 |                 "role": {
1361 |                     "$ref": "#/definitions/Role"
1362 |                 }
1363 |             },
1364 |             "required": [
1365 |                 "content",
1366 |                 "role"
1367 |             ],
1368 |             "type": "object"
1369 |         },
1370 |         "PromptReference": {
1371 |             "description": "Identifies a prompt.",
1372 |             "properties": {
1373 |                 "name": {
1374 |                     "description": "The name of the prompt or prompt template",
1375 |                     "type": "string"
1376 |                 },
1377 |                 "type": {
1378 |                     "const": "ref/prompt",
1379 |                     "type": "string"
1380 |                 }
1381 |             },
1382 |             "required": [
1383 |                 "name",
1384 |                 "type"
1385 |             ],
1386 |             "type": "object"
1387 |         },
1388 |         "ReadResourceRequest": {
1389 |             "description": "Sent from the client to the server, to read a specific resource URI.",
1390 |             "properties": {
1391 |                 "method": {
1392 |                     "const": "resources/read",
1393 |                     "type": "string"
1394 |                 },
1395 |                 "params": {
1396 |                     "properties": {
1397 |                         "uri": {
1398 |                             "description": "The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.",
1399 |                             "format": "uri",
1400 |                             "type": "string"
1401 |                         }
1402 |                     },
1403 |                     "required": [
1404 |                         "uri"
1405 |                     ],
1406 |                     "type": "object"
1407 |                 }
1408 |             },
1409 |             "required": [
1410 |                 "method",
1411 |                 "params"
1412 |             ],
1413 |             "type": "object"
1414 |         },
1415 |         "ReadResourceResult": {
1416 |             "description": "The server's response to a resources/read request from the client.",
1417 |             "properties": {
1418 |                 "_meta": {
1419 |                     "additionalProperties": {},
1420 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
1421 |                     "type": "object"
1422 |                 },
1423 |                 "contents": {
1424 |                     "items": {
1425 |                         "anyOf": [
1426 |                             {
1427 |                                 "$ref": "#/definitions/TextResourceContents"
1428 |                             },
1429 |                             {
1430 |                                 "$ref": "#/definitions/BlobResourceContents"
1431 |                             }
1432 |                         ]
1433 |                     },
1434 |                     "type": "array"
1435 |                 }
1436 |             },
1437 |             "required": [
1438 |                 "contents"
1439 |             ],
1440 |             "type": "object"
1441 |         },
1442 |         "Request": {
1443 |             "properties": {
1444 |                 "method": {
1445 |                     "type": "string"
1446 |                 },
1447 |                 "params": {
1448 |                     "additionalProperties": {},
1449 |                     "properties": {
1450 |                         "_meta": {
1451 |                             "properties": {
1452 |                                 "progressToken": {
1453 |                                     "$ref": "#/definitions/ProgressToken",
1454 |                                     "description": "If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications."
1455 |                                 }
1456 |                             },
1457 |                             "type": "object"
1458 |                         }
1459 |                     },
1460 |                     "type": "object"
1461 |                 }
1462 |             },
1463 |             "required": [
1464 |                 "method"
1465 |             ],
1466 |             "type": "object"
1467 |         },
1468 |         "RequestId": {
1469 |             "description": "A uniquely identifying ID for a request in JSON-RPC.",
1470 |             "type": [
1471 |                 "string",
1472 |                 "integer"
1473 |             ]
1474 |         },
1475 |         "Resource": {
1476 |             "description": "A known resource that the server is capable of reading.",
1477 |             "properties": {
1478 |                 "annotations": {
1479 |                     "properties": {
1480 |                         "audience": {
1481 |                             "description": "Describes who the intended customer of this object or data is.\n\nIt can include multiple entries to indicate content useful for multiple audiences (e.g., `[\"user\", \"assistant\"]`).",
1482 |                             "items": {
1483 |                                 "$ref": "#/definitions/Role"
1484 |                             },
1485 |                             "type": "array"
1486 |                         },
1487 |                         "priority": {
1488 |                             "description": "Describes how important this data is for operating the server.\n\nA value of 1 means \"most important,\" and indicates that the data is\neffectively required, while 0 means \"least important,\" and indicates that\nthe data is entirely optional.",
1489 |                             "maximum": 1,
1490 |                             "minimum": 0,
1491 |                             "type": "number"
1492 |                         }
1493 |                     },
1494 |                     "type": "object"
1495 |                 },
1496 |                 "description": {
1497 |                     "description": "A description of what this resource represents.\n\nThis can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.",
1498 |                     "type": "string"
1499 |                 },
1500 |                 "mimeType": {
1501 |                     "description": "The MIME type of this resource, if known.",
1502 |                     "type": "string"
1503 |                 },
1504 |                 "name": {
1505 |                     "description": "A human-readable name for this resource.\n\nThis can be used by clients to populate UI elements.",
1506 |                     "type": "string"
1507 |                 },
1508 |                 "size": {
1509 |                     "description": "The size of the raw resource content, in bytes (i.e., before base64 encoding or any tokenization), if known.\n\nThis can be used by Hosts to display file sizes and estimate context window usage.",
1510 |                     "type": "integer"
1511 |                 },
1512 |                 "uri": {
1513 |                     "description": "The URI of this resource.",
1514 |                     "format": "uri",
1515 |                     "type": "string"
1516 |                 }
1517 |             },
1518 |             "required": [
1519 |                 "name",
1520 |                 "uri"
1521 |             ],
1522 |             "type": "object"
1523 |         },
1524 |         "ResourceContents": {
1525 |             "description": "The contents of a specific resource or sub-resource.",
1526 |             "properties": {
1527 |                 "mimeType": {
1528 |                     "description": "The MIME type of this resource, if known.",
1529 |                     "type": "string"
1530 |                 },
1531 |                 "uri": {
1532 |                     "description": "The URI of this resource.",
1533 |                     "format": "uri",
1534 |                     "type": "string"
1535 |                 }
1536 |             },
1537 |             "required": [
1538 |                 "uri"
1539 |             ],
1540 |             "type": "object"
1541 |         },
1542 |         "ResourceListChangedNotification": {
1543 |             "description": "An optional notification from the server to the client, informing it that the list of resources it can read from has changed. This may be issued by servers without any previous subscription from the client.",
1544 |             "properties": {
1545 |                 "method": {
1546 |                     "const": "notifications/resources/list_changed",
1547 |                     "type": "string"
1548 |                 },
1549 |                 "params": {
1550 |                     "additionalProperties": {},
1551 |                     "properties": {
1552 |                         "_meta": {
1553 |                             "additionalProperties": {},
1554 |                             "description": "This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.",
1555 |                             "type": "object"
1556 |                         }
1557 |                     },
1558 |                     "type": "object"
1559 |                 }
1560 |             },
1561 |             "required": [
1562 |                 "method"
1563 |             ],
1564 |             "type": "object"
1565 |         },
1566 |         "ResourceReference": {
1567 |             "description": "A reference to a resource or resource template definition.",
1568 |             "properties": {
1569 |                 "type": {
1570 |                     "const": "ref/resource",
1571 |                     "type": "string"
1572 |                 },
1573 |                 "uri": {
1574 |                     "description": "The URI or URI template of the resource.",
1575 |                     "format": "uri-template",
1576 |                     "type": "string"
1577 |                 }
1578 |             },
1579 |             "required": [
1580 |                 "type",
1581 |                 "uri"
1582 |             ],
1583 |             "type": "object"
1584 |         },
1585 |         "ResourceTemplate": {
1586 |             "description": "A template description for resources available on the server.",
1587 |             "properties": {
1588 |                 "annotations": {
1589 |                     "properties": {
1590 |                         "audience": {
1591 |                             "description": "Describes who the intended customer of this object or data is.\n\nIt can include multiple entries to indicate content useful for multiple audiences (e.g., `[\"user\", \"assistant\"]`).",
1592 |                             "items": {
1593 |                                 "$ref": "#/definitions/Role"
1594 |                             },
1595 |                             "type": "array"
1596 |                         },
1597 |                         "priority": {
1598 |                             "description": "Describes how important this data is for operating the server.\n\nA value of 1 means \"most important,\" and indicates that the data is\neffectively required, while 0 means \"least important,\" and indicates that\nthe data is entirely optional.",
1599 |                             "maximum": 1,
1600 |                             "minimum": 0,
1601 |                             "type": "number"
1602 |                         }
1603 |                     },
1604 |                     "type": "object"
1605 |                 },
1606 |                 "description": {
1607 |                     "description": "A description of what this template is for.\n\nThis can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.",
1608 |                     "type": "string"
1609 |                 },
1610 |                 "mimeType": {
1611 |                     "description": "The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.",
1612 |                     "type": "string"
1613 |                 },
1614 |                 "name": {
1615 |                     "description": "A human-readable name for the type of resource this template refers to.\n\nThis can be used by clients to populate UI elements.",
1616 |                     "type": "string"
1617 |                 },
1618 |                 "uriTemplate": {
1619 |                     "description": "A URI template (according to RFC 6570) that can be used to construct resource URIs.",
1620 |                     "format": "uri-template",
1621 |                     "type": "string"
1622 |                 }
1623 |             },
1624 |             "required": [
1625 |                 "name",
1626 |                 "uriTemplate"
1627 |             ],
1628 |             "type": "object"
1629 |         },
1630 |         "ResourceUpdatedNotification": {
1631 |             "description": "A notification from the server to the client, informing it that a resource has changed and may need to be read again. This should only be sent if the client previously sent a resources/subscribe request.",
1632 |             "properties": {
1633 |                 "method": {
1634 |                     "const": "notifications/resources/updated",
1635 |                     "type": "string"
1636 |                 },
1637 |                 "params": {
1638 |                     "properties": {
1639 |                         "uri": {
1640 |                             "description": "The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.",
1641 |                             "format": "uri",
1642 |                             "type": "string"
1643 |                         }
1644 |                     },
1645 |                     "required": [
1646 |                         "uri"
1647 |                     ],
1648 |                     "type": "object"
1649 |                 }
1650 |             },
1651 |             "required": [
1652 |                 "method",
1653 |                 "params"
1654 |             ],
1655 |             "type": "object"
1656 |         },
1657 |         "Result": {
1658 |             "additionalProperties": {},
1659 |             "properties": {
1660 |                 "_meta": {
1661 |                     "additionalProperties": {},
1662 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
1663 |                     "type": "object"
1664 |                 }
1665 |             },
1666 |             "type": "object"
1667 |         },
1668 |         "Role": {
1669 |             "description": "The sender or recipient of messages and data in a conversation.",
1670 |             "enum": [
1671 |                 "assistant",
1672 |                 "user"
1673 |             ],
1674 |             "type": "string"
1675 |         },
1676 |         "Root": {
1677 |             "description": "Represents a root directory or file that the server can operate on.",
1678 |             "properties": {
1679 |                 "name": {
1680 |                     "description": "An optional name for the root. This can be used to provide a human-readable\nidentifier for the root, which may be useful for display purposes or for\nreferencing the root in other parts of the application.",
1681 |                     "type": "string"
1682 |                 },
1683 |                 "uri": {
1684 |                     "description": "The URI identifying the root. This *must* start with file:// for now.\nThis restriction may be relaxed in future versions of the protocol to allow\nother URI schemes.",
1685 |                     "format": "uri",
1686 |                     "type": "string"
1687 |                 }
1688 |             },
1689 |             "required": [
1690 |                 "uri"
1691 |             ],
1692 |             "type": "object"
1693 |         },
1694 |         "RootsListChangedNotification": {
1695 |             "description": "A notification from the client to the server, informing it that the list of roots has changed.\nThis notification should be sent whenever the client adds, removes, or modifies any root.\nThe server should then request an updated list of roots using the ListRootsRequest.",
1696 |             "properties": {
1697 |                 "method": {
1698 |                     "const": "notifications/roots/list_changed",
1699 |                     "type": "string"
1700 |                 },
1701 |                 "params": {
1702 |                     "additionalProperties": {},
1703 |                     "properties": {
1704 |                         "_meta": {
1705 |                             "additionalProperties": {},
1706 |                             "description": "This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.",
1707 |                             "type": "object"
1708 |                         }
1709 |                     },
1710 |                     "type": "object"
1711 |                 }
1712 |             },
1713 |             "required": [
1714 |                 "method"
1715 |             ],
1716 |             "type": "object"
1717 |         },
1718 |         "SamplingMessage": {
1719 |             "description": "Describes a message issued to or received from an LLM API.",
1720 |             "properties": {
1721 |                 "content": {
1722 |                     "anyOf": [
1723 |                         {
1724 |                             "$ref": "#/definitions/TextContent"
1725 |                         },
1726 |                         {
1727 |                             "$ref": "#/definitions/ImageContent"
1728 |                         }
1729 |                     ]
1730 |                 },
1731 |                 "role": {
1732 |                     "$ref": "#/definitions/Role"
1733 |                 }
1734 |             },
1735 |             "required": [
1736 |                 "content",
1737 |                 "role"
1738 |             ],
1739 |             "type": "object"
1740 |         },
1741 |         "ServerCapabilities": {
1742 |             "description": "Capabilities that a server may support. Known capabilities are defined here, in this schema, but this is not a closed set: any server can define its own, additional capabilities.",
1743 |             "properties": {
1744 |                 "experimental": {
1745 |                     "additionalProperties": {
1746 |                         "additionalProperties": true,
1747 |                         "properties": {},
1748 |                         "type": "object"
1749 |                     },
1750 |                     "description": "Experimental, non-standard capabilities that the server supports.",
1751 |                     "type": "object"
1752 |                 },
1753 |                 "logging": {
1754 |                     "additionalProperties": true,
1755 |                     "description": "Present if the server supports sending log messages to the client.",
1756 |                     "properties": {},
1757 |                     "type": "object"
1758 |                 },
1759 |                 "prompts": {
1760 |                     "description": "Present if the server offers any prompt templates.",
1761 |                     "properties": {
1762 |                         "listChanged": {
1763 |                             "description": "Whether this server supports notifications for changes to the prompt list.",
1764 |                             "type": "boolean"
1765 |                         }
1766 |                     },
1767 |                     "type": "object"
1768 |                 },
1769 |                 "resources": {
1770 |                     "description": "Present if the server offers any resources to read.",
1771 |                     "properties": {
1772 |                         "listChanged": {
1773 |                             "description": "Whether this server supports notifications for changes to the resource list.",
1774 |                             "type": "boolean"
1775 |                         },
1776 |                         "subscribe": {
1777 |                             "description": "Whether this server supports subscribing to resource updates.",
1778 |                             "type": "boolean"
1779 |                         }
1780 |                     },
1781 |                     "type": "object"
1782 |                 },
1783 |                 "tools": {
1784 |                     "description": "Present if the server offers any tools to call.",
1785 |                     "properties": {
1786 |                         "listChanged": {
1787 |                             "description": "Whether this server supports notifications for changes to the tool list.",
1788 |                             "type": "boolean"
1789 |                         }
1790 |                     },
1791 |                     "type": "object"
1792 |                 }
1793 |             },
1794 |             "type": "object"
1795 |         },
1796 |         "ServerNotification": {
1797 |             "anyOf": [
1798 |                 {
1799 |                     "$ref": "#/definitions/CancelledNotification"
1800 |                 },
1801 |                 {
1802 |                     "$ref": "#/definitions/ProgressNotification"
1803 |                 },
1804 |                 {
1805 |                     "$ref": "#/definitions/ResourceListChangedNotification"
1806 |                 },
1807 |                 {
1808 |                     "$ref": "#/definitions/ResourceUpdatedNotification"
1809 |                 },
1810 |                 {
1811 |                     "$ref": "#/definitions/PromptListChangedNotification"
1812 |                 },
1813 |                 {
1814 |                     "$ref": "#/definitions/ToolListChangedNotification"
1815 |                 },
1816 |                 {
1817 |                     "$ref": "#/definitions/LoggingMessageNotification"
1818 |                 }
1819 |             ]
1820 |         },
1821 |         "ServerRequest": {
1822 |             "anyOf": [
1823 |                 {
1824 |                     "$ref": "#/definitions/PingRequest"
1825 |                 },
1826 |                 {
1827 |                     "$ref": "#/definitions/CreateMessageRequest"
1828 |                 },
1829 |                 {
1830 |                     "$ref": "#/definitions/ListRootsRequest"
1831 |                 }
1832 |             ]
1833 |         },
1834 |         "ServerResult": {
1835 |             "anyOf": [
1836 |                 {
1837 |                     "$ref": "#/definitions/Result"
1838 |                 },
1839 |                 {
1840 |                     "$ref": "#/definitions/InitializeResult"
1841 |                 },
1842 |                 {
1843 |                     "$ref": "#/definitions/ListResourcesResult"
1844 |                 },
1845 |                 {
1846 |                     "$ref": "#/definitions/ListResourceTemplatesResult"
1847 |                 },
1848 |                 {
1849 |                     "$ref": "#/definitions/ReadResourceResult"
1850 |                 },
1851 |                 {
1852 |                     "$ref": "#/definitions/ListPromptsResult"
1853 |                 },
1854 |                 {
1855 |                     "$ref": "#/definitions/GetPromptResult"
1856 |                 },
1857 |                 {
1858 |                     "$ref": "#/definitions/ListToolsResult"
1859 |                 },
1860 |                 {
1861 |                     "$ref": "#/definitions/CallToolResult"
1862 |                 },
1863 |                 {
1864 |                     "$ref": "#/definitions/CompleteResult"
1865 |                 }
1866 |             ]
1867 |         },
1868 |         "SetLevelRequest": {
1869 |             "description": "A request from the client to the server, to enable or adjust logging.",
1870 |             "properties": {
1871 |                 "method": {
1872 |                     "const": "logging/setLevel",
1873 |                     "type": "string"
1874 |                 },
1875 |                 "params": {
1876 |                     "properties": {
1877 |                         "level": {
1878 |                             "$ref": "#/definitions/LoggingLevel",
1879 |                             "description": "The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/message."
1880 |                         }
1881 |                     },
1882 |                     "required": [
1883 |                         "level"
1884 |                     ],
1885 |                     "type": "object"
1886 |                 }
1887 |             },
1888 |             "required": [
1889 |                 "method",
1890 |                 "params"
1891 |             ],
1892 |             "type": "object"
1893 |         },
1894 |         "SubscribeRequest": {
1895 |             "description": "Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.",
1896 |             "properties": {
1897 |                 "method": {
1898 |                     "const": "resources/subscribe",
1899 |                     "type": "string"
1900 |                 },
1901 |                 "params": {
1902 |                     "properties": {
1903 |                         "uri": {
1904 |                             "description": "The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.",
1905 |                             "format": "uri",
1906 |                             "type": "string"
1907 |                         }
1908 |                     },
1909 |                     "required": [
1910 |                         "uri"
1911 |                     ],
1912 |                     "type": "object"
1913 |                 }
1914 |             },
1915 |             "required": [
1916 |                 "method",
1917 |                 "params"
1918 |             ],
1919 |             "type": "object"
1920 |         },
1921 |         "TextContent": {
1922 |             "description": "Text provided to or from an LLM.",
1923 |             "properties": {
1924 |                 "annotations": {
1925 |                     "properties": {
1926 |                         "audience": {
1927 |                             "description": "Describes who the intended customer of this object or data is.\n\nIt can include multiple entries to indicate content useful for multiple audiences (e.g., `[\"user\", \"assistant\"]`).",
1928 |                             "items": {
1929 |                                 "$ref": "#/definitions/Role"
1930 |                             },
1931 |                             "type": "array"
1932 |                         },
1933 |                         "priority": {
1934 |                             "description": "Describes how important this data is for operating the server.\n\nA value of 1 means \"most important,\" and indicates that the data is\neffectively required, while 0 means \"least important,\" and indicates that\nthe data is entirely optional.",
1935 |                             "maximum": 1,
1936 |                             "minimum": 0,
1937 |                             "type": "number"
1938 |                         }
1939 |                     },
1940 |                     "type": "object"
1941 |                 },
1942 |                 "text": {
1943 |                     "description": "The text content of the message.",
1944 |                     "type": "string"
1945 |                 },
1946 |                 "type": {
1947 |                     "const": "text",
1948 |                     "type": "string"
1949 |                 }
1950 |             },
1951 |             "required": [
1952 |                 "text",
1953 |                 "type"
1954 |             ],
1955 |             "type": "object"
1956 |         },
1957 |         "TextResourceContents": {
1958 |             "properties": {
1959 |                 "mimeType": {
1960 |                     "description": "The MIME type of this resource, if known.",
1961 |                     "type": "string"
1962 |                 },
1963 |                 "text": {
1964 |                     "description": "The text of the item. This must only be set if the item can actually be represented as text (not binary data).",
1965 |                     "type": "string"
1966 |                 },
1967 |                 "uri": {
1968 |                     "description": "The URI of this resource.",
1969 |                     "format": "uri",
1970 |                     "type": "string"
1971 |                 }
1972 |             },
1973 |             "required": [
1974 |                 "text",
1975 |                 "uri"
1976 |             ],
1977 |             "type": "object"
1978 |         },
1979 |         "Tool": {
1980 |             "description": "Definition for a tool the client can call.",
1981 |             "properties": {
1982 |                 "description": {
1983 |                     "description": "A human-readable description of the tool.",
1984 |                     "type": "string"
1985 |                 },
1986 |                 "inputSchema": {
1987 |                     "description": "A JSON Schema object defining the expected parameters for the tool.",
1988 |                     "properties": {
1989 |                         "properties": {
1990 |                             "additionalProperties": {
1991 |                                 "additionalProperties": true,
1992 |                                 "properties": {},
1993 |                                 "type": "object"
1994 |                             },
1995 |                             "type": "object"
1996 |                         },
1997 |                         "required": {
1998 |                             "items": {
1999 |                                 "type": "string"
2000 |                             },
2001 |                             "type": "array"
2002 |                         },
2003 |                         "type": {
2004 |                             "const": "object",
2005 |                             "type": "string"
2006 |                         }
2007 |                     },
2008 |                     "required": [
2009 |                         "type"
2010 |                     ],
2011 |                     "type": "object"
2012 |                 },
2013 |                 "name": {
2014 |                     "description": "The name of the tool.",
2015 |                     "type": "string"
2016 |                 }
2017 |             },
2018 |             "required": [
2019 |                 "inputSchema",
2020 |                 "name"
2021 |             ],
2022 |             "type": "object"
2023 |         },
2024 |         "ToolListChangedNotification": {
2025 |             "description": "An optional notification from the server to the client, informing it that the list of tools it offers has changed. This may be issued by servers without any previous subscription from the client.",
2026 |             "properties": {
2027 |                 "method": {
2028 |                     "const": "notifications/tools/list_changed",
2029 |                     "type": "string"
2030 |                 },
2031 |                 "params": {
2032 |                     "additionalProperties": {},
2033 |                     "properties": {
2034 |                         "_meta": {
2035 |                             "additionalProperties": {},
2036 |                             "description": "This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.",
2037 |                             "type": "object"
2038 |                         }
2039 |                     },
2040 |                     "type": "object"
2041 |                 }
2042 |             },
2043 |             "required": [
2044 |                 "method"
2045 |             ],
2046 |             "type": "object"
2047 |         },
2048 |         "UnsubscribeRequest": {
2049 |             "description": "Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.",
2050 |             "properties": {
2051 |                 "method": {
2052 |                     "const": "resources/unsubscribe",
2053 |                     "type": "string"
2054 |                 },
2055 |                 "params": {
2056 |                     "properties": {
2057 |                         "uri": {
2058 |                             "description": "The URI of the resource to unsubscribe from.",
2059 |                             "format": "uri",
2060 |                             "type": "string"
2061 |                         }
2062 |                     },
2063 |                     "required": [
2064 |                         "uri"
2065 |                     ],
2066 |                     "type": "object"
2067 |                 }
2068 |             },
2069 |             "required": [
2070 |                 "method",
2071 |                 "params"
2072 |             ],
2073 |             "type": "object"
2074 |         }
2075 |     }
2076 | }
2077 | 
2078 | 


--------------------------------------------------------------------------------
/schema/2024-11-05/schema.ts:
--------------------------------------------------------------------------------
   1 | /* JSON-RPC types */
   2 | export type JSONRPCMessage =
   3 |   | JSONRPCRequest
   4 |   | JSONRPCNotification
   5 |   | JSONRPCResponse
   6 |   | JSONRPCError;
   7 | 
   8 | export const LATEST_PROTOCOL_VERSION = "2024-11-05";
   9 | export const JSONRPC_VERSION = "2.0";
  10 | 
  11 | /**
  12 |  * A progress token, used to associate progress notifications with the original request.
  13 |  */
  14 | export type ProgressToken = string | number;
  15 | 
  16 | /**
  17 |  * An opaque token used to represent a cursor for pagination.
  18 |  */
  19 | export type Cursor = string;
  20 | 
  21 | export interface Request {
  22 |   method: string;
  23 |   params?: {
  24 |     _meta?: {
  25 |       /**
  26 |        * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
  27 |        */
  28 |       progressToken?: ProgressToken;
  29 |     };
  30 |     [key: string]: unknown;
  31 |   };
  32 | }
  33 | 
  34 | export interface Notification {
  35 |   method: string;
  36 |   params?: {
  37 |     /**
  38 |      * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
  39 |      */
  40 |     _meta?: { [key: string]: unknown };
  41 |     [key: string]: unknown;
  42 |   };
  43 | }
  44 | 
  45 | export interface Result {
  46 |   /**
  47 |    * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  48 |    */
  49 |   _meta?: { [key: string]: unknown };
  50 |   [key: string]: unknown;
  51 | }
  52 | 
  53 | /**
  54 |  * A uniquely identifying ID for a request in JSON-RPC.
  55 |  */
  56 | export type RequestId = string | number;
  57 | 
  58 | /**
  59 |  * A request that expects a response.
  60 |  */
  61 | export interface JSONRPCRequest extends Request {
  62 |   jsonrpc: typeof JSONRPC_VERSION;
  63 |   id: RequestId;
  64 | }
  65 | 
  66 | /**
  67 |  * A notification which does not expect a response.
  68 |  */
  69 | export interface JSONRPCNotification extends Notification {
  70 |   jsonrpc: typeof JSONRPC_VERSION;
  71 | }
  72 | 
  73 | /**
  74 |  * A successful (non-error) response to a request.
  75 |  */
  76 | export interface JSONRPCResponse {
  77 |   jsonrpc: typeof JSONRPC_VERSION;
  78 |   id: RequestId;
  79 |   result: Result;
  80 | }
  81 | 
  82 | // Standard JSON-RPC error codes
  83 | export const PARSE_ERROR = -32700;
  84 | export const INVALID_REQUEST = -32600;
  85 | export const METHOD_NOT_FOUND = -32601;
  86 | export const INVALID_PARAMS = -32602;
  87 | export const INTERNAL_ERROR = -32603;
  88 | 
  89 | /**
  90 |  * A response to a request that indicates an error occurred.
  91 |  */
  92 | export interface JSONRPCError {
  93 |   jsonrpc: typeof JSONRPC_VERSION;
  94 |   id: RequestId;
  95 |   error: {
  96 |     /**
  97 |      * The error type that occurred.
  98 |      */
  99 |     code: number;
 100 |     /**
 101 |      * A short description of the error. The message SHOULD be limited to a concise single sentence.
 102 |      */
 103 |     message: string;
 104 |     /**
 105 |      * Additional information about the error. The value of this member is defined by the sender (e.g. detailed error information, nested errors etc.).
 106 |      */
 107 |     data?: unknown;
 108 |   };
 109 | }
 110 | 
 111 | /* Empty result */
 112 | /**
 113 |  * A response that indicates success but carries no data.
 114 |  */
 115 | export type EmptyResult = Result;
 116 | 
 117 | /* Cancellation */
 118 | /**
 119 |  * This notification can be sent by either side to indicate that it is cancelling a previously-issued request.
 120 |  *
 121 |  * The request SHOULD still be in-flight, but due to communication latency, it is always possible that this notification MAY arrive after the request has already finished.
 122 |  *
 123 |  * This notification indicates that the result will be unused, so any associated processing SHOULD cease.
 124 |  *
 125 |  * A client MUST NOT attempt to cancel its `initialize` request.
 126 |  */
 127 | export interface CancelledNotification extends Notification {
 128 |   method: "notifications/cancelled";
 129 |   params: {
 130 |     /**
 131 |      * The ID of the request to cancel.
 132 |      *
 133 |      * This MUST correspond to the ID of a request previously issued in the same direction.
 134 |      */
 135 |     requestId: RequestId;
 136 | 
 137 |     /**
 138 |      * An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.
 139 |      */
 140 |     reason?: string;
 141 |   };
 142 | }
 143 | 
 144 | /* Initialization */
 145 | /**
 146 |  * This request is sent from the client to the server when it first connects, asking it to begin initialization.
 147 |  */
 148 | export interface InitializeRequest extends Request {
 149 |   method: "initialize";
 150 |   params: {
 151 |     /**
 152 |      * The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.
 153 |      */
 154 |     protocolVersion: string;
 155 |     capabilities: ClientCapabilities;
 156 |     clientInfo: Implementation;
 157 |   };
 158 | }
 159 | 
 160 | /**
 161 |  * After receiving an initialize request from the client, the server sends this response.
 162 |  */
 163 | export interface InitializeResult extends Result {
 164 |   /**
 165 |    * The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.
 166 |    */
 167 |   protocolVersion: string;
 168 |   capabilities: ServerCapabilities;
 169 |   serverInfo: Implementation;
 170 |   /**
 171 |    * Instructions describing how to use the server and its features.
 172 |    *
 173 |    * This can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a "hint" to the model. For example, this information MAY be added to the system prompt.
 174 |    */
 175 |   instructions?: string;
 176 | }
 177 | 
 178 | /**
 179 |  * This notification is sent from the client to the server after initialization has finished.
 180 |  */
 181 | export interface InitializedNotification extends Notification {
 182 |   method: "notifications/initialized";
 183 | }
 184 | 
 185 | /**
 186 |  * Capabilities a client may support. Known capabilities are defined here, in this schema, but this is not a closed set: any client can define its own, additional capabilities.
 187 |  */
 188 | export interface ClientCapabilities {
 189 |   /**
 190 |    * Experimental, non-standard capabilities that the client supports.
 191 |    */
 192 |   experimental?: { [key: string]: object };
 193 |   /**
 194 |    * Present if the client supports listing roots.
 195 |    */
 196 |   roots?: {
 197 |     /**
 198 |      * Whether the client supports notifications for changes to the roots list.
 199 |      */
 200 |     listChanged?: boolean;
 201 |   };
 202 |   /**
 203 |    * Present if the client supports sampling from an LLM.
 204 |    */
 205 |   sampling?: object;
 206 | }
 207 | 
 208 | /**
 209 |  * Capabilities that a server may support. Known capabilities are defined here, in this schema, but this is not a closed set: any server can define its own, additional capabilities.
 210 |  */
 211 | export interface ServerCapabilities {
 212 |   /**
 213 |    * Experimental, non-standard capabilities that the server supports.
 214 |    */
 215 |   experimental?: { [key: string]: object };
 216 |   /**
 217 |    * Present if the server supports sending log messages to the client.
 218 |    */
 219 |   logging?: object;
 220 |   /**
 221 |    * Present if the server offers any prompt templates.
 222 |    */
 223 |   prompts?: {
 224 |     /**
 225 |      * Whether this server supports notifications for changes to the prompt list.
 226 |      */
 227 |     listChanged?: boolean;
 228 |   };
 229 |   /**
 230 |    * Present if the server offers any resources to read.
 231 |    */
 232 |   resources?: {
 233 |     /**
 234 |      * Whether this server supports subscribing to resource updates.
 235 |      */
 236 |     subscribe?: boolean;
 237 |     /**
 238 |      * Whether this server supports notifications for changes to the resource list.
 239 |      */
 240 |     listChanged?: boolean;
 241 |   };
 242 |   /**
 243 |    * Present if the server offers any tools to call.
 244 |    */
 245 |   tools?: {
 246 |     /**
 247 |      * Whether this server supports notifications for changes to the tool list.
 248 |      */
 249 |     listChanged?: boolean;
 250 |   };
 251 | }
 252 | 
 253 | /**
 254 |  * Describes the name and version of an MCP implementation.
 255 |  */
 256 | export interface Implementation {
 257 |   name: string;
 258 |   version: string;
 259 | }
 260 | 
 261 | /* Ping */
 262 | /**
 263 |  * A ping, issued by either the server or the client, to check that the other party is still alive. The receiver must promptly respond, or else may be disconnected.
 264 |  */
 265 | export interface PingRequest extends Request {
 266 |   method: "ping";
 267 | }
 268 | 
 269 | /* Progress notifications */
 270 | /**
 271 |  * An out-of-band notification used to inform the receiver of a progress update for a long-running request.
 272 |  */
 273 | export interface ProgressNotification extends Notification {
 274 |   method: "notifications/progress";
 275 |   params: {
 276 |     /**
 277 |      * The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.
 278 |      */
 279 |     progressToken: ProgressToken;
 280 |     /**
 281 |      * The progress thus far. This should increase every time progress is made, even if the total is unknown.
 282 |      *
 283 |      * @TJS-type number
 284 |      */
 285 |     progress: number;
 286 |     /**
 287 |      * Total number of items to process (or total progress required), if known.
 288 |      *
 289 |      * @TJS-type number
 290 |      */
 291 |     total?: number;
 292 |   };
 293 | }
 294 | 
 295 | /* Pagination */
 296 | export interface PaginatedRequest extends Request {
 297 |   params?: {
 298 |     /**
 299 |      * An opaque token representing the current pagination position.
 300 |      * If provided, the server should return results starting after this cursor.
 301 |      */
 302 |     cursor?: Cursor;
 303 |   };
 304 | }
 305 | 
 306 | export interface PaginatedResult extends Result {
 307 |   /**
 308 |    * An opaque token representing the pagination position after the last returned result.
 309 |    * If present, there may be more results available.
 310 |    */
 311 |   nextCursor?: Cursor;
 312 | }
 313 | 
 314 | /* Resources */
 315 | /**
 316 |  * Sent from the client to request a list of resources the server has.
 317 |  */
 318 | export interface ListResourcesRequest extends PaginatedRequest {
 319 |   method: "resources/list";
 320 | }
 321 | 
 322 | /**
 323 |  * The server's response to a resources/list request from the client.
 324 |  */
 325 | export interface ListResourcesResult extends PaginatedResult {
 326 |   resources: Resource[];
 327 | }
 328 | 
 329 | /**
 330 |  * Sent from the client to request a list of resource templates the server has.
 331 |  */
 332 | export interface ListResourceTemplatesRequest extends PaginatedRequest {
 333 |   method: "resources/templates/list";
 334 | }
 335 | 
 336 | /**
 337 |  * The server's response to a resources/templates/list request from the client.
 338 |  */
 339 | export interface ListResourceTemplatesResult extends PaginatedResult {
 340 |   resourceTemplates: ResourceTemplate[];
 341 | }
 342 | 
 343 | /**
 344 |  * Sent from the client to the server, to read a specific resource URI.
 345 |  */
 346 | export interface ReadResourceRequest extends Request {
 347 |   method: "resources/read";
 348 |   params: {
 349 |     /**
 350 |      * The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.
 351 |      *
 352 |      * @format uri
 353 |      */
 354 |     uri: string;
 355 |   };
 356 | }
 357 | 
 358 | /**
 359 |  * The server's response to a resources/read request from the client.
 360 |  */
 361 | export interface ReadResourceResult extends Result {
 362 |   contents: (TextResourceContents | BlobResourceContents)[];
 363 | }
 364 | 
 365 | /**
 366 |  * An optional notification from the server to the client, informing it that the list of resources it can read from has changed. This may be issued by servers without any previous subscription from the client.
 367 |  */
 368 | export interface ResourceListChangedNotification extends Notification {
 369 |   method: "notifications/resources/list_changed";
 370 | }
 371 | 
 372 | /**
 373 |  * Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.
 374 |  */
 375 | export interface SubscribeRequest extends Request {
 376 |   method: "resources/subscribe";
 377 |   params: {
 378 |     /**
 379 |      * The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.
 380 |      *
 381 |      * @format uri
 382 |      */
 383 |     uri: string;
 384 |   };
 385 | }
 386 | 
 387 | /**
 388 |  * Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.
 389 |  */
 390 | export interface UnsubscribeRequest extends Request {
 391 |   method: "resources/unsubscribe";
 392 |   params: {
 393 |     /**
 394 |      * The URI of the resource to unsubscribe from.
 395 |      *
 396 |      * @format uri
 397 |      */
 398 |     uri: string;
 399 |   };
 400 | }
 401 | 
 402 | /**
 403 |  * A notification from the server to the client, informing it that a resource has changed and may need to be read again. This should only be sent if the client previously sent a resources/subscribe request.
 404 |  */
 405 | export interface ResourceUpdatedNotification extends Notification {
 406 |   method: "notifications/resources/updated";
 407 |   params: {
 408 |     /**
 409 |      * The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.
 410 |      *
 411 |      * @format uri
 412 |      */
 413 |     uri: string;
 414 |   };
 415 | }
 416 | 
 417 | /**
 418 |  * A known resource that the server is capable of reading.
 419 |  */
 420 | export interface Resource extends Annotated {
 421 |   /**
 422 |    * The URI of this resource.
 423 |    *
 424 |    * @format uri
 425 |    */
 426 |   uri: string;
 427 | 
 428 |   /**
 429 |    * A human-readable name for this resource.
 430 |    *
 431 |    * This can be used by clients to populate UI elements.
 432 |    */
 433 |   name: string;
 434 | 
 435 |   /**
 436 |    * A description of what this resource represents.
 437 |    *
 438 |    * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
 439 |    */
 440 |   description?: string;
 441 | 
 442 |   /**
 443 |    * The MIME type of this resource, if known.
 444 |    */
 445 |   mimeType?: string;
 446 | 
 447 |   /**
 448 |    * The size of the raw resource content, in bytes (i.e., before base64 encoding or any tokenization), if known.
 449 |    *
 450 |    * This can be used by Hosts to display file sizes and estimate context window usage.
 451 |    */
 452 |   size?: number;
 453 | }
 454 | 
 455 | /**
 456 |  * A template description for resources available on the server.
 457 |  */
 458 | export interface ResourceTemplate extends Annotated {
 459 |   /**
 460 |    * A URI template (according to RFC 6570) that can be used to construct resource URIs.
 461 |    *
 462 |    * @format uri-template
 463 |    */
 464 |   uriTemplate: string;
 465 | 
 466 |   /**
 467 |    * A human-readable name for the type of resource this template refers to.
 468 |    *
 469 |    * This can be used by clients to populate UI elements.
 470 |    */
 471 |   name: string;
 472 | 
 473 |   /**
 474 |    * A description of what this template is for.
 475 |    *
 476 |    * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
 477 |    */
 478 |   description?: string;
 479 | 
 480 |   /**
 481 |    * The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.
 482 |    */
 483 |   mimeType?: string;
 484 | }
 485 | 
 486 | /**
 487 |  * The contents of a specific resource or sub-resource.
 488 |  */
 489 | export interface ResourceContents {
 490 |   /**
 491 |    * The URI of this resource.
 492 |    *
 493 |    * @format uri
 494 |    */
 495 |   uri: string;
 496 |   /**
 497 |    * The MIME type of this resource, if known.
 498 |    */
 499 |   mimeType?: string;
 500 | }
 501 | 
 502 | export interface TextResourceContents extends ResourceContents {
 503 |   /**
 504 |    * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
 505 |    */
 506 |   text: string;
 507 | }
 508 | 
 509 | export interface BlobResourceContents extends ResourceContents {
 510 |   /**
 511 |    * A base64-encoded string representing the binary data of the item.
 512 |    *
 513 |    * @format byte
 514 |    */
 515 |   blob: string;
 516 | }
 517 | 
 518 | /* Prompts */
 519 | /**
 520 |  * Sent from the client to request a list of prompts and prompt templates the server has.
 521 |  */
 522 | export interface ListPromptsRequest extends PaginatedRequest {
 523 |   method: "prompts/list";
 524 | }
 525 | 
 526 | /**
 527 |  * The server's response to a prompts/list request from the client.
 528 |  */
 529 | export interface ListPromptsResult extends PaginatedResult {
 530 |   prompts: Prompt[];
 531 | }
 532 | 
 533 | /**
 534 |  * Used by the client to get a prompt provided by the server.
 535 |  */
 536 | export interface GetPromptRequest extends Request {
 537 |   method: "prompts/get";
 538 |   params: {
 539 |     /**
 540 |      * The name of the prompt or prompt template.
 541 |      */
 542 |     name: string;
 543 |     /**
 544 |      * Arguments to use for templating the prompt.
 545 |      */
 546 |     arguments?: { [key: string]: string };
 547 |   };
 548 | }
 549 | 
 550 | /**
 551 |  * The server's response to a prompts/get request from the client.
 552 |  */
 553 | export interface GetPromptResult extends Result {
 554 |   /**
 555 |    * An optional description for the prompt.
 556 |    */
 557 |   description?: string;
 558 |   messages: PromptMessage[];
 559 | }
 560 | 
 561 | /**
 562 |  * A prompt or prompt template that the server offers.
 563 |  */
 564 | export interface Prompt {
 565 |   /**
 566 |    * The name of the prompt or prompt template.
 567 |    */
 568 |   name: string;
 569 |   /**
 570 |    * An optional description of what this prompt provides
 571 |    */
 572 |   description?: string;
 573 |   /**
 574 |    * A list of arguments to use for templating the prompt.
 575 |    */
 576 |   arguments?: PromptArgument[];
 577 | }
 578 | 
 579 | /**
 580 |  * Describes an argument that a prompt can accept.
 581 |  */
 582 | export interface PromptArgument {
 583 |   /**
 584 |    * The name of the argument.
 585 |    */
 586 |   name: string;
 587 |   /**
 588 |    * A human-readable description of the argument.
 589 |    */
 590 |   description?: string;
 591 |   /**
 592 |    * Whether this argument must be provided.
 593 |    */
 594 |   required?: boolean;
 595 | }
 596 | 
 597 | /**
 598 |  * The sender or recipient of messages and data in a conversation.
 599 |  */
 600 | export type Role = "user" | "assistant";
 601 | 
 602 | /**
 603 |  * Describes a message returned as part of a prompt.
 604 |  *
 605 |  * This is similar to `SamplingMessage`, but also supports the embedding of
 606 |  * resources from the MCP server.
 607 |  */
 608 | export interface PromptMessage {
 609 |   role: Role;
 610 |   content: TextContent | ImageContent | EmbeddedResource;
 611 | }
 612 | 
 613 | /**
 614 |  * The contents of a resource, embedded into a prompt or tool call result.
 615 |  *
 616 |  * It is up to the client how best to render embedded resources for the benefit
 617 |  * of the LLM and/or the user.
 618 |  */
 619 | export interface EmbeddedResource extends Annotated {
 620 |   type: "resource";
 621 |   resource: TextResourceContents | BlobResourceContents;
 622 | }
 623 | 
 624 | /**
 625 |  * An optional notification from the server to the client, informing it that the list of prompts it offers has changed. This may be issued by servers without any previous subscription from the client.
 626 |  */
 627 | export interface PromptListChangedNotification extends Notification {
 628 |   method: "notifications/prompts/list_changed";
 629 | }
 630 | 
 631 | /* Tools */
 632 | /**
 633 |  * Sent from the client to request a list of tools the server has.
 634 |  */
 635 | export interface ListToolsRequest extends PaginatedRequest {
 636 |   method: "tools/list";
 637 | }
 638 | 
 639 | /**
 640 |  * The server's response to a tools/list request from the client.
 641 |  */
 642 | export interface ListToolsResult extends PaginatedResult {
 643 |   tools: Tool[];
 644 | }
 645 | 
 646 | /**
 647 |  * The server's response to a tool call.
 648 |  *
 649 |  * Any errors that originate from the tool SHOULD be reported inside the result
 650 |  * object, with `isError` set to true, _not_ as an MCP protocol-level error
 651 |  * response. Otherwise, the LLM would not be able to see that an error occurred
 652 |  * and self-correct.
 653 |  *
 654 |  * However, any errors in _finding_ the tool, an error indicating that the
 655 |  * server does not support tool calls, or any other exceptional conditions,
 656 |  * should be reported as an MCP error response.
 657 |  */
 658 | export interface CallToolResult extends Result {
 659 |   content: (TextContent | ImageContent | EmbeddedResource)[];
 660 | 
 661 |   /**
 662 |    * Whether the tool call ended in an error.
 663 |    *
 664 |    * If not set, this is assumed to be false (the call was successful).
 665 |    */
 666 |   isError?: boolean;
 667 | }
 668 | 
 669 | /**
 670 |  * Used by the client to invoke a tool provided by the server.
 671 |  */
 672 | export interface CallToolRequest extends Request {
 673 |   method: "tools/call";
 674 |   params: {
 675 |     name: string;
 676 |     arguments?: { [key: string]: unknown };
 677 |   };
 678 | }
 679 | 
 680 | /**
 681 |  * An optional notification from the server to the client, informing it that the list of tools it offers has changed. This may be issued by servers without any previous subscription from the client.
 682 |  */
 683 | export interface ToolListChangedNotification extends Notification {
 684 |   method: "notifications/tools/list_changed";
 685 | }
 686 | 
 687 | /**
 688 |  * Definition for a tool the client can call.
 689 |  */
 690 | export interface Tool {
 691 |   /**
 692 |    * The name of the tool.
 693 |    */
 694 |   name: string;
 695 |   /**
 696 |    * A human-readable description of the tool.
 697 |    */
 698 |   description?: string;
 699 |   /**
 700 |    * A JSON Schema object defining the expected parameters for the tool.
 701 |    */
 702 |   inputSchema: {
 703 |     type: "object";
 704 |     properties?: { [key: string]: object };
 705 |     required?: string[];
 706 |   };
 707 | }
 708 | 
 709 | /* Logging */
 710 | /**
 711 |  * A request from the client to the server, to enable or adjust logging.
 712 |  */
 713 | export interface SetLevelRequest extends Request {
 714 |   method: "logging/setLevel";
 715 |   params: {
 716 |     /**
 717 |      * The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/message.
 718 |      */
 719 |     level: LoggingLevel;
 720 |   };
 721 | }
 722 | 
 723 | /**
 724 |  * Notification of a log message passed from server to client. If no logging/setLevel request has been sent from the client, the server MAY decide which messages to send automatically.
 725 |  */
 726 | export interface LoggingMessageNotification extends Notification {
 727 |   method: "notifications/message";
 728 |   params: {
 729 |     /**
 730 |      * The severity of this log message.
 731 |      */
 732 |     level: LoggingLevel;
 733 |     /**
 734 |      * An optional name of the logger issuing this message.
 735 |      */
 736 |     logger?: string;
 737 |     /**
 738 |      * The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here.
 739 |      */
 740 |     data: unknown;
 741 |   };
 742 | }
 743 | 
 744 | /**
 745 |  * The severity of a log message.
 746 |  *
 747 |  * These map to syslog message severities, as specified in RFC-5424:
 748 |  * https://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1
 749 |  */
 750 | export type LoggingLevel =
 751 |   | "debug"
 752 |   | "info"
 753 |   | "notice"
 754 |   | "warning"
 755 |   | "error"
 756 |   | "critical"
 757 |   | "alert"
 758 |   | "emergency";
 759 | 
 760 | /* Sampling */
 761 | /**
 762 |  * A request from the server to sample an LLM via the client. The client has full discretion over which model to select. The client should also inform the user before beginning sampling, to allow them to inspect the request (human in the loop) and decide whether to approve it.
 763 |  */
 764 | export interface CreateMessageRequest extends Request {
 765 |   method: "sampling/createMessage";
 766 |   params: {
 767 |     messages: SamplingMessage[];
 768 |     /**
 769 |      * The server's preferences for which model to select. The client MAY ignore these preferences.
 770 |      */
 771 |     modelPreferences?: ModelPreferences;
 772 |     /**
 773 |      * An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.
 774 |      */
 775 |     systemPrompt?: string;
 776 |     /**
 777 |      * A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.
 778 |      */
 779 |     includeContext?: "none" | "thisServer" | "allServers";
 780 |     /**
 781 |      * @TJS-type number
 782 |      */
 783 |     temperature?: number;
 784 |     /**
 785 |      * The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.
 786 |      */
 787 |     maxTokens: number;
 788 |     stopSequences?: string[];
 789 |     /**
 790 |      * Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.
 791 |      */
 792 |     metadata?: object;
 793 |   };
 794 | }
 795 | 
 796 | /**
 797 |  * The client's response to a sampling/create_message request from the server. The client should inform the user before returning the sampled message, to allow them to inspect the response (human in the loop) and decide whether to allow the server to see it.
 798 |  */
 799 | export interface CreateMessageResult extends Result, SamplingMessage {
 800 |   /**
 801 |    * The name of the model that generated the message.
 802 |    */
 803 |   model: string;
 804 |   /**
 805 |    * The reason why sampling stopped, if known.
 806 |    */
 807 |   stopReason?: "endTurn" | "stopSequence" | "maxTokens" | string;
 808 | }
 809 | 
 810 | /**
 811 |  * Describes a message issued to or received from an LLM API.
 812 |  */
 813 | export interface SamplingMessage {
 814 |   role: Role;
 815 |   content: TextContent | ImageContent;
 816 | }
 817 | 
 818 | /**
 819 |  * Base for objects that include optional annotations for the client. The client can use annotations to inform how objects are used or displayed
 820 |  */
 821 | export interface Annotated {
 822 |   annotations?: {
 823 |     /**
 824 |      * Describes who the intended customer of this object or data is.
 825 |      * 
 826 |      * It can include multiple entries to indicate content useful for multiple audiences (e.g., `["user", "assistant"]`).
 827 |      */
 828 |     audience?: Role[];
 829 | 
 830 |     /**
 831 |      * Describes how important this data is for operating the server.
 832 |      * 
 833 |      * A value of 1 means "most important," and indicates that the data is
 834 |      * effectively required, while 0 means "least important," and indicates that
 835 |      * the data is entirely optional.
 836 |      *
 837 |      * @TJS-type number
 838 |      * @minimum 0
 839 |      * @maximum 1
 840 |      */
 841 |     priority?: number;
 842 |   }
 843 | }
 844 | 
 845 | /**
 846 |  * Text provided to or from an LLM.
 847 |  */
 848 | export interface TextContent extends Annotated {
 849 |   type: "text";
 850 |   /**
 851 |    * The text content of the message.
 852 |    */
 853 |   text: string;
 854 | }
 855 | 
 856 | /**
 857 |  * An image provided to or from an LLM.
 858 |  */
 859 | export interface ImageContent extends Annotated {
 860 |   type: "image";
 861 |   /**
 862 |    * The base64-encoded image data.
 863 |    *
 864 |    * @format byte
 865 |    */
 866 |   data: string;
 867 |   /**
 868 |    * The MIME type of the image. Different providers may support different image types.
 869 |    */
 870 |   mimeType: string;
 871 | }
 872 | 
 873 | /**
 874 |  * The server's preferences for model selection, requested of the client during sampling.
 875 |  *
 876 |  * Because LLMs can vary along multiple dimensions, choosing the "best" model is
 877 |  * rarely straightforward.  Different models excel in different areas—some are
 878 |  * faster but less capable, others are more capable but more expensive, and so
 879 |  * on. This interface allows servers to express their priorities across multiple
 880 |  * dimensions to help clients make an appropriate selection for their use case.
 881 |  *
 882 |  * These preferences are always advisory. The client MAY ignore them. It is also
 883 |  * up to the client to decide how to interpret these preferences and how to
 884 |  * balance them against other considerations.
 885 |  */
 886 | export interface ModelPreferences {
 887 |   /**
 888 |    * Optional hints to use for model selection.
 889 |    *
 890 |    * If multiple hints are specified, the client MUST evaluate them in order
 891 |    * (such that the first match is taken).
 892 |    *
 893 |    * The client SHOULD prioritize these hints over the numeric priorities, but
 894 |    * MAY still use the priorities to select from ambiguous matches.
 895 |    */
 896 |   hints?: ModelHint[];
 897 | 
 898 |   /**
 899 |    * How much to prioritize cost when selecting a model. A value of 0 means cost
 900 |    * is not important, while a value of 1 means cost is the most important
 901 |    * factor.
 902 |    *
 903 |    * @TJS-type number
 904 |    * @minimum 0
 905 |    * @maximum 1
 906 |    */
 907 |   costPriority?: number;
 908 | 
 909 |   /**
 910 |    * How much to prioritize sampling speed (latency) when selecting a model. A
 911 |    * value of 0 means speed is not important, while a value of 1 means speed is
 912 |    * the most important factor.
 913 |    *
 914 |    * @TJS-type number
 915 |    * @minimum 0
 916 |    * @maximum 1
 917 |    */
 918 |   speedPriority?: number;
 919 | 
 920 |   /**
 921 |    * How much to prioritize intelligence and capabilities when selecting a
 922 |    * model. A value of 0 means intelligence is not important, while a value of 1
 923 |    * means intelligence is the most important factor.
 924 |    *
 925 |    * @TJS-type number
 926 |    * @minimum 0
 927 |    * @maximum 1
 928 |    */
 929 |   intelligencePriority?: number;
 930 | }
 931 | 
 932 | /**
 933 |  * Hints to use for model selection.
 934 |  *
 935 |  * Keys not declared here are currently left unspecified by the spec and are up
 936 |  * to the client to interpret.
 937 |  */
 938 | export interface ModelHint {
 939 |   /**
 940 |    * A hint for a model name.
 941 |    *
 942 |    * The client SHOULD treat this as a substring of a model name; for example:
 943 |    *  - `claude-3-5-sonnet` should match `claude-3-5-sonnet-20241022`
 944 |    *  - `sonnet` should match `claude-3-5-sonnet-20241022`, `claude-3-sonnet-20240229`, etc.
 945 |    *  - `claude` should match any Claude model
 946 |    *
 947 |    * The client MAY also map the string to a different provider's model name or a different model family, as long as it fills a similar niche; for example:
 948 |    *  - `gemini-1.5-flash` could match `claude-3-haiku-20240307`
 949 |    */
 950 |   name?: string;
 951 | }
 952 | 
 953 | /* Autocomplete */
 954 | /**
 955 |  * A request from the client to the server, to ask for completion options.
 956 |  */
 957 | export interface CompleteRequest extends Request {
 958 |   method: "completion/complete";
 959 |   params: {
 960 |     ref: PromptReference | ResourceReference;
 961 |     /**
 962 |      * The argument's information
 963 |      */
 964 |     argument: {
 965 |       /**
 966 |        * The name of the argument
 967 |        */
 968 |       name: string;
 969 |       /**
 970 |        * The value of the argument to use for completion matching.
 971 |        */
 972 |       value: string;
 973 |     };
 974 |   };
 975 | }
 976 | 
 977 | /**
 978 |  * The server's response to a completion/complete request
 979 |  */
 980 | export interface CompleteResult extends Result {
 981 |   completion: {
 982 |     /**
 983 |      * An array of completion values. Must not exceed 100 items.
 984 |      */
 985 |     values: string[];
 986 |     /**
 987 |      * The total number of completion options available. This can exceed the number of values actually sent in the response.
 988 |      */
 989 |     total?: number;
 990 |     /**
 991 |      * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.
 992 |      */
 993 |     hasMore?: boolean;
 994 |   };
 995 | }
 996 | 
 997 | /**
 998 |  * A reference to a resource or resource template definition.
 999 |  */
1000 | export interface ResourceReference {
1001 |   type: "ref/resource";
1002 |   /**
1003 |    * The URI or URI template of the resource.
1004 |    *
1005 |    * @format uri-template
1006 |    */
1007 |   uri: string;
1008 | }
1009 | 
1010 | /**
1011 |  * Identifies a prompt.
1012 |  */
1013 | export interface PromptReference {
1014 |   type: "ref/prompt";
1015 |   /**
1016 |    * The name of the prompt or prompt template
1017 |    */
1018 |   name: string;
1019 | }
1020 | 
1021 | /* Roots */
1022 | /**
1023 |  * Sent from the server to request a list of root URIs from the client. Roots allow
1024 |  * servers to ask for specific directories or files to operate on. A common example
1025 |  * for roots is providing a set of repositories or directories a server should operate
1026 |  * on.
1027 |  *
1028 |  * This request is typically used when the server needs to understand the file system
1029 |  * structure or access specific locations that the client has permission to read from.
1030 |  */
1031 | export interface ListRootsRequest extends Request {
1032 |   method: "roots/list";
1033 | }
1034 | 
1035 | /**
1036 |  * The client's response to a roots/list request from the server.
1037 |  * This result contains an array of Root objects, each representing a root directory
1038 |  * or file that the server can operate on.
1039 |  */
1040 | export interface ListRootsResult extends Result {
1041 |   roots: Root[];
1042 | }
1043 | 
1044 | /**
1045 |  * Represents a root directory or file that the server can operate on.
1046 |  */
1047 | export interface Root {
1048 |   /**
1049 |    * The URI identifying the root. This *must* start with file:// for now.
1050 |    * This restriction may be relaxed in future versions of the protocol to allow
1051 |    * other URI schemes.
1052 |    *
1053 |    * @format uri
1054 |    */
1055 |   uri: string;
1056 |   /**
1057 |    * An optional name for the root. This can be used to provide a human-readable
1058 |    * identifier for the root, which may be useful for display purposes or for
1059 |    * referencing the root in other parts of the application.
1060 |    */
1061 |   name?: string;
1062 | }
1063 | 
1064 | /**
1065 |  * A notification from the client to the server, informing it that the list of roots has changed.
1066 |  * This notification should be sent whenever the client adds, removes, or modifies any root.
1067 |  * The server should then request an updated list of roots using the ListRootsRequest.
1068 |  */
1069 | export interface RootsListChangedNotification extends Notification {
1070 |   method: "notifications/roots/list_changed";
1071 | }
1072 | 
1073 | /* Client messages */
1074 | export type ClientRequest =
1075 |   | PingRequest
1076 |   | InitializeRequest
1077 |   | CompleteRequest
1078 |   | SetLevelRequest
1079 |   | GetPromptRequest
1080 |   | ListPromptsRequest
1081 |   | ListResourcesRequest
1082 |   | ListResourceTemplatesRequest
1083 |   | ReadResourceRequest
1084 |   | SubscribeRequest
1085 |   | UnsubscribeRequest
1086 |   | CallToolRequest
1087 |   | ListToolsRequest;
1088 | 
1089 | export type ClientNotification =
1090 |   | CancelledNotification
1091 |   | ProgressNotification
1092 |   | InitializedNotification
1093 |   | RootsListChangedNotification;
1094 | 
1095 | export type ClientResult = EmptyResult | CreateMessageResult | ListRootsResult;
1096 | 
1097 | /* Server messages */
1098 | export type ServerRequest =
1099 |   | PingRequest
1100 |   | CreateMessageRequest
1101 |   | ListRootsRequest;
1102 | 
1103 | export type ServerNotification =
1104 |   | CancelledNotification
1105 |   | ProgressNotification
1106 |   | LoggingMessageNotification
1107 |   | ResourceUpdatedNotification
1108 |   | ResourceListChangedNotification
1109 |   | ToolListChangedNotification
1110 |   | PromptListChangedNotification;
1111 | 
1112 | export type ServerResult =
1113 |   | EmptyResult
1114 |   | InitializeResult
1115 |   | CompleteResult
1116 |   | GetPromptResult
1117 |   | ListPromptsResult
1118 |   | ListResourcesResult
1119 |   | ListResourceTemplatesResult
1120 |   | ReadResourceResult
1121 |   | CallToolResult
1122 |   | ListToolsResult;
1123 | 


--------------------------------------------------------------------------------
/schema/2025-03-26/schema.json:
--------------------------------------------------------------------------------
   1 | {
   2 |     "$schema": "http://json-schema.org/draft-07/schema#",
   3 |     "definitions": {
   4 |         "Annotations": {
   5 |             "description": "Optional annotations for the client. The client can use annotations to inform how objects are used or displayed",
   6 |             "properties": {
   7 |                 "audience": {
   8 |                     "description": "Describes who the intended customer of this object or data is.\n\nIt can include multiple entries to indicate content useful for multiple audiences (e.g., `[\"user\", \"assistant\"]`).",
   9 |                     "items": {
  10 |                         "$ref": "#/definitions/Role"
  11 |                     },
  12 |                     "type": "array"
  13 |                 },
  14 |                 "priority": {
  15 |                     "description": "Describes how important this data is for operating the server.\n\nA value of 1 means \"most important,\" and indicates that the data is\neffectively required, while 0 means \"least important,\" and indicates that\nthe data is entirely optional.",
  16 |                     "maximum": 1,
  17 |                     "minimum": 0,
  18 |                     "type": "number"
  19 |                 }
  20 |             },
  21 |             "type": "object"
  22 |         },
  23 |         "AudioContent": {
  24 |             "description": "Audio provided to or from an LLM.",
  25 |             "properties": {
  26 |                 "annotations": {
  27 |                     "$ref": "#/definitions/Annotations",
  28 |                     "description": "Optional annotations for the client."
  29 |                 },
  30 |                 "data": {
  31 |                     "description": "The base64-encoded audio data.",
  32 |                     "format": "byte",
  33 |                     "type": "string"
  34 |                 },
  35 |                 "mimeType": {
  36 |                     "description": "The MIME type of the audio. Different providers may support different audio types.",
  37 |                     "type": "string"
  38 |                 },
  39 |                 "type": {
  40 |                     "const": "audio",
  41 |                     "type": "string"
  42 |                 }
  43 |             },
  44 |             "required": [
  45 |                 "data",
  46 |                 "mimeType",
  47 |                 "type"
  48 |             ],
  49 |             "type": "object"
  50 |         },
  51 |         "BlobResourceContents": {
  52 |             "properties": {
  53 |                 "blob": {
  54 |                     "description": "A base64-encoded string representing the binary data of the item.",
  55 |                     "format": "byte",
  56 |                     "type": "string"
  57 |                 },
  58 |                 "mimeType": {
  59 |                     "description": "The MIME type of this resource, if known.",
  60 |                     "type": "string"
  61 |                 },
  62 |                 "uri": {
  63 |                     "description": "The URI of this resource.",
  64 |                     "format": "uri",
  65 |                     "type": "string"
  66 |                 }
  67 |             },
  68 |             "required": [
  69 |                 "blob",
  70 |                 "uri"
  71 |             ],
  72 |             "type": "object"
  73 |         },
  74 |         "CallToolRequest": {
  75 |             "description": "Used by the client to invoke a tool provided by the server.",
  76 |             "properties": {
  77 |                 "method": {
  78 |                     "const": "tools/call",
  79 |                     "type": "string"
  80 |                 },
  81 |                 "params": {
  82 |                     "properties": {
  83 |                         "arguments": {
  84 |                             "additionalProperties": {},
  85 |                             "type": "object"
  86 |                         },
  87 |                         "name": {
  88 |                             "type": "string"
  89 |                         }
  90 |                     },
  91 |                     "required": [
  92 |                         "name"
  93 |                     ],
  94 |                     "type": "object"
  95 |                 }
  96 |             },
  97 |             "required": [
  98 |                 "method",
  99 |                 "params"
 100 |             ],
 101 |             "type": "object"
 102 |         },
 103 |         "CallToolResult": {
 104 |             "description": "The server's response to a tool call.\n\nAny errors that originate from the tool SHOULD be reported inside the result\nobject, with `isError` set to true, _not_ as an MCP protocol-level error\nresponse. Otherwise, the LLM would not be able to see that an error occurred\nand self-correct.\n\nHowever, any errors in _finding_ the tool, an error indicating that the\nserver does not support tool calls, or any other exceptional conditions,\nshould be reported as an MCP error response.",
 105 |             "properties": {
 106 |                 "_meta": {
 107 |                     "additionalProperties": {},
 108 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
 109 |                     "type": "object"
 110 |                 },
 111 |                 "content": {
 112 |                     "items": {
 113 |                         "anyOf": [
 114 |                             {
 115 |                                 "$ref": "#/definitions/TextContent"
 116 |                             },
 117 |                             {
 118 |                                 "$ref": "#/definitions/ImageContent"
 119 |                             },
 120 |                             {
 121 |                                 "$ref": "#/definitions/AudioContent"
 122 |                             },
 123 |                             {
 124 |                                 "$ref": "#/definitions/EmbeddedResource"
 125 |                             }
 126 |                         ]
 127 |                     },
 128 |                     "type": "array"
 129 |                 },
 130 |                 "isError": {
 131 |                     "description": "Whether the tool call ended in an error.\n\nIf not set, this is assumed to be false (the call was successful).",
 132 |                     "type": "boolean"
 133 |                 }
 134 |             },
 135 |             "required": [
 136 |                 "content"
 137 |             ],
 138 |             "type": "object"
 139 |         },
 140 |         "CancelledNotification": {
 141 |             "description": "This notification can be sent by either side to indicate that it is cancelling a previously-issued request.\n\nThe request SHOULD still be in-flight, but due to communication latency, it is always possible that this notification MAY arrive after the request has already finished.\n\nThis notification indicates that the result will be unused, so any associated processing SHOULD cease.\n\nA client MUST NOT attempt to cancel its `initialize` request.",
 142 |             "properties": {
 143 |                 "method": {
 144 |                     "const": "notifications/cancelled",
 145 |                     "type": "string"
 146 |                 },
 147 |                 "params": {
 148 |                     "properties": {
 149 |                         "reason": {
 150 |                             "description": "An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.",
 151 |                             "type": "string"
 152 |                         },
 153 |                         "requestId": {
 154 |                             "$ref": "#/definitions/RequestId",
 155 |                             "description": "The ID of the request to cancel.\n\nThis MUST correspond to the ID of a request previously issued in the same direction."
 156 |                         }
 157 |                     },
 158 |                     "required": [
 159 |                         "requestId"
 160 |                     ],
 161 |                     "type": "object"
 162 |                 }
 163 |             },
 164 |             "required": [
 165 |                 "method",
 166 |                 "params"
 167 |             ],
 168 |             "type": "object"
 169 |         },
 170 |         "ClientCapabilities": {
 171 |             "description": "Capabilities a client may support. Known capabilities are defined here, in this schema, but this is not a closed set: any client can define its own, additional capabilities.",
 172 |             "properties": {
 173 |                 "experimental": {
 174 |                     "additionalProperties": {
 175 |                         "additionalProperties": true,
 176 |                         "properties": {},
 177 |                         "type": "object"
 178 |                     },
 179 |                     "description": "Experimental, non-standard capabilities that the client supports.",
 180 |                     "type": "object"
 181 |                 },
 182 |                 "roots": {
 183 |                     "description": "Present if the client supports listing roots.",
 184 |                     "properties": {
 185 |                         "listChanged": {
 186 |                             "description": "Whether the client supports notifications for changes to the roots list.",
 187 |                             "type": "boolean"
 188 |                         }
 189 |                     },
 190 |                     "type": "object"
 191 |                 },
 192 |                 "sampling": {
 193 |                     "additionalProperties": true,
 194 |                     "description": "Present if the client supports sampling from an LLM.",
 195 |                     "properties": {},
 196 |                     "type": "object"
 197 |                 }
 198 |             },
 199 |             "type": "object"
 200 |         },
 201 |         "ClientNotification": {
 202 |             "anyOf": [
 203 |                 {
 204 |                     "$ref": "#/definitions/CancelledNotification"
 205 |                 },
 206 |                 {
 207 |                     "$ref": "#/definitions/InitializedNotification"
 208 |                 },
 209 |                 {
 210 |                     "$ref": "#/definitions/ProgressNotification"
 211 |                 },
 212 |                 {
 213 |                     "$ref": "#/definitions/RootsListChangedNotification"
 214 |                 }
 215 |             ]
 216 |         },
 217 |         "ClientRequest": {
 218 |             "anyOf": [
 219 |                 {
 220 |                     "$ref": "#/definitions/InitializeRequest"
 221 |                 },
 222 |                 {
 223 |                     "$ref": "#/definitions/PingRequest"
 224 |                 },
 225 |                 {
 226 |                     "$ref": "#/definitions/ListResourcesRequest"
 227 |                 },
 228 |                 {
 229 |                     "$ref": "#/definitions/ListResourceTemplatesRequest"
 230 |                 },
 231 |                 {
 232 |                     "$ref": "#/definitions/ReadResourceRequest"
 233 |                 },
 234 |                 {
 235 |                     "$ref": "#/definitions/SubscribeRequest"
 236 |                 },
 237 |                 {
 238 |                     "$ref": "#/definitions/UnsubscribeRequest"
 239 |                 },
 240 |                 {
 241 |                     "$ref": "#/definitions/ListPromptsRequest"
 242 |                 },
 243 |                 {
 244 |                     "$ref": "#/definitions/GetPromptRequest"
 245 |                 },
 246 |                 {
 247 |                     "$ref": "#/definitions/ListToolsRequest"
 248 |                 },
 249 |                 {
 250 |                     "$ref": "#/definitions/CallToolRequest"
 251 |                 },
 252 |                 {
 253 |                     "$ref": "#/definitions/SetLevelRequest"
 254 |                 },
 255 |                 {
 256 |                     "$ref": "#/definitions/CompleteRequest"
 257 |                 }
 258 |             ]
 259 |         },
 260 |         "ClientResult": {
 261 |             "anyOf": [
 262 |                 {
 263 |                     "$ref": "#/definitions/Result"
 264 |                 },
 265 |                 {
 266 |                     "$ref": "#/definitions/CreateMessageResult"
 267 |                 },
 268 |                 {
 269 |                     "$ref": "#/definitions/ListRootsResult"
 270 |                 }
 271 |             ]
 272 |         },
 273 |         "CompleteRequest": {
 274 |             "description": "A request from the client to the server, to ask for completion options.",
 275 |             "properties": {
 276 |                 "method": {
 277 |                     "const": "completion/complete",
 278 |                     "type": "string"
 279 |                 },
 280 |                 "params": {
 281 |                     "properties": {
 282 |                         "argument": {
 283 |                             "description": "The argument's information",
 284 |                             "properties": {
 285 |                                 "name": {
 286 |                                     "description": "The name of the argument",
 287 |                                     "type": "string"
 288 |                                 },
 289 |                                 "value": {
 290 |                                     "description": "The value of the argument to use for completion matching.",
 291 |                                     "type": "string"
 292 |                                 }
 293 |                             },
 294 |                             "required": [
 295 |                                 "name",
 296 |                                 "value"
 297 |                             ],
 298 |                             "type": "object"
 299 |                         },
 300 |                         "ref": {
 301 |                             "anyOf": [
 302 |                                 {
 303 |                                     "$ref": "#/definitions/PromptReference"
 304 |                                 },
 305 |                                 {
 306 |                                     "$ref": "#/definitions/ResourceReference"
 307 |                                 }
 308 |                             ]
 309 |                         }
 310 |                     },
 311 |                     "required": [
 312 |                         "argument",
 313 |                         "ref"
 314 |                     ],
 315 |                     "type": "object"
 316 |                 }
 317 |             },
 318 |             "required": [
 319 |                 "method",
 320 |                 "params"
 321 |             ],
 322 |             "type": "object"
 323 |         },
 324 |         "CompleteResult": {
 325 |             "description": "The server's response to a completion/complete request",
 326 |             "properties": {
 327 |                 "_meta": {
 328 |                     "additionalProperties": {},
 329 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
 330 |                     "type": "object"
 331 |                 },
 332 |                 "completion": {
 333 |                     "properties": {
 334 |                         "hasMore": {
 335 |                             "description": "Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.",
 336 |                             "type": "boolean"
 337 |                         },
 338 |                         "total": {
 339 |                             "description": "The total number of completion options available. This can exceed the number of values actually sent in the response.",
 340 |                             "type": "integer"
 341 |                         },
 342 |                         "values": {
 343 |                             "description": "An array of completion values. Must not exceed 100 items.",
 344 |                             "items": {
 345 |                                 "type": "string"
 346 |                             },
 347 |                             "type": "array"
 348 |                         }
 349 |                     },
 350 |                     "required": [
 351 |                         "values"
 352 |                     ],
 353 |                     "type": "object"
 354 |                 }
 355 |             },
 356 |             "required": [
 357 |                 "completion"
 358 |             ],
 359 |             "type": "object"
 360 |         },
 361 |         "CreateMessageRequest": {
 362 |             "description": "A request from the server to sample an LLM via the client. The client has full discretion over which model to select. The client should also inform the user before beginning sampling, to allow them to inspect the request (human in the loop) and decide whether to approve it.",
 363 |             "properties": {
 364 |                 "method": {
 365 |                     "const": "sampling/createMessage",
 366 |                     "type": "string"
 367 |                 },
 368 |                 "params": {
 369 |                     "properties": {
 370 |                         "includeContext": {
 371 |                             "description": "A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.",
 372 |                             "enum": [
 373 |                                 "allServers",
 374 |                                 "none",
 375 |                                 "thisServer"
 376 |                             ],
 377 |                             "type": "string"
 378 |                         },
 379 |                         "maxTokens": {
 380 |                             "description": "The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.",
 381 |                             "type": "integer"
 382 |                         },
 383 |                         "messages": {
 384 |                             "items": {
 385 |                                 "$ref": "#/definitions/SamplingMessage"
 386 |                             },
 387 |                             "type": "array"
 388 |                         },
 389 |                         "metadata": {
 390 |                             "additionalProperties": true,
 391 |                             "description": "Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.",
 392 |                             "properties": {},
 393 |                             "type": "object"
 394 |                         },
 395 |                         "modelPreferences": {
 396 |                             "$ref": "#/definitions/ModelPreferences",
 397 |                             "description": "The server's preferences for which model to select. The client MAY ignore these preferences."
 398 |                         },
 399 |                         "stopSequences": {
 400 |                             "items": {
 401 |                                 "type": "string"
 402 |                             },
 403 |                             "type": "array"
 404 |                         },
 405 |                         "systemPrompt": {
 406 |                             "description": "An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.",
 407 |                             "type": "string"
 408 |                         },
 409 |                         "temperature": {
 410 |                             "type": "number"
 411 |                         }
 412 |                     },
 413 |                     "required": [
 414 |                         "maxTokens",
 415 |                         "messages"
 416 |                     ],
 417 |                     "type": "object"
 418 |                 }
 419 |             },
 420 |             "required": [
 421 |                 "method",
 422 |                 "params"
 423 |             ],
 424 |             "type": "object"
 425 |         },
 426 |         "CreateMessageResult": {
 427 |             "description": "The client's response to a sampling/create_message request from the server. The client should inform the user before returning the sampled message, to allow them to inspect the response (human in the loop) and decide whether to allow the server to see it.",
 428 |             "properties": {
 429 |                 "_meta": {
 430 |                     "additionalProperties": {},
 431 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
 432 |                     "type": "object"
 433 |                 },
 434 |                 "content": {
 435 |                     "anyOf": [
 436 |                         {
 437 |                             "$ref": "#/definitions/TextContent"
 438 |                         },
 439 |                         {
 440 |                             "$ref": "#/definitions/ImageContent"
 441 |                         },
 442 |                         {
 443 |                             "$ref": "#/definitions/AudioContent"
 444 |                         }
 445 |                     ]
 446 |                 },
 447 |                 "model": {
 448 |                     "description": "The name of the model that generated the message.",
 449 |                     "type": "string"
 450 |                 },
 451 |                 "role": {
 452 |                     "$ref": "#/definitions/Role"
 453 |                 },
 454 |                 "stopReason": {
 455 |                     "description": "The reason why sampling stopped, if known.",
 456 |                     "type": "string"
 457 |                 }
 458 |             },
 459 |             "required": [
 460 |                 "content",
 461 |                 "model",
 462 |                 "role"
 463 |             ],
 464 |             "type": "object"
 465 |         },
 466 |         "Cursor": {
 467 |             "description": "An opaque token used to represent a cursor for pagination.",
 468 |             "type": "string"
 469 |         },
 470 |         "EmbeddedResource": {
 471 |             "description": "The contents of a resource, embedded into a prompt or tool call result.\n\nIt is up to the client how best to render embedded resources for the benefit\nof the LLM and/or the user.",
 472 |             "properties": {
 473 |                 "annotations": {
 474 |                     "$ref": "#/definitions/Annotations",
 475 |                     "description": "Optional annotations for the client."
 476 |                 },
 477 |                 "resource": {
 478 |                     "anyOf": [
 479 |                         {
 480 |                             "$ref": "#/definitions/TextResourceContents"
 481 |                         },
 482 |                         {
 483 |                             "$ref": "#/definitions/BlobResourceContents"
 484 |                         }
 485 |                     ]
 486 |                 },
 487 |                 "type": {
 488 |                     "const": "resource",
 489 |                     "type": "string"
 490 |                 }
 491 |             },
 492 |             "required": [
 493 |                 "resource",
 494 |                 "type"
 495 |             ],
 496 |             "type": "object"
 497 |         },
 498 |         "EmptyResult": {
 499 |             "$ref": "#/definitions/Result"
 500 |         },
 501 |         "GetPromptRequest": {
 502 |             "description": "Used by the client to get a prompt provided by the server.",
 503 |             "properties": {
 504 |                 "method": {
 505 |                     "const": "prompts/get",
 506 |                     "type": "string"
 507 |                 },
 508 |                 "params": {
 509 |                     "properties": {
 510 |                         "arguments": {
 511 |                             "additionalProperties": {
 512 |                                 "type": "string"
 513 |                             },
 514 |                             "description": "Arguments to use for templating the prompt.",
 515 |                             "type": "object"
 516 |                         },
 517 |                         "name": {
 518 |                             "description": "The name of the prompt or prompt template.",
 519 |                             "type": "string"
 520 |                         }
 521 |                     },
 522 |                     "required": [
 523 |                         "name"
 524 |                     ],
 525 |                     "type": "object"
 526 |                 }
 527 |             },
 528 |             "required": [
 529 |                 "method",
 530 |                 "params"
 531 |             ],
 532 |             "type": "object"
 533 |         },
 534 |         "GetPromptResult": {
 535 |             "description": "The server's response to a prompts/get request from the client.",
 536 |             "properties": {
 537 |                 "_meta": {
 538 |                     "additionalProperties": {},
 539 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
 540 |                     "type": "object"
 541 |                 },
 542 |                 "description": {
 543 |                     "description": "An optional description for the prompt.",
 544 |                     "type": "string"
 545 |                 },
 546 |                 "messages": {
 547 |                     "items": {
 548 |                         "$ref": "#/definitions/PromptMessage"
 549 |                     },
 550 |                     "type": "array"
 551 |                 }
 552 |             },
 553 |             "required": [
 554 |                 "messages"
 555 |             ],
 556 |             "type": "object"
 557 |         },
 558 |         "ImageContent": {
 559 |             "description": "An image provided to or from an LLM.",
 560 |             "properties": {
 561 |                 "annotations": {
 562 |                     "$ref": "#/definitions/Annotations",
 563 |                     "description": "Optional annotations for the client."
 564 |                 },
 565 |                 "data": {
 566 |                     "description": "The base64-encoded image data.",
 567 |                     "format": "byte",
 568 |                     "type": "string"
 569 |                 },
 570 |                 "mimeType": {
 571 |                     "description": "The MIME type of the image. Different providers may support different image types.",
 572 |                     "type": "string"
 573 |                 },
 574 |                 "type": {
 575 |                     "const": "image",
 576 |                     "type": "string"
 577 |                 }
 578 |             },
 579 |             "required": [
 580 |                 "data",
 581 |                 "mimeType",
 582 |                 "type"
 583 |             ],
 584 |             "type": "object"
 585 |         },
 586 |         "Implementation": {
 587 |             "description": "Describes the name and version of an MCP implementation.",
 588 |             "properties": {
 589 |                 "name": {
 590 |                     "type": "string"
 591 |                 },
 592 |                 "version": {
 593 |                     "type": "string"
 594 |                 }
 595 |             },
 596 |             "required": [
 597 |                 "name",
 598 |                 "version"
 599 |             ],
 600 |             "type": "object"
 601 |         },
 602 |         "InitializeRequest": {
 603 |             "description": "This request is sent from the client to the server when it first connects, asking it to begin initialization.",
 604 |             "properties": {
 605 |                 "method": {
 606 |                     "const": "initialize",
 607 |                     "type": "string"
 608 |                 },
 609 |                 "params": {
 610 |                     "properties": {
 611 |                         "capabilities": {
 612 |                             "$ref": "#/definitions/ClientCapabilities"
 613 |                         },
 614 |                         "clientInfo": {
 615 |                             "$ref": "#/definitions/Implementation"
 616 |                         },
 617 |                         "protocolVersion": {
 618 |                             "description": "The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.",
 619 |                             "type": "string"
 620 |                         }
 621 |                     },
 622 |                     "required": [
 623 |                         "capabilities",
 624 |                         "clientInfo",
 625 |                         "protocolVersion"
 626 |                     ],
 627 |                     "type": "object"
 628 |                 }
 629 |             },
 630 |             "required": [
 631 |                 "method",
 632 |                 "params"
 633 |             ],
 634 |             "type": "object"
 635 |         },
 636 |         "InitializeResult": {
 637 |             "description": "After receiving an initialize request from the client, the server sends this response.",
 638 |             "properties": {
 639 |                 "_meta": {
 640 |                     "additionalProperties": {},
 641 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
 642 |                     "type": "object"
 643 |                 },
 644 |                 "capabilities": {
 645 |                     "$ref": "#/definitions/ServerCapabilities"
 646 |                 },
 647 |                 "instructions": {
 648 |                     "description": "Instructions describing how to use the server and its features.\n\nThis can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a \"hint\" to the model. For example, this information MAY be added to the system prompt.",
 649 |                     "type": "string"
 650 |                 },
 651 |                 "protocolVersion": {
 652 |                     "description": "The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.",
 653 |                     "type": "string"
 654 |                 },
 655 |                 "serverInfo": {
 656 |                     "$ref": "#/definitions/Implementation"
 657 |                 }
 658 |             },
 659 |             "required": [
 660 |                 "capabilities",
 661 |                 "protocolVersion",
 662 |                 "serverInfo"
 663 |             ],
 664 |             "type": "object"
 665 |         },
 666 |         "InitializedNotification": {
 667 |             "description": "This notification is sent from the client to the server after initialization has finished.",
 668 |             "properties": {
 669 |                 "method": {
 670 |                     "const": "notifications/initialized",
 671 |                     "type": "string"
 672 |                 },
 673 |                 "params": {
 674 |                     "additionalProperties": {},
 675 |                     "properties": {
 676 |                         "_meta": {
 677 |                             "additionalProperties": {},
 678 |                             "description": "This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.",
 679 |                             "type": "object"
 680 |                         }
 681 |                     },
 682 |                     "type": "object"
 683 |                 }
 684 |             },
 685 |             "required": [
 686 |                 "method"
 687 |             ],
 688 |             "type": "object"
 689 |         },
 690 |         "JSONRPCBatchRequest": {
 691 |             "description": "A JSON-RPC batch request, as described in https://www.jsonrpc.org/specification#batch.",
 692 |             "items": {
 693 |                 "anyOf": [
 694 |                     {
 695 |                         "$ref": "#/definitions/JSONRPCRequest"
 696 |                     },
 697 |                     {
 698 |                         "$ref": "#/definitions/JSONRPCNotification"
 699 |                     }
 700 |                 ]
 701 |             },
 702 |             "type": "array"
 703 |         },
 704 |         "JSONRPCBatchResponse": {
 705 |             "description": "A JSON-RPC batch response, as described in https://www.jsonrpc.org/specification#batch.",
 706 |             "items": {
 707 |                 "anyOf": [
 708 |                     {
 709 |                         "$ref": "#/definitions/JSONRPCResponse"
 710 |                     },
 711 |                     {
 712 |                         "$ref": "#/definitions/JSONRPCError"
 713 |                     }
 714 |                 ]
 715 |             },
 716 |             "type": "array"
 717 |         },
 718 |         "JSONRPCError": {
 719 |             "description": "A response to a request that indicates an error occurred.",
 720 |             "properties": {
 721 |                 "error": {
 722 |                     "properties": {
 723 |                         "code": {
 724 |                             "description": "The error type that occurred.",
 725 |                             "type": "integer"
 726 |                         },
 727 |                         "data": {
 728 |                             "description": "Additional information about the error. The value of this member is defined by the sender (e.g. detailed error information, nested errors etc.)."
 729 |                         },
 730 |                         "message": {
 731 |                             "description": "A short description of the error. The message SHOULD be limited to a concise single sentence.",
 732 |                             "type": "string"
 733 |                         }
 734 |                     },
 735 |                     "required": [
 736 |                         "code",
 737 |                         "message"
 738 |                     ],
 739 |                     "type": "object"
 740 |                 },
 741 |                 "id": {
 742 |                     "$ref": "#/definitions/RequestId"
 743 |                 },
 744 |                 "jsonrpc": {
 745 |                     "const": "2.0",
 746 |                     "type": "string"
 747 |                 }
 748 |             },
 749 |             "required": [
 750 |                 "error",
 751 |                 "id",
 752 |                 "jsonrpc"
 753 |             ],
 754 |             "type": "object"
 755 |         },
 756 |         "JSONRPCMessage": {
 757 |             "anyOf": [
 758 |                 {
 759 |                     "$ref": "#/definitions/JSONRPCRequest"
 760 |                 },
 761 |                 {
 762 |                     "$ref": "#/definitions/JSONRPCNotification"
 763 |                 },
 764 |                 {
 765 |                     "description": "A JSON-RPC batch request, as described in https://www.jsonrpc.org/specification#batch.",
 766 |                     "items": {
 767 |                         "anyOf": [
 768 |                             {
 769 |                                 "$ref": "#/definitions/JSONRPCRequest"
 770 |                             },
 771 |                             {
 772 |                                 "$ref": "#/definitions/JSONRPCNotification"
 773 |                             }
 774 |                         ]
 775 |                     },
 776 |                     "type": "array"
 777 |                 },
 778 |                 {
 779 |                     "$ref": "#/definitions/JSONRPCResponse"
 780 |                 },
 781 |                 {
 782 |                     "$ref": "#/definitions/JSONRPCError"
 783 |                 },
 784 |                 {
 785 |                     "description": "A JSON-RPC batch response, as described in https://www.jsonrpc.org/specification#batch.",
 786 |                     "items": {
 787 |                         "anyOf": [
 788 |                             {
 789 |                                 "$ref": "#/definitions/JSONRPCResponse"
 790 |                             },
 791 |                             {
 792 |                                 "$ref": "#/definitions/JSONRPCError"
 793 |                             }
 794 |                         ]
 795 |                     },
 796 |                     "type": "array"
 797 |                 }
 798 |             ],
 799 |             "description": "Refers to any valid JSON-RPC object that can be decoded off the wire, or encoded to be sent."
 800 |         },
 801 |         "JSONRPCNotification": {
 802 |             "description": "A notification which does not expect a response.",
 803 |             "properties": {
 804 |                 "jsonrpc": {
 805 |                     "const": "2.0",
 806 |                     "type": "string"
 807 |                 },
 808 |                 "method": {
 809 |                     "type": "string"
 810 |                 },
 811 |                 "params": {
 812 |                     "additionalProperties": {},
 813 |                     "properties": {
 814 |                         "_meta": {
 815 |                             "additionalProperties": {},
 816 |                             "description": "This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.",
 817 |                             "type": "object"
 818 |                         }
 819 |                     },
 820 |                     "type": "object"
 821 |                 }
 822 |             },
 823 |             "required": [
 824 |                 "jsonrpc",
 825 |                 "method"
 826 |             ],
 827 |             "type": "object"
 828 |         },
 829 |         "JSONRPCRequest": {
 830 |             "description": "A request that expects a response.",
 831 |             "properties": {
 832 |                 "id": {
 833 |                     "$ref": "#/definitions/RequestId"
 834 |                 },
 835 |                 "jsonrpc": {
 836 |                     "const": "2.0",
 837 |                     "type": "string"
 838 |                 },
 839 |                 "method": {
 840 |                     "type": "string"
 841 |                 },
 842 |                 "params": {
 843 |                     "additionalProperties": {},
 844 |                     "properties": {
 845 |                         "_meta": {
 846 |                             "properties": {
 847 |                                 "progressToken": {
 848 |                                     "$ref": "#/definitions/ProgressToken",
 849 |                                     "description": "If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications."
 850 |                                 }
 851 |                             },
 852 |                             "type": "object"
 853 |                         }
 854 |                     },
 855 |                     "type": "object"
 856 |                 }
 857 |             },
 858 |             "required": [
 859 |                 "id",
 860 |                 "jsonrpc",
 861 |                 "method"
 862 |             ],
 863 |             "type": "object"
 864 |         },
 865 |         "JSONRPCResponse": {
 866 |             "description": "A successful (non-error) response to a request.",
 867 |             "properties": {
 868 |                 "id": {
 869 |                     "$ref": "#/definitions/RequestId"
 870 |                 },
 871 |                 "jsonrpc": {
 872 |                     "const": "2.0",
 873 |                     "type": "string"
 874 |                 },
 875 |                 "result": {
 876 |                     "$ref": "#/definitions/Result"
 877 |                 }
 878 |             },
 879 |             "required": [
 880 |                 "id",
 881 |                 "jsonrpc",
 882 |                 "result"
 883 |             ],
 884 |             "type": "object"
 885 |         },
 886 |         "ListPromptsRequest": {
 887 |             "description": "Sent from the client to request a list of prompts and prompt templates the server has.",
 888 |             "properties": {
 889 |                 "method": {
 890 |                     "const": "prompts/list",
 891 |                     "type": "string"
 892 |                 },
 893 |                 "params": {
 894 |                     "properties": {
 895 |                         "cursor": {
 896 |                             "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
 897 |                             "type": "string"
 898 |                         }
 899 |                     },
 900 |                     "type": "object"
 901 |                 }
 902 |             },
 903 |             "required": [
 904 |                 "method"
 905 |             ],
 906 |             "type": "object"
 907 |         },
 908 |         "ListPromptsResult": {
 909 |             "description": "The server's response to a prompts/list request from the client.",
 910 |             "properties": {
 911 |                 "_meta": {
 912 |                     "additionalProperties": {},
 913 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
 914 |                     "type": "object"
 915 |                 },
 916 |                 "nextCursor": {
 917 |                     "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
 918 |                     "type": "string"
 919 |                 },
 920 |                 "prompts": {
 921 |                     "items": {
 922 |                         "$ref": "#/definitions/Prompt"
 923 |                     },
 924 |                     "type": "array"
 925 |                 }
 926 |             },
 927 |             "required": [
 928 |                 "prompts"
 929 |             ],
 930 |             "type": "object"
 931 |         },
 932 |         "ListResourceTemplatesRequest": {
 933 |             "description": "Sent from the client to request a list of resource templates the server has.",
 934 |             "properties": {
 935 |                 "method": {
 936 |                     "const": "resources/templates/list",
 937 |                     "type": "string"
 938 |                 },
 939 |                 "params": {
 940 |                     "properties": {
 941 |                         "cursor": {
 942 |                             "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
 943 |                             "type": "string"
 944 |                         }
 945 |                     },
 946 |                     "type": "object"
 947 |                 }
 948 |             },
 949 |             "required": [
 950 |                 "method"
 951 |             ],
 952 |             "type": "object"
 953 |         },
 954 |         "ListResourceTemplatesResult": {
 955 |             "description": "The server's response to a resources/templates/list request from the client.",
 956 |             "properties": {
 957 |                 "_meta": {
 958 |                     "additionalProperties": {},
 959 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
 960 |                     "type": "object"
 961 |                 },
 962 |                 "nextCursor": {
 963 |                     "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
 964 |                     "type": "string"
 965 |                 },
 966 |                 "resourceTemplates": {
 967 |                     "items": {
 968 |                         "$ref": "#/definitions/ResourceTemplate"
 969 |                     },
 970 |                     "type": "array"
 971 |                 }
 972 |             },
 973 |             "required": [
 974 |                 "resourceTemplates"
 975 |             ],
 976 |             "type": "object"
 977 |         },
 978 |         "ListResourcesRequest": {
 979 |             "description": "Sent from the client to request a list of resources the server has.",
 980 |             "properties": {
 981 |                 "method": {
 982 |                     "const": "resources/list",
 983 |                     "type": "string"
 984 |                 },
 985 |                 "params": {
 986 |                     "properties": {
 987 |                         "cursor": {
 988 |                             "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
 989 |                             "type": "string"
 990 |                         }
 991 |                     },
 992 |                     "type": "object"
 993 |                 }
 994 |             },
 995 |             "required": [
 996 |                 "method"
 997 |             ],
 998 |             "type": "object"
 999 |         },
1000 |         "ListResourcesResult": {
1001 |             "description": "The server's response to a resources/list request from the client.",
1002 |             "properties": {
1003 |                 "_meta": {
1004 |                     "additionalProperties": {},
1005 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
1006 |                     "type": "object"
1007 |                 },
1008 |                 "nextCursor": {
1009 |                     "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
1010 |                     "type": "string"
1011 |                 },
1012 |                 "resources": {
1013 |                     "items": {
1014 |                         "$ref": "#/definitions/Resource"
1015 |                     },
1016 |                     "type": "array"
1017 |                 }
1018 |             },
1019 |             "required": [
1020 |                 "resources"
1021 |             ],
1022 |             "type": "object"
1023 |         },
1024 |         "ListRootsRequest": {
1025 |             "description": "Sent from the server to request a list of root URIs from the client. Roots allow\nservers to ask for specific directories or files to operate on. A common example\nfor roots is providing a set of repositories or directories a server should operate\non.\n\nThis request is typically used when the server needs to understand the file system\nstructure or access specific locations that the client has permission to read from.",
1026 |             "properties": {
1027 |                 "method": {
1028 |                     "const": "roots/list",
1029 |                     "type": "string"
1030 |                 },
1031 |                 "params": {
1032 |                     "additionalProperties": {},
1033 |                     "properties": {
1034 |                         "_meta": {
1035 |                             "properties": {
1036 |                                 "progressToken": {
1037 |                                     "$ref": "#/definitions/ProgressToken",
1038 |                                     "description": "If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications."
1039 |                                 }
1040 |                             },
1041 |                             "type": "object"
1042 |                         }
1043 |                     },
1044 |                     "type": "object"
1045 |                 }
1046 |             },
1047 |             "required": [
1048 |                 "method"
1049 |             ],
1050 |             "type": "object"
1051 |         },
1052 |         "ListRootsResult": {
1053 |             "description": "The client's response to a roots/list request from the server.\nThis result contains an array of Root objects, each representing a root directory\nor file that the server can operate on.",
1054 |             "properties": {
1055 |                 "_meta": {
1056 |                     "additionalProperties": {},
1057 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
1058 |                     "type": "object"
1059 |                 },
1060 |                 "roots": {
1061 |                     "items": {
1062 |                         "$ref": "#/definitions/Root"
1063 |                     },
1064 |                     "type": "array"
1065 |                 }
1066 |             },
1067 |             "required": [
1068 |                 "roots"
1069 |             ],
1070 |             "type": "object"
1071 |         },
1072 |         "ListToolsRequest": {
1073 |             "description": "Sent from the client to request a list of tools the server has.",
1074 |             "properties": {
1075 |                 "method": {
1076 |                     "const": "tools/list",
1077 |                     "type": "string"
1078 |                 },
1079 |                 "params": {
1080 |                     "properties": {
1081 |                         "cursor": {
1082 |                             "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
1083 |                             "type": "string"
1084 |                         }
1085 |                     },
1086 |                     "type": "object"
1087 |                 }
1088 |             },
1089 |             "required": [
1090 |                 "method"
1091 |             ],
1092 |             "type": "object"
1093 |         },
1094 |         "ListToolsResult": {
1095 |             "description": "The server's response to a tools/list request from the client.",
1096 |             "properties": {
1097 |                 "_meta": {
1098 |                     "additionalProperties": {},
1099 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
1100 |                     "type": "object"
1101 |                 },
1102 |                 "nextCursor": {
1103 |                     "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
1104 |                     "type": "string"
1105 |                 },
1106 |                 "tools": {
1107 |                     "items": {
1108 |                         "$ref": "#/definitions/Tool"
1109 |                     },
1110 |                     "type": "array"
1111 |                 }
1112 |             },
1113 |             "required": [
1114 |                 "tools"
1115 |             ],
1116 |             "type": "object"
1117 |         },
1118 |         "LoggingLevel": {
1119 |             "description": "The severity of a log message.\n\nThese map to syslog message severities, as specified in RFC-5424:\nhttps://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1",
1120 |             "enum": [
1121 |                 "alert",
1122 |                 "critical",
1123 |                 "debug",
1124 |                 "emergency",
1125 |                 "error",
1126 |                 "info",
1127 |                 "notice",
1128 |                 "warning"
1129 |             ],
1130 |             "type": "string"
1131 |         },
1132 |         "LoggingMessageNotification": {
1133 |             "description": "Notification of a log message passed from server to client. If no logging/setLevel request has been sent from the client, the server MAY decide which messages to send automatically.",
1134 |             "properties": {
1135 |                 "method": {
1136 |                     "const": "notifications/message",
1137 |                     "type": "string"
1138 |                 },
1139 |                 "params": {
1140 |                     "properties": {
1141 |                         "data": {
1142 |                             "description": "The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here."
1143 |                         },
1144 |                         "level": {
1145 |                             "$ref": "#/definitions/LoggingLevel",
1146 |                             "description": "The severity of this log message."
1147 |                         },
1148 |                         "logger": {
1149 |                             "description": "An optional name of the logger issuing this message.",
1150 |                             "type": "string"
1151 |                         }
1152 |                     },
1153 |                     "required": [
1154 |                         "data",
1155 |                         "level"
1156 |                     ],
1157 |                     "type": "object"
1158 |                 }
1159 |             },
1160 |             "required": [
1161 |                 "method",
1162 |                 "params"
1163 |             ],
1164 |             "type": "object"
1165 |         },
1166 |         "ModelHint": {
1167 |             "description": "Hints to use for model selection.\n\nKeys not declared here are currently left unspecified by the spec and are up\nto the client to interpret.",
1168 |             "properties": {
1169 |                 "name": {
1170 |                     "description": "A hint for a model name.\n\nThe client SHOULD treat this as a substring of a model name; for example:\n - `claude-3-5-sonnet` should match `claude-3-5-sonnet-20241022`\n - `sonnet` should match `claude-3-5-sonnet-20241022`, `claude-3-sonnet-20240229`, etc.\n - `claude` should match any Claude model\n\nThe client MAY also map the string to a different provider's model name or a different model family, as long as it fills a similar niche; for example:\n - `gemini-1.5-flash` could match `claude-3-haiku-20240307`",
1171 |                     "type": "string"
1172 |                 }
1173 |             },
1174 |             "type": "object"
1175 |         },
1176 |         "ModelPreferences": {
1177 |             "description": "The server's preferences for model selection, requested of the client during sampling.\n\nBecause LLMs can vary along multiple dimensions, choosing the \"best\" model is\nrarely straightforward.  Different models excel in different areas—some are\nfaster but less capable, others are more capable but more expensive, and so\non. This interface allows servers to express their priorities across multiple\ndimensions to help clients make an appropriate selection for their use case.\n\nThese preferences are always advisory. The client MAY ignore them. It is also\nup to the client to decide how to interpret these preferences and how to\nbalance them against other considerations.",
1178 |             "properties": {
1179 |                 "costPriority": {
1180 |                     "description": "How much to prioritize cost when selecting a model. A value of 0 means cost\nis not important, while a value of 1 means cost is the most important\nfactor.",
1181 |                     "maximum": 1,
1182 |                     "minimum": 0,
1183 |                     "type": "number"
1184 |                 },
1185 |                 "hints": {
1186 |                     "description": "Optional hints to use for model selection.\n\nIf multiple hints are specified, the client MUST evaluate them in order\n(such that the first match is taken).\n\nThe client SHOULD prioritize these hints over the numeric priorities, but\nMAY still use the priorities to select from ambiguous matches.",
1187 |                     "items": {
1188 |                         "$ref": "#/definitions/ModelHint"
1189 |                     },
1190 |                     "type": "array"
1191 |                 },
1192 |                 "intelligencePriority": {
1193 |                     "description": "How much to prioritize intelligence and capabilities when selecting a\nmodel. A value of 0 means intelligence is not important, while a value of 1\nmeans intelligence is the most important factor.",
1194 |                     "maximum": 1,
1195 |                     "minimum": 0,
1196 |                     "type": "number"
1197 |                 },
1198 |                 "speedPriority": {
1199 |                     "description": "How much to prioritize sampling speed (latency) when selecting a model. A\nvalue of 0 means speed is not important, while a value of 1 means speed is\nthe most important factor.",
1200 |                     "maximum": 1,
1201 |                     "minimum": 0,
1202 |                     "type": "number"
1203 |                 }
1204 |             },
1205 |             "type": "object"
1206 |         },
1207 |         "Notification": {
1208 |             "properties": {
1209 |                 "method": {
1210 |                     "type": "string"
1211 |                 },
1212 |                 "params": {
1213 |                     "additionalProperties": {},
1214 |                     "properties": {
1215 |                         "_meta": {
1216 |                             "additionalProperties": {},
1217 |                             "description": "This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.",
1218 |                             "type": "object"
1219 |                         }
1220 |                     },
1221 |                     "type": "object"
1222 |                 }
1223 |             },
1224 |             "required": [
1225 |                 "method"
1226 |             ],
1227 |             "type": "object"
1228 |         },
1229 |         "PaginatedRequest": {
1230 |             "properties": {
1231 |                 "method": {
1232 |                     "type": "string"
1233 |                 },
1234 |                 "params": {
1235 |                     "properties": {
1236 |                         "cursor": {
1237 |                             "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
1238 |                             "type": "string"
1239 |                         }
1240 |                     },
1241 |                     "type": "object"
1242 |                 }
1243 |             },
1244 |             "required": [
1245 |                 "method"
1246 |             ],
1247 |             "type": "object"
1248 |         },
1249 |         "PaginatedResult": {
1250 |             "properties": {
1251 |                 "_meta": {
1252 |                     "additionalProperties": {},
1253 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
1254 |                     "type": "object"
1255 |                 },
1256 |                 "nextCursor": {
1257 |                     "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
1258 |                     "type": "string"
1259 |                 }
1260 |             },
1261 |             "type": "object"
1262 |         },
1263 |         "PingRequest": {
1264 |             "description": "A ping, issued by either the server or the client, to check that the other party is still alive. The receiver must promptly respond, or else may be disconnected.",
1265 |             "properties": {
1266 |                 "method": {
1267 |                     "const": "ping",
1268 |                     "type": "string"
1269 |                 },
1270 |                 "params": {
1271 |                     "additionalProperties": {},
1272 |                     "properties": {
1273 |                         "_meta": {
1274 |                             "properties": {
1275 |                                 "progressToken": {
1276 |                                     "$ref": "#/definitions/ProgressToken",
1277 |                                     "description": "If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications."
1278 |                                 }
1279 |                             },
1280 |                             "type": "object"
1281 |                         }
1282 |                     },
1283 |                     "type": "object"
1284 |                 }
1285 |             },
1286 |             "required": [
1287 |                 "method"
1288 |             ],
1289 |             "type": "object"
1290 |         },
1291 |         "ProgressNotification": {
1292 |             "description": "An out-of-band notification used to inform the receiver of a progress update for a long-running request.",
1293 |             "properties": {
1294 |                 "method": {
1295 |                     "const": "notifications/progress",
1296 |                     "type": "string"
1297 |                 },
1298 |                 "params": {
1299 |                     "properties": {
1300 |                         "message": {
1301 |                             "description": "An optional message describing the current progress.",
1302 |                             "type": "string"
1303 |                         },
1304 |                         "progress": {
1305 |                             "description": "The progress thus far. This should increase every time progress is made, even if the total is unknown.",
1306 |                             "type": "number"
1307 |                         },
1308 |                         "progressToken": {
1309 |                             "$ref": "#/definitions/ProgressToken",
1310 |                             "description": "The progress token which was given in the initial request, used to associate this notification with the request that is proceeding."
1311 |                         },
1312 |                         "total": {
1313 |                             "description": "Total number of items to process (or total progress required), if known.",
1314 |                             "type": "number"
1315 |                         }
1316 |                     },
1317 |                     "required": [
1318 |                         "progress",
1319 |                         "progressToken"
1320 |                     ],
1321 |                     "type": "object"
1322 |                 }
1323 |             },
1324 |             "required": [
1325 |                 "method",
1326 |                 "params"
1327 |             ],
1328 |             "type": "object"
1329 |         },
1330 |         "ProgressToken": {
1331 |             "description": "A progress token, used to associate progress notifications with the original request.",
1332 |             "type": [
1333 |                 "string",
1334 |                 "integer"
1335 |             ]
1336 |         },
1337 |         "Prompt": {
1338 |             "description": "A prompt or prompt template that the server offers.",
1339 |             "properties": {
1340 |                 "arguments": {
1341 |                     "description": "A list of arguments to use for templating the prompt.",
1342 |                     "items": {
1343 |                         "$ref": "#/definitions/PromptArgument"
1344 |                     },
1345 |                     "type": "array"
1346 |                 },
1347 |                 "description": {
1348 |                     "description": "An optional description of what this prompt provides",
1349 |                     "type": "string"
1350 |                 },
1351 |                 "name": {
1352 |                     "description": "The name of the prompt or prompt template.",
1353 |                     "type": "string"
1354 |                 }
1355 |             },
1356 |             "required": [
1357 |                 "name"
1358 |             ],
1359 |             "type": "object"
1360 |         },
1361 |         "PromptArgument": {
1362 |             "description": "Describes an argument that a prompt can accept.",
1363 |             "properties": {
1364 |                 "description": {
1365 |                     "description": "A human-readable description of the argument.",
1366 |                     "type": "string"
1367 |                 },
1368 |                 "name": {
1369 |                     "description": "The name of the argument.",
1370 |                     "type": "string"
1371 |                 },
1372 |                 "required": {
1373 |                     "description": "Whether this argument must be provided.",
1374 |                     "type": "boolean"
1375 |                 }
1376 |             },
1377 |             "required": [
1378 |                 "name"
1379 |             ],
1380 |             "type": "object"
1381 |         },
1382 |         "PromptListChangedNotification": {
1383 |             "description": "An optional notification from the server to the client, informing it that the list of prompts it offers has changed. This may be issued by servers without any previous subscription from the client.",
1384 |             "properties": {
1385 |                 "method": {
1386 |                     "const": "notifications/prompts/list_changed",
1387 |                     "type": "string"
1388 |                 },
1389 |                 "params": {
1390 |                     "additionalProperties": {},
1391 |                     "properties": {
1392 |                         "_meta": {
1393 |                             "additionalProperties": {},
1394 |                             "description": "This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.",
1395 |                             "type": "object"
1396 |                         }
1397 |                     },
1398 |                     "type": "object"
1399 |                 }
1400 |             },
1401 |             "required": [
1402 |                 "method"
1403 |             ],
1404 |             "type": "object"
1405 |         },
1406 |         "PromptMessage": {
1407 |             "description": "Describes a message returned as part of a prompt.\n\nThis is similar to `SamplingMessage`, but also supports the embedding of\nresources from the MCP server.",
1408 |             "properties": {
1409 |                 "content": {
1410 |                     "anyOf": [
1411 |                         {
1412 |                             "$ref": "#/definitions/TextContent"
1413 |                         },
1414 |                         {
1415 |                             "$ref": "#/definitions/ImageContent"
1416 |                         },
1417 |                         {
1418 |                             "$ref": "#/definitions/AudioContent"
1419 |                         },
1420 |                         {
1421 |                             "$ref": "#/definitions/EmbeddedResource"
1422 |                         }
1423 |                     ]
1424 |                 },
1425 |                 "role": {
1426 |                     "$ref": "#/definitions/Role"
1427 |                 }
1428 |             },
1429 |             "required": [
1430 |                 "content",
1431 |                 "role"
1432 |             ],
1433 |             "type": "object"
1434 |         },
1435 |         "PromptReference": {
1436 |             "description": "Identifies a prompt.",
1437 |             "properties": {
1438 |                 "name": {
1439 |                     "description": "The name of the prompt or prompt template",
1440 |                     "type": "string"
1441 |                 },
1442 |                 "type": {
1443 |                     "const": "ref/prompt",
1444 |                     "type": "string"
1445 |                 }
1446 |             },
1447 |             "required": [
1448 |                 "name",
1449 |                 "type"
1450 |             ],
1451 |             "type": "object"
1452 |         },
1453 |         "ReadResourceRequest": {
1454 |             "description": "Sent from the client to the server, to read a specific resource URI.",
1455 |             "properties": {
1456 |                 "method": {
1457 |                     "const": "resources/read",
1458 |                     "type": "string"
1459 |                 },
1460 |                 "params": {
1461 |                     "properties": {
1462 |                         "uri": {
1463 |                             "description": "The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.",
1464 |                             "format": "uri",
1465 |                             "type": "string"
1466 |                         }
1467 |                     },
1468 |                     "required": [
1469 |                         "uri"
1470 |                     ],
1471 |                     "type": "object"
1472 |                 }
1473 |             },
1474 |             "required": [
1475 |                 "method",
1476 |                 "params"
1477 |             ],
1478 |             "type": "object"
1479 |         },
1480 |         "ReadResourceResult": {
1481 |             "description": "The server's response to a resources/read request from the client.",
1482 |             "properties": {
1483 |                 "_meta": {
1484 |                     "additionalProperties": {},
1485 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
1486 |                     "type": "object"
1487 |                 },
1488 |                 "contents": {
1489 |                     "items": {
1490 |                         "anyOf": [
1491 |                             {
1492 |                                 "$ref": "#/definitions/TextResourceContents"
1493 |                             },
1494 |                             {
1495 |                                 "$ref": "#/definitions/BlobResourceContents"
1496 |                             }
1497 |                         ]
1498 |                     },
1499 |                     "type": "array"
1500 |                 }
1501 |             },
1502 |             "required": [
1503 |                 "contents"
1504 |             ],
1505 |             "type": "object"
1506 |         },
1507 |         "Request": {
1508 |             "properties": {
1509 |                 "method": {
1510 |                     "type": "string"
1511 |                 },
1512 |                 "params": {
1513 |                     "additionalProperties": {},
1514 |                     "properties": {
1515 |                         "_meta": {
1516 |                             "properties": {
1517 |                                 "progressToken": {
1518 |                                     "$ref": "#/definitions/ProgressToken",
1519 |                                     "description": "If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications."
1520 |                                 }
1521 |                             },
1522 |                             "type": "object"
1523 |                         }
1524 |                     },
1525 |                     "type": "object"
1526 |                 }
1527 |             },
1528 |             "required": [
1529 |                 "method"
1530 |             ],
1531 |             "type": "object"
1532 |         },
1533 |         "RequestId": {
1534 |             "description": "A uniquely identifying ID for a request in JSON-RPC.",
1535 |             "type": [
1536 |                 "string",
1537 |                 "integer"
1538 |             ]
1539 |         },
1540 |         "Resource": {
1541 |             "description": "A known resource that the server is capable of reading.",
1542 |             "properties": {
1543 |                 "annotations": {
1544 |                     "$ref": "#/definitions/Annotations",
1545 |                     "description": "Optional annotations for the client."
1546 |                 },
1547 |                 "description": {
1548 |                     "description": "A description of what this resource represents.\n\nThis can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.",
1549 |                     "type": "string"
1550 |                 },
1551 |                 "mimeType": {
1552 |                     "description": "The MIME type of this resource, if known.",
1553 |                     "type": "string"
1554 |                 },
1555 |                 "name": {
1556 |                     "description": "A human-readable name for this resource.\n\nThis can be used by clients to populate UI elements.",
1557 |                     "type": "string"
1558 |                 },
1559 |                 "size": {
1560 |                     "description": "The size of the raw resource content, in bytes (i.e., before base64 encoding or any tokenization), if known.\n\nThis can be used by Hosts to display file sizes and estimate context window usage.",
1561 |                     "type": "integer"
1562 |                 },
1563 |                 "uri": {
1564 |                     "description": "The URI of this resource.",
1565 |                     "format": "uri",
1566 |                     "type": "string"
1567 |                 }
1568 |             },
1569 |             "required": [
1570 |                 "name",
1571 |                 "uri"
1572 |             ],
1573 |             "type": "object"
1574 |         },
1575 |         "ResourceContents": {
1576 |             "description": "The contents of a specific resource or sub-resource.",
1577 |             "properties": {
1578 |                 "mimeType": {
1579 |                     "description": "The MIME type of this resource, if known.",
1580 |                     "type": "string"
1581 |                 },
1582 |                 "uri": {
1583 |                     "description": "The URI of this resource.",
1584 |                     "format": "uri",
1585 |                     "type": "string"
1586 |                 }
1587 |             },
1588 |             "required": [
1589 |                 "uri"
1590 |             ],
1591 |             "type": "object"
1592 |         },
1593 |         "ResourceListChangedNotification": {
1594 |             "description": "An optional notification from the server to the client, informing it that the list of resources it can read from has changed. This may be issued by servers without any previous subscription from the client.",
1595 |             "properties": {
1596 |                 "method": {
1597 |                     "const": "notifications/resources/list_changed",
1598 |                     "type": "string"
1599 |                 },
1600 |                 "params": {
1601 |                     "additionalProperties": {},
1602 |                     "properties": {
1603 |                         "_meta": {
1604 |                             "additionalProperties": {},
1605 |                             "description": "This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.",
1606 |                             "type": "object"
1607 |                         }
1608 |                     },
1609 |                     "type": "object"
1610 |                 }
1611 |             },
1612 |             "required": [
1613 |                 "method"
1614 |             ],
1615 |             "type": "object"
1616 |         },
1617 |         "ResourceReference": {
1618 |             "description": "A reference to a resource or resource template definition.",
1619 |             "properties": {
1620 |                 "type": {
1621 |                     "const": "ref/resource",
1622 |                     "type": "string"
1623 |                 },
1624 |                 "uri": {
1625 |                     "description": "The URI or URI template of the resource.",
1626 |                     "format": "uri-template",
1627 |                     "type": "string"
1628 |                 }
1629 |             },
1630 |             "required": [
1631 |                 "type",
1632 |                 "uri"
1633 |             ],
1634 |             "type": "object"
1635 |         },
1636 |         "ResourceTemplate": {
1637 |             "description": "A template description for resources available on the server.",
1638 |             "properties": {
1639 |                 "annotations": {
1640 |                     "$ref": "#/definitions/Annotations",
1641 |                     "description": "Optional annotations for the client."
1642 |                 },
1643 |                 "description": {
1644 |                     "description": "A description of what this template is for.\n\nThis can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.",
1645 |                     "type": "string"
1646 |                 },
1647 |                 "mimeType": {
1648 |                     "description": "The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.",
1649 |                     "type": "string"
1650 |                 },
1651 |                 "name": {
1652 |                     "description": "A human-readable name for the type of resource this template refers to.\n\nThis can be used by clients to populate UI elements.",
1653 |                     "type": "string"
1654 |                 },
1655 |                 "uriTemplate": {
1656 |                     "description": "A URI template (according to RFC 6570) that can be used to construct resource URIs.",
1657 |                     "format": "uri-template",
1658 |                     "type": "string"
1659 |                 }
1660 |             },
1661 |             "required": [
1662 |                 "name",
1663 |                 "uriTemplate"
1664 |             ],
1665 |             "type": "object"
1666 |         },
1667 |         "ResourceUpdatedNotification": {
1668 |             "description": "A notification from the server to the client, informing it that a resource has changed and may need to be read again. This should only be sent if the client previously sent a resources/subscribe request.",
1669 |             "properties": {
1670 |                 "method": {
1671 |                     "const": "notifications/resources/updated",
1672 |                     "type": "string"
1673 |                 },
1674 |                 "params": {
1675 |                     "properties": {
1676 |                         "uri": {
1677 |                             "description": "The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.",
1678 |                             "format": "uri",
1679 |                             "type": "string"
1680 |                         }
1681 |                     },
1682 |                     "required": [
1683 |                         "uri"
1684 |                     ],
1685 |                     "type": "object"
1686 |                 }
1687 |             },
1688 |             "required": [
1689 |                 "method",
1690 |                 "params"
1691 |             ],
1692 |             "type": "object"
1693 |         },
1694 |         "Result": {
1695 |             "additionalProperties": {},
1696 |             "properties": {
1697 |                 "_meta": {
1698 |                     "additionalProperties": {},
1699 |                     "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
1700 |                     "type": "object"
1701 |                 }
1702 |             },
1703 |             "type": "object"
1704 |         },
1705 |         "Role": {
1706 |             "description": "The sender or recipient of messages and data in a conversation.",
1707 |             "enum": [
1708 |                 "assistant",
1709 |                 "user"
1710 |             ],
1711 |             "type": "string"
1712 |         },
1713 |         "Root": {
1714 |             "description": "Represents a root directory or file that the server can operate on.",
1715 |             "properties": {
1716 |                 "name": {
1717 |                     "description": "An optional name for the root. This can be used to provide a human-readable\nidentifier for the root, which may be useful for display purposes or for\nreferencing the root in other parts of the application.",
1718 |                     "type": "string"
1719 |                 },
1720 |                 "uri": {
1721 |                     "description": "The URI identifying the root. This *must* start with file:// for now.\nThis restriction may be relaxed in future versions of the protocol to allow\nother URI schemes.",
1722 |                     "format": "uri",
1723 |                     "type": "string"
1724 |                 }
1725 |             },
1726 |             "required": [
1727 |                 "uri"
1728 |             ],
1729 |             "type": "object"
1730 |         },
1731 |         "RootsListChangedNotification": {
1732 |             "description": "A notification from the client to the server, informing it that the list of roots has changed.\nThis notification should be sent whenever the client adds, removes, or modifies any root.\nThe server should then request an updated list of roots using the ListRootsRequest.",
1733 |             "properties": {
1734 |                 "method": {
1735 |                     "const": "notifications/roots/list_changed",
1736 |                     "type": "string"
1737 |                 },
1738 |                 "params": {
1739 |                     "additionalProperties": {},
1740 |                     "properties": {
1741 |                         "_meta": {
1742 |                             "additionalProperties": {},
1743 |                             "description": "This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.",
1744 |                             "type": "object"
1745 |                         }
1746 |                     },
1747 |                     "type": "object"
1748 |                 }
1749 |             },
1750 |             "required": [
1751 |                 "method"
1752 |             ],
1753 |             "type": "object"
1754 |         },
1755 |         "SamplingMessage": {
1756 |             "description": "Describes a message issued to or received from an LLM API.",
1757 |             "properties": {
1758 |                 "content": {
1759 |                     "anyOf": [
1760 |                         {
1761 |                             "$ref": "#/definitions/TextContent"
1762 |                         },
1763 |                         {
1764 |                             "$ref": "#/definitions/ImageContent"
1765 |                         },
1766 |                         {
1767 |                             "$ref": "#/definitions/AudioContent"
1768 |                         }
1769 |                     ]
1770 |                 },
1771 |                 "role": {
1772 |                     "$ref": "#/definitions/Role"
1773 |                 }
1774 |             },
1775 |             "required": [
1776 |                 "content",
1777 |                 "role"
1778 |             ],
1779 |             "type": "object"
1780 |         },
1781 |         "ServerCapabilities": {
1782 |             "description": "Capabilities that a server may support. Known capabilities are defined here, in this schema, but this is not a closed set: any server can define its own, additional capabilities.",
1783 |             "properties": {
1784 |                 "completions": {
1785 |                     "additionalProperties": true,
1786 |                     "description": "Present if the server supports argument autocompletion suggestions.",
1787 |                     "properties": {},
1788 |                     "type": "object"
1789 |                 },
1790 |                 "experimental": {
1791 |                     "additionalProperties": {
1792 |                         "additionalProperties": true,
1793 |                         "properties": {},
1794 |                         "type": "object"
1795 |                     },
1796 |                     "description": "Experimental, non-standard capabilities that the server supports.",
1797 |                     "type": "object"
1798 |                 },
1799 |                 "logging": {
1800 |                     "additionalProperties": true,
1801 |                     "description": "Present if the server supports sending log messages to the client.",
1802 |                     "properties": {},
1803 |                     "type": "object"
1804 |                 },
1805 |                 "prompts": {
1806 |                     "description": "Present if the server offers any prompt templates.",
1807 |                     "properties": {
1808 |                         "listChanged": {
1809 |                             "description": "Whether this server supports notifications for changes to the prompt list.",
1810 |                             "type": "boolean"
1811 |                         }
1812 |                     },
1813 |                     "type": "object"
1814 |                 },
1815 |                 "resources": {
1816 |                     "description": "Present if the server offers any resources to read.",
1817 |                     "properties": {
1818 |                         "listChanged": {
1819 |                             "description": "Whether this server supports notifications for changes to the resource list.",
1820 |                             "type": "boolean"
1821 |                         },
1822 |                         "subscribe": {
1823 |                             "description": "Whether this server supports subscribing to resource updates.",
1824 |                             "type": "boolean"
1825 |                         }
1826 |                     },
1827 |                     "type": "object"
1828 |                 },
1829 |                 "tools": {
1830 |                     "description": "Present if the server offers any tools to call.",
1831 |                     "properties": {
1832 |                         "listChanged": {
1833 |                             "description": "Whether this server supports notifications for changes to the tool list.",
1834 |                             "type": "boolean"
1835 |                         }
1836 |                     },
1837 |                     "type": "object"
1838 |                 }
1839 |             },
1840 |             "type": "object"
1841 |         },
1842 |         "ServerNotification": {
1843 |             "anyOf": [
1844 |                 {
1845 |                     "$ref": "#/definitions/CancelledNotification"
1846 |                 },
1847 |                 {
1848 |                     "$ref": "#/definitions/ProgressNotification"
1849 |                 },
1850 |                 {
1851 |                     "$ref": "#/definitions/ResourceListChangedNotification"
1852 |                 },
1853 |                 {
1854 |                     "$ref": "#/definitions/ResourceUpdatedNotification"
1855 |                 },
1856 |                 {
1857 |                     "$ref": "#/definitions/PromptListChangedNotification"
1858 |                 },
1859 |                 {
1860 |                     "$ref": "#/definitions/ToolListChangedNotification"
1861 |                 },
1862 |                 {
1863 |                     "$ref": "#/definitions/LoggingMessageNotification"
1864 |                 }
1865 |             ]
1866 |         },
1867 |         "ServerRequest": {
1868 |             "anyOf": [
1869 |                 {
1870 |                     "$ref": "#/definitions/PingRequest"
1871 |                 },
1872 |                 {
1873 |                     "$ref": "#/definitions/CreateMessageRequest"
1874 |                 },
1875 |                 {
1876 |                     "$ref": "#/definitions/ListRootsRequest"
1877 |                 }
1878 |             ]
1879 |         },
1880 |         "ServerResult": {
1881 |             "anyOf": [
1882 |                 {
1883 |                     "$ref": "#/definitions/Result"
1884 |                 },
1885 |                 {
1886 |                     "$ref": "#/definitions/InitializeResult"
1887 |                 },
1888 |                 {
1889 |                     "$ref": "#/definitions/ListResourcesResult"
1890 |                 },
1891 |                 {
1892 |                     "$ref": "#/definitions/ListResourceTemplatesResult"
1893 |                 },
1894 |                 {
1895 |                     "$ref": "#/definitions/ReadResourceResult"
1896 |                 },
1897 |                 {
1898 |                     "$ref": "#/definitions/ListPromptsResult"
1899 |                 },
1900 |                 {
1901 |                     "$ref": "#/definitions/GetPromptResult"
1902 |                 },
1903 |                 {
1904 |                     "$ref": "#/definitions/ListToolsResult"
1905 |                 },
1906 |                 {
1907 |                     "$ref": "#/definitions/CallToolResult"
1908 |                 },
1909 |                 {
1910 |                     "$ref": "#/definitions/CompleteResult"
1911 |                 }
1912 |             ]
1913 |         },
1914 |         "SetLevelRequest": {
1915 |             "description": "A request from the client to the server, to enable or adjust logging.",
1916 |             "properties": {
1917 |                 "method": {
1918 |                     "const": "logging/setLevel",
1919 |                     "type": "string"
1920 |                 },
1921 |                 "params": {
1922 |                     "properties": {
1923 |                         "level": {
1924 |                             "$ref": "#/definitions/LoggingLevel",
1925 |                             "description": "The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/message."
1926 |                         }
1927 |                     },
1928 |                     "required": [
1929 |                         "level"
1930 |                     ],
1931 |                     "type": "object"
1932 |                 }
1933 |             },
1934 |             "required": [
1935 |                 "method",
1936 |                 "params"
1937 |             ],
1938 |             "type": "object"
1939 |         },
1940 |         "SubscribeRequest": {
1941 |             "description": "Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.",
1942 |             "properties": {
1943 |                 "method": {
1944 |                     "const": "resources/subscribe",
1945 |                     "type": "string"
1946 |                 },
1947 |                 "params": {
1948 |                     "properties": {
1949 |                         "uri": {
1950 |                             "description": "The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.",
1951 |                             "format": "uri",
1952 |                             "type": "string"
1953 |                         }
1954 |                     },
1955 |                     "required": [
1956 |                         "uri"
1957 |                     ],
1958 |                     "type": "object"
1959 |                 }
1960 |             },
1961 |             "required": [
1962 |                 "method",
1963 |                 "params"
1964 |             ],
1965 |             "type": "object"
1966 |         },
1967 |         "TextContent": {
1968 |             "description": "Text provided to or from an LLM.",
1969 |             "properties": {
1970 |                 "annotations": {
1971 |                     "$ref": "#/definitions/Annotations",
1972 |                     "description": "Optional annotations for the client."
1973 |                 },
1974 |                 "text": {
1975 |                     "description": "The text content of the message.",
1976 |                     "type": "string"
1977 |                 },
1978 |                 "type": {
1979 |                     "const": "text",
1980 |                     "type": "string"
1981 |                 }
1982 |             },
1983 |             "required": [
1984 |                 "text",
1985 |                 "type"
1986 |             ],
1987 |             "type": "object"
1988 |         },
1989 |         "TextResourceContents": {
1990 |             "properties": {
1991 |                 "mimeType": {
1992 |                     "description": "The MIME type of this resource, if known.",
1993 |                     "type": "string"
1994 |                 },
1995 |                 "text": {
1996 |                     "description": "The text of the item. This must only be set if the item can actually be represented as text (not binary data).",
1997 |                     "type": "string"
1998 |                 },
1999 |                 "uri": {
2000 |                     "description": "The URI of this resource.",
2001 |                     "format": "uri",
2002 |                     "type": "string"
2003 |                 }
2004 |             },
2005 |             "required": [
2006 |                 "text",
2007 |                 "uri"
2008 |             ],
2009 |             "type": "object"
2010 |         },
2011 |         "Tool": {
2012 |             "description": "Definition for a tool the client can call.",
2013 |             "properties": {
2014 |                 "annotations": {
2015 |                     "$ref": "#/definitions/ToolAnnotations",
2016 |                     "description": "Optional additional tool information."
2017 |                 },
2018 |                 "description": {
2019 |                     "description": "A human-readable description of the tool.\n\nThis can be used by clients to improve the LLM's understanding of available tools. It can be thought of like a \"hint\" to the model.",
2020 |                     "type": "string"
2021 |                 },
2022 |                 "inputSchema": {
2023 |                     "description": "A JSON Schema object defining the expected parameters for the tool.",
2024 |                     "properties": {
2025 |                         "properties": {
2026 |                             "additionalProperties": {
2027 |                                 "additionalProperties": true,
2028 |                                 "properties": {},
2029 |                                 "type": "object"
2030 |                             },
2031 |                             "type": "object"
2032 |                         },
2033 |                         "required": {
2034 |                             "items": {
2035 |                                 "type": "string"
2036 |                             },
2037 |                             "type": "array"
2038 |                         },
2039 |                         "type": {
2040 |                             "const": "object",
2041 |                             "type": "string"
2042 |                         }
2043 |                     },
2044 |                     "required": [
2045 |                         "type"
2046 |                     ],
2047 |                     "type": "object"
2048 |                 },
2049 |                 "name": {
2050 |                     "description": "The name of the tool.",
2051 |                     "type": "string"
2052 |                 }
2053 |             },
2054 |             "required": [
2055 |                 "inputSchema",
2056 |                 "name"
2057 |             ],
2058 |             "type": "object"
2059 |         },
2060 |         "ToolAnnotations": {
2061 |             "description": "Additional properties describing a Tool to clients.\n\nNOTE: all properties in ToolAnnotations are **hints**.\nThey are not guaranteed to provide a faithful description of\ntool behavior (including descriptive properties like `title`).\n\nClients should never make tool use decisions based on ToolAnnotations\nreceived from untrusted servers.",
2062 |             "properties": {
2063 |                 "destructiveHint": {
2064 |                     "description": "If true, the tool may perform destructive updates to its environment.\nIf false, the tool performs only additive updates.\n\n(This property is meaningful only when `readOnlyHint == false`)\n\nDefault: true",
2065 |                     "type": "boolean"
2066 |                 },
2067 |                 "idempotentHint": {
2068 |                     "description": "If true, calling the tool repeatedly with the same arguments\nwill have no additional effect on the its environment.\n\n(This property is meaningful only when `readOnlyHint == false`)\n\nDefault: false",
2069 |                     "type": "boolean"
2070 |                 },
2071 |                 "openWorldHint": {
2072 |                     "description": "If true, this tool may interact with an \"open world\" of external\nentities. If false, the tool's domain of interaction is closed.\nFor example, the world of a web search tool is open, whereas that\nof a memory tool is not.\n\nDefault: true",
2073 |                     "type": "boolean"
2074 |                 },
2075 |                 "readOnlyHint": {
2076 |                     "description": "If true, the tool does not modify its environment.\n\nDefault: false",
2077 |                     "type": "boolean"
2078 |                 },
2079 |                 "title": {
2080 |                     "description": "A human-readable title for the tool.",
2081 |                     "type": "string"
2082 |                 }
2083 |             },
2084 |             "type": "object"
2085 |         },
2086 |         "ToolListChangedNotification": {
2087 |             "description": "An optional notification from the server to the client, informing it that the list of tools it offers has changed. This may be issued by servers without any previous subscription from the client.",
2088 |             "properties": {
2089 |                 "method": {
2090 |                     "const": "notifications/tools/list_changed",
2091 |                     "type": "string"
2092 |                 },
2093 |                 "params": {
2094 |                     "additionalProperties": {},
2095 |                     "properties": {
2096 |                         "_meta": {
2097 |                             "additionalProperties": {},
2098 |                             "description": "This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.",
2099 |                             "type": "object"
2100 |                         }
2101 |                     },
2102 |                     "type": "object"
2103 |                 }
2104 |             },
2105 |             "required": [
2106 |                 "method"
2107 |             ],
2108 |             "type": "object"
2109 |         },
2110 |         "UnsubscribeRequest": {
2111 |             "description": "Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.",
2112 |             "properties": {
2113 |                 "method": {
2114 |                     "const": "resources/unsubscribe",
2115 |                     "type": "string"
2116 |                 },
2117 |                 "params": {
2118 |                     "properties": {
2119 |                         "uri": {
2120 |                             "description": "The URI of the resource to unsubscribe from.",
2121 |                             "format": "uri",
2122 |                             "type": "string"
2123 |                         }
2124 |                     },
2125 |                     "required": [
2126 |                         "uri"
2127 |                     ],
2128 |                     "type": "object"
2129 |                 }
2130 |             },
2131 |             "required": [
2132 |                 "method",
2133 |                 "params"
2134 |             ],
2135 |             "type": "object"
2136 |         }
2137 |     }
2138 | }
2139 | 
2140 | 


--------------------------------------------------------------------------------
/schema/2025-03-26/schema.ts:
--------------------------------------------------------------------------------
   1 | /* JSON-RPC types */
   2 | 
   3 | /**
   4 |  * Refers to any valid JSON-RPC object that can be decoded off the wire, or encoded to be sent.
   5 |  */
   6 | export type JSONRPCMessage =
   7 |   | JSONRPCRequest
   8 |   | JSONRPCNotification
   9 |   | JSONRPCBatchRequest
  10 |   | JSONRPCResponse
  11 |   | JSONRPCError
  12 |   | JSONRPCBatchResponse;
  13 | 
  14 | /**
  15 |  * A JSON-RPC batch request, as described in https://www.jsonrpc.org/specification#batch.
  16 |  */
  17 | export type JSONRPCBatchRequest = (JSONRPCRequest | JSONRPCNotification)[];
  18 | 
  19 | /**
  20 |  * A JSON-RPC batch response, as described in https://www.jsonrpc.org/specification#batch.
  21 |  */
  22 | export type JSONRPCBatchResponse = (JSONRPCResponse | JSONRPCError)[];
  23 | 
  24 | export const LATEST_PROTOCOL_VERSION = "2025-03-26";
  25 | export const JSONRPC_VERSION = "2.0";
  26 | 
  27 | /**
  28 |  * A progress token, used to associate progress notifications with the original request.
  29 |  */
  30 | export type ProgressToken = string | number;
  31 | 
  32 | /**
  33 |  * An opaque token used to represent a cursor for pagination.
  34 |  */
  35 | export type Cursor = string;
  36 | 
  37 | export interface Request {
  38 |   method: string;
  39 |   params?: {
  40 |     _meta?: {
  41 |       /**
  42 |        * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
  43 |        */
  44 |       progressToken?: ProgressToken;
  45 |     };
  46 |     [key: string]: unknown;
  47 |   };
  48 | }
  49 | 
  50 | export interface Notification {
  51 |   method: string;
  52 |   params?: {
  53 |     /**
  54 |      * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
  55 |      */
  56 |     _meta?: { [key: string]: unknown };
  57 |     [key: string]: unknown;
  58 |   };
  59 | }
  60 | 
  61 | export interface Result {
  62 |   /**
  63 |    * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
  64 |    */
  65 |   _meta?: { [key: string]: unknown };
  66 |   [key: string]: unknown;
  67 | }
  68 | 
  69 | /**
  70 |  * A uniquely identifying ID for a request in JSON-RPC.
  71 |  */
  72 | export type RequestId = string | number;
  73 | 
  74 | /**
  75 |  * A request that expects a response.
  76 |  */
  77 | export interface JSONRPCRequest extends Request {
  78 |   jsonrpc: typeof JSONRPC_VERSION;
  79 |   id: RequestId;
  80 | }
  81 | 
  82 | /**
  83 |  * A notification which does not expect a response.
  84 |  */
  85 | export interface JSONRPCNotification extends Notification {
  86 |   jsonrpc: typeof JSONRPC_VERSION;
  87 | }
  88 | 
  89 | /**
  90 |  * A successful (non-error) response to a request.
  91 |  */
  92 | export interface JSONRPCResponse {
  93 |   jsonrpc: typeof JSONRPC_VERSION;
  94 |   id: RequestId;
  95 |   result: Result;
  96 | }
  97 | 
  98 | // Standard JSON-RPC error codes
  99 | export const PARSE_ERROR = -32700;
 100 | export const INVALID_REQUEST = -32600;
 101 | export const METHOD_NOT_FOUND = -32601;
 102 | export const INVALID_PARAMS = -32602;
 103 | export const INTERNAL_ERROR = -32603;
 104 | 
 105 | /**
 106 |  * A response to a request that indicates an error occurred.
 107 |  */
 108 | export interface JSONRPCError {
 109 |   jsonrpc: typeof JSONRPC_VERSION;
 110 |   id: RequestId;
 111 |   error: {
 112 |     /**
 113 |      * The error type that occurred.
 114 |      */
 115 |     code: number;
 116 |     /**
 117 |      * A short description of the error. The message SHOULD be limited to a concise single sentence.
 118 |      */
 119 |     message: string;
 120 |     /**
 121 |      * Additional information about the error. The value of this member is defined by the sender (e.g. detailed error information, nested errors etc.).
 122 |      */
 123 |     data?: unknown;
 124 |   };
 125 | }
 126 | 
 127 | /* Empty result */
 128 | /**
 129 |  * A response that indicates success but carries no data.
 130 |  */
 131 | export type EmptyResult = Result;
 132 | 
 133 | /* Cancellation */
 134 | /**
 135 |  * This notification can be sent by either side to indicate that it is cancelling a previously-issued request.
 136 |  *
 137 |  * The request SHOULD still be in-flight, but due to communication latency, it is always possible that this notification MAY arrive after the request has already finished.
 138 |  *
 139 |  * This notification indicates that the result will be unused, so any associated processing SHOULD cease.
 140 |  *
 141 |  * A client MUST NOT attempt to cancel its `initialize` request.
 142 |  */
 143 | export interface CancelledNotification extends Notification {
 144 |   method: "notifications/cancelled";
 145 |   params: {
 146 |     /**
 147 |      * The ID of the request to cancel.
 148 |      *
 149 |      * This MUST correspond to the ID of a request previously issued in the same direction.
 150 |      */
 151 |     requestId: RequestId;
 152 | 
 153 |     /**
 154 |      * An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.
 155 |      */
 156 |     reason?: string;
 157 |   };
 158 | }
 159 | 
 160 | /* Initialization */
 161 | /**
 162 |  * This request is sent from the client to the server when it first connects, asking it to begin initialization.
 163 |  */
 164 | export interface InitializeRequest extends Request {
 165 |   method: "initialize";
 166 |   params: {
 167 |     /**
 168 |      * The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.
 169 |      */
 170 |     protocolVersion: string;
 171 |     capabilities: ClientCapabilities;
 172 |     clientInfo: Implementation;
 173 |   };
 174 | }
 175 | 
 176 | /**
 177 |  * After receiving an initialize request from the client, the server sends this response.
 178 |  */
 179 | export interface InitializeResult extends Result {
 180 |   /**
 181 |    * The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.
 182 |    */
 183 |   protocolVersion: string;
 184 |   capabilities: ServerCapabilities;
 185 |   serverInfo: Implementation;
 186 | 
 187 |   /**
 188 |    * Instructions describing how to use the server and its features.
 189 |    *
 190 |    * This can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a "hint" to the model. For example, this information MAY be added to the system prompt.
 191 |    */
 192 |   instructions?: string;
 193 | }
 194 | 
 195 | /**
 196 |  * This notification is sent from the client to the server after initialization has finished.
 197 |  */
 198 | export interface InitializedNotification extends Notification {
 199 |   method: "notifications/initialized";
 200 | }
 201 | 
 202 | /**
 203 |  * Capabilities a client may support. Known capabilities are defined here, in this schema, but this is not a closed set: any client can define its own, additional capabilities.
 204 |  */
 205 | export interface ClientCapabilities {
 206 |   /**
 207 |    * Experimental, non-standard capabilities that the client supports.
 208 |    */
 209 |   experimental?: { [key: string]: object };
 210 |   /**
 211 |    * Present if the client supports listing roots.
 212 |    */
 213 |   roots?: {
 214 |     /**
 215 |      * Whether the client supports notifications for changes to the roots list.
 216 |      */
 217 |     listChanged?: boolean;
 218 |   };
 219 |   /**
 220 |    * Present if the client supports sampling from an LLM.
 221 |    */
 222 |   sampling?: object;
 223 | }
 224 | 
 225 | /**
 226 |  * Capabilities that a server may support. Known capabilities are defined here, in this schema, but this is not a closed set: any server can define its own, additional capabilities.
 227 |  */
 228 | export interface ServerCapabilities {
 229 |   /**
 230 |    * Experimental, non-standard capabilities that the server supports.
 231 |    */
 232 |   experimental?: { [key: string]: object };
 233 |   /**
 234 |    * Present if the server supports sending log messages to the client.
 235 |    */
 236 |   logging?: object;
 237 |   /**
 238 |    * Present if the server supports argument autocompletion suggestions.
 239 |    */
 240 |   completions?: object;
 241 |   /**
 242 |    * Present if the server offers any prompt templates.
 243 |    */
 244 |   prompts?: {
 245 |     /**
 246 |      * Whether this server supports notifications for changes to the prompt list.
 247 |      */
 248 |     listChanged?: boolean;
 249 |   };
 250 |   /**
 251 |    * Present if the server offers any resources to read.
 252 |    */
 253 |   resources?: {
 254 |     /**
 255 |      * Whether this server supports subscribing to resource updates.
 256 |      */
 257 |     subscribe?: boolean;
 258 |     /**
 259 |      * Whether this server supports notifications for changes to the resource list.
 260 |      */
 261 |     listChanged?: boolean;
 262 |   };
 263 |   /**
 264 |    * Present if the server offers any tools to call.
 265 |    */
 266 |   tools?: {
 267 |     /**
 268 |      * Whether this server supports notifications for changes to the tool list.
 269 |      */
 270 |     listChanged?: boolean;
 271 |   };
 272 | }
 273 | 
 274 | /**
 275 |  * Describes the name and version of an MCP implementation.
 276 |  */
 277 | export interface Implementation {
 278 |   name: string;
 279 |   version: string;
 280 | }
 281 | 
 282 | /* Ping */
 283 | /**
 284 |  * A ping, issued by either the server or the client, to check that the other party is still alive. The receiver must promptly respond, or else may be disconnected.
 285 |  */
 286 | export interface PingRequest extends Request {
 287 |   method: "ping";
 288 | }
 289 | 
 290 | /* Progress notifications */
 291 | /**
 292 |  * An out-of-band notification used to inform the receiver of a progress update for a long-running request.
 293 |  */
 294 | export interface ProgressNotification extends Notification {
 295 |   method: "notifications/progress";
 296 |   params: {
 297 |     /**
 298 |      * The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.
 299 |      */
 300 |     progressToken: ProgressToken;
 301 |     /**
 302 |      * The progress thus far. This should increase every time progress is made, even if the total is unknown.
 303 |      *
 304 |      * @TJS-type number
 305 |      */
 306 |     progress: number;
 307 |     /**
 308 |      * Total number of items to process (or total progress required), if known.
 309 |      *
 310 |      * @TJS-type number
 311 |      */
 312 |     total?: number;
 313 |     /**
 314 |      * An optional message describing the current progress.
 315 |      */
 316 |     message?: string;
 317 |   };
 318 | }
 319 | 
 320 | /* Pagination */
 321 | export interface PaginatedRequest extends Request {
 322 |   params?: {
 323 |     /**
 324 |      * An opaque token representing the current pagination position.
 325 |      * If provided, the server should return results starting after this cursor.
 326 |      */
 327 |     cursor?: Cursor;
 328 |   };
 329 | }
 330 | 
 331 | export interface PaginatedResult extends Result {
 332 |   /**
 333 |    * An opaque token representing the pagination position after the last returned result.
 334 |    * If present, there may be more results available.
 335 |    */
 336 |   nextCursor?: Cursor;
 337 | }
 338 | 
 339 | /* Resources */
 340 | /**
 341 |  * Sent from the client to request a list of resources the server has.
 342 |  */
 343 | export interface ListResourcesRequest extends PaginatedRequest {
 344 |   method: "resources/list";
 345 | }
 346 | 
 347 | /**
 348 |  * The server's response to a resources/list request from the client.
 349 |  */
 350 | export interface ListResourcesResult extends PaginatedResult {
 351 |   resources: Resource[];
 352 | }
 353 | 
 354 | /**
 355 |  * Sent from the client to request a list of resource templates the server has.
 356 |  */
 357 | export interface ListResourceTemplatesRequest extends PaginatedRequest {
 358 |   method: "resources/templates/list";
 359 | }
 360 | 
 361 | /**
 362 |  * The server's response to a resources/templates/list request from the client.
 363 |  */
 364 | export interface ListResourceTemplatesResult extends PaginatedResult {
 365 |   resourceTemplates: ResourceTemplate[];
 366 | }
 367 | 
 368 | /**
 369 |  * Sent from the client to the server, to read a specific resource URI.
 370 |  */
 371 | export interface ReadResourceRequest extends Request {
 372 |   method: "resources/read";
 373 |   params: {
 374 |     /**
 375 |      * The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.
 376 |      *
 377 |      * @format uri
 378 |      */
 379 |     uri: string;
 380 |   };
 381 | }
 382 | 
 383 | /**
 384 |  * The server's response to a resources/read request from the client.
 385 |  */
 386 | export interface ReadResourceResult extends Result {
 387 |   contents: (TextResourceContents | BlobResourceContents)[];
 388 | }
 389 | 
 390 | /**
 391 |  * An optional notification from the server to the client, informing it that the list of resources it can read from has changed. This may be issued by servers without any previous subscription from the client.
 392 |  */
 393 | export interface ResourceListChangedNotification extends Notification {
 394 |   method: "notifications/resources/list_changed";
 395 | }
 396 | 
 397 | /**
 398 |  * Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.
 399 |  */
 400 | export interface SubscribeRequest extends Request {
 401 |   method: "resources/subscribe";
 402 |   params: {
 403 |     /**
 404 |      * The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.
 405 |      *
 406 |      * @format uri
 407 |      */
 408 |     uri: string;
 409 |   };
 410 | }
 411 | 
 412 | /**
 413 |  * Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.
 414 |  */
 415 | export interface UnsubscribeRequest extends Request {
 416 |   method: "resources/unsubscribe";
 417 |   params: {
 418 |     /**
 419 |      * The URI of the resource to unsubscribe from.
 420 |      *
 421 |      * @format uri
 422 |      */
 423 |     uri: string;
 424 |   };
 425 | }
 426 | 
 427 | /**
 428 |  * A notification from the server to the client, informing it that a resource has changed and may need to be read again. This should only be sent if the client previously sent a resources/subscribe request.
 429 |  */
 430 | export interface ResourceUpdatedNotification extends Notification {
 431 |   method: "notifications/resources/updated";
 432 |   params: {
 433 |     /**
 434 |      * The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.
 435 |      *
 436 |      * @format uri
 437 |      */
 438 |     uri: string;
 439 |   };
 440 | }
 441 | 
 442 | /**
 443 |  * A known resource that the server is capable of reading.
 444 |  */
 445 | export interface Resource {
 446 |   /**
 447 |    * The URI of this resource.
 448 |    *
 449 |    * @format uri
 450 |    */
 451 |   uri: string;
 452 | 
 453 |   /**
 454 |    * A human-readable name for this resource.
 455 |    *
 456 |    * This can be used by clients to populate UI elements.
 457 |    */
 458 |   name: string;
 459 | 
 460 |   /**
 461 |    * A description of what this resource represents.
 462 |    *
 463 |    * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
 464 |    */
 465 |   description?: string;
 466 | 
 467 |   /**
 468 |    * The MIME type of this resource, if known.
 469 |    */
 470 |   mimeType?: string;
 471 | 
 472 |   /**
 473 |    * Optional annotations for the client.
 474 |    */
 475 |   annotations?: Annotations;
 476 | 
 477 |   /**
 478 |    * The size of the raw resource content, in bytes (i.e., before base64 encoding or any tokenization), if known.
 479 |    *
 480 |    * This can be used by Hosts to display file sizes and estimate context window usage.
 481 |    */
 482 |   size?: number;
 483 | }
 484 | 
 485 | /**
 486 |  * A template description for resources available on the server.
 487 |  */
 488 | export interface ResourceTemplate {
 489 |   /**
 490 |    * A URI template (according to RFC 6570) that can be used to construct resource URIs.
 491 |    *
 492 |    * @format uri-template
 493 |    */
 494 |   uriTemplate: string;
 495 | 
 496 |   /**
 497 |    * A human-readable name for the type of resource this template refers to.
 498 |    *
 499 |    * This can be used by clients to populate UI elements.
 500 |    */
 501 |   name: string;
 502 | 
 503 |   /**
 504 |    * A description of what this template is for.
 505 |    *
 506 |    * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
 507 |    */
 508 |   description?: string;
 509 | 
 510 |   /**
 511 |    * The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.
 512 |    */
 513 |   mimeType?: string;
 514 | 
 515 |   /**
 516 |    * Optional annotations for the client.
 517 |    */
 518 |   annotations?: Annotations;
 519 | }
 520 | 
 521 | /**
 522 |  * The contents of a specific resource or sub-resource.
 523 |  */
 524 | export interface ResourceContents {
 525 |   /**
 526 |    * The URI of this resource.
 527 |    *
 528 |    * @format uri
 529 |    */
 530 |   uri: string;
 531 |   /**
 532 |    * The MIME type of this resource, if known.
 533 |    */
 534 |   mimeType?: string;
 535 | }
 536 | 
 537 | export interface TextResourceContents extends ResourceContents {
 538 |   /**
 539 |    * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
 540 |    */
 541 |   text: string;
 542 | }
 543 | 
 544 | export interface BlobResourceContents extends ResourceContents {
 545 |   /**
 546 |    * A base64-encoded string representing the binary data of the item.
 547 |    *
 548 |    * @format byte
 549 |    */
 550 |   blob: string;
 551 | }
 552 | 
 553 | /* Prompts */
 554 | /**
 555 |  * Sent from the client to request a list of prompts and prompt templates the server has.
 556 |  */
 557 | export interface ListPromptsRequest extends PaginatedRequest {
 558 |   method: "prompts/list";
 559 | }
 560 | 
 561 | /**
 562 |  * The server's response to a prompts/list request from the client.
 563 |  */
 564 | export interface ListPromptsResult extends PaginatedResult {
 565 |   prompts: Prompt[];
 566 | }
 567 | 
 568 | /**
 569 |  * Used by the client to get a prompt provided by the server.
 570 |  */
 571 | export interface GetPromptRequest extends Request {
 572 |   method: "prompts/get";
 573 |   params: {
 574 |     /**
 575 |      * The name of the prompt or prompt template.
 576 |      */
 577 |     name: string;
 578 |     /**
 579 |      * Arguments to use for templating the prompt.
 580 |      */
 581 |     arguments?: { [key: string]: string };
 582 |   };
 583 | }
 584 | 
 585 | /**
 586 |  * The server's response to a prompts/get request from the client.
 587 |  */
 588 | export interface GetPromptResult extends Result {
 589 |   /**
 590 |    * An optional description for the prompt.
 591 |    */
 592 |   description?: string;
 593 |   messages: PromptMessage[];
 594 | }
 595 | 
 596 | /**
 597 |  * A prompt or prompt template that the server offers.
 598 |  */
 599 | export interface Prompt {
 600 |   /**
 601 |    * The name of the prompt or prompt template.
 602 |    */
 603 |   name: string;
 604 |   /**
 605 |    * An optional description of what this prompt provides
 606 |    */
 607 |   description?: string;
 608 |   /**
 609 |    * A list of arguments to use for templating the prompt.
 610 |    */
 611 |   arguments?: PromptArgument[];
 612 | }
 613 | 
 614 | /**
 615 |  * Describes an argument that a prompt can accept.
 616 |  */
 617 | export interface PromptArgument {
 618 |   /**
 619 |    * The name of the argument.
 620 |    */
 621 |   name: string;
 622 |   /**
 623 |    * A human-readable description of the argument.
 624 |    */
 625 |   description?: string;
 626 |   /**
 627 |    * Whether this argument must be provided.
 628 |    */
 629 |   required?: boolean;
 630 | }
 631 | 
 632 | /**
 633 |  * The sender or recipient of messages and data in a conversation.
 634 |  */
 635 | export type Role = "user" | "assistant";
 636 | 
 637 | /**
 638 |  * Describes a message returned as part of a prompt.
 639 |  *
 640 |  * This is similar to `SamplingMessage`, but also supports the embedding of
 641 |  * resources from the MCP server.
 642 |  */
 643 | export interface PromptMessage {
 644 |   role: Role;
 645 |   content: TextContent | ImageContent | AudioContent | EmbeddedResource;
 646 | }
 647 | 
 648 | /**
 649 |  * The contents of a resource, embedded into a prompt or tool call result.
 650 |  *
 651 |  * It is up to the client how best to render embedded resources for the benefit
 652 |  * of the LLM and/or the user.
 653 |  */
 654 | export interface EmbeddedResource {
 655 |   type: "resource";
 656 |   resource: TextResourceContents | BlobResourceContents;
 657 | 
 658 |   /**
 659 |    * Optional annotations for the client.
 660 |    */
 661 |   annotations?: Annotations;
 662 | }
 663 | 
 664 | /**
 665 |  * An optional notification from the server to the client, informing it that the list of prompts it offers has changed. This may be issued by servers without any previous subscription from the client.
 666 |  */
 667 | export interface PromptListChangedNotification extends Notification {
 668 |   method: "notifications/prompts/list_changed";
 669 | }
 670 | 
 671 | /* Tools */
 672 | /**
 673 |  * Sent from the client to request a list of tools the server has.
 674 |  */
 675 | export interface ListToolsRequest extends PaginatedRequest {
 676 |   method: "tools/list";
 677 | }
 678 | 
 679 | /**
 680 |  * The server's response to a tools/list request from the client.
 681 |  */
 682 | export interface ListToolsResult extends PaginatedResult {
 683 |   tools: Tool[];
 684 | }
 685 | 
 686 | /**
 687 |  * The server's response to a tool call.
 688 |  *
 689 |  * Any errors that originate from the tool SHOULD be reported inside the result
 690 |  * object, with `isError` set to true, _not_ as an MCP protocol-level error
 691 |  * response. Otherwise, the LLM would not be able to see that an error occurred
 692 |  * and self-correct.
 693 |  *
 694 |  * However, any errors in _finding_ the tool, an error indicating that the
 695 |  * server does not support tool calls, or any other exceptional conditions,
 696 |  * should be reported as an MCP error response.
 697 |  */
 698 | export interface CallToolResult extends Result {
 699 |   content: (TextContent | ImageContent | AudioContent | EmbeddedResource)[];
 700 | 
 701 |   /**
 702 |    * Whether the tool call ended in an error.
 703 |    *
 704 |    * If not set, this is assumed to be false (the call was successful).
 705 |    */
 706 |   isError?: boolean;
 707 | }
 708 | 
 709 | /**
 710 |  * Used by the client to invoke a tool provided by the server.
 711 |  */
 712 | export interface CallToolRequest extends Request {
 713 |   method: "tools/call";
 714 |   params: {
 715 |     name: string;
 716 |     arguments?: { [key: string]: unknown };
 717 |   };
 718 | }
 719 | 
 720 | /**
 721 |  * An optional notification from the server to the client, informing it that the list of tools it offers has changed. This may be issued by servers without any previous subscription from the client.
 722 |  */
 723 | export interface ToolListChangedNotification extends Notification {
 724 |   method: "notifications/tools/list_changed";
 725 | }
 726 | 
 727 | /**
 728 |  * Additional properties describing a Tool to clients.
 729 |  *
 730 |  * NOTE: all properties in ToolAnnotations are **hints**.
 731 |  * They are not guaranteed to provide a faithful description of
 732 |  * tool behavior (including descriptive properties like `title`).
 733 |  *
 734 |  * Clients should never make tool use decisions based on ToolAnnotations
 735 |  * received from untrusted servers.
 736 |  */
 737 | export interface ToolAnnotations {
 738 |   /**
 739 |    * A human-readable title for the tool.
 740 |    */
 741 |   title?: string;
 742 | 
 743 |   /**
 744 |    * If true, the tool does not modify its environment.
 745 |    *
 746 |    * Default: false
 747 |    */
 748 |   readOnlyHint?: boolean;
 749 | 
 750 |   /**
 751 |    * If true, the tool may perform destructive updates to its environment.
 752 |    * If false, the tool performs only additive updates.
 753 |    *
 754 |    * (This property is meaningful only when `readOnlyHint == false`)
 755 |    *
 756 |    * Default: true
 757 |    */
 758 |   destructiveHint?: boolean;
 759 | 
 760 |   /**
 761 |    * If true, calling the tool repeatedly with the same arguments
 762 |    * will have no additional effect on the its environment.
 763 |    *
 764 |    * (This property is meaningful only when `readOnlyHint == false`)
 765 |    *
 766 |    * Default: false
 767 |    */
 768 |   idempotentHint?: boolean;
 769 | 
 770 |   /**
 771 |    * If true, this tool may interact with an "open world" of external
 772 |    * entities. If false, the tool's domain of interaction is closed.
 773 |    * For example, the world of a web search tool is open, whereas that
 774 |    * of a memory tool is not.
 775 |    *
 776 |    * Default: true
 777 |    */
 778 |   openWorldHint?: boolean;
 779 | }
 780 | 
 781 | /**
 782 |  * Definition for a tool the client can call.
 783 |  */
 784 | export interface Tool {
 785 |   /**
 786 |    * The name of the tool.
 787 |    */
 788 |   name: string;
 789 | 
 790 |   /**
 791 |    * A human-readable description of the tool.
 792 |    *
 793 |    * This can be used by clients to improve the LLM's understanding of available tools. It can be thought of like a "hint" to the model.
 794 |    */
 795 |   description?: string;
 796 | 
 797 |   /**
 798 |    * A JSON Schema object defining the expected parameters for the tool.
 799 |    */
 800 |   inputSchema: {
 801 |     type: "object";
 802 |     properties?: { [key: string]: object };
 803 |     required?: string[];
 804 |   };
 805 | 
 806 |   /**
 807 |    * Optional additional tool information.
 808 |    */
 809 |   annotations?: ToolAnnotations;
 810 | }
 811 | 
 812 | /* Logging */
 813 | /**
 814 |  * A request from the client to the server, to enable or adjust logging.
 815 |  */
 816 | export interface SetLevelRequest extends Request {
 817 |   method: "logging/setLevel";
 818 |   params: {
 819 |     /**
 820 |      * The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/message.
 821 |      */
 822 |     level: LoggingLevel;
 823 |   };
 824 | }
 825 | 
 826 | /**
 827 |  * Notification of a log message passed from server to client. If no logging/setLevel request has been sent from the client, the server MAY decide which messages to send automatically.
 828 |  */
 829 | export interface LoggingMessageNotification extends Notification {
 830 |   method: "notifications/message";
 831 |   params: {
 832 |     /**
 833 |      * The severity of this log message.
 834 |      */
 835 |     level: LoggingLevel;
 836 |     /**
 837 |      * An optional name of the logger issuing this message.
 838 |      */
 839 |     logger?: string;
 840 |     /**
 841 |      * The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here.
 842 |      */
 843 |     data: unknown;
 844 |   };
 845 | }
 846 | 
 847 | /**
 848 |  * The severity of a log message.
 849 |  *
 850 |  * These map to syslog message severities, as specified in RFC-5424:
 851 |  * https://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1
 852 |  */
 853 | export type LoggingLevel =
 854 |   | "debug"
 855 |   | "info"
 856 |   | "notice"
 857 |   | "warning"
 858 |   | "error"
 859 |   | "critical"
 860 |   | "alert"
 861 |   | "emergency";
 862 | 
 863 | /* Sampling */
 864 | /**
 865 |  * A request from the server to sample an LLM via the client. The client has full discretion over which model to select. The client should also inform the user before beginning sampling, to allow them to inspect the request (human in the loop) and decide whether to approve it.
 866 |  */
 867 | export interface CreateMessageRequest extends Request {
 868 |   method: "sampling/createMessage";
 869 |   params: {
 870 |     messages: SamplingMessage[];
 871 |     /**
 872 |      * The server's preferences for which model to select. The client MAY ignore these preferences.
 873 |      */
 874 |     modelPreferences?: ModelPreferences;
 875 |     /**
 876 |      * An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.
 877 |      */
 878 |     systemPrompt?: string;
 879 |     /**
 880 |      * A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.
 881 |      */
 882 |     includeContext?: "none" | "thisServer" | "allServers";
 883 |     /**
 884 |      * @TJS-type number
 885 |      */
 886 |     temperature?: number;
 887 |     /**
 888 |      * The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.
 889 |      */
 890 |     maxTokens: number;
 891 |     stopSequences?: string[];
 892 |     /**
 893 |      * Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.
 894 |      */
 895 |     metadata?: object;
 896 |   };
 897 | }
 898 | 
 899 | /**
 900 |  * The client's response to a sampling/create_message request from the server. The client should inform the user before returning the sampled message, to allow them to inspect the response (human in the loop) and decide whether to allow the server to see it.
 901 |  */
 902 | export interface CreateMessageResult extends Result, SamplingMessage {
 903 |   /**
 904 |    * The name of the model that generated the message.
 905 |    */
 906 |   model: string;
 907 |   /**
 908 |    * The reason why sampling stopped, if known.
 909 |    */
 910 |   stopReason?: "endTurn" | "stopSequence" | "maxTokens" | string;
 911 | }
 912 | 
 913 | /**
 914 |  * Describes a message issued to or received from an LLM API.
 915 |  */
 916 | export interface SamplingMessage {
 917 |   role: Role;
 918 |   content: TextContent | ImageContent | AudioContent;
 919 | }
 920 | 
 921 | /**
 922 |  * Optional annotations for the client. The client can use annotations to inform how objects are used or displayed
 923 |  */
 924 | export interface Annotations {
 925 |   /**
 926 |    * Describes who the intended customer of this object or data is.
 927 |    *
 928 |    * It can include multiple entries to indicate content useful for multiple audiences (e.g., `["user", "assistant"]`).
 929 |    */
 930 |   audience?: Role[];
 931 | 
 932 |   /**
 933 |    * Describes how important this data is for operating the server.
 934 |    *
 935 |    * A value of 1 means "most important," and indicates that the data is
 936 |    * effectively required, while 0 means "least important," and indicates that
 937 |    * the data is entirely optional.
 938 |    *
 939 |    * @TJS-type number
 940 |    * @minimum 0
 941 |    * @maximum 1
 942 |    */
 943 |   priority?: number;
 944 | }
 945 | 
 946 | /**
 947 |  * Text provided to or from an LLM.
 948 |  */
 949 | export interface TextContent {
 950 |   type: "text";
 951 | 
 952 |   /**
 953 |    * The text content of the message.
 954 |    */
 955 |   text: string;
 956 | 
 957 |   /**
 958 |    * Optional annotations for the client.
 959 |    */
 960 |   annotations?: Annotations;
 961 | }
 962 | 
 963 | /**
 964 |  * An image provided to or from an LLM.
 965 |  */
 966 | export interface ImageContent {
 967 |   type: "image";
 968 | 
 969 |   /**
 970 |    * The base64-encoded image data.
 971 |    *
 972 |    * @format byte
 973 |    */
 974 |   data: string;
 975 | 
 976 |   /**
 977 |    * The MIME type of the image. Different providers may support different image types.
 978 |    */
 979 |   mimeType: string;
 980 | 
 981 |   /**
 982 |    * Optional annotations for the client.
 983 |    */
 984 |   annotations?: Annotations;
 985 | }
 986 | 
 987 | /**
 988 |  * Audio provided to or from an LLM.
 989 |  */
 990 | export interface AudioContent {
 991 |   type: "audio";
 992 | 
 993 |   /**
 994 |    * The base64-encoded audio data.
 995 |    *
 996 |    * @format byte
 997 |    */
 998 |   data: string;
 999 | 
1000 |   /**
1001 |    * The MIME type of the audio. Different providers may support different audio types.
1002 |    */
1003 |   mimeType: string;
1004 | 
1005 |   /**
1006 |    * Optional annotations for the client.
1007 |    */
1008 |   annotations?: Annotations;
1009 | }
1010 | 
1011 | /**
1012 |  * The server's preferences for model selection, requested of the client during sampling.
1013 |  *
1014 |  * Because LLMs can vary along multiple dimensions, choosing the "best" model is
1015 |  * rarely straightforward.  Different models excel in different areas—some are
1016 |  * faster but less capable, others are more capable but more expensive, and so
1017 |  * on. This interface allows servers to express their priorities across multiple
1018 |  * dimensions to help clients make an appropriate selection for their use case.
1019 |  *
1020 |  * These preferences are always advisory. The client MAY ignore them. It is also
1021 |  * up to the client to decide how to interpret these preferences and how to
1022 |  * balance them against other considerations.
1023 |  */
1024 | export interface ModelPreferences {
1025 |   /**
1026 |    * Optional hints to use for model selection.
1027 |    *
1028 |    * If multiple hints are specified, the client MUST evaluate them in order
1029 |    * (such that the first match is taken).
1030 |    *
1031 |    * The client SHOULD prioritize these hints over the numeric priorities, but
1032 |    * MAY still use the priorities to select from ambiguous matches.
1033 |    */
1034 |   hints?: ModelHint[];
1035 | 
1036 |   /**
1037 |    * How much to prioritize cost when selecting a model. A value of 0 means cost
1038 |    * is not important, while a value of 1 means cost is the most important
1039 |    * factor.
1040 |    *
1041 |    * @TJS-type number
1042 |    * @minimum 0
1043 |    * @maximum 1
1044 |    */
1045 |   costPriority?: number;
1046 | 
1047 |   /**
1048 |    * How much to prioritize sampling speed (latency) when selecting a model. A
1049 |    * value of 0 means speed is not important, while a value of 1 means speed is
1050 |    * the most important factor.
1051 |    *
1052 |    * @TJS-type number
1053 |    * @minimum 0
1054 |    * @maximum 1
1055 |    */
1056 |   speedPriority?: number;
1057 | 
1058 |   /**
1059 |    * How much to prioritize intelligence and capabilities when selecting a
1060 |    * model. A value of 0 means intelligence is not important, while a value of 1
1061 |    * means intelligence is the most important factor.
1062 |    *
1063 |    * @TJS-type number
1064 |    * @minimum 0
1065 |    * @maximum 1
1066 |    */
1067 |   intelligencePriority?: number;
1068 | }
1069 | 
1070 | /**
1071 |  * Hints to use for model selection.
1072 |  *
1073 |  * Keys not declared here are currently left unspecified by the spec and are up
1074 |  * to the client to interpret.
1075 |  */
1076 | export interface ModelHint {
1077 |   /**
1078 |    * A hint for a model name.
1079 |    *
1080 |    * The client SHOULD treat this as a substring of a model name; for example:
1081 |    *  - `claude-3-5-sonnet` should match `claude-3-5-sonnet-20241022`
1082 |    *  - `sonnet` should match `claude-3-5-sonnet-20241022`, `claude-3-sonnet-20240229`, etc.
1083 |    *  - `claude` should match any Claude model
1084 |    *
1085 |    * The client MAY also map the string to a different provider's model name or a different model family, as long as it fills a similar niche; for example:
1086 |    *  - `gemini-1.5-flash` could match `claude-3-haiku-20240307`
1087 |    */
1088 |   name?: string;
1089 | }
1090 | 
1091 | /* Autocomplete */
1092 | /**
1093 |  * A request from the client to the server, to ask for completion options.
1094 |  */
1095 | export interface CompleteRequest extends Request {
1096 |   method: "completion/complete";
1097 |   params: {
1098 |     ref: PromptReference | ResourceReference;
1099 |     /**
1100 |      * The argument's information
1101 |      */
1102 |     argument: {
1103 |       /**
1104 |        * The name of the argument
1105 |        */
1106 |       name: string;
1107 |       /**
1108 |        * The value of the argument to use for completion matching.
1109 |        */
1110 |       value: string;
1111 |     };
1112 |   };
1113 | }
1114 | 
1115 | /**
1116 |  * The server's response to a completion/complete request
1117 |  */
1118 | export interface CompleteResult extends Result {
1119 |   completion: {
1120 |     /**
1121 |      * An array of completion values. Must not exceed 100 items.
1122 |      */
1123 |     values: string[];
1124 |     /**
1125 |      * The total number of completion options available. This can exceed the number of values actually sent in the response.
1126 |      */
1127 |     total?: number;
1128 |     /**
1129 |      * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.
1130 |      */
1131 |     hasMore?: boolean;
1132 |   };
1133 | }
1134 | 
1135 | /**
1136 |  * A reference to a resource or resource template definition.
1137 |  */
1138 | export interface ResourceReference {
1139 |   type: "ref/resource";
1140 |   /**
1141 |    * The URI or URI template of the resource.
1142 |    *
1143 |    * @format uri-template
1144 |    */
1145 |   uri: string;
1146 | }
1147 | 
1148 | /**
1149 |  * Identifies a prompt.
1150 |  */
1151 | export interface PromptReference {
1152 |   type: "ref/prompt";
1153 |   /**
1154 |    * The name of the prompt or prompt template
1155 |    */
1156 |   name: string;
1157 | }
1158 | 
1159 | /* Roots */
1160 | /**
1161 |  * Sent from the server to request a list of root URIs from the client. Roots allow
1162 |  * servers to ask for specific directories or files to operate on. A common example
1163 |  * for roots is providing a set of repositories or directories a server should operate
1164 |  * on.
1165 |  *
1166 |  * This request is typically used when the server needs to understand the file system
1167 |  * structure or access specific locations that the client has permission to read from.
1168 |  */
1169 | export interface ListRootsRequest extends Request {
1170 |   method: "roots/list";
1171 | }
1172 | 
1173 | /**
1174 |  * The client's response to a roots/list request from the server.
1175 |  * This result contains an array of Root objects, each representing a root directory
1176 |  * or file that the server can operate on.
1177 |  */
1178 | export interface ListRootsResult extends Result {
1179 |   roots: Root[];
1180 | }
1181 | 
1182 | /**
1183 |  * Represents a root directory or file that the server can operate on.
1184 |  */
1185 | export interface Root {
1186 |   /**
1187 |    * The URI identifying the root. This *must* start with file:// for now.
1188 |    * This restriction may be relaxed in future versions of the protocol to allow
1189 |    * other URI schemes.
1190 |    *
1191 |    * @format uri
1192 |    */
1193 |   uri: string;
1194 |   /**
1195 |    * An optional name for the root. This can be used to provide a human-readable
1196 |    * identifier for the root, which may be useful for display purposes or for
1197 |    * referencing the root in other parts of the application.
1198 |    */
1199 |   name?: string;
1200 | }
1201 | 
1202 | /**
1203 |  * A notification from the client to the server, informing it that the list of roots has changed.
1204 |  * This notification should be sent whenever the client adds, removes, or modifies any root.
1205 |  * The server should then request an updated list of roots using the ListRootsRequest.
1206 |  */
1207 | export interface RootsListChangedNotification extends Notification {
1208 |   method: "notifications/roots/list_changed";
1209 | }
1210 | 
1211 | /* Client messages */
1212 | export type ClientRequest =
1213 |   | PingRequest
1214 |   | InitializeRequest
1215 |   | CompleteRequest
1216 |   | SetLevelRequest
1217 |   | GetPromptRequest
1218 |   | ListPromptsRequest
1219 |   | ListResourcesRequest
1220 |   | ListResourceTemplatesRequest
1221 |   | ReadResourceRequest
1222 |   | SubscribeRequest
1223 |   | UnsubscribeRequest
1224 |   | CallToolRequest
1225 |   | ListToolsRequest;
1226 | 
1227 | export type ClientNotification =
1228 |   | CancelledNotification
1229 |   | ProgressNotification
1230 |   | InitializedNotification
1231 |   | RootsListChangedNotification;
1232 | 
1233 | export type ClientResult = EmptyResult | CreateMessageResult | ListRootsResult;
1234 | 
1235 | /* Server messages */
1236 | export type ServerRequest =
1237 |   | PingRequest
1238 |   | CreateMessageRequest
1239 |   | ListRootsRequest;
1240 | 
1241 | export type ServerNotification =
1242 |   | CancelledNotification
1243 |   | ProgressNotification
1244 |   | LoggingMessageNotification
1245 |   | ResourceUpdatedNotification
1246 |   | ResourceListChangedNotification
1247 |   | ToolListChangedNotification
1248 |   | PromptListChangedNotification;
1249 | 
1250 | export type ServerResult =
1251 |   | EmptyResult
1252 |   | InitializeResult
1253 |   | CompleteResult
1254 |   | GetPromptResult
1255 |   | ListPromptsResult
1256 |   | ListResourceTemplatesResult
1257 |   | ListResourcesResult
1258 |   | ReadResourceResult
1259 |   | CallToolResult
1260 |   | ListToolsResult;
1261 | 


--------------------------------------------------------------------------------
/schema/2025-06-18/schema.json:
--------------------------------------------------------------------------------
   1 | {
   2 |     "$schema": "http://json-schema.org/draft-07/schema#",
   3 |     "definitions": {
   4 |         "Annotations": {
   5 |             "description": "Optional annotations for the client. The client can use annotations to inform how objects are used or displayed",
   6 |             "properties": {
   7 |                 "audience": {
   8 |                     "description": "Describes who the intended customer of this object or data is.\n\nIt can include multiple entries to indicate content useful for multiple audiences (e.g., `[\"user\", \"assistant\"]`).",
   9 |                     "items": {
  10 |                         "$ref": "#/definitions/Role"
  11 |                     },
  12 |                     "type": "array"
  13 |                 },
  14 |                 "lastModified": {
  15 |                     "description": "The moment the resource was last modified, as an ISO 8601 formatted string.\n\nShould be an ISO 8601 formatted string (e.g., \"2025-01-12T15:00:58Z\").\n\nExamples: last activity timestamp in an open file, timestamp when the resource\nwas attached, etc.",
  16 |                     "type": "string"
  17 |                 },
  18 |                 "priority": {
  19 |                     "description": "Describes how important this data is for operating the server.\n\nA value of 1 means \"most important,\" and indicates that the data is\neffectively required, while 0 means \"least important,\" and indicates that\nthe data is entirely optional.",
  20 |                     "maximum": 1,
  21 |                     "minimum": 0,
  22 |                     "type": "number"
  23 |                 }
  24 |             },
  25 |             "type": "object"
  26 |         },
  27 |         "AudioContent": {
  28 |             "description": "Audio provided to or from an LLM.",
  29 |             "properties": {
  30 |                 "_meta": {
  31 |                     "additionalProperties": {},
  32 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
  33 |                     "type": "object"
  34 |                 },
  35 |                 "annotations": {
  36 |                     "$ref": "#/definitions/Annotations",
  37 |                     "description": "Optional annotations for the client."
  38 |                 },
  39 |                 "data": {
  40 |                     "description": "The base64-encoded audio data.",
  41 |                     "format": "byte",
  42 |                     "type": "string"
  43 |                 },
  44 |                 "mimeType": {
  45 |                     "description": "The MIME type of the audio. Different providers may support different audio types.",
  46 |                     "type": "string"
  47 |                 },
  48 |                 "type": {
  49 |                     "const": "audio",
  50 |                     "type": "string"
  51 |                 }
  52 |             },
  53 |             "required": [
  54 |                 "data",
  55 |                 "mimeType",
  56 |                 "type"
  57 |             ],
  58 |             "type": "object"
  59 |         },
  60 |         "BaseMetadata": {
  61 |             "description": "Base interface for metadata with name (identifier) and title (display name) properties.",
  62 |             "properties": {
  63 |                 "name": {
  64 |                     "description": "Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).",
  65 |                     "type": "string"
  66 |                 },
  67 |                 "title": {
  68 |                     "description": "Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\neven by those unfamiliar with domain-specific terminology.\n\nIf not provided, the name should be used for display (except for Tool,\nwhere `annotations.title` should be given precedence over using `name`,\nif present).",
  69 |                     "type": "string"
  70 |                 }
  71 |             },
  72 |             "required": [
  73 |                 "name"
  74 |             ],
  75 |             "type": "object"
  76 |         },
  77 |         "BlobResourceContents": {
  78 |             "properties": {
  79 |                 "_meta": {
  80 |                     "additionalProperties": {},
  81 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
  82 |                     "type": "object"
  83 |                 },
  84 |                 "blob": {
  85 |                     "description": "A base64-encoded string representing the binary data of the item.",
  86 |                     "format": "byte",
  87 |                     "type": "string"
  88 |                 },
  89 |                 "mimeType": {
  90 |                     "description": "The MIME type of this resource, if known.",
  91 |                     "type": "string"
  92 |                 },
  93 |                 "uri": {
  94 |                     "description": "The URI of this resource.",
  95 |                     "format": "uri",
  96 |                     "type": "string"
  97 |                 }
  98 |             },
  99 |             "required": [
 100 |                 "blob",
 101 |                 "uri"
 102 |             ],
 103 |             "type": "object"
 104 |         },
 105 |         "BooleanSchema": {
 106 |             "properties": {
 107 |                 "default": {
 108 |                     "type": "boolean"
 109 |                 },
 110 |                 "description": {
 111 |                     "type": "string"
 112 |                 },
 113 |                 "title": {
 114 |                     "type": "string"
 115 |                 },
 116 |                 "type": {
 117 |                     "const": "boolean",
 118 |                     "type": "string"
 119 |                 }
 120 |             },
 121 |             "required": [
 122 |                 "type"
 123 |             ],
 124 |             "type": "object"
 125 |         },
 126 |         "CallToolRequest": {
 127 |             "description": "Used by the client to invoke a tool provided by the server.",
 128 |             "properties": {
 129 |                 "method": {
 130 |                     "const": "tools/call",
 131 |                     "type": "string"
 132 |                 },
 133 |                 "params": {
 134 |                     "properties": {
 135 |                         "arguments": {
 136 |                             "additionalProperties": {},
 137 |                             "type": "object"
 138 |                         },
 139 |                         "name": {
 140 |                             "type": "string"
 141 |                         }
 142 |                     },
 143 |                     "required": [
 144 |                         "name"
 145 |                     ],
 146 |                     "type": "object"
 147 |                 }
 148 |             },
 149 |             "required": [
 150 |                 "method",
 151 |                 "params"
 152 |             ],
 153 |             "type": "object"
 154 |         },
 155 |         "CallToolResult": {
 156 |             "description": "The server's response to a tool call.",
 157 |             "properties": {
 158 |                 "_meta": {
 159 |                     "additionalProperties": {},
 160 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
 161 |                     "type": "object"
 162 |                 },
 163 |                 "content": {
 164 |                     "description": "A list of content objects that represent the unstructured result of the tool call.",
 165 |                     "items": {
 166 |                         "$ref": "#/definitions/ContentBlock"
 167 |                     },
 168 |                     "type": "array"
 169 |                 },
 170 |                 "isError": {
 171 |                     "description": "Whether the tool call ended in an error.\n\nIf not set, this is assumed to be false (the call was successful).\n\nAny errors that originate from the tool SHOULD be reported inside the result\nobject, with `isError` set to true, _not_ as an MCP protocol-level error\nresponse. Otherwise, the LLM would not be able to see that an error occurred\nand self-correct.\n\nHowever, any errors in _finding_ the tool, an error indicating that the\nserver does not support tool calls, or any other exceptional conditions,\nshould be reported as an MCP error response.",
 172 |                     "type": "boolean"
 173 |                 },
 174 |                 "structuredContent": {
 175 |                     "additionalProperties": {},
 176 |                     "description": "An optional JSON object that represents the structured result of the tool call.",
 177 |                     "type": "object"
 178 |                 }
 179 |             },
 180 |             "required": [
 181 |                 "content"
 182 |             ],
 183 |             "type": "object"
 184 |         },
 185 |         "CancelledNotification": {
 186 |             "description": "This notification can be sent by either side to indicate that it is cancelling a previously-issued request.\n\nThe request SHOULD still be in-flight, but due to communication latency, it is always possible that this notification MAY arrive after the request has already finished.\n\nThis notification indicates that the result will be unused, so any associated processing SHOULD cease.\n\nA client MUST NOT attempt to cancel its `initialize` request.",
 187 |             "properties": {
 188 |                 "method": {
 189 |                     "const": "notifications/cancelled",
 190 |                     "type": "string"
 191 |                 },
 192 |                 "params": {
 193 |                     "properties": {
 194 |                         "reason": {
 195 |                             "description": "An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.",
 196 |                             "type": "string"
 197 |                         },
 198 |                         "requestId": {
 199 |                             "$ref": "#/definitions/RequestId",
 200 |                             "description": "The ID of the request to cancel.\n\nThis MUST correspond to the ID of a request previously issued in the same direction."
 201 |                         }
 202 |                     },
 203 |                     "required": [
 204 |                         "requestId"
 205 |                     ],
 206 |                     "type": "object"
 207 |                 }
 208 |             },
 209 |             "required": [
 210 |                 "method",
 211 |                 "params"
 212 |             ],
 213 |             "type": "object"
 214 |         },
 215 |         "ClientCapabilities": {
 216 |             "description": "Capabilities a client may support. Known capabilities are defined here, in this schema, but this is not a closed set: any client can define its own, additional capabilities.",
 217 |             "properties": {
 218 |                 "elicitation": {
 219 |                     "additionalProperties": true,
 220 |                     "description": "Present if the client supports elicitation from the server.",
 221 |                     "properties": {},
 222 |                     "type": "object"
 223 |                 },
 224 |                 "experimental": {
 225 |                     "additionalProperties": {
 226 |                         "additionalProperties": true,
 227 |                         "properties": {},
 228 |                         "type": "object"
 229 |                     },
 230 |                     "description": "Experimental, non-standard capabilities that the client supports.",
 231 |                     "type": "object"
 232 |                 },
 233 |                 "roots": {
 234 |                     "description": "Present if the client supports listing roots.",
 235 |                     "properties": {
 236 |                         "listChanged": {
 237 |                             "description": "Whether the client supports notifications for changes to the roots list.",
 238 |                             "type": "boolean"
 239 |                         }
 240 |                     },
 241 |                     "type": "object"
 242 |                 },
 243 |                 "sampling": {
 244 |                     "additionalProperties": true,
 245 |                     "description": "Present if the client supports sampling from an LLM.",
 246 |                     "properties": {},
 247 |                     "type": "object"
 248 |                 }
 249 |             },
 250 |             "type": "object"
 251 |         },
 252 |         "ClientNotification": {
 253 |             "anyOf": [
 254 |                 {
 255 |                     "$ref": "#/definitions/CancelledNotification"
 256 |                 },
 257 |                 {
 258 |                     "$ref": "#/definitions/InitializedNotification"
 259 |                 },
 260 |                 {
 261 |                     "$ref": "#/definitions/ProgressNotification"
 262 |                 },
 263 |                 {
 264 |                     "$ref": "#/definitions/RootsListChangedNotification"
 265 |                 }
 266 |             ]
 267 |         },
 268 |         "ClientRequest": {
 269 |             "anyOf": [
 270 |                 {
 271 |                     "$ref": "#/definitions/InitializeRequest"
 272 |                 },
 273 |                 {
 274 |                     "$ref": "#/definitions/PingRequest"
 275 |                 },
 276 |                 {
 277 |                     "$ref": "#/definitions/ListResourcesRequest"
 278 |                 },
 279 |                 {
 280 |                     "$ref": "#/definitions/ListResourceTemplatesRequest"
 281 |                 },
 282 |                 {
 283 |                     "$ref": "#/definitions/ReadResourceRequest"
 284 |                 },
 285 |                 {
 286 |                     "$ref": "#/definitions/SubscribeRequest"
 287 |                 },
 288 |                 {
 289 |                     "$ref": "#/definitions/UnsubscribeRequest"
 290 |                 },
 291 |                 {
 292 |                     "$ref": "#/definitions/ListPromptsRequest"
 293 |                 },
 294 |                 {
 295 |                     "$ref": "#/definitions/GetPromptRequest"
 296 |                 },
 297 |                 {
 298 |                     "$ref": "#/definitions/ListToolsRequest"
 299 |                 },
 300 |                 {
 301 |                     "$ref": "#/definitions/CallToolRequest"
 302 |                 },
 303 |                 {
 304 |                     "$ref": "#/definitions/SetLevelRequest"
 305 |                 },
 306 |                 {
 307 |                     "$ref": "#/definitions/CompleteRequest"
 308 |                 }
 309 |             ]
 310 |         },
 311 |         "ClientResult": {
 312 |             "anyOf": [
 313 |                 {
 314 |                     "$ref": "#/definitions/Result"
 315 |                 },
 316 |                 {
 317 |                     "$ref": "#/definitions/CreateMessageResult"
 318 |                 },
 319 |                 {
 320 |                     "$ref": "#/definitions/ListRootsResult"
 321 |                 },
 322 |                 {
 323 |                     "$ref": "#/definitions/ElicitResult"
 324 |                 }
 325 |             ]
 326 |         },
 327 |         "CompleteRequest": {
 328 |             "description": "A request from the client to the server, to ask for completion options.",
 329 |             "properties": {
 330 |                 "method": {
 331 |                     "const": "completion/complete",
 332 |                     "type": "string"
 333 |                 },
 334 |                 "params": {
 335 |                     "properties": {
 336 |                         "argument": {
 337 |                             "description": "The argument's information",
 338 |                             "properties": {
 339 |                                 "name": {
 340 |                                     "description": "The name of the argument",
 341 |                                     "type": "string"
 342 |                                 },
 343 |                                 "value": {
 344 |                                     "description": "The value of the argument to use for completion matching.",
 345 |                                     "type": "string"
 346 |                                 }
 347 |                             },
 348 |                             "required": [
 349 |                                 "name",
 350 |                                 "value"
 351 |                             ],
 352 |                             "type": "object"
 353 |                         },
 354 |                         "context": {
 355 |                             "description": "Additional, optional context for completions",
 356 |                             "properties": {
 357 |                                 "arguments": {
 358 |                                     "additionalProperties": {
 359 |                                         "type": "string"
 360 |                                     },
 361 |                                     "description": "Previously-resolved variables in a URI template or prompt.",
 362 |                                     "type": "object"
 363 |                                 }
 364 |                             },
 365 |                             "type": "object"
 366 |                         },
 367 |                         "ref": {
 368 |                             "anyOf": [
 369 |                                 {
 370 |                                     "$ref": "#/definitions/PromptReference"
 371 |                                 },
 372 |                                 {
 373 |                                     "$ref": "#/definitions/ResourceTemplateReference"
 374 |                                 }
 375 |                             ]
 376 |                         }
 377 |                     },
 378 |                     "required": [
 379 |                         "argument",
 380 |                         "ref"
 381 |                     ],
 382 |                     "type": "object"
 383 |                 }
 384 |             },
 385 |             "required": [
 386 |                 "method",
 387 |                 "params"
 388 |             ],
 389 |             "type": "object"
 390 |         },
 391 |         "CompleteResult": {
 392 |             "description": "The server's response to a completion/complete request",
 393 |             "properties": {
 394 |                 "_meta": {
 395 |                     "additionalProperties": {},
 396 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
 397 |                     "type": "object"
 398 |                 },
 399 |                 "completion": {
 400 |                     "properties": {
 401 |                         "hasMore": {
 402 |                             "description": "Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.",
 403 |                             "type": "boolean"
 404 |                         },
 405 |                         "total": {
 406 |                             "description": "The total number of completion options available. This can exceed the number of values actually sent in the response.",
 407 |                             "type": "integer"
 408 |                         },
 409 |                         "values": {
 410 |                             "description": "An array of completion values. Must not exceed 100 items.",
 411 |                             "items": {
 412 |                                 "type": "string"
 413 |                             },
 414 |                             "type": "array"
 415 |                         }
 416 |                     },
 417 |                     "required": [
 418 |                         "values"
 419 |                     ],
 420 |                     "type": "object"
 421 |                 }
 422 |             },
 423 |             "required": [
 424 |                 "completion"
 425 |             ],
 426 |             "type": "object"
 427 |         },
 428 |         "ContentBlock": {
 429 |             "anyOf": [
 430 |                 {
 431 |                     "$ref": "#/definitions/TextContent"
 432 |                 },
 433 |                 {
 434 |                     "$ref": "#/definitions/ImageContent"
 435 |                 },
 436 |                 {
 437 |                     "$ref": "#/definitions/AudioContent"
 438 |                 },
 439 |                 {
 440 |                     "$ref": "#/definitions/ResourceLink"
 441 |                 },
 442 |                 {
 443 |                     "$ref": "#/definitions/EmbeddedResource"
 444 |                 }
 445 |             ]
 446 |         },
 447 |         "CreateMessageRequest": {
 448 |             "description": "A request from the server to sample an LLM via the client. The client has full discretion over which model to select. The client should also inform the user before beginning sampling, to allow them to inspect the request (human in the loop) and decide whether to approve it.",
 449 |             "properties": {
 450 |                 "method": {
 451 |                     "const": "sampling/createMessage",
 452 |                     "type": "string"
 453 |                 },
 454 |                 "params": {
 455 |                     "properties": {
 456 |                         "includeContext": {
 457 |                             "description": "A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.",
 458 |                             "enum": [
 459 |                                 "allServers",
 460 |                                 "none",
 461 |                                 "thisServer"
 462 |                             ],
 463 |                             "type": "string"
 464 |                         },
 465 |                         "maxTokens": {
 466 |                             "description": "The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.",
 467 |                             "type": "integer"
 468 |                         },
 469 |                         "messages": {
 470 |                             "items": {
 471 |                                 "$ref": "#/definitions/SamplingMessage"
 472 |                             },
 473 |                             "type": "array"
 474 |                         },
 475 |                         "metadata": {
 476 |                             "additionalProperties": true,
 477 |                             "description": "Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.",
 478 |                             "properties": {},
 479 |                             "type": "object"
 480 |                         },
 481 |                         "modelPreferences": {
 482 |                             "$ref": "#/definitions/ModelPreferences",
 483 |                             "description": "The server's preferences for which model to select. The client MAY ignore these preferences."
 484 |                         },
 485 |                         "stopSequences": {
 486 |                             "items": {
 487 |                                 "type": "string"
 488 |                             },
 489 |                             "type": "array"
 490 |                         },
 491 |                         "systemPrompt": {
 492 |                             "description": "An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.",
 493 |                             "type": "string"
 494 |                         },
 495 |                         "temperature": {
 496 |                             "type": "number"
 497 |                         }
 498 |                     },
 499 |                     "required": [
 500 |                         "maxTokens",
 501 |                         "messages"
 502 |                     ],
 503 |                     "type": "object"
 504 |                 }
 505 |             },
 506 |             "required": [
 507 |                 "method",
 508 |                 "params"
 509 |             ],
 510 |             "type": "object"
 511 |         },
 512 |         "CreateMessageResult": {
 513 |             "description": "The client's response to a sampling/create_message request from the server. The client should inform the user before returning the sampled message, to allow them to inspect the response (human in the loop) and decide whether to allow the server to see it.",
 514 |             "properties": {
 515 |                 "_meta": {
 516 |                     "additionalProperties": {},
 517 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
 518 |                     "type": "object"
 519 |                 },
 520 |                 "content": {
 521 |                     "anyOf": [
 522 |                         {
 523 |                             "$ref": "#/definitions/TextContent"
 524 |                         },
 525 |                         {
 526 |                             "$ref": "#/definitions/ImageContent"
 527 |                         },
 528 |                         {
 529 |                             "$ref": "#/definitions/AudioContent"
 530 |                         }
 531 |                     ]
 532 |                 },
 533 |                 "model": {
 534 |                     "description": "The name of the model that generated the message.",
 535 |                     "type": "string"
 536 |                 },
 537 |                 "role": {
 538 |                     "$ref": "#/definitions/Role"
 539 |                 },
 540 |                 "stopReason": {
 541 |                     "description": "The reason why sampling stopped, if known.",
 542 |                     "type": "string"
 543 |                 }
 544 |             },
 545 |             "required": [
 546 |                 "content",
 547 |                 "model",
 548 |                 "role"
 549 |             ],
 550 |             "type": "object"
 551 |         },
 552 |         "Cursor": {
 553 |             "description": "An opaque token used to represent a cursor for pagination.",
 554 |             "type": "string"
 555 |         },
 556 |         "ElicitRequest": {
 557 |             "description": "A request from the server to elicit additional information from the user via the client.",
 558 |             "properties": {
 559 |                 "method": {
 560 |                     "const": "elicitation/create",
 561 |                     "type": "string"
 562 |                 },
 563 |                 "params": {
 564 |                     "properties": {
 565 |                         "message": {
 566 |                             "description": "The message to present to the user.",
 567 |                             "type": "string"
 568 |                         },
 569 |                         "requestedSchema": {
 570 |                             "description": "A restricted subset of JSON Schema.\nOnly top-level properties are allowed, without nesting.",
 571 |                             "properties": {
 572 |                                 "properties": {
 573 |                                     "additionalProperties": {
 574 |                                         "$ref": "#/definitions/PrimitiveSchemaDefinition"
 575 |                                     },
 576 |                                     "type": "object"
 577 |                                 },
 578 |                                 "required": {
 579 |                                     "items": {
 580 |                                         "type": "string"
 581 |                                     },
 582 |                                     "type": "array"
 583 |                                 },
 584 |                                 "type": {
 585 |                                     "const": "object",
 586 |                                     "type": "string"
 587 |                                 }
 588 |                             },
 589 |                             "required": [
 590 |                                 "properties",
 591 |                                 "type"
 592 |                             ],
 593 |                             "type": "object"
 594 |                         }
 595 |                     },
 596 |                     "required": [
 597 |                         "message",
 598 |                         "requestedSchema"
 599 |                     ],
 600 |                     "type": "object"
 601 |                 }
 602 |             },
 603 |             "required": [
 604 |                 "method",
 605 |                 "params"
 606 |             ],
 607 |             "type": "object"
 608 |         },
 609 |         "ElicitResult": {
 610 |             "description": "The client's response to an elicitation request.",
 611 |             "properties": {
 612 |                 "_meta": {
 613 |                     "additionalProperties": {},
 614 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
 615 |                     "type": "object"
 616 |                 },
 617 |                 "action": {
 618 |                     "description": "The user action in response to the elicitation.\n- \"accept\": User submitted the form/confirmed the action\n- \"decline\": User explicitly declined the action\n- \"cancel\": User dismissed without making an explicit choice",
 619 |                     "enum": [
 620 |                         "accept",
 621 |                         "cancel",
 622 |                         "decline"
 623 |                     ],
 624 |                     "type": "string"
 625 |                 },
 626 |                 "content": {
 627 |                     "additionalProperties": {
 628 |                         "type": [
 629 |                             "string",
 630 |                             "integer",
 631 |                             "boolean"
 632 |                         ]
 633 |                     },
 634 |                     "description": "The submitted form data, only present when action is \"accept\".\nContains values matching the requested schema.",
 635 |                     "type": "object"
 636 |                 }
 637 |             },
 638 |             "required": [
 639 |                 "action"
 640 |             ],
 641 |             "type": "object"
 642 |         },
 643 |         "EmbeddedResource": {
 644 |             "description": "The contents of a resource, embedded into a prompt or tool call result.\n\nIt is up to the client how best to render embedded resources for the benefit\nof the LLM and/or the user.",
 645 |             "properties": {
 646 |                 "_meta": {
 647 |                     "additionalProperties": {},
 648 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
 649 |                     "type": "object"
 650 |                 },
 651 |                 "annotations": {
 652 |                     "$ref": "#/definitions/Annotations",
 653 |                     "description": "Optional annotations for the client."
 654 |                 },
 655 |                 "resource": {
 656 |                     "anyOf": [
 657 |                         {
 658 |                             "$ref": "#/definitions/TextResourceContents"
 659 |                         },
 660 |                         {
 661 |                             "$ref": "#/definitions/BlobResourceContents"
 662 |                         }
 663 |                     ]
 664 |                 },
 665 |                 "type": {
 666 |                     "const": "resource",
 667 |                     "type": "string"
 668 |                 }
 669 |             },
 670 |             "required": [
 671 |                 "resource",
 672 |                 "type"
 673 |             ],
 674 |             "type": "object"
 675 |         },
 676 |         "EmptyResult": {
 677 |             "$ref": "#/definitions/Result"
 678 |         },
 679 |         "EnumSchema": {
 680 |             "properties": {
 681 |                 "description": {
 682 |                     "type": "string"
 683 |                 },
 684 |                 "enum": {
 685 |                     "items": {
 686 |                         "type": "string"
 687 |                     },
 688 |                     "type": "array"
 689 |                 },
 690 |                 "enumNames": {
 691 |                     "items": {
 692 |                         "type": "string"
 693 |                     },
 694 |                     "type": "array"
 695 |                 },
 696 |                 "title": {
 697 |                     "type": "string"
 698 |                 },
 699 |                 "type": {
 700 |                     "const": "string",
 701 |                     "type": "string"
 702 |                 }
 703 |             },
 704 |             "required": [
 705 |                 "enum",
 706 |                 "type"
 707 |             ],
 708 |             "type": "object"
 709 |         },
 710 |         "GetPromptRequest": {
 711 |             "description": "Used by the client to get a prompt provided by the server.",
 712 |             "properties": {
 713 |                 "method": {
 714 |                     "const": "prompts/get",
 715 |                     "type": "string"
 716 |                 },
 717 |                 "params": {
 718 |                     "properties": {
 719 |                         "arguments": {
 720 |                             "additionalProperties": {
 721 |                                 "type": "string"
 722 |                             },
 723 |                             "description": "Arguments to use for templating the prompt.",
 724 |                             "type": "object"
 725 |                         },
 726 |                         "name": {
 727 |                             "description": "The name of the prompt or prompt template.",
 728 |                             "type": "string"
 729 |                         }
 730 |                     },
 731 |                     "required": [
 732 |                         "name"
 733 |                     ],
 734 |                     "type": "object"
 735 |                 }
 736 |             },
 737 |             "required": [
 738 |                 "method",
 739 |                 "params"
 740 |             ],
 741 |             "type": "object"
 742 |         },
 743 |         "GetPromptResult": {
 744 |             "description": "The server's response to a prompts/get request from the client.",
 745 |             "properties": {
 746 |                 "_meta": {
 747 |                     "additionalProperties": {},
 748 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
 749 |                     "type": "object"
 750 |                 },
 751 |                 "description": {
 752 |                     "description": "An optional description for the prompt.",
 753 |                     "type": "string"
 754 |                 },
 755 |                 "messages": {
 756 |                     "items": {
 757 |                         "$ref": "#/definitions/PromptMessage"
 758 |                     },
 759 |                     "type": "array"
 760 |                 }
 761 |             },
 762 |             "required": [
 763 |                 "messages"
 764 |             ],
 765 |             "type": "object"
 766 |         },
 767 |         "ImageContent": {
 768 |             "description": "An image provided to or from an LLM.",
 769 |             "properties": {
 770 |                 "_meta": {
 771 |                     "additionalProperties": {},
 772 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
 773 |                     "type": "object"
 774 |                 },
 775 |                 "annotations": {
 776 |                     "$ref": "#/definitions/Annotations",
 777 |                     "description": "Optional annotations for the client."
 778 |                 },
 779 |                 "data": {
 780 |                     "description": "The base64-encoded image data.",
 781 |                     "format": "byte",
 782 |                     "type": "string"
 783 |                 },
 784 |                 "mimeType": {
 785 |                     "description": "The MIME type of the image. Different providers may support different image types.",
 786 |                     "type": "string"
 787 |                 },
 788 |                 "type": {
 789 |                     "const": "image",
 790 |                     "type": "string"
 791 |                 }
 792 |             },
 793 |             "required": [
 794 |                 "data",
 795 |                 "mimeType",
 796 |                 "type"
 797 |             ],
 798 |             "type": "object"
 799 |         },
 800 |         "Implementation": {
 801 |             "description": "Describes the name and version of an MCP implementation, with an optional title for UI representation.",
 802 |             "properties": {
 803 |                 "name": {
 804 |                     "description": "Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).",
 805 |                     "type": "string"
 806 |                 },
 807 |                 "title": {
 808 |                     "description": "Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\neven by those unfamiliar with domain-specific terminology.\n\nIf not provided, the name should be used for display (except for Tool,\nwhere `annotations.title` should be given precedence over using `name`,\nif present).",
 809 |                     "type": "string"
 810 |                 },
 811 |                 "version": {
 812 |                     "type": "string"
 813 |                 }
 814 |             },
 815 |             "required": [
 816 |                 "name",
 817 |                 "version"
 818 |             ],
 819 |             "type": "object"
 820 |         },
 821 |         "InitializeRequest": {
 822 |             "description": "This request is sent from the client to the server when it first connects, asking it to begin initialization.",
 823 |             "properties": {
 824 |                 "method": {
 825 |                     "const": "initialize",
 826 |                     "type": "string"
 827 |                 },
 828 |                 "params": {
 829 |                     "properties": {
 830 |                         "capabilities": {
 831 |                             "$ref": "#/definitions/ClientCapabilities"
 832 |                         },
 833 |                         "clientInfo": {
 834 |                             "$ref": "#/definitions/Implementation"
 835 |                         },
 836 |                         "protocolVersion": {
 837 |                             "description": "The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.",
 838 |                             "type": "string"
 839 |                         }
 840 |                     },
 841 |                     "required": [
 842 |                         "capabilities",
 843 |                         "clientInfo",
 844 |                         "protocolVersion"
 845 |                     ],
 846 |                     "type": "object"
 847 |                 }
 848 |             },
 849 |             "required": [
 850 |                 "method",
 851 |                 "params"
 852 |             ],
 853 |             "type": "object"
 854 |         },
 855 |         "InitializeResult": {
 856 |             "description": "After receiving an initialize request from the client, the server sends this response.",
 857 |             "properties": {
 858 |                 "_meta": {
 859 |                     "additionalProperties": {},
 860 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
 861 |                     "type": "object"
 862 |                 },
 863 |                 "capabilities": {
 864 |                     "$ref": "#/definitions/ServerCapabilities"
 865 |                 },
 866 |                 "instructions": {
 867 |                     "description": "Instructions describing how to use the server and its features.\n\nThis can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a \"hint\" to the model. For example, this information MAY be added to the system prompt.",
 868 |                     "type": "string"
 869 |                 },
 870 |                 "protocolVersion": {
 871 |                     "description": "The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.",
 872 |                     "type": "string"
 873 |                 },
 874 |                 "serverInfo": {
 875 |                     "$ref": "#/definitions/Implementation"
 876 |                 }
 877 |             },
 878 |             "required": [
 879 |                 "capabilities",
 880 |                 "protocolVersion",
 881 |                 "serverInfo"
 882 |             ],
 883 |             "type": "object"
 884 |         },
 885 |         "InitializedNotification": {
 886 |             "description": "This notification is sent from the client to the server after initialization has finished.",
 887 |             "properties": {
 888 |                 "method": {
 889 |                     "const": "notifications/initialized",
 890 |                     "type": "string"
 891 |                 },
 892 |                 "params": {
 893 |                     "additionalProperties": {},
 894 |                     "properties": {
 895 |                         "_meta": {
 896 |                             "additionalProperties": {},
 897 |                             "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
 898 |                             "type": "object"
 899 |                         }
 900 |                     },
 901 |                     "type": "object"
 902 |                 }
 903 |             },
 904 |             "required": [
 905 |                 "method"
 906 |             ],
 907 |             "type": "object"
 908 |         },
 909 |         "JSONRPCError": {
 910 |             "description": "A response to a request that indicates an error occurred.",
 911 |             "properties": {
 912 |                 "error": {
 913 |                     "properties": {
 914 |                         "code": {
 915 |                             "description": "The error type that occurred.",
 916 |                             "type": "integer"
 917 |                         },
 918 |                         "data": {
 919 |                             "description": "Additional information about the error. The value of this member is defined by the sender (e.g. detailed error information, nested errors etc.)."
 920 |                         },
 921 |                         "message": {
 922 |                             "description": "A short description of the error. The message SHOULD be limited to a concise single sentence.",
 923 |                             "type": "string"
 924 |                         }
 925 |                     },
 926 |                     "required": [
 927 |                         "code",
 928 |                         "message"
 929 |                     ],
 930 |                     "type": "object"
 931 |                 },
 932 |                 "id": {
 933 |                     "$ref": "#/definitions/RequestId"
 934 |                 },
 935 |                 "jsonrpc": {
 936 |                     "const": "2.0",
 937 |                     "type": "string"
 938 |                 }
 939 |             },
 940 |             "required": [
 941 |                 "error",
 942 |                 "id",
 943 |                 "jsonrpc"
 944 |             ],
 945 |             "type": "object"
 946 |         },
 947 |         "JSONRPCMessage": {
 948 |             "anyOf": [
 949 |                 {
 950 |                     "$ref": "#/definitions/JSONRPCRequest"
 951 |                 },
 952 |                 {
 953 |                     "$ref": "#/definitions/JSONRPCNotification"
 954 |                 },
 955 |                 {
 956 |                     "$ref": "#/definitions/JSONRPCResponse"
 957 |                 },
 958 |                 {
 959 |                     "$ref": "#/definitions/JSONRPCError"
 960 |                 }
 961 |             ],
 962 |             "description": "Refers to any valid JSON-RPC object that can be decoded off the wire, or encoded to be sent."
 963 |         },
 964 |         "JSONRPCNotification": {
 965 |             "description": "A notification which does not expect a response.",
 966 |             "properties": {
 967 |                 "jsonrpc": {
 968 |                     "const": "2.0",
 969 |                     "type": "string"
 970 |                 },
 971 |                 "method": {
 972 |                     "type": "string"
 973 |                 },
 974 |                 "params": {
 975 |                     "additionalProperties": {},
 976 |                     "properties": {
 977 |                         "_meta": {
 978 |                             "additionalProperties": {},
 979 |                             "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
 980 |                             "type": "object"
 981 |                         }
 982 |                     },
 983 |                     "type": "object"
 984 |                 }
 985 |             },
 986 |             "required": [
 987 |                 "jsonrpc",
 988 |                 "method"
 989 |             ],
 990 |             "type": "object"
 991 |         },
 992 |         "JSONRPCRequest": {
 993 |             "description": "A request that expects a response.",
 994 |             "properties": {
 995 |                 "id": {
 996 |                     "$ref": "#/definitions/RequestId"
 997 |                 },
 998 |                 "jsonrpc": {
 999 |                     "const": "2.0",
1000 |                     "type": "string"
1001 |                 },
1002 |                 "method": {
1003 |                     "type": "string"
1004 |                 },
1005 |                 "params": {
1006 |                     "additionalProperties": {},
1007 |                     "properties": {
1008 |                         "_meta": {
1009 |                             "additionalProperties": {},
1010 |                             "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
1011 |                             "properties": {
1012 |                                 "progressToken": {
1013 |                                     "$ref": "#/definitions/ProgressToken",
1014 |                                     "description": "If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications."
1015 |                                 }
1016 |                             },
1017 |                             "type": "object"
1018 |                         }
1019 |                     },
1020 |                     "type": "object"
1021 |                 }
1022 |             },
1023 |             "required": [
1024 |                 "id",
1025 |                 "jsonrpc",
1026 |                 "method"
1027 |             ],
1028 |             "type": "object"
1029 |         },
1030 |         "JSONRPCResponse": {
1031 |             "description": "A successful (non-error) response to a request.",
1032 |             "properties": {
1033 |                 "id": {
1034 |                     "$ref": "#/definitions/RequestId"
1035 |                 },
1036 |                 "jsonrpc": {
1037 |                     "const": "2.0",
1038 |                     "type": "string"
1039 |                 },
1040 |                 "result": {
1041 |                     "$ref": "#/definitions/Result"
1042 |                 }
1043 |             },
1044 |             "required": [
1045 |                 "id",
1046 |                 "jsonrpc",
1047 |                 "result"
1048 |             ],
1049 |             "type": "object"
1050 |         },
1051 |         "ListPromptsRequest": {
1052 |             "description": "Sent from the client to request a list of prompts and prompt templates the server has.",
1053 |             "properties": {
1054 |                 "method": {
1055 |                     "const": "prompts/list",
1056 |                     "type": "string"
1057 |                 },
1058 |                 "params": {
1059 |                     "properties": {
1060 |                         "cursor": {
1061 |                             "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
1062 |                             "type": "string"
1063 |                         }
1064 |                     },
1065 |                     "type": "object"
1066 |                 }
1067 |             },
1068 |             "required": [
1069 |                 "method"
1070 |             ],
1071 |             "type": "object"
1072 |         },
1073 |         "ListPromptsResult": {
1074 |             "description": "The server's response to a prompts/list request from the client.",
1075 |             "properties": {
1076 |                 "_meta": {
1077 |                     "additionalProperties": {},
1078 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
1079 |                     "type": "object"
1080 |                 },
1081 |                 "nextCursor": {
1082 |                     "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
1083 |                     "type": "string"
1084 |                 },
1085 |                 "prompts": {
1086 |                     "items": {
1087 |                         "$ref": "#/definitions/Prompt"
1088 |                     },
1089 |                     "type": "array"
1090 |                 }
1091 |             },
1092 |             "required": [
1093 |                 "prompts"
1094 |             ],
1095 |             "type": "object"
1096 |         },
1097 |         "ListResourceTemplatesRequest": {
1098 |             "description": "Sent from the client to request a list of resource templates the server has.",
1099 |             "properties": {
1100 |                 "method": {
1101 |                     "const": "resources/templates/list",
1102 |                     "type": "string"
1103 |                 },
1104 |                 "params": {
1105 |                     "properties": {
1106 |                         "cursor": {
1107 |                             "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
1108 |                             "type": "string"
1109 |                         }
1110 |                     },
1111 |                     "type": "object"
1112 |                 }
1113 |             },
1114 |             "required": [
1115 |                 "method"
1116 |             ],
1117 |             "type": "object"
1118 |         },
1119 |         "ListResourceTemplatesResult": {
1120 |             "description": "The server's response to a resources/templates/list request from the client.",
1121 |             "properties": {
1122 |                 "_meta": {
1123 |                     "additionalProperties": {},
1124 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
1125 |                     "type": "object"
1126 |                 },
1127 |                 "nextCursor": {
1128 |                     "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
1129 |                     "type": "string"
1130 |                 },
1131 |                 "resourceTemplates": {
1132 |                     "items": {
1133 |                         "$ref": "#/definitions/ResourceTemplate"
1134 |                     },
1135 |                     "type": "array"
1136 |                 }
1137 |             },
1138 |             "required": [
1139 |                 "resourceTemplates"
1140 |             ],
1141 |             "type": "object"
1142 |         },
1143 |         "ListResourcesRequest": {
1144 |             "description": "Sent from the client to request a list of resources the server has.",
1145 |             "properties": {
1146 |                 "method": {
1147 |                     "const": "resources/list",
1148 |                     "type": "string"
1149 |                 },
1150 |                 "params": {
1151 |                     "properties": {
1152 |                         "cursor": {
1153 |                             "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
1154 |                             "type": "string"
1155 |                         }
1156 |                     },
1157 |                     "type": "object"
1158 |                 }
1159 |             },
1160 |             "required": [
1161 |                 "method"
1162 |             ],
1163 |             "type": "object"
1164 |         },
1165 |         "ListResourcesResult": {
1166 |             "description": "The server's response to a resources/list request from the client.",
1167 |             "properties": {
1168 |                 "_meta": {
1169 |                     "additionalProperties": {},
1170 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
1171 |                     "type": "object"
1172 |                 },
1173 |                 "nextCursor": {
1174 |                     "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
1175 |                     "type": "string"
1176 |                 },
1177 |                 "resources": {
1178 |                     "items": {
1179 |                         "$ref": "#/definitions/Resource"
1180 |                     },
1181 |                     "type": "array"
1182 |                 }
1183 |             },
1184 |             "required": [
1185 |                 "resources"
1186 |             ],
1187 |             "type": "object"
1188 |         },
1189 |         "ListRootsRequest": {
1190 |             "description": "Sent from the server to request a list of root URIs from the client. Roots allow\nservers to ask for specific directories or files to operate on. A common example\nfor roots is providing a set of repositories or directories a server should operate\non.\n\nThis request is typically used when the server needs to understand the file system\nstructure or access specific locations that the client has permission to read from.",
1191 |             "properties": {
1192 |                 "method": {
1193 |                     "const": "roots/list",
1194 |                     "type": "string"
1195 |                 },
1196 |                 "params": {
1197 |                     "additionalProperties": {},
1198 |                     "properties": {
1199 |                         "_meta": {
1200 |                             "additionalProperties": {},
1201 |                             "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
1202 |                             "properties": {
1203 |                                 "progressToken": {
1204 |                                     "$ref": "#/definitions/ProgressToken",
1205 |                                     "description": "If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications."
1206 |                                 }
1207 |                             },
1208 |                             "type": "object"
1209 |                         }
1210 |                     },
1211 |                     "type": "object"
1212 |                 }
1213 |             },
1214 |             "required": [
1215 |                 "method"
1216 |             ],
1217 |             "type": "object"
1218 |         },
1219 |         "ListRootsResult": {
1220 |             "description": "The client's response to a roots/list request from the server.\nThis result contains an array of Root objects, each representing a root directory\nor file that the server can operate on.",
1221 |             "properties": {
1222 |                 "_meta": {
1223 |                     "additionalProperties": {},
1224 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
1225 |                     "type": "object"
1226 |                 },
1227 |                 "roots": {
1228 |                     "items": {
1229 |                         "$ref": "#/definitions/Root"
1230 |                     },
1231 |                     "type": "array"
1232 |                 }
1233 |             },
1234 |             "required": [
1235 |                 "roots"
1236 |             ],
1237 |             "type": "object"
1238 |         },
1239 |         "ListToolsRequest": {
1240 |             "description": "Sent from the client to request a list of tools the server has.",
1241 |             "properties": {
1242 |                 "method": {
1243 |                     "const": "tools/list",
1244 |                     "type": "string"
1245 |                 },
1246 |                 "params": {
1247 |                     "properties": {
1248 |                         "cursor": {
1249 |                             "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
1250 |                             "type": "string"
1251 |                         }
1252 |                     },
1253 |                     "type": "object"
1254 |                 }
1255 |             },
1256 |             "required": [
1257 |                 "method"
1258 |             ],
1259 |             "type": "object"
1260 |         },
1261 |         "ListToolsResult": {
1262 |             "description": "The server's response to a tools/list request from the client.",
1263 |             "properties": {
1264 |                 "_meta": {
1265 |                     "additionalProperties": {},
1266 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
1267 |                     "type": "object"
1268 |                 },
1269 |                 "nextCursor": {
1270 |                     "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
1271 |                     "type": "string"
1272 |                 },
1273 |                 "tools": {
1274 |                     "items": {
1275 |                         "$ref": "#/definitions/Tool"
1276 |                     },
1277 |                     "type": "array"
1278 |                 }
1279 |             },
1280 |             "required": [
1281 |                 "tools"
1282 |             ],
1283 |             "type": "object"
1284 |         },
1285 |         "LoggingLevel": {
1286 |             "description": "The severity of a log message.\n\nThese map to syslog message severities, as specified in RFC-5424:\nhttps://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1",
1287 |             "enum": [
1288 |                 "alert",
1289 |                 "critical",
1290 |                 "debug",
1291 |                 "emergency",
1292 |                 "error",
1293 |                 "info",
1294 |                 "notice",
1295 |                 "warning"
1296 |             ],
1297 |             "type": "string"
1298 |         },
1299 |         "LoggingMessageNotification": {
1300 |             "description": "Notification of a log message passed from server to client. If no logging/setLevel request has been sent from the client, the server MAY decide which messages to send automatically.",
1301 |             "properties": {
1302 |                 "method": {
1303 |                     "const": "notifications/message",
1304 |                     "type": "string"
1305 |                 },
1306 |                 "params": {
1307 |                     "properties": {
1308 |                         "data": {
1309 |                             "description": "The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here."
1310 |                         },
1311 |                         "level": {
1312 |                             "$ref": "#/definitions/LoggingLevel",
1313 |                             "description": "The severity of this log message."
1314 |                         },
1315 |                         "logger": {
1316 |                             "description": "An optional name of the logger issuing this message.",
1317 |                             "type": "string"
1318 |                         }
1319 |                     },
1320 |                     "required": [
1321 |                         "data",
1322 |                         "level"
1323 |                     ],
1324 |                     "type": "object"
1325 |                 }
1326 |             },
1327 |             "required": [
1328 |                 "method",
1329 |                 "params"
1330 |             ],
1331 |             "type": "object"
1332 |         },
1333 |         "ModelHint": {
1334 |             "description": "Hints to use for model selection.\n\nKeys not declared here are currently left unspecified by the spec and are up\nto the client to interpret.",
1335 |             "properties": {
1336 |                 "name": {
1337 |                     "description": "A hint for a model name.\n\nThe client SHOULD treat this as a substring of a model name; for example:\n - `claude-3-5-sonnet` should match `claude-3-5-sonnet-20241022`\n - `sonnet` should match `claude-3-5-sonnet-20241022`, `claude-3-sonnet-20240229`, etc.\n - `claude` should match any Claude model\n\nThe client MAY also map the string to a different provider's model name or a different model family, as long as it fills a similar niche; for example:\n - `gemini-1.5-flash` could match `claude-3-haiku-20240307`",
1338 |                     "type": "string"
1339 |                 }
1340 |             },
1341 |             "type": "object"
1342 |         },
1343 |         "ModelPreferences": {
1344 |             "description": "The server's preferences for model selection, requested of the client during sampling.\n\nBecause LLMs can vary along multiple dimensions, choosing the \"best\" model is\nrarely straightforward.  Different models excel in different areas—some are\nfaster but less capable, others are more capable but more expensive, and so\non. This interface allows servers to express their priorities across multiple\ndimensions to help clients make an appropriate selection for their use case.\n\nThese preferences are always advisory. The client MAY ignore them. It is also\nup to the client to decide how to interpret these preferences and how to\nbalance them against other considerations.",
1345 |             "properties": {
1346 |                 "costPriority": {
1347 |                     "description": "How much to prioritize cost when selecting a model. A value of 0 means cost\nis not important, while a value of 1 means cost is the most important\nfactor.",
1348 |                     "maximum": 1,
1349 |                     "minimum": 0,
1350 |                     "type": "number"
1351 |                 },
1352 |                 "hints": {
1353 |                     "description": "Optional hints to use for model selection.\n\nIf multiple hints are specified, the client MUST evaluate them in order\n(such that the first match is taken).\n\nThe client SHOULD prioritize these hints over the numeric priorities, but\nMAY still use the priorities to select from ambiguous matches.",
1354 |                     "items": {
1355 |                         "$ref": "#/definitions/ModelHint"
1356 |                     },
1357 |                     "type": "array"
1358 |                 },
1359 |                 "intelligencePriority": {
1360 |                     "description": "How much to prioritize intelligence and capabilities when selecting a\nmodel. A value of 0 means intelligence is not important, while a value of 1\nmeans intelligence is the most important factor.",
1361 |                     "maximum": 1,
1362 |                     "minimum": 0,
1363 |                     "type": "number"
1364 |                 },
1365 |                 "speedPriority": {
1366 |                     "description": "How much to prioritize sampling speed (latency) when selecting a model. A\nvalue of 0 means speed is not important, while a value of 1 means speed is\nthe most important factor.",
1367 |                     "maximum": 1,
1368 |                     "minimum": 0,
1369 |                     "type": "number"
1370 |                 }
1371 |             },
1372 |             "type": "object"
1373 |         },
1374 |         "Notification": {
1375 |             "properties": {
1376 |                 "method": {
1377 |                     "type": "string"
1378 |                 },
1379 |                 "params": {
1380 |                     "additionalProperties": {},
1381 |                     "properties": {
1382 |                         "_meta": {
1383 |                             "additionalProperties": {},
1384 |                             "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
1385 |                             "type": "object"
1386 |                         }
1387 |                     },
1388 |                     "type": "object"
1389 |                 }
1390 |             },
1391 |             "required": [
1392 |                 "method"
1393 |             ],
1394 |             "type": "object"
1395 |         },
1396 |         "NumberSchema": {
1397 |             "properties": {
1398 |                 "description": {
1399 |                     "type": "string"
1400 |                 },
1401 |                 "maximum": {
1402 |                     "type": "integer"
1403 |                 },
1404 |                 "minimum": {
1405 |                     "type": "integer"
1406 |                 },
1407 |                 "title": {
1408 |                     "type": "string"
1409 |                 },
1410 |                 "type": {
1411 |                     "enum": [
1412 |                         "integer",
1413 |                         "number"
1414 |                     ],
1415 |                     "type": "string"
1416 |                 }
1417 |             },
1418 |             "required": [
1419 |                 "type"
1420 |             ],
1421 |             "type": "object"
1422 |         },
1423 |         "PaginatedRequest": {
1424 |             "properties": {
1425 |                 "method": {
1426 |                     "type": "string"
1427 |                 },
1428 |                 "params": {
1429 |                     "properties": {
1430 |                         "cursor": {
1431 |                             "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
1432 |                             "type": "string"
1433 |                         }
1434 |                     },
1435 |                     "type": "object"
1436 |                 }
1437 |             },
1438 |             "required": [
1439 |                 "method"
1440 |             ],
1441 |             "type": "object"
1442 |         },
1443 |         "PaginatedResult": {
1444 |             "properties": {
1445 |                 "_meta": {
1446 |                     "additionalProperties": {},
1447 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
1448 |                     "type": "object"
1449 |                 },
1450 |                 "nextCursor": {
1451 |                     "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
1452 |                     "type": "string"
1453 |                 }
1454 |             },
1455 |             "type": "object"
1456 |         },
1457 |         "PingRequest": {
1458 |             "description": "A ping, issued by either the server or the client, to check that the other party is still alive. The receiver must promptly respond, or else may be disconnected.",
1459 |             "properties": {
1460 |                 "method": {
1461 |                     "const": "ping",
1462 |                     "type": "string"
1463 |                 },
1464 |                 "params": {
1465 |                     "additionalProperties": {},
1466 |                     "properties": {
1467 |                         "_meta": {
1468 |                             "additionalProperties": {},
1469 |                             "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
1470 |                             "properties": {
1471 |                                 "progressToken": {
1472 |                                     "$ref": "#/definitions/ProgressToken",
1473 |                                     "description": "If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications."
1474 |                                 }
1475 |                             },
1476 |                             "type": "object"
1477 |                         }
1478 |                     },
1479 |                     "type": "object"
1480 |                 }
1481 |             },
1482 |             "required": [
1483 |                 "method"
1484 |             ],
1485 |             "type": "object"
1486 |         },
1487 |         "PrimitiveSchemaDefinition": {
1488 |             "anyOf": [
1489 |                 {
1490 |                     "$ref": "#/definitions/StringSchema"
1491 |                 },
1492 |                 {
1493 |                     "$ref": "#/definitions/NumberSchema"
1494 |                 },
1495 |                 {
1496 |                     "$ref": "#/definitions/BooleanSchema"
1497 |                 },
1498 |                 {
1499 |                     "$ref": "#/definitions/EnumSchema"
1500 |                 }
1501 |             ],
1502 |             "description": "Restricted schema definitions that only allow primitive types\nwithout nested objects or arrays."
1503 |         },
1504 |         "ProgressNotification": {
1505 |             "description": "An out-of-band notification used to inform the receiver of a progress update for a long-running request.",
1506 |             "properties": {
1507 |                 "method": {
1508 |                     "const": "notifications/progress",
1509 |                     "type": "string"
1510 |                 },
1511 |                 "params": {
1512 |                     "properties": {
1513 |                         "message": {
1514 |                             "description": "An optional message describing the current progress.",
1515 |                             "type": "string"
1516 |                         },
1517 |                         "progress": {
1518 |                             "description": "The progress thus far. This should increase every time progress is made, even if the total is unknown.",
1519 |                             "type": "number"
1520 |                         },
1521 |                         "progressToken": {
1522 |                             "$ref": "#/definitions/ProgressToken",
1523 |                             "description": "The progress token which was given in the initial request, used to associate this notification with the request that is proceeding."
1524 |                         },
1525 |                         "total": {
1526 |                             "description": "Total number of items to process (or total progress required), if known.",
1527 |                             "type": "number"
1528 |                         }
1529 |                     },
1530 |                     "required": [
1531 |                         "progress",
1532 |                         "progressToken"
1533 |                     ],
1534 |                     "type": "object"
1535 |                 }
1536 |             },
1537 |             "required": [
1538 |                 "method",
1539 |                 "params"
1540 |             ],
1541 |             "type": "object"
1542 |         },
1543 |         "ProgressToken": {
1544 |             "description": "A progress token, used to associate progress notifications with the original request.",
1545 |             "type": [
1546 |                 "string",
1547 |                 "integer"
1548 |             ]
1549 |         },
1550 |         "Prompt": {
1551 |             "description": "A prompt or prompt template that the server offers.",
1552 |             "properties": {
1553 |                 "_meta": {
1554 |                     "additionalProperties": {},
1555 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
1556 |                     "type": "object"
1557 |                 },
1558 |                 "arguments": {
1559 |                     "description": "A list of arguments to use for templating the prompt.",
1560 |                     "items": {
1561 |                         "$ref": "#/definitions/PromptArgument"
1562 |                     },
1563 |                     "type": "array"
1564 |                 },
1565 |                 "description": {
1566 |                     "description": "An optional description of what this prompt provides",
1567 |                     "type": "string"
1568 |                 },
1569 |                 "name": {
1570 |                     "description": "Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).",
1571 |                     "type": "string"
1572 |                 },
1573 |                 "title": {
1574 |                     "description": "Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\neven by those unfamiliar with domain-specific terminology.\n\nIf not provided, the name should be used for display (except for Tool,\nwhere `annotations.title` should be given precedence over using `name`,\nif present).",
1575 |                     "type": "string"
1576 |                 }
1577 |             },
1578 |             "required": [
1579 |                 "name"
1580 |             ],
1581 |             "type": "object"
1582 |         },
1583 |         "PromptArgument": {
1584 |             "description": "Describes an argument that a prompt can accept.",
1585 |             "properties": {
1586 |                 "description": {
1587 |                     "description": "A human-readable description of the argument.",
1588 |                     "type": "string"
1589 |                 },
1590 |                 "name": {
1591 |                     "description": "Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).",
1592 |                     "type": "string"
1593 |                 },
1594 |                 "required": {
1595 |                     "description": "Whether this argument must be provided.",
1596 |                     "type": "boolean"
1597 |                 },
1598 |                 "title": {
1599 |                     "description": "Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\neven by those unfamiliar with domain-specific terminology.\n\nIf not provided, the name should be used for display (except for Tool,\nwhere `annotations.title` should be given precedence over using `name`,\nif present).",
1600 |                     "type": "string"
1601 |                 }
1602 |             },
1603 |             "required": [
1604 |                 "name"
1605 |             ],
1606 |             "type": "object"
1607 |         },
1608 |         "PromptListChangedNotification": {
1609 |             "description": "An optional notification from the server to the client, informing it that the list of prompts it offers has changed. This may be issued by servers without any previous subscription from the client.",
1610 |             "properties": {
1611 |                 "method": {
1612 |                     "const": "notifications/prompts/list_changed",
1613 |                     "type": "string"
1614 |                 },
1615 |                 "params": {
1616 |                     "additionalProperties": {},
1617 |                     "properties": {
1618 |                         "_meta": {
1619 |                             "additionalProperties": {},
1620 |                             "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
1621 |                             "type": "object"
1622 |                         }
1623 |                     },
1624 |                     "type": "object"
1625 |                 }
1626 |             },
1627 |             "required": [
1628 |                 "method"
1629 |             ],
1630 |             "type": "object"
1631 |         },
1632 |         "PromptMessage": {
1633 |             "description": "Describes a message returned as part of a prompt.\n\nThis is similar to `SamplingMessage`, but also supports the embedding of\nresources from the MCP server.",
1634 |             "properties": {
1635 |                 "content": {
1636 |                     "$ref": "#/definitions/ContentBlock"
1637 |                 },
1638 |                 "role": {
1639 |                     "$ref": "#/definitions/Role"
1640 |                 }
1641 |             },
1642 |             "required": [
1643 |                 "content",
1644 |                 "role"
1645 |             ],
1646 |             "type": "object"
1647 |         },
1648 |         "PromptReference": {
1649 |             "description": "Identifies a prompt.",
1650 |             "properties": {
1651 |                 "name": {
1652 |                     "description": "Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).",
1653 |                     "type": "string"
1654 |                 },
1655 |                 "title": {
1656 |                     "description": "Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\neven by those unfamiliar with domain-specific terminology.\n\nIf not provided, the name should be used for display (except for Tool,\nwhere `annotations.title` should be given precedence over using `name`,\nif present).",
1657 |                     "type": "string"
1658 |                 },
1659 |                 "type": {
1660 |                     "const": "ref/prompt",
1661 |                     "type": "string"
1662 |                 }
1663 |             },
1664 |             "required": [
1665 |                 "name",
1666 |                 "type"
1667 |             ],
1668 |             "type": "object"
1669 |         },
1670 |         "ReadResourceRequest": {
1671 |             "description": "Sent from the client to the server, to read a specific resource URI.",
1672 |             "properties": {
1673 |                 "method": {
1674 |                     "const": "resources/read",
1675 |                     "type": "string"
1676 |                 },
1677 |                 "params": {
1678 |                     "properties": {
1679 |                         "uri": {
1680 |                             "description": "The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.",
1681 |                             "format": "uri",
1682 |                             "type": "string"
1683 |                         }
1684 |                     },
1685 |                     "required": [
1686 |                         "uri"
1687 |                     ],
1688 |                     "type": "object"
1689 |                 }
1690 |             },
1691 |             "required": [
1692 |                 "method",
1693 |                 "params"
1694 |             ],
1695 |             "type": "object"
1696 |         },
1697 |         "ReadResourceResult": {
1698 |             "description": "The server's response to a resources/read request from the client.",
1699 |             "properties": {
1700 |                 "_meta": {
1701 |                     "additionalProperties": {},
1702 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
1703 |                     "type": "object"
1704 |                 },
1705 |                 "contents": {
1706 |                     "items": {
1707 |                         "anyOf": [
1708 |                             {
1709 |                                 "$ref": "#/definitions/TextResourceContents"
1710 |                             },
1711 |                             {
1712 |                                 "$ref": "#/definitions/BlobResourceContents"
1713 |                             }
1714 |                         ]
1715 |                     },
1716 |                     "type": "array"
1717 |                 }
1718 |             },
1719 |             "required": [
1720 |                 "contents"
1721 |             ],
1722 |             "type": "object"
1723 |         },
1724 |         "Request": {
1725 |             "properties": {
1726 |                 "method": {
1727 |                     "type": "string"
1728 |                 },
1729 |                 "params": {
1730 |                     "additionalProperties": {},
1731 |                     "properties": {
1732 |                         "_meta": {
1733 |                             "additionalProperties": {},
1734 |                             "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
1735 |                             "properties": {
1736 |                                 "progressToken": {
1737 |                                     "$ref": "#/definitions/ProgressToken",
1738 |                                     "description": "If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications."
1739 |                                 }
1740 |                             },
1741 |                             "type": "object"
1742 |                         }
1743 |                     },
1744 |                     "type": "object"
1745 |                 }
1746 |             },
1747 |             "required": [
1748 |                 "method"
1749 |             ],
1750 |             "type": "object"
1751 |         },
1752 |         "RequestId": {
1753 |             "description": "A uniquely identifying ID for a request in JSON-RPC.",
1754 |             "type": [
1755 |                 "string",
1756 |                 "integer"
1757 |             ]
1758 |         },
1759 |         "Resource": {
1760 |             "description": "A known resource that the server is capable of reading.",
1761 |             "properties": {
1762 |                 "_meta": {
1763 |                     "additionalProperties": {},
1764 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
1765 |                     "type": "object"
1766 |                 },
1767 |                 "annotations": {
1768 |                     "$ref": "#/definitions/Annotations",
1769 |                     "description": "Optional annotations for the client."
1770 |                 },
1771 |                 "description": {
1772 |                     "description": "A description of what this resource represents.\n\nThis can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.",
1773 |                     "type": "string"
1774 |                 },
1775 |                 "mimeType": {
1776 |                     "description": "The MIME type of this resource, if known.",
1777 |                     "type": "string"
1778 |                 },
1779 |                 "name": {
1780 |                     "description": "Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).",
1781 |                     "type": "string"
1782 |                 },
1783 |                 "size": {
1784 |                     "description": "The size of the raw resource content, in bytes (i.e., before base64 encoding or any tokenization), if known.\n\nThis can be used by Hosts to display file sizes and estimate context window usage.",
1785 |                     "type": "integer"
1786 |                 },
1787 |                 "title": {
1788 |                     "description": "Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\neven by those unfamiliar with domain-specific terminology.\n\nIf not provided, the name should be used for display (except for Tool,\nwhere `annotations.title` should be given precedence over using `name`,\nif present).",
1789 |                     "type": "string"
1790 |                 },
1791 |                 "uri": {
1792 |                     "description": "The URI of this resource.",
1793 |                     "format": "uri",
1794 |                     "type": "string"
1795 |                 }
1796 |             },
1797 |             "required": [
1798 |                 "name",
1799 |                 "uri"
1800 |             ],
1801 |             "type": "object"
1802 |         },
1803 |         "ResourceContents": {
1804 |             "description": "The contents of a specific resource or sub-resource.",
1805 |             "properties": {
1806 |                 "_meta": {
1807 |                     "additionalProperties": {},
1808 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
1809 |                     "type": "object"
1810 |                 },
1811 |                 "mimeType": {
1812 |                     "description": "The MIME type of this resource, if known.",
1813 |                     "type": "string"
1814 |                 },
1815 |                 "uri": {
1816 |                     "description": "The URI of this resource.",
1817 |                     "format": "uri",
1818 |                     "type": "string"
1819 |                 }
1820 |             },
1821 |             "required": [
1822 |                 "uri"
1823 |             ],
1824 |             "type": "object"
1825 |         },
1826 |         "ResourceLink": {
1827 |             "description": "A resource that the server is capable of reading, included in a prompt or tool call result.\n\nNote: resource links returned by tools are not guaranteed to appear in the results of `resources/list` requests.",
1828 |             "properties": {
1829 |                 "_meta": {
1830 |                     "additionalProperties": {},
1831 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
1832 |                     "type": "object"
1833 |                 },
1834 |                 "annotations": {
1835 |                     "$ref": "#/definitions/Annotations",
1836 |                     "description": "Optional annotations for the client."
1837 |                 },
1838 |                 "description": {
1839 |                     "description": "A description of what this resource represents.\n\nThis can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.",
1840 |                     "type": "string"
1841 |                 },
1842 |                 "mimeType": {
1843 |                     "description": "The MIME type of this resource, if known.",
1844 |                     "type": "string"
1845 |                 },
1846 |                 "name": {
1847 |                     "description": "Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).",
1848 |                     "type": "string"
1849 |                 },
1850 |                 "size": {
1851 |                     "description": "The size of the raw resource content, in bytes (i.e., before base64 encoding or any tokenization), if known.\n\nThis can be used by Hosts to display file sizes and estimate context window usage.",
1852 |                     "type": "integer"
1853 |                 },
1854 |                 "title": {
1855 |                     "description": "Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\neven by those unfamiliar with domain-specific terminology.\n\nIf not provided, the name should be used for display (except for Tool,\nwhere `annotations.title` should be given precedence over using `name`,\nif present).",
1856 |                     "type": "string"
1857 |                 },
1858 |                 "type": {
1859 |                     "const": "resource_link",
1860 |                     "type": "string"
1861 |                 },
1862 |                 "uri": {
1863 |                     "description": "The URI of this resource.",
1864 |                     "format": "uri",
1865 |                     "type": "string"
1866 |                 }
1867 |             },
1868 |             "required": [
1869 |                 "name",
1870 |                 "type",
1871 |                 "uri"
1872 |             ],
1873 |             "type": "object"
1874 |         },
1875 |         "ResourceListChangedNotification": {
1876 |             "description": "An optional notification from the server to the client, informing it that the list of resources it can read from has changed. This may be issued by servers without any previous subscription from the client.",
1877 |             "properties": {
1878 |                 "method": {
1879 |                     "const": "notifications/resources/list_changed",
1880 |                     "type": "string"
1881 |                 },
1882 |                 "params": {
1883 |                     "additionalProperties": {},
1884 |                     "properties": {
1885 |                         "_meta": {
1886 |                             "additionalProperties": {},
1887 |                             "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
1888 |                             "type": "object"
1889 |                         }
1890 |                     },
1891 |                     "type": "object"
1892 |                 }
1893 |             },
1894 |             "required": [
1895 |                 "method"
1896 |             ],
1897 |             "type": "object"
1898 |         },
1899 |         "ResourceTemplate": {
1900 |             "description": "A template description for resources available on the server.",
1901 |             "properties": {
1902 |                 "_meta": {
1903 |                     "additionalProperties": {},
1904 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
1905 |                     "type": "object"
1906 |                 },
1907 |                 "annotations": {
1908 |                     "$ref": "#/definitions/Annotations",
1909 |                     "description": "Optional annotations for the client."
1910 |                 },
1911 |                 "description": {
1912 |                     "description": "A description of what this template is for.\n\nThis can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.",
1913 |                     "type": "string"
1914 |                 },
1915 |                 "mimeType": {
1916 |                     "description": "The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.",
1917 |                     "type": "string"
1918 |                 },
1919 |                 "name": {
1920 |                     "description": "Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).",
1921 |                     "type": "string"
1922 |                 },
1923 |                 "title": {
1924 |                     "description": "Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\neven by those unfamiliar with domain-specific terminology.\n\nIf not provided, the name should be used for display (except for Tool,\nwhere `annotations.title` should be given precedence over using `name`,\nif present).",
1925 |                     "type": "string"
1926 |                 },
1927 |                 "uriTemplate": {
1928 |                     "description": "A URI template (according to RFC 6570) that can be used to construct resource URIs.",
1929 |                     "format": "uri-template",
1930 |                     "type": "string"
1931 |                 }
1932 |             },
1933 |             "required": [
1934 |                 "name",
1935 |                 "uriTemplate"
1936 |             ],
1937 |             "type": "object"
1938 |         },
1939 |         "ResourceTemplateReference": {
1940 |             "description": "A reference to a resource or resource template definition.",
1941 |             "properties": {
1942 |                 "type": {
1943 |                     "const": "ref/resource",
1944 |                     "type": "string"
1945 |                 },
1946 |                 "uri": {
1947 |                     "description": "The URI or URI template of the resource.",
1948 |                     "format": "uri-template",
1949 |                     "type": "string"
1950 |                 }
1951 |             },
1952 |             "required": [
1953 |                 "type",
1954 |                 "uri"
1955 |             ],
1956 |             "type": "object"
1957 |         },
1958 |         "ResourceUpdatedNotification": {
1959 |             "description": "A notification from the server to the client, informing it that a resource has changed and may need to be read again. This should only be sent if the client previously sent a resources/subscribe request.",
1960 |             "properties": {
1961 |                 "method": {
1962 |                     "const": "notifications/resources/updated",
1963 |                     "type": "string"
1964 |                 },
1965 |                 "params": {
1966 |                     "properties": {
1967 |                         "uri": {
1968 |                             "description": "The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.",
1969 |                             "format": "uri",
1970 |                             "type": "string"
1971 |                         }
1972 |                     },
1973 |                     "required": [
1974 |                         "uri"
1975 |                     ],
1976 |                     "type": "object"
1977 |                 }
1978 |             },
1979 |             "required": [
1980 |                 "method",
1981 |                 "params"
1982 |             ],
1983 |             "type": "object"
1984 |         },
1985 |         "Result": {
1986 |             "additionalProperties": {},
1987 |             "properties": {
1988 |                 "_meta": {
1989 |                     "additionalProperties": {},
1990 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
1991 |                     "type": "object"
1992 |                 }
1993 |             },
1994 |             "type": "object"
1995 |         },
1996 |         "Role": {
1997 |             "description": "The sender or recipient of messages and data in a conversation.",
1998 |             "enum": [
1999 |                 "assistant",
2000 |                 "user"
2001 |             ],
2002 |             "type": "string"
2003 |         },
2004 |         "Root": {
2005 |             "description": "Represents a root directory or file that the server can operate on.",
2006 |             "properties": {
2007 |                 "_meta": {
2008 |                     "additionalProperties": {},
2009 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
2010 |                     "type": "object"
2011 |                 },
2012 |                 "name": {
2013 |                     "description": "An optional name for the root. This can be used to provide a human-readable\nidentifier for the root, which may be useful for display purposes or for\nreferencing the root in other parts of the application.",
2014 |                     "type": "string"
2015 |                 },
2016 |                 "uri": {
2017 |                     "description": "The URI identifying the root. This *must* start with file:// for now.\nThis restriction may be relaxed in future versions of the protocol to allow\nother URI schemes.",
2018 |                     "format": "uri",
2019 |                     "type": "string"
2020 |                 }
2021 |             },
2022 |             "required": [
2023 |                 "uri"
2024 |             ],
2025 |             "type": "object"
2026 |         },
2027 |         "RootsListChangedNotification": {
2028 |             "description": "A notification from the client to the server, informing it that the list of roots has changed.\nThis notification should be sent whenever the client adds, removes, or modifies any root.\nThe server should then request an updated list of roots using the ListRootsRequest.",
2029 |             "properties": {
2030 |                 "method": {
2031 |                     "const": "notifications/roots/list_changed",
2032 |                     "type": "string"
2033 |                 },
2034 |                 "params": {
2035 |                     "additionalProperties": {},
2036 |                     "properties": {
2037 |                         "_meta": {
2038 |                             "additionalProperties": {},
2039 |                             "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
2040 |                             "type": "object"
2041 |                         }
2042 |                     },
2043 |                     "type": "object"
2044 |                 }
2045 |             },
2046 |             "required": [
2047 |                 "method"
2048 |             ],
2049 |             "type": "object"
2050 |         },
2051 |         "SamplingMessage": {
2052 |             "description": "Describes a message issued to or received from an LLM API.",
2053 |             "properties": {
2054 |                 "content": {
2055 |                     "anyOf": [
2056 |                         {
2057 |                             "$ref": "#/definitions/TextContent"
2058 |                         },
2059 |                         {
2060 |                             "$ref": "#/definitions/ImageContent"
2061 |                         },
2062 |                         {
2063 |                             "$ref": "#/definitions/AudioContent"
2064 |                         }
2065 |                     ]
2066 |                 },
2067 |                 "role": {
2068 |                     "$ref": "#/definitions/Role"
2069 |                 }
2070 |             },
2071 |             "required": [
2072 |                 "content",
2073 |                 "role"
2074 |             ],
2075 |             "type": "object"
2076 |         },
2077 |         "ServerCapabilities": {
2078 |             "description": "Capabilities that a server may support. Known capabilities are defined here, in this schema, but this is not a closed set: any server can define its own, additional capabilities.",
2079 |             "properties": {
2080 |                 "completions": {
2081 |                     "additionalProperties": true,
2082 |                     "description": "Present if the server supports argument autocompletion suggestions.",
2083 |                     "properties": {},
2084 |                     "type": "object"
2085 |                 },
2086 |                 "experimental": {
2087 |                     "additionalProperties": {
2088 |                         "additionalProperties": true,
2089 |                         "properties": {},
2090 |                         "type": "object"
2091 |                     },
2092 |                     "description": "Experimental, non-standard capabilities that the server supports.",
2093 |                     "type": "object"
2094 |                 },
2095 |                 "logging": {
2096 |                     "additionalProperties": true,
2097 |                     "description": "Present if the server supports sending log messages to the client.",
2098 |                     "properties": {},
2099 |                     "type": "object"
2100 |                 },
2101 |                 "prompts": {
2102 |                     "description": "Present if the server offers any prompt templates.",
2103 |                     "properties": {
2104 |                         "listChanged": {
2105 |                             "description": "Whether this server supports notifications for changes to the prompt list.",
2106 |                             "type": "boolean"
2107 |                         }
2108 |                     },
2109 |                     "type": "object"
2110 |                 },
2111 |                 "resources": {
2112 |                     "description": "Present if the server offers any resources to read.",
2113 |                     "properties": {
2114 |                         "listChanged": {
2115 |                             "description": "Whether this server supports notifications for changes to the resource list.",
2116 |                             "type": "boolean"
2117 |                         },
2118 |                         "subscribe": {
2119 |                             "description": "Whether this server supports subscribing to resource updates.",
2120 |                             "type": "boolean"
2121 |                         }
2122 |                     },
2123 |                     "type": "object"
2124 |                 },
2125 |                 "tools": {
2126 |                     "description": "Present if the server offers any tools to call.",
2127 |                     "properties": {
2128 |                         "listChanged": {
2129 |                             "description": "Whether this server supports notifications for changes to the tool list.",
2130 |                             "type": "boolean"
2131 |                         }
2132 |                     },
2133 |                     "type": "object"
2134 |                 }
2135 |             },
2136 |             "type": "object"
2137 |         },
2138 |         "ServerNotification": {
2139 |             "anyOf": [
2140 |                 {
2141 |                     "$ref": "#/definitions/CancelledNotification"
2142 |                 },
2143 |                 {
2144 |                     "$ref": "#/definitions/ProgressNotification"
2145 |                 },
2146 |                 {
2147 |                     "$ref": "#/definitions/ResourceListChangedNotification"
2148 |                 },
2149 |                 {
2150 |                     "$ref": "#/definitions/ResourceUpdatedNotification"
2151 |                 },
2152 |                 {
2153 |                     "$ref": "#/definitions/PromptListChangedNotification"
2154 |                 },
2155 |                 {
2156 |                     "$ref": "#/definitions/ToolListChangedNotification"
2157 |                 },
2158 |                 {
2159 |                     "$ref": "#/definitions/LoggingMessageNotification"
2160 |                 }
2161 |             ]
2162 |         },
2163 |         "ServerRequest": {
2164 |             "anyOf": [
2165 |                 {
2166 |                     "$ref": "#/definitions/PingRequest"
2167 |                 },
2168 |                 {
2169 |                     "$ref": "#/definitions/CreateMessageRequest"
2170 |                 },
2171 |                 {
2172 |                     "$ref": "#/definitions/ListRootsRequest"
2173 |                 },
2174 |                 {
2175 |                     "$ref": "#/definitions/ElicitRequest"
2176 |                 }
2177 |             ]
2178 |         },
2179 |         "ServerResult": {
2180 |             "anyOf": [
2181 |                 {
2182 |                     "$ref": "#/definitions/Result"
2183 |                 },
2184 |                 {
2185 |                     "$ref": "#/definitions/InitializeResult"
2186 |                 },
2187 |                 {
2188 |                     "$ref": "#/definitions/ListResourcesResult"
2189 |                 },
2190 |                 {
2191 |                     "$ref": "#/definitions/ListResourceTemplatesResult"
2192 |                 },
2193 |                 {
2194 |                     "$ref": "#/definitions/ReadResourceResult"
2195 |                 },
2196 |                 {
2197 |                     "$ref": "#/definitions/ListPromptsResult"
2198 |                 },
2199 |                 {
2200 |                     "$ref": "#/definitions/GetPromptResult"
2201 |                 },
2202 |                 {
2203 |                     "$ref": "#/definitions/ListToolsResult"
2204 |                 },
2205 |                 {
2206 |                     "$ref": "#/definitions/CallToolResult"
2207 |                 },
2208 |                 {
2209 |                     "$ref": "#/definitions/CompleteResult"
2210 |                 }
2211 |             ]
2212 |         },
2213 |         "SetLevelRequest": {
2214 |             "description": "A request from the client to the server, to enable or adjust logging.",
2215 |             "properties": {
2216 |                 "method": {
2217 |                     "const": "logging/setLevel",
2218 |                     "type": "string"
2219 |                 },
2220 |                 "params": {
2221 |                     "properties": {
2222 |                         "level": {
2223 |                             "$ref": "#/definitions/LoggingLevel",
2224 |                             "description": "The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/message."
2225 |                         }
2226 |                     },
2227 |                     "required": [
2228 |                         "level"
2229 |                     ],
2230 |                     "type": "object"
2231 |                 }
2232 |             },
2233 |             "required": [
2234 |                 "method",
2235 |                 "params"
2236 |             ],
2237 |             "type": "object"
2238 |         },
2239 |         "StringSchema": {
2240 |             "properties": {
2241 |                 "description": {
2242 |                     "type": "string"
2243 |                 },
2244 |                 "format": {
2245 |                     "enum": [
2246 |                         "date",
2247 |                         "date-time",
2248 |                         "email",
2249 |                         "uri"
2250 |                     ],
2251 |                     "type": "string"
2252 |                 },
2253 |                 "maxLength": {
2254 |                     "type": "integer"
2255 |                 },
2256 |                 "minLength": {
2257 |                     "type": "integer"
2258 |                 },
2259 |                 "title": {
2260 |                     "type": "string"
2261 |                 },
2262 |                 "type": {
2263 |                     "const": "string",
2264 |                     "type": "string"
2265 |                 }
2266 |             },
2267 |             "required": [
2268 |                 "type"
2269 |             ],
2270 |             "type": "object"
2271 |         },
2272 |         "SubscribeRequest": {
2273 |             "description": "Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.",
2274 |             "properties": {
2275 |                 "method": {
2276 |                     "const": "resources/subscribe",
2277 |                     "type": "string"
2278 |                 },
2279 |                 "params": {
2280 |                     "properties": {
2281 |                         "uri": {
2282 |                             "description": "The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.",
2283 |                             "format": "uri",
2284 |                             "type": "string"
2285 |                         }
2286 |                     },
2287 |                     "required": [
2288 |                         "uri"
2289 |                     ],
2290 |                     "type": "object"
2291 |                 }
2292 |             },
2293 |             "required": [
2294 |                 "method",
2295 |                 "params"
2296 |             ],
2297 |             "type": "object"
2298 |         },
2299 |         "TextContent": {
2300 |             "description": "Text provided to or from an LLM.",
2301 |             "properties": {
2302 |                 "_meta": {
2303 |                     "additionalProperties": {},
2304 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
2305 |                     "type": "object"
2306 |                 },
2307 |                 "annotations": {
2308 |                     "$ref": "#/definitions/Annotations",
2309 |                     "description": "Optional annotations for the client."
2310 |                 },
2311 |                 "text": {
2312 |                     "description": "The text content of the message.",
2313 |                     "type": "string"
2314 |                 },
2315 |                 "type": {
2316 |                     "const": "text",
2317 |                     "type": "string"
2318 |                 }
2319 |             },
2320 |             "required": [
2321 |                 "text",
2322 |                 "type"
2323 |             ],
2324 |             "type": "object"
2325 |         },
2326 |         "TextResourceContents": {
2327 |             "properties": {
2328 |                 "_meta": {
2329 |                     "additionalProperties": {},
2330 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
2331 |                     "type": "object"
2332 |                 },
2333 |                 "mimeType": {
2334 |                     "description": "The MIME type of this resource, if known.",
2335 |                     "type": "string"
2336 |                 },
2337 |                 "text": {
2338 |                     "description": "The text of the item. This must only be set if the item can actually be represented as text (not binary data).",
2339 |                     "type": "string"
2340 |                 },
2341 |                 "uri": {
2342 |                     "description": "The URI of this resource.",
2343 |                     "format": "uri",
2344 |                     "type": "string"
2345 |                 }
2346 |             },
2347 |             "required": [
2348 |                 "text",
2349 |                 "uri"
2350 |             ],
2351 |             "type": "object"
2352 |         },
2353 |         "Tool": {
2354 |             "description": "Definition for a tool the client can call.",
2355 |             "properties": {
2356 |                 "_meta": {
2357 |                     "additionalProperties": {},
2358 |                     "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
2359 |                     "type": "object"
2360 |                 },
2361 |                 "annotations": {
2362 |                     "$ref": "#/definitions/ToolAnnotations",
2363 |                     "description": "Optional additional tool information.\n\nDisplay name precedence order is: title, annotations.title, then name."
2364 |                 },
2365 |                 "description": {
2366 |                     "description": "A human-readable description of the tool.\n\nThis can be used by clients to improve the LLM's understanding of available tools. It can be thought of like a \"hint\" to the model.",
2367 |                     "type": "string"
2368 |                 },
2369 |                 "inputSchema": {
2370 |                     "description": "A JSON Schema object defining the expected parameters for the tool.",
2371 |                     "properties": {
2372 |                         "properties": {
2373 |                             "additionalProperties": {
2374 |                                 "additionalProperties": true,
2375 |                                 "properties": {},
2376 |                                 "type": "object"
2377 |                             },
2378 |                             "type": "object"
2379 |                         },
2380 |                         "required": {
2381 |                             "items": {
2382 |                                 "type": "string"
2383 |                             },
2384 |                             "type": "array"
2385 |                         },
2386 |                         "type": {
2387 |                             "const": "object",
2388 |                             "type": "string"
2389 |                         }
2390 |                     },
2391 |                     "required": [
2392 |                         "type"
2393 |                     ],
2394 |                     "type": "object"
2395 |                 },
2396 |                 "name": {
2397 |                     "description": "Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).",
2398 |                     "type": "string"
2399 |                 },
2400 |                 "outputSchema": {
2401 |                     "description": "An optional JSON Schema object defining the structure of the tool's output returned in\nthe structuredContent field of a CallToolResult.",
2402 |                     "properties": {
2403 |                         "properties": {
2404 |                             "additionalProperties": {
2405 |                                 "additionalProperties": true,
2406 |                                 "properties": {},
2407 |                                 "type": "object"
2408 |                             },
2409 |                             "type": "object"
2410 |                         },
2411 |                         "required": {
2412 |                             "items": {
2413 |                                 "type": "string"
2414 |                             },
2415 |                             "type": "array"
2416 |                         },
2417 |                         "type": {
2418 |                             "const": "object",
2419 |                             "type": "string"
2420 |                         }
2421 |                     },
2422 |                     "required": [
2423 |                         "type"
2424 |                     ],
2425 |                     "type": "object"
2426 |                 },
2427 |                 "title": {
2428 |                     "description": "Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\neven by those unfamiliar with domain-specific terminology.\n\nIf not provided, the name should be used for display (except for Tool,\nwhere `annotations.title` should be given precedence over using `name`,\nif present).",
2429 |                     "type": "string"
2430 |                 }
2431 |             },
2432 |             "required": [
2433 |                 "inputSchema",
2434 |                 "name"
2435 |             ],
2436 |             "type": "object"
2437 |         },
2438 |         "ToolAnnotations": {
2439 |             "description": "Additional properties describing a Tool to clients.\n\nNOTE: all properties in ToolAnnotations are **hints**.\nThey are not guaranteed to provide a faithful description of\ntool behavior (including descriptive properties like `title`).\n\nClients should never make tool use decisions based on ToolAnnotations\nreceived from untrusted servers.",
2440 |             "properties": {
2441 |                 "destructiveHint": {
2442 |                     "description": "If true, the tool may perform destructive updates to its environment.\nIf false, the tool performs only additive updates.\n\n(This property is meaningful only when `readOnlyHint == false`)\n\nDefault: true",
2443 |                     "type": "boolean"
2444 |                 },
2445 |                 "idempotentHint": {
2446 |                     "description": "If true, calling the tool repeatedly with the same arguments\nwill have no additional effect on the its environment.\n\n(This property is meaningful only when `readOnlyHint == false`)\n\nDefault: false",
2447 |                     "type": "boolean"
2448 |                 },
2449 |                 "openWorldHint": {
2450 |                     "description": "If true, this tool may interact with an \"open world\" of external\nentities. If false, the tool's domain of interaction is closed.\nFor example, the world of a web search tool is open, whereas that\nof a memory tool is not.\n\nDefault: true",
2451 |                     "type": "boolean"
2452 |                 },
2453 |                 "readOnlyHint": {
2454 |                     "description": "If true, the tool does not modify its environment.\n\nDefault: false",
2455 |                     "type": "boolean"
2456 |                 },
2457 |                 "title": {
2458 |                     "description": "A human-readable title for the tool.",
2459 |                     "type": "string"
2460 |                 }
2461 |             },
2462 |             "type": "object"
2463 |         },
2464 |         "ToolListChangedNotification": {
2465 |             "description": "An optional notification from the server to the client, informing it that the list of tools it offers has changed. This may be issued by servers without any previous subscription from the client.",
2466 |             "properties": {
2467 |                 "method": {
2468 |                     "const": "notifications/tools/list_changed",
2469 |                     "type": "string"
2470 |                 },
2471 |                 "params": {
2472 |                     "additionalProperties": {},
2473 |                     "properties": {
2474 |                         "_meta": {
2475 |                             "additionalProperties": {},
2476 |                             "description": "See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.",
2477 |                             "type": "object"
2478 |                         }
2479 |                     },
2480 |                     "type": "object"
2481 |                 }
2482 |             },
2483 |             "required": [
2484 |                 "method"
2485 |             ],
2486 |             "type": "object"
2487 |         },
2488 |         "UnsubscribeRequest": {
2489 |             "description": "Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.",
2490 |             "properties": {
2491 |                 "method": {
2492 |                     "const": "resources/unsubscribe",
2493 |                     "type": "string"
2494 |                 },
2495 |                 "params": {
2496 |                     "properties": {
2497 |                         "uri": {
2498 |                             "description": "The URI of the resource to unsubscribe from.",
2499 |                             "format": "uri",
2500 |                             "type": "string"
2501 |                         }
2502 |                     },
2503 |                     "required": [
2504 |                         "uri"
2505 |                     ],
2506 |                     "type": "object"
2507 |                 }
2508 |             },
2509 |             "required": [
2510 |                 "method",
2511 |                 "params"
2512 |             ],
2513 |             "type": "object"
2514 |         }
2515 |     }
2516 | }
2517 | 
2518 | 


--------------------------------------------------------------------------------
/schema/2025-06-18/schema.ts:
--------------------------------------------------------------------------------
   1 | /* JSON-RPC types */
   2 | 
   3 | /**
   4 |  * Refers to any valid JSON-RPC object that can be decoded off the wire, or encoded to be sent.
   5 |  *
   6 |  * @internal
   7 |  */
   8 | export type JSONRPCMessage =
   9 |   | JSONRPCRequest
  10 |   | JSONRPCNotification
  11 |   | JSONRPCResponse
  12 |   | JSONRPCError;
  13 | 
  14 | /** @internal */
  15 | export const LATEST_PROTOCOL_VERSION = "2025-06-18";
  16 | /** @internal */
  17 | export const JSONRPC_VERSION = "2.0";
  18 | 
  19 | /**
  20 |  * A progress token, used to associate progress notifications with the original request.
  21 |  */
  22 | export type ProgressToken = string | number;
  23 | 
  24 | /**
  25 |  * An opaque token used to represent a cursor for pagination.
  26 |  */
  27 | export type Cursor = string;
  28 | 
  29 | /** @internal */
  30 | export interface Request {
  31 |   method: string;
  32 |   params?: {
  33 |     /**
  34 |      * See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.
  35 |      */
  36 |     _meta?: {
  37 |       /**
  38 |        * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
  39 |        */
  40 |       progressToken?: ProgressToken;
  41 |       [key: string]: unknown;
  42 |     };
  43 |     [key: string]: unknown;
  44 |   };
  45 | }
  46 | 
  47 | /** @internal */
  48 | export interface Notification {
  49 |   method: string;
  50 |   params?: {
  51 |     /**
  52 |      * See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.
  53 |      */
  54 |     _meta?: { [key: string]: unknown };
  55 |     [key: string]: unknown;
  56 |   };
  57 | }
  58 | 
  59 | export interface Result {
  60 |   /**
  61 |    * See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.
  62 |    */
  63 |   _meta?: { [key: string]: unknown };
  64 |   [key: string]: unknown;
  65 | }
  66 | 
  67 | /**
  68 |  * A uniquely identifying ID for a request in JSON-RPC.
  69 |  */
  70 | export type RequestId = string | number;
  71 | 
  72 | /**
  73 |  * A request that expects a response.
  74 |  */
  75 | export interface JSONRPCRequest extends Request {
  76 |   jsonrpc: typeof JSONRPC_VERSION;
  77 |   id: RequestId;
  78 | }
  79 | 
  80 | /**
  81 |  * A notification which does not expect a response.
  82 |  */
  83 | export interface JSONRPCNotification extends Notification {
  84 |   jsonrpc: typeof JSONRPC_VERSION;
  85 | }
  86 | 
  87 | /**
  88 |  * A successful (non-error) response to a request.
  89 |  */
  90 | export interface JSONRPCResponse {
  91 |   jsonrpc: typeof JSONRPC_VERSION;
  92 |   id: RequestId;
  93 |   result: Result;
  94 | }
  95 | 
  96 | // Standard JSON-RPC error codes
  97 | /** @internal */
  98 | export const PARSE_ERROR = -32700;
  99 | /** @internal */
 100 | export const INVALID_REQUEST = -32600;
 101 | /** @internal */
 102 | export const METHOD_NOT_FOUND = -32601;
 103 | /** @internal */
 104 | export const INVALID_PARAMS = -32602;
 105 | /** @internal */
 106 | export const INTERNAL_ERROR = -32603;
 107 | 
 108 | /**
 109 |  * A response to a request that indicates an error occurred.
 110 |  */
 111 | export interface JSONRPCError {
 112 |   jsonrpc: typeof JSONRPC_VERSION;
 113 |   id: RequestId;
 114 |   error: {
 115 |     /**
 116 |      * The error type that occurred.
 117 |      */
 118 |     code: number;
 119 |     /**
 120 |      * A short description of the error. The message SHOULD be limited to a concise single sentence.
 121 |      */
 122 |     message: string;
 123 |     /**
 124 |      * Additional information about the error. The value of this member is defined by the sender (e.g. detailed error information, nested errors etc.).
 125 |      */
 126 |     data?: unknown;
 127 |   };
 128 | }
 129 | 
 130 | /* Empty result */
 131 | /**
 132 |  * A response that indicates success but carries no data.
 133 |  */
 134 | export type EmptyResult = Result;
 135 | 
 136 | /* Cancellation */
 137 | /**
 138 |  * This notification can be sent by either side to indicate that it is cancelling a previously-issued request.
 139 |  *
 140 |  * The request SHOULD still be in-flight, but due to communication latency, it is always possible that this notification MAY arrive after the request has already finished.
 141 |  *
 142 |  * This notification indicates that the result will be unused, so any associated processing SHOULD cease.
 143 |  *
 144 |  * A client MUST NOT attempt to cancel its `initialize` request.
 145 |  *
 146 |  * @category notifications/cancelled
 147 |  */
 148 | export interface CancelledNotification extends Notification {
 149 |   method: "notifications/cancelled";
 150 |   params: {
 151 |     /**
 152 |      * The ID of the request to cancel.
 153 |      *
 154 |      * This MUST correspond to the ID of a request previously issued in the same direction.
 155 |      */
 156 |     requestId: RequestId;
 157 | 
 158 |     /**
 159 |      * An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.
 160 |      */
 161 |     reason?: string;
 162 |   };
 163 | }
 164 | 
 165 | /* Initialization */
 166 | /**
 167 |  * This request is sent from the client to the server when it first connects, asking it to begin initialization.
 168 |  *
 169 |  * @category initialize
 170 |  */
 171 | export interface InitializeRequest extends Request {
 172 |   method: "initialize";
 173 |   params: {
 174 |     /**
 175 |      * The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.
 176 |      */
 177 |     protocolVersion: string;
 178 |     capabilities: ClientCapabilities;
 179 |     clientInfo: Implementation;
 180 |   };
 181 | }
 182 | 
 183 | /**
 184 |  * After receiving an initialize request from the client, the server sends this response.
 185 |  *
 186 |  * @category initialize
 187 |  */
 188 | export interface InitializeResult extends Result {
 189 |   /**
 190 |    * The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.
 191 |    */
 192 |   protocolVersion: string;
 193 |   capabilities: ServerCapabilities;
 194 |   serverInfo: Implementation;
 195 | 
 196 |   /**
 197 |    * Instructions describing how to use the server and its features.
 198 |    *
 199 |    * This can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a "hint" to the model. For example, this information MAY be added to the system prompt.
 200 |    */
 201 |   instructions?: string;
 202 | }
 203 | 
 204 | /**
 205 |  * This notification is sent from the client to the server after initialization has finished.
 206 |  *
 207 |  * @category notifications/initialized
 208 |  */
 209 | export interface InitializedNotification extends Notification {
 210 |   method: "notifications/initialized";
 211 | }
 212 | 
 213 | /**
 214 |  * Capabilities a client may support. Known capabilities are defined here, in this schema, but this is not a closed set: any client can define its own, additional capabilities.
 215 |  */
 216 | export interface ClientCapabilities {
 217 |   /**
 218 |    * Experimental, non-standard capabilities that the client supports.
 219 |    */
 220 |   experimental?: { [key: string]: object };
 221 |   /**
 222 |    * Present if the client supports listing roots.
 223 |    */
 224 |   roots?: {
 225 |     /**
 226 |      * Whether the client supports notifications for changes to the roots list.
 227 |      */
 228 |     listChanged?: boolean;
 229 |   };
 230 |   /**
 231 |    * Present if the client supports sampling from an LLM.
 232 |    */
 233 |   sampling?: object;
 234 |   /**
 235 |    * Present if the client supports elicitation from the server.
 236 |    */
 237 |   elicitation?: object;
 238 | }
 239 | 
 240 | /**
 241 |  * Capabilities that a server may support. Known capabilities are defined here, in this schema, but this is not a closed set: any server can define its own, additional capabilities.
 242 |  */
 243 | export interface ServerCapabilities {
 244 |   /**
 245 |    * Experimental, non-standard capabilities that the server supports.
 246 |    */
 247 |   experimental?: { [key: string]: object };
 248 |   /**
 249 |    * Present if the server supports sending log messages to the client.
 250 |    */
 251 |   logging?: object;
 252 |   /**
 253 |    * Present if the server supports argument autocompletion suggestions.
 254 |    */
 255 |   completions?: object;
 256 |   /**
 257 |    * Present if the server offers any prompt templates.
 258 |    */
 259 |   prompts?: {
 260 |     /**
 261 |      * Whether this server supports notifications for changes to the prompt list.
 262 |      */
 263 |     listChanged?: boolean;
 264 |   };
 265 |   /**
 266 |    * Present if the server offers any resources to read.
 267 |    */
 268 |   resources?: {
 269 |     /**
 270 |      * Whether this server supports subscribing to resource updates.
 271 |      */
 272 |     subscribe?: boolean;
 273 |     /**
 274 |      * Whether this server supports notifications for changes to the resource list.
 275 |      */
 276 |     listChanged?: boolean;
 277 |   };
 278 |   /**
 279 |    * Present if the server offers any tools to call.
 280 |    */
 281 |   tools?: {
 282 |     /**
 283 |      * Whether this server supports notifications for changes to the tool list.
 284 |      */
 285 |     listChanged?: boolean;
 286 |   };
 287 | }
 288 | 
 289 | /**
 290 |  * Base interface for metadata with name (identifier) and title (display name) properties.
 291 |  *
 292 |  * @internal
 293 |  */
 294 | export interface BaseMetadata {
 295 |   /**
 296 |    * Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).
 297 |    */
 298 |   name: string;
 299 | 
 300 |   /**
 301 |    * Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
 302 |    * even by those unfamiliar with domain-specific terminology.
 303 |    *
 304 |    * If not provided, the name should be used for display (except for Tool,
 305 |    * where `annotations.title` should be given precedence over using `name`,
 306 |    * if present).
 307 |    */
 308 |   title?: string;
 309 | }
 310 | 
 311 | /**
 312 |  * Describes the name and version of an MCP implementation, with an optional title for UI representation.
 313 |  */
 314 | export interface Implementation extends BaseMetadata {
 315 |   version: string;
 316 | }
 317 | 
 318 | /* Ping */
 319 | /**
 320 |  * A ping, issued by either the server or the client, to check that the other party is still alive. The receiver must promptly respond, or else may be disconnected.
 321 |  *
 322 |  * @category ping
 323 |  */
 324 | export interface PingRequest extends Request {
 325 |   method: "ping";
 326 | }
 327 | 
 328 | /* Progress notifications */
 329 | /**
 330 |  * An out-of-band notification used to inform the receiver of a progress update for a long-running request.
 331 |  *
 332 |  * @category notifications/progress
 333 |  */
 334 | export interface ProgressNotification extends Notification {
 335 |   method: "notifications/progress";
 336 |   params: {
 337 |     /**
 338 |      * The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.
 339 |      */
 340 |     progressToken: ProgressToken;
 341 |     /**
 342 |      * The progress thus far. This should increase every time progress is made, even if the total is unknown.
 343 |      *
 344 |      * @TJS-type number
 345 |      */
 346 |     progress: number;
 347 |     /**
 348 |      * Total number of items to process (or total progress required), if known.
 349 |      *
 350 |      * @TJS-type number
 351 |      */
 352 |     total?: number;
 353 |     /**
 354 |      * An optional message describing the current progress.
 355 |      */
 356 |     message?: string;
 357 |   };
 358 | }
 359 | 
 360 | /* Pagination */
 361 | /** @internal */
 362 | export interface PaginatedRequest extends Request {
 363 |   params?: {
 364 |     /**
 365 |      * An opaque token representing the current pagination position.
 366 |      * If provided, the server should return results starting after this cursor.
 367 |      */
 368 |     cursor?: Cursor;
 369 |   };
 370 | }
 371 | 
 372 | /** @internal */
 373 | export interface PaginatedResult extends Result {
 374 |   /**
 375 |    * An opaque token representing the pagination position after the last returned result.
 376 |    * If present, there may be more results available.
 377 |    */
 378 |   nextCursor?: Cursor;
 379 | }
 380 | 
 381 | /* Resources */
 382 | /**
 383 |  * Sent from the client to request a list of resources the server has.
 384 |  *
 385 |  * @category resources/list
 386 |  */
 387 | export interface ListResourcesRequest extends PaginatedRequest {
 388 |   method: "resources/list";
 389 | }
 390 | 
 391 | /**
 392 |  * The server's response to a resources/list request from the client.
 393 |  *
 394 |  * @category resources/list
 395 |  */
 396 | export interface ListResourcesResult extends PaginatedResult {
 397 |   resources: Resource[];
 398 | }
 399 | 
 400 | /**
 401 |  * Sent from the client to request a list of resource templates the server has.
 402 |  *
 403 |  * @category resources/templates/list
 404 |  */
 405 | export interface ListResourceTemplatesRequest extends PaginatedRequest {
 406 |   method: "resources/templates/list";
 407 | }
 408 | 
 409 | /**
 410 |  * The server's response to a resources/templates/list request from the client.
 411 |  *
 412 |  * @category resources/templates/list
 413 |  */
 414 | export interface ListResourceTemplatesResult extends PaginatedResult {
 415 |   resourceTemplates: ResourceTemplate[];
 416 | }
 417 | 
 418 | /**
 419 |  * Sent from the client to the server, to read a specific resource URI.
 420 |  *
 421 |  * @category resources/read
 422 |  */
 423 | export interface ReadResourceRequest extends Request {
 424 |   method: "resources/read";
 425 |   params: {
 426 |     /**
 427 |      * The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.
 428 |      *
 429 |      * @format uri
 430 |      */
 431 |     uri: string;
 432 |   };
 433 | }
 434 | 
 435 | /**
 436 |  * The server's response to a resources/read request from the client.
 437 |  *
 438 |  * @category resources/read
 439 |  */
 440 | export interface ReadResourceResult extends Result {
 441 |   contents: (TextResourceContents | BlobResourceContents)[];
 442 | }
 443 | 
 444 | /**
 445 |  * An optional notification from the server to the client, informing it that the list of resources it can read from has changed. This may be issued by servers without any previous subscription from the client.
 446 |  *
 447 |  * @category notifications/resources/list_changed
 448 |  */
 449 | export interface ResourceListChangedNotification extends Notification {
 450 |   method: "notifications/resources/list_changed";
 451 | }
 452 | 
 453 | /**
 454 |  * Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.
 455 |  *
 456 |  * @category resources/subscribe
 457 |  */
 458 | export interface SubscribeRequest extends Request {
 459 |   method: "resources/subscribe";
 460 |   params: {
 461 |     /**
 462 |      * The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.
 463 |      *
 464 |      * @format uri
 465 |      */
 466 |     uri: string;
 467 |   };
 468 | }
 469 | 
 470 | /**
 471 |  * Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.
 472 |  *
 473 |  * @category resources/unsubscribe
 474 |  */
 475 | export interface UnsubscribeRequest extends Request {
 476 |   method: "resources/unsubscribe";
 477 |   params: {
 478 |     /**
 479 |      * The URI of the resource to unsubscribe from.
 480 |      *
 481 |      * @format uri
 482 |      */
 483 |     uri: string;
 484 |   };
 485 | }
 486 | 
 487 | /**
 488 |  * A notification from the server to the client, informing it that a resource has changed and may need to be read again. This should only be sent if the client previously sent a resources/subscribe request.
 489 |  *
 490 |  * @category notifications/resources/updated
 491 |  */
 492 | export interface ResourceUpdatedNotification extends Notification {
 493 |   method: "notifications/resources/updated";
 494 |   params: {
 495 |     /**
 496 |      * The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.
 497 |      *
 498 |      * @format uri
 499 |      */
 500 |     uri: string;
 501 |   };
 502 | }
 503 | 
 504 | /**
 505 |  * A known resource that the server is capable of reading.
 506 |  */
 507 | export interface Resource extends BaseMetadata {
 508 |   /**
 509 |    * The URI of this resource.
 510 |    *
 511 |    * @format uri
 512 |    */
 513 |   uri: string;
 514 | 
 515 |   /**
 516 |    * A description of what this resource represents.
 517 |    *
 518 |    * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
 519 |    */
 520 |   description?: string;
 521 | 
 522 |   /**
 523 |    * The MIME type of this resource, if known.
 524 |    */
 525 |   mimeType?: string;
 526 | 
 527 |   /**
 528 |    * Optional annotations for the client.
 529 |    */
 530 |   annotations?: Annotations;
 531 | 
 532 |   /**
 533 |    * The size of the raw resource content, in bytes (i.e., before base64 encoding or any tokenization), if known.
 534 |    *
 535 |    * This can be used by Hosts to display file sizes and estimate context window usage.
 536 |    */
 537 |   size?: number;
 538 | 
 539 |   /**
 540 |    * See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.
 541 |    */
 542 |   _meta?: { [key: string]: unknown };
 543 | }
 544 | 
 545 | /**
 546 |  * A template description for resources available on the server.
 547 |  */
 548 | export interface ResourceTemplate extends BaseMetadata {
 549 |   /**
 550 |    * A URI template (according to RFC 6570) that can be used to construct resource URIs.
 551 |    *
 552 |    * @format uri-template
 553 |    */
 554 |   uriTemplate: string;
 555 | 
 556 |   /**
 557 |    * A description of what this template is for.
 558 |    *
 559 |    * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
 560 |    */
 561 |   description?: string;
 562 | 
 563 |   /**
 564 |    * The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.
 565 |    */
 566 |   mimeType?: string;
 567 | 
 568 |   /**
 569 |    * Optional annotations for the client.
 570 |    */
 571 |   annotations?: Annotations;
 572 | 
 573 |   /**
 574 |    * See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.
 575 |    */
 576 |   _meta?: { [key: string]: unknown };
 577 | }
 578 | 
 579 | /**
 580 |  * The contents of a specific resource or sub-resource.
 581 |  */
 582 | export interface ResourceContents {
 583 |   /**
 584 |    * The URI of this resource.
 585 |    *
 586 |    * @format uri
 587 |    */
 588 |   uri: string;
 589 |   /**
 590 |    * The MIME type of this resource, if known.
 591 |    */
 592 |   mimeType?: string;
 593 | 
 594 |   /**
 595 |    * See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.
 596 |    */
 597 |   _meta?: { [key: string]: unknown };
 598 | }
 599 | 
 600 | export interface TextResourceContents extends ResourceContents {
 601 |   /**
 602 |    * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
 603 |    */
 604 |   text: string;
 605 | }
 606 | 
 607 | export interface BlobResourceContents extends ResourceContents {
 608 |   /**
 609 |    * A base64-encoded string representing the binary data of the item.
 610 |    *
 611 |    * @format byte
 612 |    */
 613 |   blob: string;
 614 | }
 615 | 
 616 | /* Prompts */
 617 | /**
 618 |  * Sent from the client to request a list of prompts and prompt templates the server has.
 619 |  *
 620 |  * @category prompts/list
 621 |  */
 622 | export interface ListPromptsRequest extends PaginatedRequest {
 623 |   method: "prompts/list";
 624 | }
 625 | 
 626 | /**
 627 |  * The server's response to a prompts/list request from the client.
 628 |  *
 629 |  * @category prompts/list
 630 |  */
 631 | export interface ListPromptsResult extends PaginatedResult {
 632 |   prompts: Prompt[];
 633 | }
 634 | 
 635 | /**
 636 |  * Used by the client to get a prompt provided by the server.
 637 |  *
 638 |  * @category prompts/get
 639 |  */
 640 | export interface GetPromptRequest extends Request {
 641 |   method: "prompts/get";
 642 |   params: {
 643 |     /**
 644 |      * The name of the prompt or prompt template.
 645 |      */
 646 |     name: string;
 647 |     /**
 648 |      * Arguments to use for templating the prompt.
 649 |      */
 650 |     arguments?: { [key: string]: string };
 651 |   };
 652 | }
 653 | 
 654 | /**
 655 |  * The server's response to a prompts/get request from the client.
 656 |  *
 657 |  * @category prompts/get
 658 |  */
 659 | export interface GetPromptResult extends Result {
 660 |   /**
 661 |    * An optional description for the prompt.
 662 |    */
 663 |   description?: string;
 664 |   messages: PromptMessage[];
 665 | }
 666 | 
 667 | /**
 668 |  * A prompt or prompt template that the server offers.
 669 |  */
 670 | export interface Prompt extends BaseMetadata {
 671 |   /**
 672 |    * An optional description of what this prompt provides
 673 |    */
 674 |   description?: string;
 675 |   /**
 676 |    * A list of arguments to use for templating the prompt.
 677 |    */
 678 |   arguments?: PromptArgument[];
 679 | 
 680 |   /**
 681 |    * See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.
 682 |    */
 683 |   _meta?: { [key: string]: unknown };
 684 | }
 685 | 
 686 | /**
 687 |  * Describes an argument that a prompt can accept.
 688 |  */
 689 | export interface PromptArgument extends BaseMetadata {
 690 |   /**
 691 |    * A human-readable description of the argument.
 692 |    */
 693 |   description?: string;
 694 |   /**
 695 |    * Whether this argument must be provided.
 696 |    */
 697 |   required?: boolean;
 698 | }
 699 | 
 700 | /**
 701 |  * The sender or recipient of messages and data in a conversation.
 702 |  */
 703 | export type Role = "user" | "assistant";
 704 | 
 705 | /**
 706 |  * Describes a message returned as part of a prompt.
 707 |  *
 708 |  * This is similar to `SamplingMessage`, but also supports the embedding of
 709 |  * resources from the MCP server.
 710 |  */
 711 | export interface PromptMessage {
 712 |   role: Role;
 713 |   content: ContentBlock;
 714 | }
 715 | 
 716 | /**
 717 |  * A resource that the server is capable of reading, included in a prompt or tool call result.
 718 |  *
 719 |  * Note: resource links returned by tools are not guaranteed to appear in the results of `resources/list` requests.
 720 |  */
 721 | export interface ResourceLink extends Resource {
 722 |   type: "resource_link";
 723 | }
 724 | 
 725 | /**
 726 |  * The contents of a resource, embedded into a prompt or tool call result.
 727 |  *
 728 |  * It is up to the client how best to render embedded resources for the benefit
 729 |  * of the LLM and/or the user.
 730 |  */
 731 | export interface EmbeddedResource {
 732 |   type: "resource";
 733 |   resource: TextResourceContents | BlobResourceContents;
 734 | 
 735 |   /**
 736 |    * Optional annotations for the client.
 737 |    */
 738 |   annotations?: Annotations;
 739 | 
 740 |   /**
 741 |    * See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.
 742 |    */
 743 |   _meta?: { [key: string]: unknown };
 744 | }
 745 | /**
 746 |  * An optional notification from the server to the client, informing it that the list of prompts it offers has changed. This may be issued by servers without any previous subscription from the client.
 747 |  *
 748 |  * @category notifications/prompts/list_changed
 749 |  */
 750 | export interface PromptListChangedNotification extends Notification {
 751 |   method: "notifications/prompts/list_changed";
 752 | }
 753 | 
 754 | /* Tools */
 755 | /**
 756 |  * Sent from the client to request a list of tools the server has.
 757 |  *
 758 |  * @category tools/list
 759 |  */
 760 | export interface ListToolsRequest extends PaginatedRequest {
 761 |   method: "tools/list";
 762 | }
 763 | 
 764 | /**
 765 |  * The server's response to a tools/list request from the client.
 766 |  *
 767 |  * @category tools/list
 768 |  */
 769 | export interface ListToolsResult extends PaginatedResult {
 770 |   tools: Tool[];
 771 | }
 772 | 
 773 | /**
 774 |  * The server's response to a tool call.
 775 |  *
 776 |  * @category tools/call
 777 |  */
 778 | export interface CallToolResult extends Result {
 779 |   /**
 780 |    * A list of content objects that represent the unstructured result of the tool call.
 781 |    */
 782 |   content: ContentBlock[];
 783 | 
 784 |   /**
 785 |    * An optional JSON object that represents the structured result of the tool call.
 786 |    */
 787 |   structuredContent?: { [key: string]: unknown };
 788 | 
 789 |   /**
 790 |    * Whether the tool call ended in an error.
 791 |    *
 792 |    * If not set, this is assumed to be false (the call was successful).
 793 |    *
 794 |    * Any errors that originate from the tool SHOULD be reported inside the result
 795 |    * object, with `isError` set to true, _not_ as an MCP protocol-level error
 796 |    * response. Otherwise, the LLM would not be able to see that an error occurred
 797 |    * and self-correct.
 798 |    *
 799 |    * However, any errors in _finding_ the tool, an error indicating that the
 800 |    * server does not support tool calls, or any other exceptional conditions,
 801 |    * should be reported as an MCP error response.
 802 |    */
 803 |   isError?: boolean;
 804 | }
 805 | 
 806 | /**
 807 |  * Used by the client to invoke a tool provided by the server.
 808 |  *
 809 |  * @category tools/call
 810 |  */
 811 | export interface CallToolRequest extends Request {
 812 |   method: "tools/call";
 813 |   params: {
 814 |     name: string;
 815 |     arguments?: { [key: string]: unknown };
 816 |   };
 817 | }
 818 | 
 819 | /**
 820 |  * An optional notification from the server to the client, informing it that the list of tools it offers has changed. This may be issued by servers without any previous subscription from the client.
 821 |  *
 822 |  * @category notifications/tools/list_changed
 823 |  */
 824 | export interface ToolListChangedNotification extends Notification {
 825 |   method: "notifications/tools/list_changed";
 826 | }
 827 | 
 828 | /**
 829 |  * Additional properties describing a Tool to clients.
 830 |  *
 831 |  * NOTE: all properties in ToolAnnotations are **hints**.
 832 |  * They are not guaranteed to provide a faithful description of
 833 |  * tool behavior (including descriptive properties like `title`).
 834 |  *
 835 |  * Clients should never make tool use decisions based on ToolAnnotations
 836 |  * received from untrusted servers.
 837 |  */
 838 | export interface ToolAnnotations {
 839 |   /**
 840 |    * A human-readable title for the tool.
 841 |    */
 842 |   title?: string;
 843 | 
 844 |   /**
 845 |    * If true, the tool does not modify its environment.
 846 |    *
 847 |    * Default: false
 848 |    */
 849 |   readOnlyHint?: boolean;
 850 | 
 851 |   /**
 852 |    * If true, the tool may perform destructive updates to its environment.
 853 |    * If false, the tool performs only additive updates.
 854 |    *
 855 |    * (This property is meaningful only when `readOnlyHint == false`)
 856 |    *
 857 |    * Default: true
 858 |    */
 859 |   destructiveHint?: boolean;
 860 | 
 861 |   /**
 862 |    * If true, calling the tool repeatedly with the same arguments
 863 |    * will have no additional effect on the its environment.
 864 |    *
 865 |    * (This property is meaningful only when `readOnlyHint == false`)
 866 |    *
 867 |    * Default: false
 868 |    */
 869 |   idempotentHint?: boolean;
 870 | 
 871 |   /**
 872 |    * If true, this tool may interact with an "open world" of external
 873 |    * entities. If false, the tool's domain of interaction is closed.
 874 |    * For example, the world of a web search tool is open, whereas that
 875 |    * of a memory tool is not.
 876 |    *
 877 |    * Default: true
 878 |    */
 879 |   openWorldHint?: boolean;
 880 | }
 881 | 
 882 | /**
 883 |  * Definition for a tool the client can call.
 884 |  */
 885 | export interface Tool extends BaseMetadata {
 886 |   /**
 887 |    * A human-readable description of the tool.
 888 |    *
 889 |    * This can be used by clients to improve the LLM's understanding of available tools. It can be thought of like a "hint" to the model.
 890 |    */
 891 |   description?: string;
 892 | 
 893 |   /**
 894 |    * A JSON Schema object defining the expected parameters for the tool.
 895 |    */
 896 |   inputSchema: {
 897 |     type: "object";
 898 |     properties?: { [key: string]: object };
 899 |     required?: string[];
 900 |   };
 901 | 
 902 |   /**
 903 |    * An optional JSON Schema object defining the structure of the tool's output returned in
 904 |    * the structuredContent field of a CallToolResult.
 905 |    */
 906 |   outputSchema?: {
 907 |     type: "object";
 908 |     properties?: { [key: string]: object };
 909 |     required?: string[];
 910 |   };
 911 | 
 912 |   /**
 913 |    * Optional additional tool information.
 914 |    *
 915 |    * Display name precedence order is: title, annotations.title, then name.
 916 |    */
 917 |   annotations?: ToolAnnotations;
 918 | 
 919 |   /**
 920 |    * See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.
 921 |    */
 922 |   _meta?: { [key: string]: unknown };
 923 | }
 924 | 
 925 | /* Logging */
 926 | /**
 927 |  * A request from the client to the server, to enable or adjust logging.
 928 |  *
 929 |  * @category logging/setLevel
 930 |  */
 931 | export interface SetLevelRequest extends Request {
 932 |   method: "logging/setLevel";
 933 |   params: {
 934 |     /**
 935 |      * The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/message.
 936 |      */
 937 |     level: LoggingLevel;
 938 |   };
 939 | }
 940 | 
 941 | /**
 942 |  * Notification of a log message passed from server to client. If no logging/setLevel request has been sent from the client, the server MAY decide which messages to send automatically.
 943 |  *
 944 |  * @category notifications/message
 945 |  */
 946 | export interface LoggingMessageNotification extends Notification {
 947 |   method: "notifications/message";
 948 |   params: {
 949 |     /**
 950 |      * The severity of this log message.
 951 |      */
 952 |     level: LoggingLevel;
 953 |     /**
 954 |      * An optional name of the logger issuing this message.
 955 |      */
 956 |     logger?: string;
 957 |     /**
 958 |      * The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here.
 959 |      */
 960 |     data: unknown;
 961 |   };
 962 | }
 963 | 
 964 | /**
 965 |  * The severity of a log message.
 966 |  *
 967 |  * These map to syslog message severities, as specified in RFC-5424:
 968 |  * https://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1
 969 |  */
 970 | export type LoggingLevel =
 971 |   | "debug"
 972 |   | "info"
 973 |   | "notice"
 974 |   | "warning"
 975 |   | "error"
 976 |   | "critical"
 977 |   | "alert"
 978 |   | "emergency";
 979 | 
 980 | /* Sampling */
 981 | /**
 982 |  * A request from the server to sample an LLM via the client. The client has full discretion over which model to select. The client should also inform the user before beginning sampling, to allow them to inspect the request (human in the loop) and decide whether to approve it.
 983 |  *
 984 |  * @category sampling/createMessage
 985 |  */
 986 | export interface CreateMessageRequest extends Request {
 987 |   method: "sampling/createMessage";
 988 |   params: {
 989 |     messages: SamplingMessage[];
 990 |     /**
 991 |      * The server's preferences for which model to select. The client MAY ignore these preferences.
 992 |      */
 993 |     modelPreferences?: ModelPreferences;
 994 |     /**
 995 |      * An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.
 996 |      */
 997 |     systemPrompt?: string;
 998 |     /**
 999 |      * A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.
1000 |      */
1001 |     includeContext?: "none" | "thisServer" | "allServers";
1002 |     /**
1003 |      * @TJS-type number
1004 |      */
1005 |     temperature?: number;
1006 |     /**
1007 |      * The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.
1008 |      */
1009 |     maxTokens: number;
1010 |     stopSequences?: string[];
1011 |     /**
1012 |      * Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.
1013 |      */
1014 |     metadata?: object;
1015 |   };
1016 | }
1017 | 
1018 | /**
1019 |  * The client's response to a sampling/create_message request from the server. The client should inform the user before returning the sampled message, to allow them to inspect the response (human in the loop) and decide whether to allow the server to see it.
1020 |  *
1021 |  * @category sampling/createMessage
1022 |  */
1023 | export interface CreateMessageResult extends Result, SamplingMessage {
1024 |   /**
1025 |    * The name of the model that generated the message.
1026 |    */
1027 |   model: string;
1028 |   /**
1029 |    * The reason why sampling stopped, if known.
1030 |    */
1031 |   stopReason?: "endTurn" | "stopSequence" | "maxTokens" | string;
1032 | }
1033 | 
1034 | /**
1035 |  * Describes a message issued to or received from an LLM API.
1036 |  */
1037 | export interface SamplingMessage {
1038 |   role: Role;
1039 |   content: TextContent | ImageContent | AudioContent;
1040 | }
1041 | 
1042 | /**
1043 |  * Optional annotations for the client. The client can use annotations to inform how objects are used or displayed
1044 |  */
1045 | export interface Annotations {
1046 |   /**
1047 |    * Describes who the intended customer of this object or data is.
1048 |    *
1049 |    * It can include multiple entries to indicate content useful for multiple audiences (e.g., `["user", "assistant"]`).
1050 |    */
1051 |   audience?: Role[];
1052 | 
1053 |   /**
1054 |    * Describes how important this data is for operating the server.
1055 |    *
1056 |    * A value of 1 means "most important," and indicates that the data is
1057 |    * effectively required, while 0 means "least important," and indicates that
1058 |    * the data is entirely optional.
1059 |    *
1060 |    * @TJS-type number
1061 |    * @minimum 0
1062 |    * @maximum 1
1063 |    */
1064 |   priority?: number;
1065 | 
1066 |   /**
1067 |    * The moment the resource was last modified, as an ISO 8601 formatted string.
1068 |    *
1069 |    * Should be an ISO 8601 formatted string (e.g., "2025-01-12T15:00:58Z").
1070 |    *
1071 |    * Examples: last activity timestamp in an open file, timestamp when the resource
1072 |    * was attached, etc.
1073 |    */
1074 |   lastModified?: string;
1075 | }
1076 | 
1077 | export type ContentBlock =
1078 |   | TextContent
1079 |   | ImageContent
1080 |   | AudioContent
1081 |   | ResourceLink
1082 |   | EmbeddedResource;
1083 | 
1084 | /**
1085 |  * Text provided to or from an LLM.
1086 |  */
1087 | export interface TextContent {
1088 |   type: "text";
1089 | 
1090 |   /**
1091 |    * The text content of the message.
1092 |    */
1093 |   text: string;
1094 | 
1095 |   /**
1096 |    * Optional annotations for the client.
1097 |    */
1098 |   annotations?: Annotations;
1099 | 
1100 |   /**
1101 |    * See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.
1102 |    */
1103 |   _meta?: { [key: string]: unknown };
1104 | }
1105 | 
1106 | /**
1107 |  * An image provided to or from an LLM.
1108 |  */
1109 | export interface ImageContent {
1110 |   type: "image";
1111 | 
1112 |   /**
1113 |    * The base64-encoded image data.
1114 |    *
1115 |    * @format byte
1116 |    */
1117 |   data: string;
1118 | 
1119 |   /**
1120 |    * The MIME type of the image. Different providers may support different image types.
1121 |    */
1122 |   mimeType: string;
1123 | 
1124 |   /**
1125 |    * Optional annotations for the client.
1126 |    */
1127 |   annotations?: Annotations;
1128 | 
1129 |   /**
1130 |    * See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.
1131 |    */
1132 |   _meta?: { [key: string]: unknown };
1133 | }
1134 | 
1135 | /**
1136 |  * Audio provided to or from an LLM.
1137 |  */
1138 | export interface AudioContent {
1139 |   type: "audio";
1140 | 
1141 |   /**
1142 |    * The base64-encoded audio data.
1143 |    *
1144 |    * @format byte
1145 |    */
1146 |   data: string;
1147 | 
1148 |   /**
1149 |    * The MIME type of the audio. Different providers may support different audio types.
1150 |    */
1151 |   mimeType: string;
1152 | 
1153 |   /**
1154 |    * Optional annotations for the client.
1155 |    */
1156 |   annotations?: Annotations;
1157 | 
1158 |   /**
1159 |    * See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.
1160 |    */
1161 |   _meta?: { [key: string]: unknown };
1162 | }
1163 | 
1164 | /**
1165 |  * The server's preferences for model selection, requested of the client during sampling.
1166 |  *
1167 |  * Because LLMs can vary along multiple dimensions, choosing the "best" model is
1168 |  * rarely straightforward.  Different models excel in different areas—some are
1169 |  * faster but less capable, others are more capable but more expensive, and so
1170 |  * on. This interface allows servers to express their priorities across multiple
1171 |  * dimensions to help clients make an appropriate selection for their use case.
1172 |  *
1173 |  * These preferences are always advisory. The client MAY ignore them. It is also
1174 |  * up to the client to decide how to interpret these preferences and how to
1175 |  * balance them against other considerations.
1176 |  */
1177 | export interface ModelPreferences {
1178 |   /**
1179 |    * Optional hints to use for model selection.
1180 |    *
1181 |    * If multiple hints are specified, the client MUST evaluate them in order
1182 |    * (such that the first match is taken).
1183 |    *
1184 |    * The client SHOULD prioritize these hints over the numeric priorities, but
1185 |    * MAY still use the priorities to select from ambiguous matches.
1186 |    */
1187 |   hints?: ModelHint[];
1188 | 
1189 |   /**
1190 |    * How much to prioritize cost when selecting a model. A value of 0 means cost
1191 |    * is not important, while a value of 1 means cost is the most important
1192 |    * factor.
1193 |    *
1194 |    * @TJS-type number
1195 |    * @minimum 0
1196 |    * @maximum 1
1197 |    */
1198 |   costPriority?: number;
1199 | 
1200 |   /**
1201 |    * How much to prioritize sampling speed (latency) when selecting a model. A
1202 |    * value of 0 means speed is not important, while a value of 1 means speed is
1203 |    * the most important factor.
1204 |    *
1205 |    * @TJS-type number
1206 |    * @minimum 0
1207 |    * @maximum 1
1208 |    */
1209 |   speedPriority?: number;
1210 | 
1211 |   /**
1212 |    * How much to prioritize intelligence and capabilities when selecting a
1213 |    * model. A value of 0 means intelligence is not important, while a value of 1
1214 |    * means intelligence is the most important factor.
1215 |    *
1216 |    * @TJS-type number
1217 |    * @minimum 0
1218 |    * @maximum 1
1219 |    */
1220 |   intelligencePriority?: number;
1221 | }
1222 | 
1223 | /**
1224 |  * Hints to use for model selection.
1225 |  *
1226 |  * Keys not declared here are currently left unspecified by the spec and are up
1227 |  * to the client to interpret.
1228 |  */
1229 | export interface ModelHint {
1230 |   /**
1231 |    * A hint for a model name.
1232 |    *
1233 |    * The client SHOULD treat this as a substring of a model name; for example:
1234 |    *  - `claude-3-5-sonnet` should match `claude-3-5-sonnet-20241022`
1235 |    *  - `sonnet` should match `claude-3-5-sonnet-20241022`, `claude-3-sonnet-20240229`, etc.
1236 |    *  - `claude` should match any Claude model
1237 |    *
1238 |    * The client MAY also map the string to a different provider's model name or a different model family, as long as it fills a similar niche; for example:
1239 |    *  - `gemini-1.5-flash` could match `claude-3-haiku-20240307`
1240 |    */
1241 |   name?: string;
1242 | }
1243 | 
1244 | /* Autocomplete */
1245 | /**
1246 |  * A request from the client to the server, to ask for completion options.
1247 |  *
1248 |  * @category completion/complete
1249 |  */
1250 | export interface CompleteRequest extends Request {
1251 |   method: "completion/complete";
1252 |   params: {
1253 |     ref: PromptReference | ResourceTemplateReference;
1254 |     /**
1255 |      * The argument's information
1256 |      */
1257 |     argument: {
1258 |       /**
1259 |        * The name of the argument
1260 |        */
1261 |       name: string;
1262 |       /**
1263 |        * The value of the argument to use for completion matching.
1264 |        */
1265 |       value: string;
1266 |     };
1267 | 
1268 |     /**
1269 |      * Additional, optional context for completions
1270 |      */
1271 |     context?: {
1272 |       /**
1273 |        * Previously-resolved variables in a URI template or prompt.
1274 |        */
1275 |       arguments?: { [key: string]: string };
1276 |     };
1277 |   };
1278 | }
1279 | 
1280 | /**
1281 |  * The server's response to a completion/complete request
1282 |  *
1283 |  * @category completion/complete
1284 |  */
1285 | export interface CompleteResult extends Result {
1286 |   completion: {
1287 |     /**
1288 |      * An array of completion values. Must not exceed 100 items.
1289 |      */
1290 |     values: string[];
1291 |     /**
1292 |      * The total number of completion options available. This can exceed the number of values actually sent in the response.
1293 |      */
1294 |     total?: number;
1295 |     /**
1296 |      * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.
1297 |      */
1298 |     hasMore?: boolean;
1299 |   };
1300 | }
1301 | 
1302 | /**
1303 |  * A reference to a resource or resource template definition.
1304 |  */
1305 | export interface ResourceTemplateReference {
1306 |   type: "ref/resource";
1307 |   /**
1308 |    * The URI or URI template of the resource.
1309 |    *
1310 |    * @format uri-template
1311 |    */
1312 |   uri: string;
1313 | }
1314 | 
1315 | /**
1316 |  * Identifies a prompt.
1317 |  */
1318 | export interface PromptReference extends BaseMetadata {
1319 |   type: "ref/prompt";
1320 | }
1321 | 
1322 | /* Roots */
1323 | /**
1324 |  * Sent from the server to request a list of root URIs from the client. Roots allow
1325 |  * servers to ask for specific directories or files to operate on. A common example
1326 |  * for roots is providing a set of repositories or directories a server should operate
1327 |  * on.
1328 |  *
1329 |  * This request is typically used when the server needs to understand the file system
1330 |  * structure or access specific locations that the client has permission to read from.
1331 |  *
1332 |  * @category roots/list
1333 |  */
1334 | export interface ListRootsRequest extends Request {
1335 |   method: "roots/list";
1336 | }
1337 | 
1338 | /**
1339 |  * The client's response to a roots/list request from the server.
1340 |  * This result contains an array of Root objects, each representing a root directory
1341 |  * or file that the server can operate on.
1342 |  *
1343 |  * @category roots/list
1344 |  */
1345 | export interface ListRootsResult extends Result {
1346 |   roots: Root[];
1347 | }
1348 | 
1349 | /**
1350 |  * Represents a root directory or file that the server can operate on.
1351 |  */
1352 | export interface Root {
1353 |   /**
1354 |    * The URI identifying the root. This *must* start with file:// for now.
1355 |    * This restriction may be relaxed in future versions of the protocol to allow
1356 |    * other URI schemes.
1357 |    *
1358 |    * @format uri
1359 |    */
1360 |   uri: string;
1361 |   /**
1362 |    * An optional name for the root. This can be used to provide a human-readable
1363 |    * identifier for the root, which may be useful for display purposes or for
1364 |    * referencing the root in other parts of the application.
1365 |    */
1366 |   name?: string;
1367 | 
1368 |   /**
1369 |    * See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta) for notes on `_meta` usage.
1370 |    */
1371 |   _meta?: { [key: string]: unknown };
1372 | }
1373 | 
1374 | /**
1375 |  * A notification from the client to the server, informing it that the list of roots has changed.
1376 |  * This notification should be sent whenever the client adds, removes, or modifies any root.
1377 |  * The server should then request an updated list of roots using the ListRootsRequest.
1378 |  *
1379 |  * @category notifications/roots/list_changed
1380 |  */
1381 | export interface RootsListChangedNotification extends Notification {
1382 |   method: "notifications/roots/list_changed";
1383 | }
1384 | 
1385 | /**
1386 |  * A request from the server to elicit additional information from the user via the client.
1387 |  *
1388 |  * @category elicitation/create
1389 |  */
1390 | export interface ElicitRequest extends Request {
1391 |   method: "elicitation/create";
1392 |   params: {
1393 |     /**
1394 |      * The message to present to the user.
1395 |      */
1396 |     message: string;
1397 |     /**
1398 |      * A restricted subset of JSON Schema.
1399 |      * Only top-level properties are allowed, without nesting.
1400 |      */
1401 |     requestedSchema: {
1402 |       type: "object";
1403 |       properties: {
1404 |         [key: string]: PrimitiveSchemaDefinition;
1405 |       };
1406 |       required?: string[];
1407 |     };
1408 |   };
1409 | }
1410 | 
1411 | /**
1412 |  * Restricted schema definitions that only allow primitive types
1413 |  * without nested objects or arrays.
1414 |  */
1415 | export type PrimitiveSchemaDefinition =
1416 |   | StringSchema
1417 |   | NumberSchema
1418 |   | BooleanSchema
1419 |   | EnumSchema;
1420 | 
1421 | export interface StringSchema {
1422 |   type: "string";
1423 |   title?: string;
1424 |   description?: string;
1425 |   minLength?: number;
1426 |   maxLength?: number;
1427 |   format?: "email" | "uri" | "date" | "date-time";
1428 | }
1429 | 
1430 | export interface NumberSchema {
1431 |   type: "number" | "integer";
1432 |   title?: string;
1433 |   description?: string;
1434 |   minimum?: number;
1435 |   maximum?: number;
1436 | }
1437 | 
1438 | export interface BooleanSchema {
1439 |   type: "boolean";
1440 |   title?: string;
1441 |   description?: string;
1442 |   default?: boolean;
1443 | }
1444 | 
1445 | export interface EnumSchema {
1446 |   type: "string";
1447 |   title?: string;
1448 |   description?: string;
1449 |   enum: string[];
1450 |   enumNames?: string[]; // Display names for enum values
1451 | }
1452 | 
1453 | /**
1454 |  * The client's response to an elicitation request.
1455 |  *
1456 |  * @category elicitation/create
1457 |  */
1458 | export interface ElicitResult extends Result {
1459 |   /**
1460 |    * The user action in response to the elicitation.
1461 |    * - "accept": User submitted the form/confirmed the action
1462 |    * - "decline": User explicitly declined the action
1463 |    * - "cancel": User dismissed without making an explicit choice
1464 |    */
1465 |   action: "accept" | "decline" | "cancel";
1466 | 
1467 |   /**
1468 |    * The submitted form data, only present when action is "accept".
1469 |    * Contains values matching the requested schema.
1470 |    */
1471 |   content?: { [key: string]: string | number | boolean };
1472 | }
1473 | 
1474 | /* Client messages */
1475 | /** @internal */
1476 | export type ClientRequest =
1477 |   | PingRequest
1478 |   | InitializeRequest
1479 |   | CompleteRequest
1480 |   | SetLevelRequest
1481 |   | GetPromptRequest
1482 |   | ListPromptsRequest
1483 |   | ListResourcesRequest
1484 |   | ListResourceTemplatesRequest
1485 |   | ReadResourceRequest
1486 |   | SubscribeRequest
1487 |   | UnsubscribeRequest
1488 |   | CallToolRequest
1489 |   | ListToolsRequest;
1490 | 
1491 | /** @internal */
1492 | export type ClientNotification =
1493 |   | CancelledNotification
1494 |   | ProgressNotification
1495 |   | InitializedNotification
1496 |   | RootsListChangedNotification;
1497 | 
1498 | /** @internal */
1499 | export type ClientResult =
1500 |   | EmptyResult
1501 |   | CreateMessageResult
1502 |   | ListRootsResult
1503 |   | ElicitResult;
1504 | 
1505 | /* Server messages */
1506 | /** @internal */
1507 | export type ServerRequest =
1508 |   | PingRequest
1509 |   | CreateMessageRequest
1510 |   | ListRootsRequest
1511 |   | ElicitRequest;
1512 | 
1513 | /** @internal */
1514 | export type ServerNotification =
1515 |   | CancelledNotification
1516 |   | ProgressNotification
1517 |   | LoggingMessageNotification
1518 |   | ResourceUpdatedNotification
1519 |   | ResourceListChangedNotification
1520 |   | ToolListChangedNotification
1521 |   | PromptListChangedNotification;
1522 | 
1523 | /** @internal */
1524 | export type ServerResult =
1525 |   | EmptyResult
1526 |   | InitializeResult
1527 |   | CompleteResult
1528 |   | GetPromptResult
1529 |   | ListPromptsResult
1530 |   | ListResourceTemplatesResult
1531 |   | ListResourcesResult
1532 |   | ReadResourceResult
1533 |   | CallToolResult
1534 |   | ListToolsResult;
1535 | 


--------------------------------------------------------------------------------
/schema/draft/schema.json:
--------------------------------------------------------------------------------
   1 | {
   2 |     "$schema": "http://json-schema.org/draft-07/schema#",
   3 |     "definitions": {
   4 |         "Annotations": {
   5 |             "description": "Optional annotations for the client. The client can use annotations to inform how objects are used or displayed",
   6 |             "properties": {
   7 |                 "audience": {
   8 |                     "description": "Describes who the intended customer of this object or data is.\n\nIt can include multiple entries to indicate content useful for multiple audiences (e.g., `[\"user\", \"assistant\"]`).",
   9 |                     "items": {
  10 |                         "$ref": "#/definitions/Role"
  11 |                     },
  12 |                     "type": "array"
  13 |                 },
  14 |                 "lastModified": {
  15 |                     "description": "The moment the resource was last modified, as an ISO 8601 formatted string.\n\nShould be an ISO 8601 formatted string (e.g., \"2025-01-12T15:00:58Z\").\n\nExamples: last activity timestamp in an open file, timestamp when the resource\nwas attached, etc.",
  16 |                     "type": "string"
  17 |                 },
  18 |                 "priority": {
  19 |                     "description": "Describes how important this data is for operating the server.\n\nA value of 1 means \"most important,\" and indicates that the data is\neffectively required, while 0 means \"least important,\" and indicates that\nthe data is entirely optional.",
  20 |                     "maximum": 1,
  21 |                     "minimum": 0,
  22 |                     "type": "number"
  23 |                 }
  24 |             },
  25 |             "type": "object"
  26 |         },
  27 |         "AudioContent": {
  28 |             "description": "Audio provided to or from an LLM.",
  29 |             "properties": {
  30 |                 "_meta": {
  31 |                     "additionalProperties": {},
  32 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
  33 |                     "type": "object"
  34 |                 },
  35 |                 "annotations": {
  36 |                     "$ref": "#/definitions/Annotations",
  37 |                     "description": "Optional annotations for the client."
  38 |                 },
  39 |                 "data": {
  40 |                     "description": "The base64-encoded audio data.",
  41 |                     "format": "byte",
  42 |                     "type": "string"
  43 |                 },
  44 |                 "mimeType": {
  45 |                     "description": "The MIME type of the audio. Different providers may support different audio types.",
  46 |                     "type": "string"
  47 |                 },
  48 |                 "type": {
  49 |                     "const": "audio",
  50 |                     "type": "string"
  51 |                 }
  52 |             },
  53 |             "required": [
  54 |                 "data",
  55 |                 "mimeType",
  56 |                 "type"
  57 |             ],
  58 |             "type": "object"
  59 |         },
  60 |         "BaseMetadata": {
  61 |             "description": "Base interface for metadata with name (identifier) and title (display name) properties.",
  62 |             "properties": {
  63 |                 "name": {
  64 |                     "description": "Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).",
  65 |                     "type": "string"
  66 |                 },
  67 |                 "title": {
  68 |                     "description": "Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\neven by those unfamiliar with domain-specific terminology.\n\nIf not provided, the name should be used for display (except for Tool,\nwhere `annotations.title` should be given precedence over using `name`,\nif present).",
  69 |                     "type": "string"
  70 |                 }
  71 |             },
  72 |             "required": [
  73 |                 "name"
  74 |             ],
  75 |             "type": "object"
  76 |         },
  77 |         "BlobResourceContents": {
  78 |             "properties": {
  79 |                 "_meta": {
  80 |                     "additionalProperties": {},
  81 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
  82 |                     "type": "object"
  83 |                 },
  84 |                 "blob": {
  85 |                     "description": "A base64-encoded string representing the binary data of the item.",
  86 |                     "format": "byte",
  87 |                     "type": "string"
  88 |                 },
  89 |                 "mimeType": {
  90 |                     "description": "The MIME type of this resource, if known.",
  91 |                     "type": "string"
  92 |                 },
  93 |                 "uri": {
  94 |                     "description": "The URI of this resource.",
  95 |                     "format": "uri",
  96 |                     "type": "string"
  97 |                 }
  98 |             },
  99 |             "required": [
 100 |                 "blob",
 101 |                 "uri"
 102 |             ],
 103 |             "type": "object"
 104 |         },
 105 |         "BooleanSchema": {
 106 |             "properties": {
 107 |                 "default": {
 108 |                     "type": "boolean"
 109 |                 },
 110 |                 "description": {
 111 |                     "type": "string"
 112 |                 },
 113 |                 "title": {
 114 |                     "type": "string"
 115 |                 },
 116 |                 "type": {
 117 |                     "const": "boolean",
 118 |                     "type": "string"
 119 |                 }
 120 |             },
 121 |             "required": [
 122 |                 "type"
 123 |             ],
 124 |             "type": "object"
 125 |         },
 126 |         "CallToolRequest": {
 127 |             "description": "Used by the client to invoke a tool provided by the server.",
 128 |             "properties": {
 129 |                 "method": {
 130 |                     "const": "tools/call",
 131 |                     "type": "string"
 132 |                 },
 133 |                 "params": {
 134 |                     "properties": {
 135 |                         "arguments": {
 136 |                             "additionalProperties": {},
 137 |                             "type": "object"
 138 |                         },
 139 |                         "name": {
 140 |                             "type": "string"
 141 |                         }
 142 |                     },
 143 |                     "required": [
 144 |                         "name"
 145 |                     ],
 146 |                     "type": "object"
 147 |                 }
 148 |             },
 149 |             "required": [
 150 |                 "method",
 151 |                 "params"
 152 |             ],
 153 |             "type": "object"
 154 |         },
 155 |         "CallToolResult": {
 156 |             "description": "The server's response to a tool call.",
 157 |             "properties": {
 158 |                 "_meta": {
 159 |                     "additionalProperties": {},
 160 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
 161 |                     "type": "object"
 162 |                 },
 163 |                 "content": {
 164 |                     "description": "A list of content objects that represent the unstructured result of the tool call.",
 165 |                     "items": {
 166 |                         "$ref": "#/definitions/ContentBlock"
 167 |                     },
 168 |                     "type": "array"
 169 |                 },
 170 |                 "isError": {
 171 |                     "description": "Whether the tool call ended in an error.\n\nIf not set, this is assumed to be false (the call was successful).\n\nAny errors that originate from the tool SHOULD be reported inside the result\nobject, with `isError` set to true, _not_ as an MCP protocol-level error\nresponse. Otherwise, the LLM would not be able to see that an error occurred\nand self-correct.\n\nHowever, any errors in _finding_ the tool, an error indicating that the\nserver does not support tool calls, or any other exceptional conditions,\nshould be reported as an MCP error response.",
 172 |                     "type": "boolean"
 173 |                 },
 174 |                 "structuredContent": {
 175 |                     "additionalProperties": {},
 176 |                     "description": "An optional JSON object that represents the structured result of the tool call.",
 177 |                     "type": "object"
 178 |                 }
 179 |             },
 180 |             "required": [
 181 |                 "content"
 182 |             ],
 183 |             "type": "object"
 184 |         },
 185 |         "CancelledNotification": {
 186 |             "description": "This notification can be sent by either side to indicate that it is cancelling a previously-issued request.\n\nThe request SHOULD still be in-flight, but due to communication latency, it is always possible that this notification MAY arrive after the request has already finished.\n\nThis notification indicates that the result will be unused, so any associated processing SHOULD cease.\n\nA client MUST NOT attempt to cancel its `initialize` request.",
 187 |             "properties": {
 188 |                 "method": {
 189 |                     "const": "notifications/cancelled",
 190 |                     "type": "string"
 191 |                 },
 192 |                 "params": {
 193 |                     "properties": {
 194 |                         "reason": {
 195 |                             "description": "An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.",
 196 |                             "type": "string"
 197 |                         },
 198 |                         "requestId": {
 199 |                             "$ref": "#/definitions/RequestId",
 200 |                             "description": "The ID of the request to cancel.\n\nThis MUST correspond to the ID of a request previously issued in the same direction."
 201 |                         }
 202 |                     },
 203 |                     "required": [
 204 |                         "requestId"
 205 |                     ],
 206 |                     "type": "object"
 207 |                 }
 208 |             },
 209 |             "required": [
 210 |                 "method",
 211 |                 "params"
 212 |             ],
 213 |             "type": "object"
 214 |         },
 215 |         "ClientCapabilities": {
 216 |             "description": "Capabilities a client may support. Known capabilities are defined here, in this schema, but this is not a closed set: any client can define its own, additional capabilities.",
 217 |             "properties": {
 218 |                 "elicitation": {
 219 |                     "additionalProperties": true,
 220 |                     "description": "Present if the client supports elicitation from the server.",
 221 |                     "properties": {},
 222 |                     "type": "object"
 223 |                 },
 224 |                 "experimental": {
 225 |                     "additionalProperties": {
 226 |                         "additionalProperties": true,
 227 |                         "properties": {},
 228 |                         "type": "object"
 229 |                     },
 230 |                     "description": "Experimental, non-standard capabilities that the client supports.",
 231 |                     "type": "object"
 232 |                 },
 233 |                 "roots": {
 234 |                     "description": "Present if the client supports listing roots.",
 235 |                     "properties": {
 236 |                         "listChanged": {
 237 |                             "description": "Whether the client supports notifications for changes to the roots list.",
 238 |                             "type": "boolean"
 239 |                         }
 240 |                     },
 241 |                     "type": "object"
 242 |                 },
 243 |                 "sampling": {
 244 |                     "additionalProperties": true,
 245 |                     "description": "Present if the client supports sampling from an LLM.",
 246 |                     "properties": {},
 247 |                     "type": "object"
 248 |                 }
 249 |             },
 250 |             "type": "object"
 251 |         },
 252 |         "ClientNotification": {
 253 |             "anyOf": [
 254 |                 {
 255 |                     "$ref": "#/definitions/CancelledNotification"
 256 |                 },
 257 |                 {
 258 |                     "$ref": "#/definitions/InitializedNotification"
 259 |                 },
 260 |                 {
 261 |                     "$ref": "#/definitions/ProgressNotification"
 262 |                 },
 263 |                 {
 264 |                     "$ref": "#/definitions/RootsListChangedNotification"
 265 |                 }
 266 |             ]
 267 |         },
 268 |         "ClientRequest": {
 269 |             "anyOf": [
 270 |                 {
 271 |                     "$ref": "#/definitions/InitializeRequest"
 272 |                 },
 273 |                 {
 274 |                     "$ref": "#/definitions/PingRequest"
 275 |                 },
 276 |                 {
 277 |                     "$ref": "#/definitions/ListResourcesRequest"
 278 |                 },
 279 |                 {
 280 |                     "$ref": "#/definitions/ListResourceTemplatesRequest"
 281 |                 },
 282 |                 {
 283 |                     "$ref": "#/definitions/ReadResourceRequest"
 284 |                 },
 285 |                 {
 286 |                     "$ref": "#/definitions/SubscribeRequest"
 287 |                 },
 288 |                 {
 289 |                     "$ref": "#/definitions/UnsubscribeRequest"
 290 |                 },
 291 |                 {
 292 |                     "$ref": "#/definitions/ListPromptsRequest"
 293 |                 },
 294 |                 {
 295 |                     "$ref": "#/definitions/GetPromptRequest"
 296 |                 },
 297 |                 {
 298 |                     "$ref": "#/definitions/ListToolsRequest"
 299 |                 },
 300 |                 {
 301 |                     "$ref": "#/definitions/CallToolRequest"
 302 |                 },
 303 |                 {
 304 |                     "$ref": "#/definitions/SetLevelRequest"
 305 |                 },
 306 |                 {
 307 |                     "$ref": "#/definitions/CompleteRequest"
 308 |                 }
 309 |             ]
 310 |         },
 311 |         "ClientResult": {
 312 |             "anyOf": [
 313 |                 {
 314 |                     "$ref": "#/definitions/Result"
 315 |                 },
 316 |                 {
 317 |                     "$ref": "#/definitions/CreateMessageResult"
 318 |                 },
 319 |                 {
 320 |                     "$ref": "#/definitions/ListRootsResult"
 321 |                 },
 322 |                 {
 323 |                     "$ref": "#/definitions/ElicitResult"
 324 |                 }
 325 |             ]
 326 |         },
 327 |         "CompleteRequest": {
 328 |             "description": "A request from the client to the server, to ask for completion options.",
 329 |             "properties": {
 330 |                 "method": {
 331 |                     "const": "completion/complete",
 332 |                     "type": "string"
 333 |                 },
 334 |                 "params": {
 335 |                     "properties": {
 336 |                         "argument": {
 337 |                             "description": "The argument's information",
 338 |                             "properties": {
 339 |                                 "name": {
 340 |                                     "description": "The name of the argument",
 341 |                                     "type": "string"
 342 |                                 },
 343 |                                 "value": {
 344 |                                     "description": "The value of the argument to use for completion matching.",
 345 |                                     "type": "string"
 346 |                                 }
 347 |                             },
 348 |                             "required": [
 349 |                                 "name",
 350 |                                 "value"
 351 |                             ],
 352 |                             "type": "object"
 353 |                         },
 354 |                         "context": {
 355 |                             "description": "Additional, optional context for completions",
 356 |                             "properties": {
 357 |                                 "arguments": {
 358 |                                     "additionalProperties": {
 359 |                                         "type": "string"
 360 |                                     },
 361 |                                     "description": "Previously-resolved variables in a URI template or prompt.",
 362 |                                     "type": "object"
 363 |                                 }
 364 |                             },
 365 |                             "type": "object"
 366 |                         },
 367 |                         "ref": {
 368 |                             "anyOf": [
 369 |                                 {
 370 |                                     "$ref": "#/definitions/PromptReference"
 371 |                                 },
 372 |                                 {
 373 |                                     "$ref": "#/definitions/ResourceTemplateReference"
 374 |                                 }
 375 |                             ]
 376 |                         }
 377 |                     },
 378 |                     "required": [
 379 |                         "argument",
 380 |                         "ref"
 381 |                     ],
 382 |                     "type": "object"
 383 |                 }
 384 |             },
 385 |             "required": [
 386 |                 "method",
 387 |                 "params"
 388 |             ],
 389 |             "type": "object"
 390 |         },
 391 |         "CompleteResult": {
 392 |             "description": "The server's response to a completion/complete request",
 393 |             "properties": {
 394 |                 "_meta": {
 395 |                     "additionalProperties": {},
 396 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
 397 |                     "type": "object"
 398 |                 },
 399 |                 "completion": {
 400 |                     "properties": {
 401 |                         "hasMore": {
 402 |                             "description": "Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.",
 403 |                             "type": "boolean"
 404 |                         },
 405 |                         "total": {
 406 |                             "description": "The total number of completion options available. This can exceed the number of values actually sent in the response.",
 407 |                             "type": "integer"
 408 |                         },
 409 |                         "values": {
 410 |                             "description": "An array of completion values. Must not exceed 100 items.",
 411 |                             "items": {
 412 |                                 "type": "string"
 413 |                             },
 414 |                             "type": "array"
 415 |                         }
 416 |                     },
 417 |                     "required": [
 418 |                         "values"
 419 |                     ],
 420 |                     "type": "object"
 421 |                 }
 422 |             },
 423 |             "required": [
 424 |                 "completion"
 425 |             ],
 426 |             "type": "object"
 427 |         },
 428 |         "ContentBlock": {
 429 |             "anyOf": [
 430 |                 {
 431 |                     "$ref": "#/definitions/TextContent"
 432 |                 },
 433 |                 {
 434 |                     "$ref": "#/definitions/ImageContent"
 435 |                 },
 436 |                 {
 437 |                     "$ref": "#/definitions/AudioContent"
 438 |                 },
 439 |                 {
 440 |                     "$ref": "#/definitions/ResourceLink"
 441 |                 },
 442 |                 {
 443 |                     "$ref": "#/definitions/EmbeddedResource"
 444 |                 }
 445 |             ]
 446 |         },
 447 |         "CreateMessageRequest": {
 448 |             "description": "A request from the server to sample an LLM via the client. The client has full discretion over which model to select. The client should also inform the user before beginning sampling, to allow them to inspect the request (human in the loop) and decide whether to approve it.",
 449 |             "properties": {
 450 |                 "method": {
 451 |                     "const": "sampling/createMessage",
 452 |                     "type": "string"
 453 |                 },
 454 |                 "params": {
 455 |                     "properties": {
 456 |                         "includeContext": {
 457 |                             "description": "A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.",
 458 |                             "enum": [
 459 |                                 "allServers",
 460 |                                 "none",
 461 |                                 "thisServer"
 462 |                             ],
 463 |                             "type": "string"
 464 |                         },
 465 |                         "maxTokens": {
 466 |                             "description": "The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.",
 467 |                             "type": "integer"
 468 |                         },
 469 |                         "messages": {
 470 |                             "items": {
 471 |                                 "$ref": "#/definitions/SamplingMessage"
 472 |                             },
 473 |                             "type": "array"
 474 |                         },
 475 |                         "metadata": {
 476 |                             "additionalProperties": true,
 477 |                             "description": "Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.",
 478 |                             "properties": {},
 479 |                             "type": "object"
 480 |                         },
 481 |                         "modelPreferences": {
 482 |                             "$ref": "#/definitions/ModelPreferences",
 483 |                             "description": "The server's preferences for which model to select. The client MAY ignore these preferences."
 484 |                         },
 485 |                         "stopSequences": {
 486 |                             "items": {
 487 |                                 "type": "string"
 488 |                             },
 489 |                             "type": "array"
 490 |                         },
 491 |                         "systemPrompt": {
 492 |                             "description": "An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.",
 493 |                             "type": "string"
 494 |                         },
 495 |                         "temperature": {
 496 |                             "type": "number"
 497 |                         }
 498 |                     },
 499 |                     "required": [
 500 |                         "maxTokens",
 501 |                         "messages"
 502 |                     ],
 503 |                     "type": "object"
 504 |                 }
 505 |             },
 506 |             "required": [
 507 |                 "method",
 508 |                 "params"
 509 |             ],
 510 |             "type": "object"
 511 |         },
 512 |         "CreateMessageResult": {
 513 |             "description": "The client's response to a sampling/create_message request from the server. The client should inform the user before returning the sampled message, to allow them to inspect the response (human in the loop) and decide whether to allow the server to see it.",
 514 |             "properties": {
 515 |                 "_meta": {
 516 |                     "additionalProperties": {},
 517 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
 518 |                     "type": "object"
 519 |                 },
 520 |                 "content": {
 521 |                     "anyOf": [
 522 |                         {
 523 |                             "$ref": "#/definitions/TextContent"
 524 |                         },
 525 |                         {
 526 |                             "$ref": "#/definitions/ImageContent"
 527 |                         },
 528 |                         {
 529 |                             "$ref": "#/definitions/AudioContent"
 530 |                         }
 531 |                     ]
 532 |                 },
 533 |                 "model": {
 534 |                     "description": "The name of the model that generated the message.",
 535 |                     "type": "string"
 536 |                 },
 537 |                 "role": {
 538 |                     "$ref": "#/definitions/Role"
 539 |                 },
 540 |                 "stopReason": {
 541 |                     "description": "The reason why sampling stopped, if known.",
 542 |                     "type": "string"
 543 |                 }
 544 |             },
 545 |             "required": [
 546 |                 "content",
 547 |                 "model",
 548 |                 "role"
 549 |             ],
 550 |             "type": "object"
 551 |         },
 552 |         "Cursor": {
 553 |             "description": "An opaque token used to represent a cursor for pagination.",
 554 |             "type": "string"
 555 |         },
 556 |         "ElicitRequest": {
 557 |             "description": "A request from the server to elicit additional information from the user via the client.",
 558 |             "properties": {
 559 |                 "method": {
 560 |                     "const": "elicitation/create",
 561 |                     "type": "string"
 562 |                 },
 563 |                 "params": {
 564 |                     "properties": {
 565 |                         "message": {
 566 |                             "description": "The message to present to the user.",
 567 |                             "type": "string"
 568 |                         },
 569 |                         "requestedSchema": {
 570 |                             "description": "A restricted subset of JSON Schema.\nOnly top-level properties are allowed, without nesting.",
 571 |                             "properties": {
 572 |                                 "properties": {
 573 |                                     "additionalProperties": {
 574 |                                         "$ref": "#/definitions/PrimitiveSchemaDefinition"
 575 |                                     },
 576 |                                     "type": "object"
 577 |                                 },
 578 |                                 "required": {
 579 |                                     "items": {
 580 |                                         "type": "string"
 581 |                                     },
 582 |                                     "type": "array"
 583 |                                 },
 584 |                                 "type": {
 585 |                                     "const": "object",
 586 |                                     "type": "string"
 587 |                                 }
 588 |                             },
 589 |                             "required": [
 590 |                                 "properties",
 591 |                                 "type"
 592 |                             ],
 593 |                             "type": "object"
 594 |                         }
 595 |                     },
 596 |                     "required": [
 597 |                         "message",
 598 |                         "requestedSchema"
 599 |                     ],
 600 |                     "type": "object"
 601 |                 }
 602 |             },
 603 |             "required": [
 604 |                 "method",
 605 |                 "params"
 606 |             ],
 607 |             "type": "object"
 608 |         },
 609 |         "ElicitResult": {
 610 |             "description": "The client's response to an elicitation request.",
 611 |             "properties": {
 612 |                 "_meta": {
 613 |                     "additionalProperties": {},
 614 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
 615 |                     "type": "object"
 616 |                 },
 617 |                 "action": {
 618 |                     "description": "The user action in response to the elicitation.\n- \"accept\": User submitted the form/confirmed the action\n- \"decline\": User explicitly decline the action\n- \"cancel\": User dismissed without making an explicit choice",
 619 |                     "enum": [
 620 |                         "accept",
 621 |                         "cancel",
 622 |                         "decline"
 623 |                     ],
 624 |                     "type": "string"
 625 |                 },
 626 |                 "content": {
 627 |                     "additionalProperties": {
 628 |                         "type": [
 629 |                             "string",
 630 |                             "integer",
 631 |                             "boolean"
 632 |                         ]
 633 |                     },
 634 |                     "description": "The submitted form data, only present when action is \"accept\".\nContains values matching the requested schema.",
 635 |                     "type": "object"
 636 |                 }
 637 |             },
 638 |             "required": [
 639 |                 "action"
 640 |             ],
 641 |             "type": "object"
 642 |         },
 643 |         "EmbeddedResource": {
 644 |             "description": "The contents of a resource, embedded into a prompt or tool call result.\n\nIt is up to the client how best to render embedded resources for the benefit\nof the LLM and/or the user.",
 645 |             "properties": {
 646 |                 "_meta": {
 647 |                     "additionalProperties": {},
 648 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
 649 |                     "type": "object"
 650 |                 },
 651 |                 "annotations": {
 652 |                     "$ref": "#/definitions/Annotations",
 653 |                     "description": "Optional annotations for the client."
 654 |                 },
 655 |                 "resource": {
 656 |                     "anyOf": [
 657 |                         {
 658 |                             "$ref": "#/definitions/TextResourceContents"
 659 |                         },
 660 |                         {
 661 |                             "$ref": "#/definitions/BlobResourceContents"
 662 |                         }
 663 |                     ]
 664 |                 },
 665 |                 "type": {
 666 |                     "const": "resource",
 667 |                     "type": "string"
 668 |                 }
 669 |             },
 670 |             "required": [
 671 |                 "resource",
 672 |                 "type"
 673 |             ],
 674 |             "type": "object"
 675 |         },
 676 |         "EmptyResult": {
 677 |             "$ref": "#/definitions/Result"
 678 |         },
 679 |         "EnumSchema": {
 680 |             "properties": {
 681 |                 "description": {
 682 |                     "type": "string"
 683 |                 },
 684 |                 "enum": {
 685 |                     "items": {
 686 |                         "type": "string"
 687 |                     },
 688 |                     "type": "array"
 689 |                 },
 690 |                 "enumNames": {
 691 |                     "items": {
 692 |                         "type": "string"
 693 |                     },
 694 |                     "type": "array"
 695 |                 },
 696 |                 "title": {
 697 |                     "type": "string"
 698 |                 },
 699 |                 "type": {
 700 |                     "const": "string",
 701 |                     "type": "string"
 702 |                 }
 703 |             },
 704 |             "required": [
 705 |                 "enum",
 706 |                 "type"
 707 |             ],
 708 |             "type": "object"
 709 |         },
 710 |         "GetPromptRequest": {
 711 |             "description": "Used by the client to get a prompt provided by the server.",
 712 |             "properties": {
 713 |                 "method": {
 714 |                     "const": "prompts/get",
 715 |                     "type": "string"
 716 |                 },
 717 |                 "params": {
 718 |                     "properties": {
 719 |                         "arguments": {
 720 |                             "additionalProperties": {
 721 |                                 "type": "string"
 722 |                             },
 723 |                             "description": "Arguments to use for templating the prompt.",
 724 |                             "type": "object"
 725 |                         },
 726 |                         "name": {
 727 |                             "description": "The name of the prompt or prompt template.",
 728 |                             "type": "string"
 729 |                         }
 730 |                     },
 731 |                     "required": [
 732 |                         "name"
 733 |                     ],
 734 |                     "type": "object"
 735 |                 }
 736 |             },
 737 |             "required": [
 738 |                 "method",
 739 |                 "params"
 740 |             ],
 741 |             "type": "object"
 742 |         },
 743 |         "GetPromptResult": {
 744 |             "description": "The server's response to a prompts/get request from the client.",
 745 |             "properties": {
 746 |                 "_meta": {
 747 |                     "additionalProperties": {},
 748 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
 749 |                     "type": "object"
 750 |                 },
 751 |                 "description": {
 752 |                     "description": "An optional description for the prompt.",
 753 |                     "type": "string"
 754 |                 },
 755 |                 "messages": {
 756 |                     "items": {
 757 |                         "$ref": "#/definitions/PromptMessage"
 758 |                     },
 759 |                     "type": "array"
 760 |                 }
 761 |             },
 762 |             "required": [
 763 |                 "messages"
 764 |             ],
 765 |             "type": "object"
 766 |         },
 767 |         "ImageContent": {
 768 |             "description": "An image provided to or from an LLM.",
 769 |             "properties": {
 770 |                 "_meta": {
 771 |                     "additionalProperties": {},
 772 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
 773 |                     "type": "object"
 774 |                 },
 775 |                 "annotations": {
 776 |                     "$ref": "#/definitions/Annotations",
 777 |                     "description": "Optional annotations for the client."
 778 |                 },
 779 |                 "data": {
 780 |                     "description": "The base64-encoded image data.",
 781 |                     "format": "byte",
 782 |                     "type": "string"
 783 |                 },
 784 |                 "mimeType": {
 785 |                     "description": "The MIME type of the image. Different providers may support different image types.",
 786 |                     "type": "string"
 787 |                 },
 788 |                 "type": {
 789 |                     "const": "image",
 790 |                     "type": "string"
 791 |                 }
 792 |             },
 793 |             "required": [
 794 |                 "data",
 795 |                 "mimeType",
 796 |                 "type"
 797 |             ],
 798 |             "type": "object"
 799 |         },
 800 |         "Implementation": {
 801 |             "description": "Describes the name and version of an MCP implementation, with an optional title for UI representation.",
 802 |             "properties": {
 803 |                 "name": {
 804 |                     "description": "Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).",
 805 |                     "type": "string"
 806 |                 },
 807 |                 "title": {
 808 |                     "description": "Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\neven by those unfamiliar with domain-specific terminology.\n\nIf not provided, the name should be used for display (except for Tool,\nwhere `annotations.title` should be given precedence over using `name`,\nif present).",
 809 |                     "type": "string"
 810 |                 },
 811 |                 "version": {
 812 |                     "type": "string"
 813 |                 }
 814 |             },
 815 |             "required": [
 816 |                 "name",
 817 |                 "version"
 818 |             ],
 819 |             "type": "object"
 820 |         },
 821 |         "InitializeRequest": {
 822 |             "description": "This request is sent from the client to the server when it first connects, asking it to begin initialization.",
 823 |             "properties": {
 824 |                 "method": {
 825 |                     "const": "initialize",
 826 |                     "type": "string"
 827 |                 },
 828 |                 "params": {
 829 |                     "properties": {
 830 |                         "capabilities": {
 831 |                             "$ref": "#/definitions/ClientCapabilities"
 832 |                         },
 833 |                         "clientInfo": {
 834 |                             "$ref": "#/definitions/Implementation"
 835 |                         },
 836 |                         "protocolVersion": {
 837 |                             "description": "The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.",
 838 |                             "type": "string"
 839 |                         }
 840 |                     },
 841 |                     "required": [
 842 |                         "capabilities",
 843 |                         "clientInfo",
 844 |                         "protocolVersion"
 845 |                     ],
 846 |                     "type": "object"
 847 |                 }
 848 |             },
 849 |             "required": [
 850 |                 "method",
 851 |                 "params"
 852 |             ],
 853 |             "type": "object"
 854 |         },
 855 |         "InitializeResult": {
 856 |             "description": "After receiving an initialize request from the client, the server sends this response.",
 857 |             "properties": {
 858 |                 "_meta": {
 859 |                     "additionalProperties": {},
 860 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
 861 |                     "type": "object"
 862 |                 },
 863 |                 "capabilities": {
 864 |                     "$ref": "#/definitions/ServerCapabilities"
 865 |                 },
 866 |                 "instructions": {
 867 |                     "description": "Instructions describing how to use the server and its features.\n\nThis can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a \"hint\" to the model. For example, this information MAY be added to the system prompt.",
 868 |                     "type": "string"
 869 |                 },
 870 |                 "protocolVersion": {
 871 |                     "description": "The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.",
 872 |                     "type": "string"
 873 |                 },
 874 |                 "serverInfo": {
 875 |                     "$ref": "#/definitions/Implementation"
 876 |                 }
 877 |             },
 878 |             "required": [
 879 |                 "capabilities",
 880 |                 "protocolVersion",
 881 |                 "serverInfo"
 882 |             ],
 883 |             "type": "object"
 884 |         },
 885 |         "InitializedNotification": {
 886 |             "description": "This notification is sent from the client to the server after initialization has finished.",
 887 |             "properties": {
 888 |                 "method": {
 889 |                     "const": "notifications/initialized",
 890 |                     "type": "string"
 891 |                 },
 892 |                 "params": {
 893 |                     "additionalProperties": {},
 894 |                     "properties": {
 895 |                         "_meta": {
 896 |                             "additionalProperties": {},
 897 |                             "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
 898 |                             "type": "object"
 899 |                         }
 900 |                     },
 901 |                     "type": "object"
 902 |                 }
 903 |             },
 904 |             "required": [
 905 |                 "method"
 906 |             ],
 907 |             "type": "object"
 908 |         },
 909 |         "JSONRPCError": {
 910 |             "description": "A response to a request that indicates an error occurred.",
 911 |             "properties": {
 912 |                 "error": {
 913 |                     "properties": {
 914 |                         "code": {
 915 |                             "description": "The error type that occurred.",
 916 |                             "type": "integer"
 917 |                         },
 918 |                         "data": {
 919 |                             "description": "Additional information about the error. The value of this member is defined by the sender (e.g. detailed error information, nested errors etc.)."
 920 |                         },
 921 |                         "message": {
 922 |                             "description": "A short description of the error. The message SHOULD be limited to a concise single sentence.",
 923 |                             "type": "string"
 924 |                         }
 925 |                     },
 926 |                     "required": [
 927 |                         "code",
 928 |                         "message"
 929 |                     ],
 930 |                     "type": "object"
 931 |                 },
 932 |                 "id": {
 933 |                     "$ref": "#/definitions/RequestId"
 934 |                 },
 935 |                 "jsonrpc": {
 936 |                     "const": "2.0",
 937 |                     "type": "string"
 938 |                 }
 939 |             },
 940 |             "required": [
 941 |                 "error",
 942 |                 "id",
 943 |                 "jsonrpc"
 944 |             ],
 945 |             "type": "object"
 946 |         },
 947 |         "JSONRPCMessage": {
 948 |             "anyOf": [
 949 |                 {
 950 |                     "$ref": "#/definitions/JSONRPCRequest"
 951 |                 },
 952 |                 {
 953 |                     "$ref": "#/definitions/JSONRPCNotification"
 954 |                 },
 955 |                 {
 956 |                     "$ref": "#/definitions/JSONRPCResponse"
 957 |                 },
 958 |                 {
 959 |                     "$ref": "#/definitions/JSONRPCError"
 960 |                 }
 961 |             ],
 962 |             "description": "Refers to any valid JSON-RPC object that can be decoded off the wire, or encoded to be sent."
 963 |         },
 964 |         "JSONRPCNotification": {
 965 |             "description": "A notification which does not expect a response.",
 966 |             "properties": {
 967 |                 "jsonrpc": {
 968 |                     "const": "2.0",
 969 |                     "type": "string"
 970 |                 },
 971 |                 "method": {
 972 |                     "type": "string"
 973 |                 },
 974 |                 "params": {
 975 |                     "additionalProperties": {},
 976 |                     "properties": {
 977 |                         "_meta": {
 978 |                             "additionalProperties": {},
 979 |                             "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
 980 |                             "type": "object"
 981 |                         }
 982 |                     },
 983 |                     "type": "object"
 984 |                 }
 985 |             },
 986 |             "required": [
 987 |                 "jsonrpc",
 988 |                 "method"
 989 |             ],
 990 |             "type": "object"
 991 |         },
 992 |         "JSONRPCRequest": {
 993 |             "description": "A request that expects a response.",
 994 |             "properties": {
 995 |                 "id": {
 996 |                     "$ref": "#/definitions/RequestId"
 997 |                 },
 998 |                 "jsonrpc": {
 999 |                     "const": "2.0",
1000 |                     "type": "string"
1001 |                 },
1002 |                 "method": {
1003 |                     "type": "string"
1004 |                 },
1005 |                 "params": {
1006 |                     "additionalProperties": {},
1007 |                     "properties": {
1008 |                         "_meta": {
1009 |                             "additionalProperties": {},
1010 |                             "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
1011 |                             "properties": {
1012 |                                 "progressToken": {
1013 |                                     "$ref": "#/definitions/ProgressToken",
1014 |                                     "description": "If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications."
1015 |                                 }
1016 |                             },
1017 |                             "type": "object"
1018 |                         }
1019 |                     },
1020 |                     "type": "object"
1021 |                 }
1022 |             },
1023 |             "required": [
1024 |                 "id",
1025 |                 "jsonrpc",
1026 |                 "method"
1027 |             ],
1028 |             "type": "object"
1029 |         },
1030 |         "JSONRPCResponse": {
1031 |             "description": "A successful (non-error) response to a request.",
1032 |             "properties": {
1033 |                 "id": {
1034 |                     "$ref": "#/definitions/RequestId"
1035 |                 },
1036 |                 "jsonrpc": {
1037 |                     "const": "2.0",
1038 |                     "type": "string"
1039 |                 },
1040 |                 "result": {
1041 |                     "$ref": "#/definitions/Result"
1042 |                 }
1043 |             },
1044 |             "required": [
1045 |                 "id",
1046 |                 "jsonrpc",
1047 |                 "result"
1048 |             ],
1049 |             "type": "object"
1050 |         },
1051 |         "ListPromptsRequest": {
1052 |             "description": "Sent from the client to request a list of prompts and prompt templates the server has.",
1053 |             "properties": {
1054 |                 "method": {
1055 |                     "const": "prompts/list",
1056 |                     "type": "string"
1057 |                 },
1058 |                 "params": {
1059 |                     "properties": {
1060 |                         "cursor": {
1061 |                             "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
1062 |                             "type": "string"
1063 |                         }
1064 |                     },
1065 |                     "type": "object"
1066 |                 }
1067 |             },
1068 |             "required": [
1069 |                 "method"
1070 |             ],
1071 |             "type": "object"
1072 |         },
1073 |         "ListPromptsResult": {
1074 |             "description": "The server's response to a prompts/list request from the client.",
1075 |             "properties": {
1076 |                 "_meta": {
1077 |                     "additionalProperties": {},
1078 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
1079 |                     "type": "object"
1080 |                 },
1081 |                 "nextCursor": {
1082 |                     "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
1083 |                     "type": "string"
1084 |                 },
1085 |                 "prompts": {
1086 |                     "items": {
1087 |                         "$ref": "#/definitions/Prompt"
1088 |                     },
1089 |                     "type": "array"
1090 |                 }
1091 |             },
1092 |             "required": [
1093 |                 "prompts"
1094 |             ],
1095 |             "type": "object"
1096 |         },
1097 |         "ListResourceTemplatesRequest": {
1098 |             "description": "Sent from the client to request a list of resource templates the server has.",
1099 |             "properties": {
1100 |                 "method": {
1101 |                     "const": "resources/templates/list",
1102 |                     "type": "string"
1103 |                 },
1104 |                 "params": {
1105 |                     "properties": {
1106 |                         "cursor": {
1107 |                             "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
1108 |                             "type": "string"
1109 |                         }
1110 |                     },
1111 |                     "type": "object"
1112 |                 }
1113 |             },
1114 |             "required": [
1115 |                 "method"
1116 |             ],
1117 |             "type": "object"
1118 |         },
1119 |         "ListResourceTemplatesResult": {
1120 |             "description": "The server's response to a resources/templates/list request from the client.",
1121 |             "properties": {
1122 |                 "_meta": {
1123 |                     "additionalProperties": {},
1124 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
1125 |                     "type": "object"
1126 |                 },
1127 |                 "nextCursor": {
1128 |                     "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
1129 |                     "type": "string"
1130 |                 },
1131 |                 "resourceTemplates": {
1132 |                     "items": {
1133 |                         "$ref": "#/definitions/ResourceTemplate"
1134 |                     },
1135 |                     "type": "array"
1136 |                 }
1137 |             },
1138 |             "required": [
1139 |                 "resourceTemplates"
1140 |             ],
1141 |             "type": "object"
1142 |         },
1143 |         "ListResourcesRequest": {
1144 |             "description": "Sent from the client to request a list of resources the server has.",
1145 |             "properties": {
1146 |                 "method": {
1147 |                     "const": "resources/list",
1148 |                     "type": "string"
1149 |                 },
1150 |                 "params": {
1151 |                     "properties": {
1152 |                         "cursor": {
1153 |                             "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
1154 |                             "type": "string"
1155 |                         }
1156 |                     },
1157 |                     "type": "object"
1158 |                 }
1159 |             },
1160 |             "required": [
1161 |                 "method"
1162 |             ],
1163 |             "type": "object"
1164 |         },
1165 |         "ListResourcesResult": {
1166 |             "description": "The server's response to a resources/list request from the client.",
1167 |             "properties": {
1168 |                 "_meta": {
1169 |                     "additionalProperties": {},
1170 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
1171 |                     "type": "object"
1172 |                 },
1173 |                 "nextCursor": {
1174 |                     "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
1175 |                     "type": "string"
1176 |                 },
1177 |                 "resources": {
1178 |                     "items": {
1179 |                         "$ref": "#/definitions/Resource"
1180 |                     },
1181 |                     "type": "array"
1182 |                 }
1183 |             },
1184 |             "required": [
1185 |                 "resources"
1186 |             ],
1187 |             "type": "object"
1188 |         },
1189 |         "ListRootsRequest": {
1190 |             "description": "Sent from the server to request a list of root URIs from the client. Roots allow\nservers to ask for specific directories or files to operate on. A common example\nfor roots is providing a set of repositories or directories a server should operate\non.\n\nThis request is typically used when the server needs to understand the file system\nstructure or access specific locations that the client has permission to read from.",
1191 |             "properties": {
1192 |                 "method": {
1193 |                     "const": "roots/list",
1194 |                     "type": "string"
1195 |                 },
1196 |                 "params": {
1197 |                     "additionalProperties": {},
1198 |                     "properties": {
1199 |                         "_meta": {
1200 |                             "additionalProperties": {},
1201 |                             "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
1202 |                             "properties": {
1203 |                                 "progressToken": {
1204 |                                     "$ref": "#/definitions/ProgressToken",
1205 |                                     "description": "If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications."
1206 |                                 }
1207 |                             },
1208 |                             "type": "object"
1209 |                         }
1210 |                     },
1211 |                     "type": "object"
1212 |                 }
1213 |             },
1214 |             "required": [
1215 |                 "method"
1216 |             ],
1217 |             "type": "object"
1218 |         },
1219 |         "ListRootsResult": {
1220 |             "description": "The client's response to a roots/list request from the server.\nThis result contains an array of Root objects, each representing a root directory\nor file that the server can operate on.",
1221 |             "properties": {
1222 |                 "_meta": {
1223 |                     "additionalProperties": {},
1224 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
1225 |                     "type": "object"
1226 |                 },
1227 |                 "roots": {
1228 |                     "items": {
1229 |                         "$ref": "#/definitions/Root"
1230 |                     },
1231 |                     "type": "array"
1232 |                 }
1233 |             },
1234 |             "required": [
1235 |                 "roots"
1236 |             ],
1237 |             "type": "object"
1238 |         },
1239 |         "ListToolsRequest": {
1240 |             "description": "Sent from the client to request a list of tools the server has.",
1241 |             "properties": {
1242 |                 "method": {
1243 |                     "const": "tools/list",
1244 |                     "type": "string"
1245 |                 },
1246 |                 "params": {
1247 |                     "properties": {
1248 |                         "cursor": {
1249 |                             "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
1250 |                             "type": "string"
1251 |                         }
1252 |                     },
1253 |                     "type": "object"
1254 |                 }
1255 |             },
1256 |             "required": [
1257 |                 "method"
1258 |             ],
1259 |             "type": "object"
1260 |         },
1261 |         "ListToolsResult": {
1262 |             "description": "The server's response to a tools/list request from the client.",
1263 |             "properties": {
1264 |                 "_meta": {
1265 |                     "additionalProperties": {},
1266 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
1267 |                     "type": "object"
1268 |                 },
1269 |                 "nextCursor": {
1270 |                     "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
1271 |                     "type": "string"
1272 |                 },
1273 |                 "tools": {
1274 |                     "items": {
1275 |                         "$ref": "#/definitions/Tool"
1276 |                     },
1277 |                     "type": "array"
1278 |                 }
1279 |             },
1280 |             "required": [
1281 |                 "tools"
1282 |             ],
1283 |             "type": "object"
1284 |         },
1285 |         "LoggingLevel": {
1286 |             "description": "The severity of a log message.\n\nThese map to syslog message severities, as specified in RFC-5424:\nhttps://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1",
1287 |             "enum": [
1288 |                 "alert",
1289 |                 "critical",
1290 |                 "debug",
1291 |                 "emergency",
1292 |                 "error",
1293 |                 "info",
1294 |                 "notice",
1295 |                 "warning"
1296 |             ],
1297 |             "type": "string"
1298 |         },
1299 |         "LoggingMessageNotification": {
1300 |             "description": "Notification of a log message passed from server to client. If no logging/setLevel request has been sent from the client, the server MAY decide which messages to send automatically.",
1301 |             "properties": {
1302 |                 "method": {
1303 |                     "const": "notifications/message",
1304 |                     "type": "string"
1305 |                 },
1306 |                 "params": {
1307 |                     "properties": {
1308 |                         "data": {
1309 |                             "description": "The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here."
1310 |                         },
1311 |                         "level": {
1312 |                             "$ref": "#/definitions/LoggingLevel",
1313 |                             "description": "The severity of this log message."
1314 |                         },
1315 |                         "logger": {
1316 |                             "description": "An optional name of the logger issuing this message.",
1317 |                             "type": "string"
1318 |                         }
1319 |                     },
1320 |                     "required": [
1321 |                         "data",
1322 |                         "level"
1323 |                     ],
1324 |                     "type": "object"
1325 |                 }
1326 |             },
1327 |             "required": [
1328 |                 "method",
1329 |                 "params"
1330 |             ],
1331 |             "type": "object"
1332 |         },
1333 |         "ModelHint": {
1334 |             "description": "Hints to use for model selection.\n\nKeys not declared here are currently left unspecified by the spec and are up\nto the client to interpret.",
1335 |             "properties": {
1336 |                 "name": {
1337 |                     "description": "A hint for a model name.\n\nThe client SHOULD treat this as a substring of a model name; for example:\n - `claude-3-5-sonnet` should match `claude-3-5-sonnet-20241022`\n - `sonnet` should match `claude-3-5-sonnet-20241022`, `claude-3-sonnet-20240229`, etc.\n - `claude` should match any Claude model\n\nThe client MAY also map the string to a different provider's model name or a different model family, as long as it fills a similar niche; for example:\n - `gemini-1.5-flash` could match `claude-3-haiku-20240307`",
1338 |                     "type": "string"
1339 |                 }
1340 |             },
1341 |             "type": "object"
1342 |         },
1343 |         "ModelPreferences": {
1344 |             "description": "The server's preferences for model selection, requested of the client during sampling.\n\nBecause LLMs can vary along multiple dimensions, choosing the \"best\" model is\nrarely straightforward.  Different models excel in different areas—some are\nfaster but less capable, others are more capable but more expensive, and so\non. This interface allows servers to express their priorities across multiple\ndimensions to help clients make an appropriate selection for their use case.\n\nThese preferences are always advisory. The client MAY ignore them. It is also\nup to the client to decide how to interpret these preferences and how to\nbalance them against other considerations.",
1345 |             "properties": {
1346 |                 "costPriority": {
1347 |                     "description": "How much to prioritize cost when selecting a model. A value of 0 means cost\nis not important, while a value of 1 means cost is the most important\nfactor.",
1348 |                     "maximum": 1,
1349 |                     "minimum": 0,
1350 |                     "type": "number"
1351 |                 },
1352 |                 "hints": {
1353 |                     "description": "Optional hints to use for model selection.\n\nIf multiple hints are specified, the client MUST evaluate them in order\n(such that the first match is taken).\n\nThe client SHOULD prioritize these hints over the numeric priorities, but\nMAY still use the priorities to select from ambiguous matches.",
1354 |                     "items": {
1355 |                         "$ref": "#/definitions/ModelHint"
1356 |                     },
1357 |                     "type": "array"
1358 |                 },
1359 |                 "intelligencePriority": {
1360 |                     "description": "How much to prioritize intelligence and capabilities when selecting a\nmodel. A value of 0 means intelligence is not important, while a value of 1\nmeans intelligence is the most important factor.",
1361 |                     "maximum": 1,
1362 |                     "minimum": 0,
1363 |                     "type": "number"
1364 |                 },
1365 |                 "speedPriority": {
1366 |                     "description": "How much to prioritize sampling speed (latency) when selecting a model. A\nvalue of 0 means speed is not important, while a value of 1 means speed is\nthe most important factor.",
1367 |                     "maximum": 1,
1368 |                     "minimum": 0,
1369 |                     "type": "number"
1370 |                 }
1371 |             },
1372 |             "type": "object"
1373 |         },
1374 |         "Notification": {
1375 |             "properties": {
1376 |                 "method": {
1377 |                     "type": "string"
1378 |                 },
1379 |                 "params": {
1380 |                     "additionalProperties": {},
1381 |                     "properties": {
1382 |                         "_meta": {
1383 |                             "additionalProperties": {},
1384 |                             "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
1385 |                             "type": "object"
1386 |                         }
1387 |                     },
1388 |                     "type": "object"
1389 |                 }
1390 |             },
1391 |             "required": [
1392 |                 "method"
1393 |             ],
1394 |             "type": "object"
1395 |         },
1396 |         "NumberSchema": {
1397 |             "properties": {
1398 |                 "description": {
1399 |                     "type": "string"
1400 |                 },
1401 |                 "maximum": {
1402 |                     "type": "integer"
1403 |                 },
1404 |                 "minimum": {
1405 |                     "type": "integer"
1406 |                 },
1407 |                 "title": {
1408 |                     "type": "string"
1409 |                 },
1410 |                 "type": {
1411 |                     "enum": [
1412 |                         "integer",
1413 |                         "number"
1414 |                     ],
1415 |                     "type": "string"
1416 |                 }
1417 |             },
1418 |             "required": [
1419 |                 "type"
1420 |             ],
1421 |             "type": "object"
1422 |         },
1423 |         "PaginatedRequest": {
1424 |             "properties": {
1425 |                 "method": {
1426 |                     "type": "string"
1427 |                 },
1428 |                 "params": {
1429 |                     "properties": {
1430 |                         "cursor": {
1431 |                             "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
1432 |                             "type": "string"
1433 |                         }
1434 |                     },
1435 |                     "type": "object"
1436 |                 }
1437 |             },
1438 |             "required": [
1439 |                 "method"
1440 |             ],
1441 |             "type": "object"
1442 |         },
1443 |         "PaginatedResult": {
1444 |             "properties": {
1445 |                 "_meta": {
1446 |                     "additionalProperties": {},
1447 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
1448 |                     "type": "object"
1449 |                 },
1450 |                 "nextCursor": {
1451 |                     "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
1452 |                     "type": "string"
1453 |                 }
1454 |             },
1455 |             "type": "object"
1456 |         },
1457 |         "PingRequest": {
1458 |             "description": "A ping, issued by either the server or the client, to check that the other party is still alive. The receiver must promptly respond, or else may be disconnected.",
1459 |             "properties": {
1460 |                 "method": {
1461 |                     "const": "ping",
1462 |                     "type": "string"
1463 |                 },
1464 |                 "params": {
1465 |                     "additionalProperties": {},
1466 |                     "properties": {
1467 |                         "_meta": {
1468 |                             "additionalProperties": {},
1469 |                             "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
1470 |                             "properties": {
1471 |                                 "progressToken": {
1472 |                                     "$ref": "#/definitions/ProgressToken",
1473 |                                     "description": "If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications."
1474 |                                 }
1475 |                             },
1476 |                             "type": "object"
1477 |                         }
1478 |                     },
1479 |                     "type": "object"
1480 |                 }
1481 |             },
1482 |             "required": [
1483 |                 "method"
1484 |             ],
1485 |             "type": "object"
1486 |         },
1487 |         "PrimitiveSchemaDefinition": {
1488 |             "anyOf": [
1489 |                 {
1490 |                     "$ref": "#/definitions/StringSchema"
1491 |                 },
1492 |                 {
1493 |                     "$ref": "#/definitions/NumberSchema"
1494 |                 },
1495 |                 {
1496 |                     "$ref": "#/definitions/BooleanSchema"
1497 |                 },
1498 |                 {
1499 |                     "$ref": "#/definitions/EnumSchema"
1500 |                 }
1501 |             ],
1502 |             "description": "Restricted schema definitions that only allow primitive types\nwithout nested objects or arrays."
1503 |         },
1504 |         "ProgressNotification": {
1505 |             "description": "An out-of-band notification used to inform the receiver of a progress update for a long-running request.",
1506 |             "properties": {
1507 |                 "method": {
1508 |                     "const": "notifications/progress",
1509 |                     "type": "string"
1510 |                 },
1511 |                 "params": {
1512 |                     "properties": {
1513 |                         "message": {
1514 |                             "description": "An optional message describing the current progress.",
1515 |                             "type": "string"
1516 |                         },
1517 |                         "progress": {
1518 |                             "description": "The progress thus far. This should increase every time progress is made, even if the total is unknown.",
1519 |                             "type": "number"
1520 |                         },
1521 |                         "progressToken": {
1522 |                             "$ref": "#/definitions/ProgressToken",
1523 |                             "description": "The progress token which was given in the initial request, used to associate this notification with the request that is proceeding."
1524 |                         },
1525 |                         "total": {
1526 |                             "description": "Total number of items to process (or total progress required), if known.",
1527 |                             "type": "number"
1528 |                         }
1529 |                     },
1530 |                     "required": [
1531 |                         "progress",
1532 |                         "progressToken"
1533 |                     ],
1534 |                     "type": "object"
1535 |                 }
1536 |             },
1537 |             "required": [
1538 |                 "method",
1539 |                 "params"
1540 |             ],
1541 |             "type": "object"
1542 |         },
1543 |         "ProgressToken": {
1544 |             "description": "A progress token, used to associate progress notifications with the original request.",
1545 |             "type": [
1546 |                 "string",
1547 |                 "integer"
1548 |             ]
1549 |         },
1550 |         "Prompt": {
1551 |             "description": "A prompt or prompt template that the server offers.",
1552 |             "properties": {
1553 |                 "_meta": {
1554 |                     "additionalProperties": {},
1555 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
1556 |                     "type": "object"
1557 |                 },
1558 |                 "arguments": {
1559 |                     "description": "A list of arguments to use for templating the prompt.",
1560 |                     "items": {
1561 |                         "$ref": "#/definitions/PromptArgument"
1562 |                     },
1563 |                     "type": "array"
1564 |                 },
1565 |                 "description": {
1566 |                     "description": "An optional description of what this prompt provides",
1567 |                     "type": "string"
1568 |                 },
1569 |                 "name": {
1570 |                     "description": "Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).",
1571 |                     "type": "string"
1572 |                 },
1573 |                 "title": {
1574 |                     "description": "Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\neven by those unfamiliar with domain-specific terminology.\n\nIf not provided, the name should be used for display (except for Tool,\nwhere `annotations.title` should be given precedence over using `name`,\nif present).",
1575 |                     "type": "string"
1576 |                 }
1577 |             },
1578 |             "required": [
1579 |                 "name"
1580 |             ],
1581 |             "type": "object"
1582 |         },
1583 |         "PromptArgument": {
1584 |             "description": "Describes an argument that a prompt can accept.",
1585 |             "properties": {
1586 |                 "description": {
1587 |                     "description": "A human-readable description of the argument.",
1588 |                     "type": "string"
1589 |                 },
1590 |                 "name": {
1591 |                     "description": "Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).",
1592 |                     "type": "string"
1593 |                 },
1594 |                 "required": {
1595 |                     "description": "Whether this argument must be provided.",
1596 |                     "type": "boolean"
1597 |                 },
1598 |                 "title": {
1599 |                     "description": "Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\neven by those unfamiliar with domain-specific terminology.\n\nIf not provided, the name should be used for display (except for Tool,\nwhere `annotations.title` should be given precedence over using `name`,\nif present).",
1600 |                     "type": "string"
1601 |                 }
1602 |             },
1603 |             "required": [
1604 |                 "name"
1605 |             ],
1606 |             "type": "object"
1607 |         },
1608 |         "PromptListChangedNotification": {
1609 |             "description": "An optional notification from the server to the client, informing it that the list of prompts it offers has changed. This may be issued by servers without any previous subscription from the client.",
1610 |             "properties": {
1611 |                 "method": {
1612 |                     "const": "notifications/prompts/list_changed",
1613 |                     "type": "string"
1614 |                 },
1615 |                 "params": {
1616 |                     "additionalProperties": {},
1617 |                     "properties": {
1618 |                         "_meta": {
1619 |                             "additionalProperties": {},
1620 |                             "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
1621 |                             "type": "object"
1622 |                         }
1623 |                     },
1624 |                     "type": "object"
1625 |                 }
1626 |             },
1627 |             "required": [
1628 |                 "method"
1629 |             ],
1630 |             "type": "object"
1631 |         },
1632 |         "PromptMessage": {
1633 |             "description": "Describes a message returned as part of a prompt.\n\nThis is similar to `SamplingMessage`, but also supports the embedding of\nresources from the MCP server.",
1634 |             "properties": {
1635 |                 "content": {
1636 |                     "$ref": "#/definitions/ContentBlock"
1637 |                 },
1638 |                 "role": {
1639 |                     "$ref": "#/definitions/Role"
1640 |                 }
1641 |             },
1642 |             "required": [
1643 |                 "content",
1644 |                 "role"
1645 |             ],
1646 |             "type": "object"
1647 |         },
1648 |         "PromptReference": {
1649 |             "description": "Identifies a prompt.",
1650 |             "properties": {
1651 |                 "name": {
1652 |                     "description": "Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).",
1653 |                     "type": "string"
1654 |                 },
1655 |                 "title": {
1656 |                     "description": "Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\neven by those unfamiliar with domain-specific terminology.\n\nIf not provided, the name should be used for display (except for Tool,\nwhere `annotations.title` should be given precedence over using `name`,\nif present).",
1657 |                     "type": "string"
1658 |                 },
1659 |                 "type": {
1660 |                     "const": "ref/prompt",
1661 |                     "type": "string"
1662 |                 }
1663 |             },
1664 |             "required": [
1665 |                 "name",
1666 |                 "type"
1667 |             ],
1668 |             "type": "object"
1669 |         },
1670 |         "ReadResourceRequest": {
1671 |             "description": "Sent from the client to the server, to read a specific resource URI.",
1672 |             "properties": {
1673 |                 "method": {
1674 |                     "const": "resources/read",
1675 |                     "type": "string"
1676 |                 },
1677 |                 "params": {
1678 |                     "properties": {
1679 |                         "uri": {
1680 |                             "description": "The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.",
1681 |                             "format": "uri",
1682 |                             "type": "string"
1683 |                         }
1684 |                     },
1685 |                     "required": [
1686 |                         "uri"
1687 |                     ],
1688 |                     "type": "object"
1689 |                 }
1690 |             },
1691 |             "required": [
1692 |                 "method",
1693 |                 "params"
1694 |             ],
1695 |             "type": "object"
1696 |         },
1697 |         "ReadResourceResult": {
1698 |             "description": "The server's response to a resources/read request from the client.",
1699 |             "properties": {
1700 |                 "_meta": {
1701 |                     "additionalProperties": {},
1702 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
1703 |                     "type": "object"
1704 |                 },
1705 |                 "contents": {
1706 |                     "items": {
1707 |                         "anyOf": [
1708 |                             {
1709 |                                 "$ref": "#/definitions/TextResourceContents"
1710 |                             },
1711 |                             {
1712 |                                 "$ref": "#/definitions/BlobResourceContents"
1713 |                             }
1714 |                         ]
1715 |                     },
1716 |                     "type": "array"
1717 |                 }
1718 |             },
1719 |             "required": [
1720 |                 "contents"
1721 |             ],
1722 |             "type": "object"
1723 |         },
1724 |         "Request": {
1725 |             "properties": {
1726 |                 "method": {
1727 |                     "type": "string"
1728 |                 },
1729 |                 "params": {
1730 |                     "additionalProperties": {},
1731 |                     "properties": {
1732 |                         "_meta": {
1733 |                             "additionalProperties": {},
1734 |                             "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
1735 |                             "properties": {
1736 |                                 "progressToken": {
1737 |                                     "$ref": "#/definitions/ProgressToken",
1738 |                                     "description": "If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications."
1739 |                                 }
1740 |                             },
1741 |                             "type": "object"
1742 |                         }
1743 |                     },
1744 |                     "type": "object"
1745 |                 }
1746 |             },
1747 |             "required": [
1748 |                 "method"
1749 |             ],
1750 |             "type": "object"
1751 |         },
1752 |         "RequestId": {
1753 |             "description": "A uniquely identifying ID for a request in JSON-RPC.",
1754 |             "type": [
1755 |                 "string",
1756 |                 "integer"
1757 |             ]
1758 |         },
1759 |         "Resource": {
1760 |             "description": "A known resource that the server is capable of reading.",
1761 |             "properties": {
1762 |                 "_meta": {
1763 |                     "additionalProperties": {},
1764 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
1765 |                     "type": "object"
1766 |                 },
1767 |                 "annotations": {
1768 |                     "$ref": "#/definitions/Annotations",
1769 |                     "description": "Optional annotations for the client."
1770 |                 },
1771 |                 "description": {
1772 |                     "description": "A description of what this resource represents.\n\nThis can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.",
1773 |                     "type": "string"
1774 |                 },
1775 |                 "mimeType": {
1776 |                     "description": "The MIME type of this resource, if known.",
1777 |                     "type": "string"
1778 |                 },
1779 |                 "name": {
1780 |                     "description": "Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).",
1781 |                     "type": "string"
1782 |                 },
1783 |                 "size": {
1784 |                     "description": "The size of the raw resource content, in bytes (i.e., before base64 encoding or any tokenization), if known.\n\nThis can be used by Hosts to display file sizes and estimate context window usage.",
1785 |                     "type": "integer"
1786 |                 },
1787 |                 "title": {
1788 |                     "description": "Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\neven by those unfamiliar with domain-specific terminology.\n\nIf not provided, the name should be used for display (except for Tool,\nwhere `annotations.title` should be given precedence over using `name`,\nif present).",
1789 |                     "type": "string"
1790 |                 },
1791 |                 "uri": {
1792 |                     "description": "The URI of this resource.",
1793 |                     "format": "uri",
1794 |                     "type": "string"
1795 |                 }
1796 |             },
1797 |             "required": [
1798 |                 "name",
1799 |                 "uri"
1800 |             ],
1801 |             "type": "object"
1802 |         },
1803 |         "ResourceContents": {
1804 |             "description": "The contents of a specific resource or sub-resource.",
1805 |             "properties": {
1806 |                 "_meta": {
1807 |                     "additionalProperties": {},
1808 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
1809 |                     "type": "object"
1810 |                 },
1811 |                 "mimeType": {
1812 |                     "description": "The MIME type of this resource, if known.",
1813 |                     "type": "string"
1814 |                 },
1815 |                 "uri": {
1816 |                     "description": "The URI of this resource.",
1817 |                     "format": "uri",
1818 |                     "type": "string"
1819 |                 }
1820 |             },
1821 |             "required": [
1822 |                 "uri"
1823 |             ],
1824 |             "type": "object"
1825 |         },
1826 |         "ResourceLink": {
1827 |             "description": "A resource that the server is capable of reading, included in a prompt or tool call result.\n\nNote: resource links returned by tools are not guaranteed to appear in the results of `resources/list` requests.",
1828 |             "properties": {
1829 |                 "_meta": {
1830 |                     "additionalProperties": {},
1831 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
1832 |                     "type": "object"
1833 |                 },
1834 |                 "annotations": {
1835 |                     "$ref": "#/definitions/Annotations",
1836 |                     "description": "Optional annotations for the client."
1837 |                 },
1838 |                 "description": {
1839 |                     "description": "A description of what this resource represents.\n\nThis can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.",
1840 |                     "type": "string"
1841 |                 },
1842 |                 "mimeType": {
1843 |                     "description": "The MIME type of this resource, if known.",
1844 |                     "type": "string"
1845 |                 },
1846 |                 "name": {
1847 |                     "description": "Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).",
1848 |                     "type": "string"
1849 |                 },
1850 |                 "size": {
1851 |                     "description": "The size of the raw resource content, in bytes (i.e., before base64 encoding or any tokenization), if known.\n\nThis can be used by Hosts to display file sizes and estimate context window usage.",
1852 |                     "type": "integer"
1853 |                 },
1854 |                 "title": {
1855 |                     "description": "Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\neven by those unfamiliar with domain-specific terminology.\n\nIf not provided, the name should be used for display (except for Tool,\nwhere `annotations.title` should be given precedence over using `name`,\nif present).",
1856 |                     "type": "string"
1857 |                 },
1858 |                 "type": {
1859 |                     "const": "resource_link",
1860 |                     "type": "string"
1861 |                 },
1862 |                 "uri": {
1863 |                     "description": "The URI of this resource.",
1864 |                     "format": "uri",
1865 |                     "type": "string"
1866 |                 }
1867 |             },
1868 |             "required": [
1869 |                 "name",
1870 |                 "type",
1871 |                 "uri"
1872 |             ],
1873 |             "type": "object"
1874 |         },
1875 |         "ResourceListChangedNotification": {
1876 |             "description": "An optional notification from the server to the client, informing it that the list of resources it can read from has changed. This may be issued by servers without any previous subscription from the client.",
1877 |             "properties": {
1878 |                 "method": {
1879 |                     "const": "notifications/resources/list_changed",
1880 |                     "type": "string"
1881 |                 },
1882 |                 "params": {
1883 |                     "additionalProperties": {},
1884 |                     "properties": {
1885 |                         "_meta": {
1886 |                             "additionalProperties": {},
1887 |                             "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
1888 |                             "type": "object"
1889 |                         }
1890 |                     },
1891 |                     "type": "object"
1892 |                 }
1893 |             },
1894 |             "required": [
1895 |                 "method"
1896 |             ],
1897 |             "type": "object"
1898 |         },
1899 |         "ResourceTemplate": {
1900 |             "description": "A template description for resources available on the server.",
1901 |             "properties": {
1902 |                 "_meta": {
1903 |                     "additionalProperties": {},
1904 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
1905 |                     "type": "object"
1906 |                 },
1907 |                 "annotations": {
1908 |                     "$ref": "#/definitions/Annotations",
1909 |                     "description": "Optional annotations for the client."
1910 |                 },
1911 |                 "description": {
1912 |                     "description": "A description of what this template is for.\n\nThis can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.",
1913 |                     "type": "string"
1914 |                 },
1915 |                 "mimeType": {
1916 |                     "description": "The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.",
1917 |                     "type": "string"
1918 |                 },
1919 |                 "name": {
1920 |                     "description": "Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).",
1921 |                     "type": "string"
1922 |                 },
1923 |                 "title": {
1924 |                     "description": "Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\neven by those unfamiliar with domain-specific terminology.\n\nIf not provided, the name should be used for display (except for Tool,\nwhere `annotations.title` should be given precedence over using `name`,\nif present).",
1925 |                     "type": "string"
1926 |                 },
1927 |                 "uriTemplate": {
1928 |                     "description": "A URI template (according to RFC 6570) that can be used to construct resource URIs.",
1929 |                     "format": "uri-template",
1930 |                     "type": "string"
1931 |                 }
1932 |             },
1933 |             "required": [
1934 |                 "name",
1935 |                 "uriTemplate"
1936 |             ],
1937 |             "type": "object"
1938 |         },
1939 |         "ResourceTemplateReference": {
1940 |             "description": "A reference to a resource or resource template definition.",
1941 |             "properties": {
1942 |                 "type": {
1943 |                     "const": "ref/resource",
1944 |                     "type": "string"
1945 |                 },
1946 |                 "uri": {
1947 |                     "description": "The URI or URI template of the resource.",
1948 |                     "format": "uri-template",
1949 |                     "type": "string"
1950 |                 }
1951 |             },
1952 |             "required": [
1953 |                 "type",
1954 |                 "uri"
1955 |             ],
1956 |             "type": "object"
1957 |         },
1958 |         "ResourceUpdatedNotification": {
1959 |             "description": "A notification from the server to the client, informing it that a resource has changed and may need to be read again. This should only be sent if the client previously sent a resources/subscribe request.",
1960 |             "properties": {
1961 |                 "method": {
1962 |                     "const": "notifications/resources/updated",
1963 |                     "type": "string"
1964 |                 },
1965 |                 "params": {
1966 |                     "properties": {
1967 |                         "uri": {
1968 |                             "description": "The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.",
1969 |                             "format": "uri",
1970 |                             "type": "string"
1971 |                         }
1972 |                     },
1973 |                     "required": [
1974 |                         "uri"
1975 |                     ],
1976 |                     "type": "object"
1977 |                 }
1978 |             },
1979 |             "required": [
1980 |                 "method",
1981 |                 "params"
1982 |             ],
1983 |             "type": "object"
1984 |         },
1985 |         "Result": {
1986 |             "additionalProperties": {},
1987 |             "properties": {
1988 |                 "_meta": {
1989 |                     "additionalProperties": {},
1990 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
1991 |                     "type": "object"
1992 |                 }
1993 |             },
1994 |             "type": "object"
1995 |         },
1996 |         "Role": {
1997 |             "description": "The sender or recipient of messages and data in a conversation.",
1998 |             "enum": [
1999 |                 "assistant",
2000 |                 "user"
2001 |             ],
2002 |             "type": "string"
2003 |         },
2004 |         "Root": {
2005 |             "description": "Represents a root directory or file that the server can operate on.",
2006 |             "properties": {
2007 |                 "_meta": {
2008 |                     "additionalProperties": {},
2009 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
2010 |                     "type": "object"
2011 |                 },
2012 |                 "name": {
2013 |                     "description": "An optional name for the root. This can be used to provide a human-readable\nidentifier for the root, which may be useful for display purposes or for\nreferencing the root in other parts of the application.",
2014 |                     "type": "string"
2015 |                 },
2016 |                 "uri": {
2017 |                     "description": "The URI identifying the root. This *must* start with file:// for now.\nThis restriction may be relaxed in future versions of the protocol to allow\nother URI schemes.",
2018 |                     "format": "uri",
2019 |                     "type": "string"
2020 |                 }
2021 |             },
2022 |             "required": [
2023 |                 "uri"
2024 |             ],
2025 |             "type": "object"
2026 |         },
2027 |         "RootsListChangedNotification": {
2028 |             "description": "A notification from the client to the server, informing it that the list of roots has changed.\nThis notification should be sent whenever the client adds, removes, or modifies any root.\nThe server should then request an updated list of roots using the ListRootsRequest.",
2029 |             "properties": {
2030 |                 "method": {
2031 |                     "const": "notifications/roots/list_changed",
2032 |                     "type": "string"
2033 |                 },
2034 |                 "params": {
2035 |                     "additionalProperties": {},
2036 |                     "properties": {
2037 |                         "_meta": {
2038 |                             "additionalProperties": {},
2039 |                             "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
2040 |                             "type": "object"
2041 |                         }
2042 |                     },
2043 |                     "type": "object"
2044 |                 }
2045 |             },
2046 |             "required": [
2047 |                 "method"
2048 |             ],
2049 |             "type": "object"
2050 |         },
2051 |         "SamplingMessage": {
2052 |             "description": "Describes a message issued to or received from an LLM API.",
2053 |             "properties": {
2054 |                 "content": {
2055 |                     "anyOf": [
2056 |                         {
2057 |                             "$ref": "#/definitions/TextContent"
2058 |                         },
2059 |                         {
2060 |                             "$ref": "#/definitions/ImageContent"
2061 |                         },
2062 |                         {
2063 |                             "$ref": "#/definitions/AudioContent"
2064 |                         }
2065 |                     ]
2066 |                 },
2067 |                 "role": {
2068 |                     "$ref": "#/definitions/Role"
2069 |                 }
2070 |             },
2071 |             "required": [
2072 |                 "content",
2073 |                 "role"
2074 |             ],
2075 |             "type": "object"
2076 |         },
2077 |         "ServerCapabilities": {
2078 |             "description": "Capabilities that a server may support. Known capabilities are defined here, in this schema, but this is not a closed set: any server can define its own, additional capabilities.",
2079 |             "properties": {
2080 |                 "completions": {
2081 |                     "additionalProperties": true,
2082 |                     "description": "Present if the server supports argument autocompletion suggestions.",
2083 |                     "properties": {},
2084 |                     "type": "object"
2085 |                 },
2086 |                 "experimental": {
2087 |                     "additionalProperties": {
2088 |                         "additionalProperties": true,
2089 |                         "properties": {},
2090 |                         "type": "object"
2091 |                     },
2092 |                     "description": "Experimental, non-standard capabilities that the server supports.",
2093 |                     "type": "object"
2094 |                 },
2095 |                 "logging": {
2096 |                     "additionalProperties": true,
2097 |                     "description": "Present if the server supports sending log messages to the client.",
2098 |                     "properties": {},
2099 |                     "type": "object"
2100 |                 },
2101 |                 "prompts": {
2102 |                     "description": "Present if the server offers any prompt templates.",
2103 |                     "properties": {
2104 |                         "listChanged": {
2105 |                             "description": "Whether this server supports notifications for changes to the prompt list.",
2106 |                             "type": "boolean"
2107 |                         }
2108 |                     },
2109 |                     "type": "object"
2110 |                 },
2111 |                 "resources": {
2112 |                     "description": "Present if the server offers any resources to read.",
2113 |                     "properties": {
2114 |                         "listChanged": {
2115 |                             "description": "Whether this server supports notifications for changes to the resource list.",
2116 |                             "type": "boolean"
2117 |                         },
2118 |                         "subscribe": {
2119 |                             "description": "Whether this server supports subscribing to resource updates.",
2120 |                             "type": "boolean"
2121 |                         }
2122 |                     },
2123 |                     "type": "object"
2124 |                 },
2125 |                 "tools": {
2126 |                     "description": "Present if the server offers any tools to call.",
2127 |                     "properties": {
2128 |                         "listChanged": {
2129 |                             "description": "Whether this server supports notifications for changes to the tool list.",
2130 |                             "type": "boolean"
2131 |                         }
2132 |                     },
2133 |                     "type": "object"
2134 |                 }
2135 |             },
2136 |             "type": "object"
2137 |         },
2138 |         "ServerNotification": {
2139 |             "anyOf": [
2140 |                 {
2141 |                     "$ref": "#/definitions/CancelledNotification"
2142 |                 },
2143 |                 {
2144 |                     "$ref": "#/definitions/ProgressNotification"
2145 |                 },
2146 |                 {
2147 |                     "$ref": "#/definitions/ResourceListChangedNotification"
2148 |                 },
2149 |                 {
2150 |                     "$ref": "#/definitions/ResourceUpdatedNotification"
2151 |                 },
2152 |                 {
2153 |                     "$ref": "#/definitions/PromptListChangedNotification"
2154 |                 },
2155 |                 {
2156 |                     "$ref": "#/definitions/ToolListChangedNotification"
2157 |                 },
2158 |                 {
2159 |                     "$ref": "#/definitions/LoggingMessageNotification"
2160 |                 }
2161 |             ]
2162 |         },
2163 |         "ServerRequest": {
2164 |             "anyOf": [
2165 |                 {
2166 |                     "$ref": "#/definitions/PingRequest"
2167 |                 },
2168 |                 {
2169 |                     "$ref": "#/definitions/CreateMessageRequest"
2170 |                 },
2171 |                 {
2172 |                     "$ref": "#/definitions/ListRootsRequest"
2173 |                 },
2174 |                 {
2175 |                     "$ref": "#/definitions/ElicitRequest"
2176 |                 }
2177 |             ]
2178 |         },
2179 |         "ServerResult": {
2180 |             "anyOf": [
2181 |                 {
2182 |                     "$ref": "#/definitions/Result"
2183 |                 },
2184 |                 {
2185 |                     "$ref": "#/definitions/InitializeResult"
2186 |                 },
2187 |                 {
2188 |                     "$ref": "#/definitions/ListResourcesResult"
2189 |                 },
2190 |                 {
2191 |                     "$ref": "#/definitions/ListResourceTemplatesResult"
2192 |                 },
2193 |                 {
2194 |                     "$ref": "#/definitions/ReadResourceResult"
2195 |                 },
2196 |                 {
2197 |                     "$ref": "#/definitions/ListPromptsResult"
2198 |                 },
2199 |                 {
2200 |                     "$ref": "#/definitions/GetPromptResult"
2201 |                 },
2202 |                 {
2203 |                     "$ref": "#/definitions/ListToolsResult"
2204 |                 },
2205 |                 {
2206 |                     "$ref": "#/definitions/CallToolResult"
2207 |                 },
2208 |                 {
2209 |                     "$ref": "#/definitions/CompleteResult"
2210 |                 }
2211 |             ]
2212 |         },
2213 |         "SetLevelRequest": {
2214 |             "description": "A request from the client to the server, to enable or adjust logging.",
2215 |             "properties": {
2216 |                 "method": {
2217 |                     "const": "logging/setLevel",
2218 |                     "type": "string"
2219 |                 },
2220 |                 "params": {
2221 |                     "properties": {
2222 |                         "level": {
2223 |                             "$ref": "#/definitions/LoggingLevel",
2224 |                             "description": "The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/message."
2225 |                         }
2226 |                     },
2227 |                     "required": [
2228 |                         "level"
2229 |                     ],
2230 |                     "type": "object"
2231 |                 }
2232 |             },
2233 |             "required": [
2234 |                 "method",
2235 |                 "params"
2236 |             ],
2237 |             "type": "object"
2238 |         },
2239 |         "StringSchema": {
2240 |             "properties": {
2241 |                 "description": {
2242 |                     "type": "string"
2243 |                 },
2244 |                 "format": {
2245 |                     "enum": [
2246 |                         "date",
2247 |                         "date-time",
2248 |                         "email",
2249 |                         "uri"
2250 |                     ],
2251 |                     "type": "string"
2252 |                 },
2253 |                 "maxLength": {
2254 |                     "type": "integer"
2255 |                 },
2256 |                 "minLength": {
2257 |                     "type": "integer"
2258 |                 },
2259 |                 "title": {
2260 |                     "type": "string"
2261 |                 },
2262 |                 "type": {
2263 |                     "const": "string",
2264 |                     "type": "string"
2265 |                 }
2266 |             },
2267 |             "required": [
2268 |                 "type"
2269 |             ],
2270 |             "type": "object"
2271 |         },
2272 |         "SubscribeRequest": {
2273 |             "description": "Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.",
2274 |             "properties": {
2275 |                 "method": {
2276 |                     "const": "resources/subscribe",
2277 |                     "type": "string"
2278 |                 },
2279 |                 "params": {
2280 |                     "properties": {
2281 |                         "uri": {
2282 |                             "description": "The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.",
2283 |                             "format": "uri",
2284 |                             "type": "string"
2285 |                         }
2286 |                     },
2287 |                     "required": [
2288 |                         "uri"
2289 |                     ],
2290 |                     "type": "object"
2291 |                 }
2292 |             },
2293 |             "required": [
2294 |                 "method",
2295 |                 "params"
2296 |             ],
2297 |             "type": "object"
2298 |         },
2299 |         "TextContent": {
2300 |             "description": "Text provided to or from an LLM.",
2301 |             "properties": {
2302 |                 "_meta": {
2303 |                     "additionalProperties": {},
2304 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
2305 |                     "type": "object"
2306 |                 },
2307 |                 "annotations": {
2308 |                     "$ref": "#/definitions/Annotations",
2309 |                     "description": "Optional annotations for the client."
2310 |                 },
2311 |                 "text": {
2312 |                     "description": "The text content of the message.",
2313 |                     "type": "string"
2314 |                 },
2315 |                 "type": {
2316 |                     "const": "text",
2317 |                     "type": "string"
2318 |                 }
2319 |             },
2320 |             "required": [
2321 |                 "text",
2322 |                 "type"
2323 |             ],
2324 |             "type": "object"
2325 |         },
2326 |         "TextResourceContents": {
2327 |             "properties": {
2328 |                 "_meta": {
2329 |                     "additionalProperties": {},
2330 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
2331 |                     "type": "object"
2332 |                 },
2333 |                 "mimeType": {
2334 |                     "description": "The MIME type of this resource, if known.",
2335 |                     "type": "string"
2336 |                 },
2337 |                 "text": {
2338 |                     "description": "The text of the item. This must only be set if the item can actually be represented as text (not binary data).",
2339 |                     "type": "string"
2340 |                 },
2341 |                 "uri": {
2342 |                     "description": "The URI of this resource.",
2343 |                     "format": "uri",
2344 |                     "type": "string"
2345 |                 }
2346 |             },
2347 |             "required": [
2348 |                 "text",
2349 |                 "uri"
2350 |             ],
2351 |             "type": "object"
2352 |         },
2353 |         "Tool": {
2354 |             "description": "Definition for a tool the client can call.",
2355 |             "properties": {
2356 |                 "_meta": {
2357 |                     "additionalProperties": {},
2358 |                     "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
2359 |                     "type": "object"
2360 |                 },
2361 |                 "annotations": {
2362 |                     "$ref": "#/definitions/ToolAnnotations",
2363 |                     "description": "Optional additional tool information.\n\nDisplay name precedence order is: title, annotations.title, then name."
2364 |                 },
2365 |                 "description": {
2366 |                     "description": "A human-readable description of the tool.\n\nThis can be used by clients to improve the LLM's understanding of available tools. It can be thought of like a \"hint\" to the model.",
2367 |                     "type": "string"
2368 |                 },
2369 |                 "inputSchema": {
2370 |                     "description": "A JSON Schema object defining the expected parameters for the tool.",
2371 |                     "properties": {
2372 |                         "properties": {
2373 |                             "additionalProperties": {
2374 |                                 "additionalProperties": true,
2375 |                                 "properties": {},
2376 |                                 "type": "object"
2377 |                             },
2378 |                             "type": "object"
2379 |                         },
2380 |                         "required": {
2381 |                             "items": {
2382 |                                 "type": "string"
2383 |                             },
2384 |                             "type": "array"
2385 |                         },
2386 |                         "type": {
2387 |                             "const": "object",
2388 |                             "type": "string"
2389 |                         }
2390 |                     },
2391 |                     "required": [
2392 |                         "type"
2393 |                     ],
2394 |                     "type": "object"
2395 |                 },
2396 |                 "name": {
2397 |                     "description": "Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).",
2398 |                     "type": "string"
2399 |                 },
2400 |                 "outputSchema": {
2401 |                     "description": "An optional JSON Schema object defining the structure of the tool's output returned in\nthe structuredContent field of a CallToolResult.",
2402 |                     "properties": {
2403 |                         "properties": {
2404 |                             "additionalProperties": {
2405 |                                 "additionalProperties": true,
2406 |                                 "properties": {},
2407 |                                 "type": "object"
2408 |                             },
2409 |                             "type": "object"
2410 |                         },
2411 |                         "required": {
2412 |                             "items": {
2413 |                                 "type": "string"
2414 |                             },
2415 |                             "type": "array"
2416 |                         },
2417 |                         "type": {
2418 |                             "const": "object",
2419 |                             "type": "string"
2420 |                         }
2421 |                     },
2422 |                     "required": [
2423 |                         "type"
2424 |                     ],
2425 |                     "type": "object"
2426 |                 },
2427 |                 "title": {
2428 |                     "description": "Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\neven by those unfamiliar with domain-specific terminology.\n\nIf not provided, the name should be used for display (except for Tool,\nwhere `annotations.title` should be given precedence over using `name`,\nif present).",
2429 |                     "type": "string"
2430 |                 }
2431 |             },
2432 |             "required": [
2433 |                 "inputSchema",
2434 |                 "name"
2435 |             ],
2436 |             "type": "object"
2437 |         },
2438 |         "ToolAnnotations": {
2439 |             "description": "Additional properties describing a Tool to clients.\n\nNOTE: all properties in ToolAnnotations are **hints**.\nThey are not guaranteed to provide a faithful description of\ntool behavior (including descriptive properties like `title`).\n\nClients should never make tool use decisions based on ToolAnnotations\nreceived from untrusted servers.",
2440 |             "properties": {
2441 |                 "destructiveHint": {
2442 |                     "description": "If true, the tool may perform destructive updates to its environment.\nIf false, the tool performs only additive updates.\n\n(This property is meaningful only when `readOnlyHint == false`)\n\nDefault: true",
2443 |                     "type": "boolean"
2444 |                 },
2445 |                 "idempotentHint": {
2446 |                     "description": "If true, calling the tool repeatedly with the same arguments\nwill have no additional effect on the its environment.\n\n(This property is meaningful only when `readOnlyHint == false`)\n\nDefault: false",
2447 |                     "type": "boolean"
2448 |                 },
2449 |                 "openWorldHint": {
2450 |                     "description": "If true, this tool may interact with an \"open world\" of external\nentities. If false, the tool's domain of interaction is closed.\nFor example, the world of a web search tool is open, whereas that\nof a memory tool is not.\n\nDefault: true",
2451 |                     "type": "boolean"
2452 |                 },
2453 |                 "readOnlyHint": {
2454 |                     "description": "If true, the tool does not modify its environment.\n\nDefault: false",
2455 |                     "type": "boolean"
2456 |                 },
2457 |                 "title": {
2458 |                     "description": "A human-readable title for the tool.",
2459 |                     "type": "string"
2460 |                 }
2461 |             },
2462 |             "type": "object"
2463 |         },
2464 |         "ToolListChangedNotification": {
2465 |             "description": "An optional notification from the server to the client, informing it that the list of tools it offers has changed. This may be issued by servers without any previous subscription from the client.",
2466 |             "properties": {
2467 |                 "method": {
2468 |                     "const": "notifications/tools/list_changed",
2469 |                     "type": "string"
2470 |                 },
2471 |                 "params": {
2472 |                     "additionalProperties": {},
2473 |                     "properties": {
2474 |                         "_meta": {
2475 |                             "additionalProperties": {},
2476 |                             "description": "See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.",
2477 |                             "type": "object"
2478 |                         }
2479 |                     },
2480 |                     "type": "object"
2481 |                 }
2482 |             },
2483 |             "required": [
2484 |                 "method"
2485 |             ],
2486 |             "type": "object"
2487 |         },
2488 |         "UnsubscribeRequest": {
2489 |             "description": "Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.",
2490 |             "properties": {
2491 |                 "method": {
2492 |                     "const": "resources/unsubscribe",
2493 |                     "type": "string"
2494 |                 },
2495 |                 "params": {
2496 |                     "properties": {
2497 |                         "uri": {
2498 |                             "description": "The URI of the resource to unsubscribe from.",
2499 |                             "format": "uri",
2500 |                             "type": "string"
2501 |                         }
2502 |                     },
2503 |                     "required": [
2504 |                         "uri"
2505 |                     ],
2506 |                     "type": "object"
2507 |                 }
2508 |             },
2509 |             "required": [
2510 |                 "method",
2511 |                 "params"
2512 |             ],
2513 |             "type": "object"
2514 |         }
2515 |     }
2516 | }
2517 | 
2518 | 


--------------------------------------------------------------------------------
/schema/draft/schema.ts:
--------------------------------------------------------------------------------
   1 | /* JSON-RPC types */
   2 | 
   3 | /**
   4 |  * Refers to any valid JSON-RPC object that can be decoded off the wire, or encoded to be sent.
   5 |  *
   6 |  * @internal
   7 |  */
   8 | export type JSONRPCMessage =
   9 |   | JSONRPCRequest
  10 |   | JSONRPCNotification
  11 |   | JSONRPCResponse
  12 |   | JSONRPCError;
  13 | 
  14 | /** @internal */
  15 | export const LATEST_PROTOCOL_VERSION = "DRAFT-2025-v3";
  16 | /** @internal */
  17 | export const JSONRPC_VERSION = "2.0";
  18 | 
  19 | /**
  20 |  * A progress token, used to associate progress notifications with the original request.
  21 |  */
  22 | export type ProgressToken = string | number;
  23 | 
  24 | /**
  25 |  * An opaque token used to represent a cursor for pagination.
  26 |  */
  27 | export type Cursor = string;
  28 | 
  29 | /** @internal */
  30 | export interface Request {
  31 |   method: string;
  32 |   params?: {
  33 |     /**
  34 |      * See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.
  35 |      */
  36 |     _meta?: {
  37 |       /**
  38 |        * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
  39 |        */
  40 |       progressToken?: ProgressToken;
  41 |       [key: string]: unknown;
  42 |     };
  43 |     [key: string]: unknown;
  44 |   };
  45 | }
  46 | 
  47 | /** @internal */
  48 | export interface Notification {
  49 |   method: string;
  50 |   params?: {
  51 |     /**
  52 |      * See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.
  53 |      */
  54 |     _meta?: { [key: string]: unknown };
  55 |     [key: string]: unknown;
  56 |   };
  57 | }
  58 | 
  59 | export interface Result {
  60 |   /**
  61 |    * See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.
  62 |    */
  63 |   _meta?: { [key: string]: unknown };
  64 |   [key: string]: unknown;
  65 | }
  66 | 
  67 | /**
  68 |  * A uniquely identifying ID for a request in JSON-RPC.
  69 |  */
  70 | export type RequestId = string | number;
  71 | 
  72 | /**
  73 |  * A request that expects a response.
  74 |  */
  75 | export interface JSONRPCRequest extends Request {
  76 |   jsonrpc: typeof JSONRPC_VERSION;
  77 |   id: RequestId;
  78 | }
  79 | 
  80 | /**
  81 |  * A notification which does not expect a response.
  82 |  */
  83 | export interface JSONRPCNotification extends Notification {
  84 |   jsonrpc: typeof JSONRPC_VERSION;
  85 | }
  86 | 
  87 | /**
  88 |  * A successful (non-error) response to a request.
  89 |  */
  90 | export interface JSONRPCResponse {
  91 |   jsonrpc: typeof JSONRPC_VERSION;
  92 |   id: RequestId;
  93 |   result: Result;
  94 | }
  95 | 
  96 | // Standard JSON-RPC error codes
  97 | /** @internal */
  98 | export const PARSE_ERROR = -32700;
  99 | /** @internal */
 100 | export const INVALID_REQUEST = -32600;
 101 | /** @internal */
 102 | export const METHOD_NOT_FOUND = -32601;
 103 | /** @internal */
 104 | export const INVALID_PARAMS = -32602;
 105 | /** @internal */
 106 | export const INTERNAL_ERROR = -32603;
 107 | 
 108 | /**
 109 |  * A response to a request that indicates an error occurred.
 110 |  */
 111 | export interface JSONRPCError {
 112 |   jsonrpc: typeof JSONRPC_VERSION;
 113 |   id: RequestId;
 114 |   error: {
 115 |     /**
 116 |      * The error type that occurred.
 117 |      */
 118 |     code: number;
 119 |     /**
 120 |      * A short description of the error. The message SHOULD be limited to a concise single sentence.
 121 |      */
 122 |     message: string;
 123 |     /**
 124 |      * Additional information about the error. The value of this member is defined by the sender (e.g. detailed error information, nested errors etc.).
 125 |      */
 126 |     data?: unknown;
 127 |   };
 128 | }
 129 | 
 130 | /* Empty result */
 131 | /**
 132 |  * A response that indicates success but carries no data.
 133 |  */
 134 | export type EmptyResult = Result;
 135 | 
 136 | /* Cancellation */
 137 | /**
 138 |  * This notification can be sent by either side to indicate that it is cancelling a previously-issued request.
 139 |  *
 140 |  * The request SHOULD still be in-flight, but due to communication latency, it is always possible that this notification MAY arrive after the request has already finished.
 141 |  *
 142 |  * This notification indicates that the result will be unused, so any associated processing SHOULD cease.
 143 |  *
 144 |  * A client MUST NOT attempt to cancel its `initialize` request.
 145 |  *
 146 |  * @category notifications/cancelled
 147 |  */
 148 | export interface CancelledNotification extends Notification {
 149 |   method: "notifications/cancelled";
 150 |   params: {
 151 |     /**
 152 |      * The ID of the request to cancel.
 153 |      *
 154 |      * This MUST correspond to the ID of a request previously issued in the same direction.
 155 |      */
 156 |     requestId: RequestId;
 157 | 
 158 |     /**
 159 |      * An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.
 160 |      */
 161 |     reason?: string;
 162 |   };
 163 | }
 164 | 
 165 | /* Initialization */
 166 | /**
 167 |  * This request is sent from the client to the server when it first connects, asking it to begin initialization.
 168 |  *
 169 |  * @category initialize
 170 |  */
 171 | export interface InitializeRequest extends Request {
 172 |   method: "initialize";
 173 |   params: {
 174 |     /**
 175 |      * The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.
 176 |      */
 177 |     protocolVersion: string;
 178 |     capabilities: ClientCapabilities;
 179 |     clientInfo: Implementation;
 180 |   };
 181 | }
 182 | 
 183 | /**
 184 |  * After receiving an initialize request from the client, the server sends this response.
 185 |  *
 186 |  * @category initialize
 187 |  */
 188 | export interface InitializeResult extends Result {
 189 |   /**
 190 |    * The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.
 191 |    */
 192 |   protocolVersion: string;
 193 |   capabilities: ServerCapabilities;
 194 |   serverInfo: Implementation;
 195 | 
 196 |   /**
 197 |    * Instructions describing how to use the server and its features.
 198 |    *
 199 |    * This can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a "hint" to the model. For example, this information MAY be added to the system prompt.
 200 |    */
 201 |   instructions?: string;
 202 | }
 203 | 
 204 | /**
 205 |  * This notification is sent from the client to the server after initialization has finished.
 206 |  *
 207 |  * @category notifications/initialized
 208 |  */
 209 | export interface InitializedNotification extends Notification {
 210 |   method: "notifications/initialized";
 211 | }
 212 | 
 213 | /**
 214 |  * Capabilities a client may support. Known capabilities are defined here, in this schema, but this is not a closed set: any client can define its own, additional capabilities.
 215 |  */
 216 | export interface ClientCapabilities {
 217 |   /**
 218 |    * Experimental, non-standard capabilities that the client supports.
 219 |    */
 220 |   experimental?: { [key: string]: object };
 221 |   /**
 222 |    * Present if the client supports listing roots.
 223 |    */
 224 |   roots?: {
 225 |     /**
 226 |      * Whether the client supports notifications for changes to the roots list.
 227 |      */
 228 |     listChanged?: boolean;
 229 |   };
 230 |   /**
 231 |    * Present if the client supports sampling from an LLM.
 232 |    */
 233 |   sampling?: object;
 234 |   /**
 235 |    * Present if the client supports elicitation from the server.
 236 |    */
 237 |   elicitation?: object;
 238 | }
 239 | 
 240 | /**
 241 |  * Capabilities that a server may support. Known capabilities are defined here, in this schema, but this is not a closed set: any server can define its own, additional capabilities.
 242 |  */
 243 | export interface ServerCapabilities {
 244 |   /**
 245 |    * Experimental, non-standard capabilities that the server supports.
 246 |    */
 247 |   experimental?: { [key: string]: object };
 248 |   /**
 249 |    * Present if the server supports sending log messages to the client.
 250 |    */
 251 |   logging?: object;
 252 |   /**
 253 |    * Present if the server supports argument autocompletion suggestions.
 254 |    */
 255 |   completions?: object;
 256 |   /**
 257 |    * Present if the server offers any prompt templates.
 258 |    */
 259 |   prompts?: {
 260 |     /**
 261 |      * Whether this server supports notifications for changes to the prompt list.
 262 |      */
 263 |     listChanged?: boolean;
 264 |   };
 265 |   /**
 266 |    * Present if the server offers any resources to read.
 267 |    */
 268 |   resources?: {
 269 |     /**
 270 |      * Whether this server supports subscribing to resource updates.
 271 |      */
 272 |     subscribe?: boolean;
 273 |     /**
 274 |      * Whether this server supports notifications for changes to the resource list.
 275 |      */
 276 |     listChanged?: boolean;
 277 |   };
 278 |   /**
 279 |    * Present if the server offers any tools to call.
 280 |    */
 281 |   tools?: {
 282 |     /**
 283 |      * Whether this server supports notifications for changes to the tool list.
 284 |      */
 285 |     listChanged?: boolean;
 286 |   };
 287 | }
 288 | 
 289 | /**
 290 |  * Base interface for metadata with name (identifier) and title (display name) properties.
 291 |  *
 292 |  * @internal
 293 |  */
 294 | export interface BaseMetadata {
 295 |   /**
 296 |    * Intended for programmatic or logical use, but used as a display name in past specs or fallback (if title isn't present).
 297 |    */
 298 |   name: string;
 299 | 
 300 |   /**
 301 |    * Intended for UI and end-user contexts — optimized to be human-readable and easily understood,
 302 |    * even by those unfamiliar with domain-specific terminology.
 303 |    *
 304 |    * If not provided, the name should be used for display (except for Tool,
 305 |    * where `annotations.title` should be given precedence over using `name`,
 306 |    * if present).
 307 |    */
 308 |   title?: string;
 309 | }
 310 | 
 311 | /**
 312 |  * Describes the name and version of an MCP implementation, with an optional title for UI representation.
 313 |  */
 314 | export interface Implementation extends BaseMetadata {
 315 |   version: string;
 316 | }
 317 | 
 318 | /* Ping */
 319 | /**
 320 |  * A ping, issued by either the server or the client, to check that the other party is still alive. The receiver must promptly respond, or else may be disconnected.
 321 |  *
 322 |  * @category ping
 323 |  */
 324 | export interface PingRequest extends Request {
 325 |   method: "ping";
 326 | }
 327 | 
 328 | /* Progress notifications */
 329 | /**
 330 |  * An out-of-band notification used to inform the receiver of a progress update for a long-running request.
 331 |  *
 332 |  * @category notifications/progress
 333 |  */
 334 | export interface ProgressNotification extends Notification {
 335 |   method: "notifications/progress";
 336 |   params: {
 337 |     /**
 338 |      * The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.
 339 |      */
 340 |     progressToken: ProgressToken;
 341 |     /**
 342 |      * The progress thus far. This should increase every time progress is made, even if the total is unknown.
 343 |      *
 344 |      * @TJS-type number
 345 |      */
 346 |     progress: number;
 347 |     /**
 348 |      * Total number of items to process (or total progress required), if known.
 349 |      *
 350 |      * @TJS-type number
 351 |      */
 352 |     total?: number;
 353 |     /**
 354 |      * An optional message describing the current progress.
 355 |      */
 356 |     message?: string;
 357 |   };
 358 | }
 359 | 
 360 | /* Pagination */
 361 | /** @internal */
 362 | export interface PaginatedRequest extends Request {
 363 |   params?: {
 364 |     /**
 365 |      * An opaque token representing the current pagination position.
 366 |      * If provided, the server should return results starting after this cursor.
 367 |      */
 368 |     cursor?: Cursor;
 369 |   };
 370 | }
 371 | 
 372 | /** @internal */
 373 | export interface PaginatedResult extends Result {
 374 |   /**
 375 |    * An opaque token representing the pagination position after the last returned result.
 376 |    * If present, there may be more results available.
 377 |    */
 378 |   nextCursor?: Cursor;
 379 | }
 380 | 
 381 | /* Resources */
 382 | /**
 383 |  * Sent from the client to request a list of resources the server has.
 384 |  *
 385 |  * @category resources/list
 386 |  */
 387 | export interface ListResourcesRequest extends PaginatedRequest {
 388 |   method: "resources/list";
 389 | }
 390 | 
 391 | /**
 392 |  * The server's response to a resources/list request from the client.
 393 |  *
 394 |  * @category resources/list
 395 |  */
 396 | export interface ListResourcesResult extends PaginatedResult {
 397 |   resources: Resource[];
 398 | }
 399 | 
 400 | /**
 401 |  * Sent from the client to request a list of resource templates the server has.
 402 |  *
 403 |  * @category resources/templates/list
 404 |  */
 405 | export interface ListResourceTemplatesRequest extends PaginatedRequest {
 406 |   method: "resources/templates/list";
 407 | }
 408 | 
 409 | /**
 410 |  * The server's response to a resources/templates/list request from the client.
 411 |  *
 412 |  * @category resources/templates/list
 413 |  */
 414 | export interface ListResourceTemplatesResult extends PaginatedResult {
 415 |   resourceTemplates: ResourceTemplate[];
 416 | }
 417 | 
 418 | /**
 419 |  * Sent from the client to the server, to read a specific resource URI.
 420 |  *
 421 |  * @category resources/read
 422 |  */
 423 | export interface ReadResourceRequest extends Request {
 424 |   method: "resources/read";
 425 |   params: {
 426 |     /**
 427 |      * The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.
 428 |      *
 429 |      * @format uri
 430 |      */
 431 |     uri: string;
 432 |   };
 433 | }
 434 | 
 435 | /**
 436 |  * The server's response to a resources/read request from the client.
 437 |  *
 438 |  * @category resources/read
 439 |  */
 440 | export interface ReadResourceResult extends Result {
 441 |   contents: (TextResourceContents | BlobResourceContents)[];
 442 | }
 443 | 
 444 | /**
 445 |  * An optional notification from the server to the client, informing it that the list of resources it can read from has changed. This may be issued by servers without any previous subscription from the client.
 446 |  *
 447 |  * @category notifications/resources/list_changed
 448 |  */
 449 | export interface ResourceListChangedNotification extends Notification {
 450 |   method: "notifications/resources/list_changed";
 451 | }
 452 | 
 453 | /**
 454 |  * Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.
 455 |  *
 456 |  * @category resources/subscribe
 457 |  */
 458 | export interface SubscribeRequest extends Request {
 459 |   method: "resources/subscribe";
 460 |   params: {
 461 |     /**
 462 |      * The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.
 463 |      *
 464 |      * @format uri
 465 |      */
 466 |     uri: string;
 467 |   };
 468 | }
 469 | 
 470 | /**
 471 |  * Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.
 472 |  *
 473 |  * @category resources/unsubscribe
 474 |  */
 475 | export interface UnsubscribeRequest extends Request {
 476 |   method: "resources/unsubscribe";
 477 |   params: {
 478 |     /**
 479 |      * The URI of the resource to unsubscribe from.
 480 |      *
 481 |      * @format uri
 482 |      */
 483 |     uri: string;
 484 |   };
 485 | }
 486 | 
 487 | /**
 488 |  * A notification from the server to the client, informing it that a resource has changed and may need to be read again. This should only be sent if the client previously sent a resources/subscribe request.
 489 |  *
 490 |  * @category notifications/resources/updated
 491 |  */
 492 | export interface ResourceUpdatedNotification extends Notification {
 493 |   method: "notifications/resources/updated";
 494 |   params: {
 495 |     /**
 496 |      * The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.
 497 |      *
 498 |      * @format uri
 499 |      */
 500 |     uri: string;
 501 |   };
 502 | }
 503 | 
 504 | /**
 505 |  * A known resource that the server is capable of reading.
 506 |  */
 507 | export interface Resource extends BaseMetadata {
 508 |   /**
 509 |    * The URI of this resource.
 510 |    *
 511 |    * @format uri
 512 |    */
 513 |   uri: string;
 514 | 
 515 |   /**
 516 |    * A description of what this resource represents.
 517 |    *
 518 |    * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
 519 |    */
 520 |   description?: string;
 521 | 
 522 |   /**
 523 |    * The MIME type of this resource, if known.
 524 |    */
 525 |   mimeType?: string;
 526 | 
 527 |   /**
 528 |    * Optional annotations for the client.
 529 |    */
 530 |   annotations?: Annotations;
 531 | 
 532 |   /**
 533 |    * The size of the raw resource content, in bytes (i.e., before base64 encoding or any tokenization), if known.
 534 |    *
 535 |    * This can be used by Hosts to display file sizes and estimate context window usage.
 536 |    */
 537 |   size?: number;
 538 | 
 539 |   /**
 540 |    * See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.
 541 |    */
 542 |   _meta?: { [key: string]: unknown };
 543 | }
 544 | 
 545 | /**
 546 |  * A template description for resources available on the server.
 547 |  */
 548 | export interface ResourceTemplate extends BaseMetadata {
 549 |   /**
 550 |    * A URI template (according to RFC 6570) that can be used to construct resource URIs.
 551 |    *
 552 |    * @format uri-template
 553 |    */
 554 |   uriTemplate: string;
 555 | 
 556 |   /**
 557 |    * A description of what this template is for.
 558 |    *
 559 |    * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
 560 |    */
 561 |   description?: string;
 562 | 
 563 |   /**
 564 |    * The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.
 565 |    */
 566 |   mimeType?: string;
 567 | 
 568 |   /**
 569 |    * Optional annotations for the client.
 570 |    */
 571 |   annotations?: Annotations;
 572 | 
 573 |   /**
 574 |    * See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.
 575 |    */
 576 |   _meta?: { [key: string]: unknown };
 577 | }
 578 | 
 579 | /**
 580 |  * The contents of a specific resource or sub-resource.
 581 |  */
 582 | export interface ResourceContents {
 583 |   /**
 584 |    * The URI of this resource.
 585 |    *
 586 |    * @format uri
 587 |    */
 588 |   uri: string;
 589 |   /**
 590 |    * The MIME type of this resource, if known.
 591 |    */
 592 |   mimeType?: string;
 593 | 
 594 |   /**
 595 |    * See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.
 596 |    */
 597 |   _meta?: { [key: string]: unknown };
 598 | }
 599 | 
 600 | export interface TextResourceContents extends ResourceContents {
 601 |   /**
 602 |    * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
 603 |    */
 604 |   text: string;
 605 | }
 606 | 
 607 | export interface BlobResourceContents extends ResourceContents {
 608 |   /**
 609 |    * A base64-encoded string representing the binary data of the item.
 610 |    *
 611 |    * @format byte
 612 |    */
 613 |   blob: string;
 614 | }
 615 | 
 616 | /* Prompts */
 617 | /**
 618 |  * Sent from the client to request a list of prompts and prompt templates the server has.
 619 |  *
 620 |  * @category prompts/list
 621 |  */
 622 | export interface ListPromptsRequest extends PaginatedRequest {
 623 |   method: "prompts/list";
 624 | }
 625 | 
 626 | /**
 627 |  * The server's response to a prompts/list request from the client.
 628 |  *
 629 |  * @category prompts/list
 630 |  */
 631 | export interface ListPromptsResult extends PaginatedResult {
 632 |   prompts: Prompt[];
 633 | }
 634 | 
 635 | /**
 636 |  * Used by the client to get a prompt provided by the server.
 637 |  *
 638 |  * @category prompts/get
 639 |  */
 640 | export interface GetPromptRequest extends Request {
 641 |   method: "prompts/get";
 642 |   params: {
 643 |     /**
 644 |      * The name of the prompt or prompt template.
 645 |      */
 646 |     name: string;
 647 |     /**
 648 |      * Arguments to use for templating the prompt.
 649 |      */
 650 |     arguments?: { [key: string]: string };
 651 |   };
 652 | }
 653 | 
 654 | /**
 655 |  * The server's response to a prompts/get request from the client.
 656 |  *
 657 |  * @category prompts/get
 658 |  */
 659 | export interface GetPromptResult extends Result {
 660 |   /**
 661 |    * An optional description for the prompt.
 662 |    */
 663 |   description?: string;
 664 |   messages: PromptMessage[];
 665 | }
 666 | 
 667 | /**
 668 |  * A prompt or prompt template that the server offers.
 669 |  */
 670 | export interface Prompt extends BaseMetadata {
 671 |   /**
 672 |    * An optional description of what this prompt provides
 673 |    */
 674 |   description?: string;
 675 |   /**
 676 |    * A list of arguments to use for templating the prompt.
 677 |    */
 678 |   arguments?: PromptArgument[];
 679 | 
 680 |   /**
 681 |    * See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.
 682 |    */
 683 |   _meta?: { [key: string]: unknown };
 684 | }
 685 | 
 686 | /**
 687 |  * Describes an argument that a prompt can accept.
 688 |  */
 689 | export interface PromptArgument extends BaseMetadata {
 690 |   /**
 691 |    * A human-readable description of the argument.
 692 |    */
 693 |   description?: string;
 694 |   /**
 695 |    * Whether this argument must be provided.
 696 |    */
 697 |   required?: boolean;
 698 | }
 699 | 
 700 | /**
 701 |  * The sender or recipient of messages and data in a conversation.
 702 |  */
 703 | export type Role = "user" | "assistant";
 704 | 
 705 | /**
 706 |  * Describes a message returned as part of a prompt.
 707 |  *
 708 |  * This is similar to `SamplingMessage`, but also supports the embedding of
 709 |  * resources from the MCP server.
 710 |  */
 711 | export interface PromptMessage {
 712 |   role: Role;
 713 |   content: ContentBlock;
 714 | }
 715 | 
 716 | /**
 717 |  * A resource that the server is capable of reading, included in a prompt or tool call result.
 718 |  *
 719 |  * Note: resource links returned by tools are not guaranteed to appear in the results of `resources/list` requests.
 720 |  */
 721 | export interface ResourceLink extends Resource {
 722 |   type: "resource_link";
 723 | }
 724 | 
 725 | /**
 726 |  * The contents of a resource, embedded into a prompt or tool call result.
 727 |  *
 728 |  * It is up to the client how best to render embedded resources for the benefit
 729 |  * of the LLM and/or the user.
 730 |  */
 731 | export interface EmbeddedResource {
 732 |   type: "resource";
 733 |   resource: TextResourceContents | BlobResourceContents;
 734 | 
 735 |   /**
 736 |    * Optional annotations for the client.
 737 |    */
 738 |   annotations?: Annotations;
 739 | 
 740 |   /**
 741 |    * See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.
 742 |    */
 743 |   _meta?: { [key: string]: unknown };
 744 | }
 745 | /**
 746 |  * An optional notification from the server to the client, informing it that the list of prompts it offers has changed. This may be issued by servers without any previous subscription from the client.
 747 |  *
 748 |  * @category notifications/prompts/list_changed
 749 |  */
 750 | export interface PromptListChangedNotification extends Notification {
 751 |   method: "notifications/prompts/list_changed";
 752 | }
 753 | 
 754 | /* Tools */
 755 | /**
 756 |  * Sent from the client to request a list of tools the server has.
 757 |  *
 758 |  * @category tools/list
 759 |  */
 760 | export interface ListToolsRequest extends PaginatedRequest {
 761 |   method: "tools/list";
 762 | }
 763 | 
 764 | /**
 765 |  * The server's response to a tools/list request from the client.
 766 |  *
 767 |  * @category tools/list
 768 |  */
 769 | export interface ListToolsResult extends PaginatedResult {
 770 |   tools: Tool[];
 771 | }
 772 | 
 773 | /**
 774 |  * The server's response to a tool call.
 775 |  *
 776 |  * @category tools/call
 777 |  */
 778 | export interface CallToolResult extends Result {
 779 |   /**
 780 |    * A list of content objects that represent the unstructured result of the tool call.
 781 |    */
 782 |   content: ContentBlock[];
 783 | 
 784 |   /**
 785 |    * An optional JSON object that represents the structured result of the tool call.
 786 |    */
 787 |   structuredContent?: { [key: string]: unknown };
 788 | 
 789 |   /**
 790 |    * Whether the tool call ended in an error.
 791 |    *
 792 |    * If not set, this is assumed to be false (the call was successful).
 793 |    *
 794 |    * Any errors that originate from the tool SHOULD be reported inside the result
 795 |    * object, with `isError` set to true, _not_ as an MCP protocol-level error
 796 |    * response. Otherwise, the LLM would not be able to see that an error occurred
 797 |    * and self-correct.
 798 |    *
 799 |    * However, any errors in _finding_ the tool, an error indicating that the
 800 |    * server does not support tool calls, or any other exceptional conditions,
 801 |    * should be reported as an MCP error response.
 802 |    */
 803 |   isError?: boolean;
 804 | }
 805 | 
 806 | /**
 807 |  * Used by the client to invoke a tool provided by the server.
 808 |  *
 809 |  * @category tools/call
 810 |  */
 811 | export interface CallToolRequest extends Request {
 812 |   method: "tools/call";
 813 |   params: {
 814 |     name: string;
 815 |     arguments?: { [key: string]: unknown };
 816 |   };
 817 | }
 818 | 
 819 | /**
 820 |  * An optional notification from the server to the client, informing it that the list of tools it offers has changed. This may be issued by servers without any previous subscription from the client.
 821 |  *
 822 |  * @category notifications/tools/list_changed
 823 |  */
 824 | export interface ToolListChangedNotification extends Notification {
 825 |   method: "notifications/tools/list_changed";
 826 | }
 827 | 
 828 | /**
 829 |  * Additional properties describing a Tool to clients.
 830 |  *
 831 |  * NOTE: all properties in ToolAnnotations are **hints**.
 832 |  * They are not guaranteed to provide a faithful description of
 833 |  * tool behavior (including descriptive properties like `title`).
 834 |  *
 835 |  * Clients should never make tool use decisions based on ToolAnnotations
 836 |  * received from untrusted servers.
 837 |  */
 838 | export interface ToolAnnotations {
 839 |   /**
 840 |    * A human-readable title for the tool.
 841 |    */
 842 |   title?: string;
 843 | 
 844 |   /**
 845 |    * If true, the tool does not modify its environment.
 846 |    *
 847 |    * Default: false
 848 |    */
 849 |   readOnlyHint?: boolean;
 850 | 
 851 |   /**
 852 |    * If true, the tool may perform destructive updates to its environment.
 853 |    * If false, the tool performs only additive updates.
 854 |    *
 855 |    * (This property is meaningful only when `readOnlyHint == false`)
 856 |    *
 857 |    * Default: true
 858 |    */
 859 |   destructiveHint?: boolean;
 860 | 
 861 |   /**
 862 |    * If true, calling the tool repeatedly with the same arguments
 863 |    * will have no additional effect on the its environment.
 864 |    *
 865 |    * (This property is meaningful only when `readOnlyHint == false`)
 866 |    *
 867 |    * Default: false
 868 |    */
 869 |   idempotentHint?: boolean;
 870 | 
 871 |   /**
 872 |    * If true, this tool may interact with an "open world" of external
 873 |    * entities. If false, the tool's domain of interaction is closed.
 874 |    * For example, the world of a web search tool is open, whereas that
 875 |    * of a memory tool is not.
 876 |    *
 877 |    * Default: true
 878 |    */
 879 |   openWorldHint?: boolean;
 880 | }
 881 | 
 882 | /**
 883 |  * Definition for a tool the client can call.
 884 |  */
 885 | export interface Tool extends BaseMetadata {
 886 |   /**
 887 |    * A human-readable description of the tool.
 888 |    *
 889 |    * This can be used by clients to improve the LLM's understanding of available tools. It can be thought of like a "hint" to the model.
 890 |    */
 891 |   description?: string;
 892 | 
 893 |   /**
 894 |    * A JSON Schema object defining the expected parameters for the tool.
 895 |    */
 896 |   inputSchema: {
 897 |     type: "object";
 898 |     properties?: { [key: string]: object };
 899 |     required?: string[];
 900 |   };
 901 | 
 902 |   /**
 903 |    * An optional JSON Schema object defining the structure of the tool's output returned in
 904 |    * the structuredContent field of a CallToolResult.
 905 |    */
 906 |   outputSchema?: {
 907 |     type: "object";
 908 |     properties?: { [key: string]: object };
 909 |     required?: string[];
 910 |   };
 911 | 
 912 |   /**
 913 |    * Optional additional tool information.
 914 |    *
 915 |    * Display name precedence order is: title, annotations.title, then name.
 916 |    */
 917 |   annotations?: ToolAnnotations;
 918 | 
 919 |   /**
 920 |    * See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.
 921 |    */
 922 |   _meta?: { [key: string]: unknown };
 923 | }
 924 | 
 925 | /* Logging */
 926 | /**
 927 |  * A request from the client to the server, to enable or adjust logging.
 928 |  *
 929 |  * @category logging/setLevel
 930 |  */
 931 | export interface SetLevelRequest extends Request {
 932 |   method: "logging/setLevel";
 933 |   params: {
 934 |     /**
 935 |      * The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/message.
 936 |      */
 937 |     level: LoggingLevel;
 938 |   };
 939 | }
 940 | 
 941 | /**
 942 |  * Notification of a log message passed from server to client. If no logging/setLevel request has been sent from the client, the server MAY decide which messages to send automatically.
 943 |  *
 944 |  * @category notifications/message
 945 |  */
 946 | export interface LoggingMessageNotification extends Notification {
 947 |   method: "notifications/message";
 948 |   params: {
 949 |     /**
 950 |      * The severity of this log message.
 951 |      */
 952 |     level: LoggingLevel;
 953 |     /**
 954 |      * An optional name of the logger issuing this message.
 955 |      */
 956 |     logger?: string;
 957 |     /**
 958 |      * The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here.
 959 |      */
 960 |     data: unknown;
 961 |   };
 962 | }
 963 | 
 964 | /**
 965 |  * The severity of a log message.
 966 |  *
 967 |  * These map to syslog message severities, as specified in RFC-5424:
 968 |  * https://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1
 969 |  */
 970 | export type LoggingLevel =
 971 |   | "debug"
 972 |   | "info"
 973 |   | "notice"
 974 |   | "warning"
 975 |   | "error"
 976 |   | "critical"
 977 |   | "alert"
 978 |   | "emergency";
 979 | 
 980 | /* Sampling */
 981 | /**
 982 |  * A request from the server to sample an LLM via the client. The client has full discretion over which model to select. The client should also inform the user before beginning sampling, to allow them to inspect the request (human in the loop) and decide whether to approve it.
 983 |  *
 984 |  * @category sampling/createMessage
 985 |  */
 986 | export interface CreateMessageRequest extends Request {
 987 |   method: "sampling/createMessage";
 988 |   params: {
 989 |     messages: SamplingMessage[];
 990 |     /**
 991 |      * The server's preferences for which model to select. The client MAY ignore these preferences.
 992 |      */
 993 |     modelPreferences?: ModelPreferences;
 994 |     /**
 995 |      * An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.
 996 |      */
 997 |     systemPrompt?: string;
 998 |     /**
 999 |      * A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.
1000 |      */
1001 |     includeContext?: "none" | "thisServer" | "allServers";
1002 |     /**
1003 |      * @TJS-type number
1004 |      */
1005 |     temperature?: number;
1006 |     /**
1007 |      * The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.
1008 |      */
1009 |     maxTokens: number;
1010 |     stopSequences?: string[];
1011 |     /**
1012 |      * Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.
1013 |      */
1014 |     metadata?: object;
1015 |   };
1016 | }
1017 | 
1018 | /**
1019 |  * The client's response to a sampling/create_message request from the server. The client should inform the user before returning the sampled message, to allow them to inspect the response (human in the loop) and decide whether to allow the server to see it.
1020 |  *
1021 |  * @category sampling/createMessage
1022 |  */
1023 | export interface CreateMessageResult extends Result, SamplingMessage {
1024 |   /**
1025 |    * The name of the model that generated the message.
1026 |    */
1027 |   model: string;
1028 |   /**
1029 |    * The reason why sampling stopped, if known.
1030 |    */
1031 |   stopReason?: "endTurn" | "stopSequence" | "maxTokens" | string;
1032 | }
1033 | 
1034 | /**
1035 |  * Describes a message issued to or received from an LLM API.
1036 |  */
1037 | export interface SamplingMessage {
1038 |   role: Role;
1039 |   content: TextContent | ImageContent | AudioContent;
1040 | }
1041 | 
1042 | /**
1043 |  * Optional annotations for the client. The client can use annotations to inform how objects are used or displayed
1044 |  */
1045 | export interface Annotations {
1046 |   /**
1047 |    * Describes who the intended customer of this object or data is.
1048 |    *
1049 |    * It can include multiple entries to indicate content useful for multiple audiences (e.g., `["user", "assistant"]`).
1050 |    */
1051 |   audience?: Role[];
1052 | 
1053 |   /**
1054 |    * Describes how important this data is for operating the server.
1055 |    *
1056 |    * A value of 1 means "most important," and indicates that the data is
1057 |    * effectively required, while 0 means "least important," and indicates that
1058 |    * the data is entirely optional.
1059 |    *
1060 |    * @TJS-type number
1061 |    * @minimum 0
1062 |    * @maximum 1
1063 |    */
1064 |   priority?: number;
1065 | 
1066 |   /**
1067 |    * The moment the resource was last modified, as an ISO 8601 formatted string.
1068 |    *
1069 |    * Should be an ISO 8601 formatted string (e.g., "2025-01-12T15:00:58Z").
1070 |    *
1071 |    * Examples: last activity timestamp in an open file, timestamp when the resource
1072 |    * was attached, etc.
1073 |    */
1074 |   lastModified?: string;
1075 | }
1076 | 
1077 | export type ContentBlock =
1078 |   | TextContent
1079 |   | ImageContent
1080 |   | AudioContent
1081 |   | ResourceLink
1082 |   | EmbeddedResource;
1083 | 
1084 | /**
1085 |  * Text provided to or from an LLM.
1086 |  */
1087 | export interface TextContent {
1088 |   type: "text";
1089 | 
1090 |   /**
1091 |    * The text content of the message.
1092 |    */
1093 |   text: string;
1094 | 
1095 |   /**
1096 |    * Optional annotations for the client.
1097 |    */
1098 |   annotations?: Annotations;
1099 | 
1100 |   /**
1101 |    * See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.
1102 |    */
1103 |   _meta?: { [key: string]: unknown };
1104 | }
1105 | 
1106 | /**
1107 |  * An image provided to or from an LLM.
1108 |  */
1109 | export interface ImageContent {
1110 |   type: "image";
1111 | 
1112 |   /**
1113 |    * The base64-encoded image data.
1114 |    *
1115 |    * @format byte
1116 |    */
1117 |   data: string;
1118 | 
1119 |   /**
1120 |    * The MIME type of the image. Different providers may support different image types.
1121 |    */
1122 |   mimeType: string;
1123 | 
1124 |   /**
1125 |    * Optional annotations for the client.
1126 |    */
1127 |   annotations?: Annotations;
1128 | 
1129 |   /**
1130 |    * See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.
1131 |    */
1132 |   _meta?: { [key: string]: unknown };
1133 | }
1134 | 
1135 | /**
1136 |  * Audio provided to or from an LLM.
1137 |  */
1138 | export interface AudioContent {
1139 |   type: "audio";
1140 | 
1141 |   /**
1142 |    * The base64-encoded audio data.
1143 |    *
1144 |    * @format byte
1145 |    */
1146 |   data: string;
1147 | 
1148 |   /**
1149 |    * The MIME type of the audio. Different providers may support different audio types.
1150 |    */
1151 |   mimeType: string;
1152 | 
1153 |   /**
1154 |    * Optional annotations for the client.
1155 |    */
1156 |   annotations?: Annotations;
1157 | 
1158 |   /**
1159 |    * See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.
1160 |    */
1161 |   _meta?: { [key: string]: unknown };
1162 | }
1163 | 
1164 | /**
1165 |  * The server's preferences for model selection, requested of the client during sampling.
1166 |  *
1167 |  * Because LLMs can vary along multiple dimensions, choosing the "best" model is
1168 |  * rarely straightforward.  Different models excel in different areas—some are
1169 |  * faster but less capable, others are more capable but more expensive, and so
1170 |  * on. This interface allows servers to express their priorities across multiple
1171 |  * dimensions to help clients make an appropriate selection for their use case.
1172 |  *
1173 |  * These preferences are always advisory. The client MAY ignore them. It is also
1174 |  * up to the client to decide how to interpret these preferences and how to
1175 |  * balance them against other considerations.
1176 |  */
1177 | export interface ModelPreferences {
1178 |   /**
1179 |    * Optional hints to use for model selection.
1180 |    *
1181 |    * If multiple hints are specified, the client MUST evaluate them in order
1182 |    * (such that the first match is taken).
1183 |    *
1184 |    * The client SHOULD prioritize these hints over the numeric priorities, but
1185 |    * MAY still use the priorities to select from ambiguous matches.
1186 |    */
1187 |   hints?: ModelHint[];
1188 | 
1189 |   /**
1190 |    * How much to prioritize cost when selecting a model. A value of 0 means cost
1191 |    * is not important, while a value of 1 means cost is the most important
1192 |    * factor.
1193 |    *
1194 |    * @TJS-type number
1195 |    * @minimum 0
1196 |    * @maximum 1
1197 |    */
1198 |   costPriority?: number;
1199 | 
1200 |   /**
1201 |    * How much to prioritize sampling speed (latency) when selecting a model. A
1202 |    * value of 0 means speed is not important, while a value of 1 means speed is
1203 |    * the most important factor.
1204 |    *
1205 |    * @TJS-type number
1206 |    * @minimum 0
1207 |    * @maximum 1
1208 |    */
1209 |   speedPriority?: number;
1210 | 
1211 |   /**
1212 |    * How much to prioritize intelligence and capabilities when selecting a
1213 |    * model. A value of 0 means intelligence is not important, while a value of 1
1214 |    * means intelligence is the most important factor.
1215 |    *
1216 |    * @TJS-type number
1217 |    * @minimum 0
1218 |    * @maximum 1
1219 |    */
1220 |   intelligencePriority?: number;
1221 | }
1222 | 
1223 | /**
1224 |  * Hints to use for model selection.
1225 |  *
1226 |  * Keys not declared here are currently left unspecified by the spec and are up
1227 |  * to the client to interpret.
1228 |  */
1229 | export interface ModelHint {
1230 |   /**
1231 |    * A hint for a model name.
1232 |    *
1233 |    * The client SHOULD treat this as a substring of a model name; for example:
1234 |    *  - `claude-3-5-sonnet` should match `claude-3-5-sonnet-20241022`
1235 |    *  - `sonnet` should match `claude-3-5-sonnet-20241022`, `claude-3-sonnet-20240229`, etc.
1236 |    *  - `claude` should match any Claude model
1237 |    *
1238 |    * The client MAY also map the string to a different provider's model name or a different model family, as long as it fills a similar niche; for example:
1239 |    *  - `gemini-1.5-flash` could match `claude-3-haiku-20240307`
1240 |    */
1241 |   name?: string;
1242 | }
1243 | 
1244 | /* Autocomplete */
1245 | /**
1246 |  * A request from the client to the server, to ask for completion options.
1247 |  *
1248 |  * @category completion/complete
1249 |  */
1250 | export interface CompleteRequest extends Request {
1251 |   method: "completion/complete";
1252 |   params: {
1253 |     ref: PromptReference | ResourceTemplateReference;
1254 |     /**
1255 |      * The argument's information
1256 |      */
1257 |     argument: {
1258 |       /**
1259 |        * The name of the argument
1260 |        */
1261 |       name: string;
1262 |       /**
1263 |        * The value of the argument to use for completion matching.
1264 |        */
1265 |       value: string;
1266 |     };
1267 | 
1268 |     /**
1269 |      * Additional, optional context for completions
1270 |      */
1271 |     context?: {
1272 |       /**
1273 |        * Previously-resolved variables in a URI template or prompt.
1274 |        */
1275 |       arguments?: { [key: string]: string };
1276 |     };
1277 |   };
1278 | }
1279 | 
1280 | /**
1281 |  * The server's response to a completion/complete request
1282 |  *
1283 |  * @category completion/complete
1284 |  */
1285 | export interface CompleteResult extends Result {
1286 |   completion: {
1287 |     /**
1288 |      * An array of completion values. Must not exceed 100 items.
1289 |      */
1290 |     values: string[];
1291 |     /**
1292 |      * The total number of completion options available. This can exceed the number of values actually sent in the response.
1293 |      */
1294 |     total?: number;
1295 |     /**
1296 |      * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.
1297 |      */
1298 |     hasMore?: boolean;
1299 |   };
1300 | }
1301 | 
1302 | /**
1303 |  * A reference to a resource or resource template definition.
1304 |  */
1305 | export interface ResourceTemplateReference {
1306 |   type: "ref/resource";
1307 |   /**
1308 |    * The URI or URI template of the resource.
1309 |    *
1310 |    * @format uri-template
1311 |    */
1312 |   uri: string;
1313 | }
1314 | 
1315 | /**
1316 |  * Identifies a prompt.
1317 |  */
1318 | export interface PromptReference extends BaseMetadata {
1319 |   type: "ref/prompt";
1320 | }
1321 | 
1322 | /* Roots */
1323 | /**
1324 |  * Sent from the server to request a list of root URIs from the client. Roots allow
1325 |  * servers to ask for specific directories or files to operate on. A common example
1326 |  * for roots is providing a set of repositories or directories a server should operate
1327 |  * on.
1328 |  *
1329 |  * This request is typically used when the server needs to understand the file system
1330 |  * structure or access specific locations that the client has permission to read from.
1331 |  *
1332 |  * @category roots/list
1333 |  */
1334 | export interface ListRootsRequest extends Request {
1335 |   method: "roots/list";
1336 | }
1337 | 
1338 | /**
1339 |  * The client's response to a roots/list request from the server.
1340 |  * This result contains an array of Root objects, each representing a root directory
1341 |  * or file that the server can operate on.
1342 |  *
1343 |  * @category roots/list
1344 |  */
1345 | export interface ListRootsResult extends Result {
1346 |   roots: Root[];
1347 | }
1348 | 
1349 | /**
1350 |  * Represents a root directory or file that the server can operate on.
1351 |  */
1352 | export interface Root {
1353 |   /**
1354 |    * The URI identifying the root. This *must* start with file:// for now.
1355 |    * This restriction may be relaxed in future versions of the protocol to allow
1356 |    * other URI schemes.
1357 |    *
1358 |    * @format uri
1359 |    */
1360 |   uri: string;
1361 |   /**
1362 |    * An optional name for the root. This can be used to provide a human-readable
1363 |    * identifier for the root, which may be useful for display purposes or for
1364 |    * referencing the root in other parts of the application.
1365 |    */
1366 |   name?: string;
1367 | 
1368 |   /**
1369 |    * See [General fields: `_meta`](/specification/draft/basic/index#meta) for notes on `_meta` usage.
1370 |    */
1371 |   _meta?: { [key: string]: unknown };
1372 | }
1373 | 
1374 | /**
1375 |  * A notification from the client to the server, informing it that the list of roots has changed.
1376 |  * This notification should be sent whenever the client adds, removes, or modifies any root.
1377 |  * The server should then request an updated list of roots using the ListRootsRequest.
1378 |  *
1379 |  * @category notifications/roots/list_changed
1380 |  */
1381 | export interface RootsListChangedNotification extends Notification {
1382 |   method: "notifications/roots/list_changed";
1383 | }
1384 | 
1385 | /**
1386 |  * A request from the server to elicit additional information from the user via the client.
1387 |  *
1388 |  * @category elicitation/create
1389 |  */
1390 | export interface ElicitRequest extends Request {
1391 |   method: "elicitation/create";
1392 |   params: {
1393 |     /**
1394 |      * The message to present to the user.
1395 |      */
1396 |     message: string;
1397 |     /**
1398 |      * A restricted subset of JSON Schema.
1399 |      * Only top-level properties are allowed, without nesting.
1400 |      */
1401 |     requestedSchema: {
1402 |       type: "object";
1403 |       properties: {
1404 |         [key: string]: PrimitiveSchemaDefinition;
1405 |       };
1406 |       required?: string[];
1407 |     };
1408 |   };
1409 | }
1410 | 
1411 | /**
1412 |  * Restricted schema definitions that only allow primitive types
1413 |  * without nested objects or arrays.
1414 |  */
1415 | export type PrimitiveSchemaDefinition =
1416 |   | StringSchema
1417 |   | NumberSchema
1418 |   | BooleanSchema
1419 |   | EnumSchema;
1420 | 
1421 | export interface StringSchema {
1422 |   type: "string";
1423 |   title?: string;
1424 |   description?: string;
1425 |   minLength?: number;
1426 |   maxLength?: number;
1427 |   format?: "email" | "uri" | "date" | "date-time";
1428 | }
1429 | 
1430 | export interface NumberSchema {
1431 |   type: "number" | "integer";
1432 |   title?: string;
1433 |   description?: string;
1434 |   minimum?: number;
1435 |   maximum?: number;
1436 | }
1437 | 
1438 | export interface BooleanSchema {
1439 |   type: "boolean";
1440 |   title?: string;
1441 |   description?: string;
1442 |   default?: boolean;
1443 | }
1444 | 
1445 | export interface EnumSchema {
1446 |   type: "string";
1447 |   title?: string;
1448 |   description?: string;
1449 |   enum: string[];
1450 |   enumNames?: string[]; // Display names for enum values
1451 | }
1452 | 
1453 | /**
1454 |  * The client's response to an elicitation request.
1455 |  *
1456 |  * @category elicitation/create
1457 |  */
1458 | export interface ElicitResult extends Result {
1459 |   /**
1460 |    * The user action in response to the elicitation.
1461 |    * - "accept": User submitted the form/confirmed the action
1462 |    * - "decline": User explicitly decline the action
1463 |    * - "cancel": User dismissed without making an explicit choice
1464 |    */
1465 |   action: "accept" | "decline" | "cancel";
1466 | 
1467 |   /**
1468 |    * The submitted form data, only present when action is "accept".
1469 |    * Contains values matching the requested schema.
1470 |    */
1471 |   content?: { [key: string]: string | number | boolean };
1472 | }
1473 | 
1474 | /* Client messages */
1475 | /** @internal */
1476 | export type ClientRequest =
1477 |   | PingRequest
1478 |   | InitializeRequest
1479 |   | CompleteRequest
1480 |   | SetLevelRequest
1481 |   | GetPromptRequest
1482 |   | ListPromptsRequest
1483 |   | ListResourcesRequest
1484 |   | ListResourceTemplatesRequest
1485 |   | ReadResourceRequest
1486 |   | SubscribeRequest
1487 |   | UnsubscribeRequest
1488 |   | CallToolRequest
1489 |   | ListToolsRequest;
1490 | 
1491 | /** @internal */
1492 | export type ClientNotification =
1493 |   | CancelledNotification
1494 |   | ProgressNotification
1495 |   | InitializedNotification
1496 |   | RootsListChangedNotification;
1497 | 
1498 | /** @internal */
1499 | export type ClientResult =
1500 |   | EmptyResult
1501 |   | CreateMessageResult
1502 |   | ListRootsResult
1503 |   | ElicitResult;
1504 | 
1505 | /* Server messages */
1506 | /** @internal */
1507 | export type ServerRequest =
1508 |   | PingRequest
1509 |   | CreateMessageRequest
1510 |   | ListRootsRequest
1511 |   | ElicitRequest;
1512 | 
1513 | /** @internal */
1514 | export type ServerNotification =
1515 |   | CancelledNotification
1516 |   | ProgressNotification
1517 |   | LoggingMessageNotification
1518 |   | ResourceUpdatedNotification
1519 |   | ResourceListChangedNotification
1520 |   | ToolListChangedNotification
1521 |   | PromptListChangedNotification;
1522 | 
1523 | /** @internal */
1524 | export type ServerResult =
1525 |   | EmptyResult
1526 |   | InitializeResult
1527 |   | CompleteResult
1528 |   | GetPromptResult
1529 |   | ListPromptsResult
1530 |   | ListResourceTemplatesResult
1531 |   | ListResourcesResult
1532 |   | ReadResourceResult
1533 |   | CallToolResult
1534 |   | ListToolsResult;
1535 | 


--------------------------------------------------------------------------------
/tsconfig.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "compilerOptions": {
 3 |     "noEmit": true,
 4 |     "target": "es2016",
 5 |     "rootDir": "schema",
 6 |     "forceConsistentCasingInFileNames": true,
 7 |     "strict": true,
 8 |     "skipLibCheck": true
 9 |   }
10 | }
11 | 


--------------------------------------------------------------------------------
/typedoc.config.mjs:
--------------------------------------------------------------------------------
 1 | // @ts-check
 2 | 
 3 | /** @type {Partial<import("typedoc").TypeDocOptions>} */
 4 | const config = {
 5 |   out: "tmp",
 6 |   excludeInternal: true,
 7 |   excludeTags: [
 8 |     "@format",
 9 |     "@maximum",
10 |     "@minimum",
11 |   ],
12 |   disableSources: true,
13 |   logLevel: "Error",
14 |   plugin: ["./typedoc.plugin.mjs"],
15 | };
16 | 
17 | export default config;
18 | 


--------------------------------------------------------------------------------
/typedoc.plugin.mjs:
--------------------------------------------------------------------------------
  1 | // @ts-check
  2 | import * as typedoc from "typedoc";
  3 | 
  4 | /** @param {typedoc.Application} app */
  5 | export function load(app) {
  6 |   app.outputs.addOutput("schema-reference", async (outputDir, project) => {
  7 |     app.renderer.router = new SchemaReferenceRouter(app);
  8 |     app.renderer.theme = new typedoc.DefaultTheme(app.renderer);
  9 |     app.renderer.trigger(typedoc.RendererEvent.BEGIN, new typedoc.RendererEvent(outputDir, project, []));
 10 | 
 11 |     const pageEvents = buildPageEvents(project, app.renderer.router);
 12 |     const rendered = renderPageEvents(pageEvents, /** @type {typedoc.DefaultTheme} */ (app.renderer.theme));
 13 | 
 14 |     process.stdout.write(`---\n`);
 15 |     process.stdout.write(`title: Schema Reference\n`);
 16 |     process.stdout.write(`---\n\n`);
 17 |     process.stdout.write(`<div id="schema-reference" />\n\n`);
 18 |     process.stdout.write(rendered);
 19 | 
 20 |     // Wait for all output to be written before allowing the process to exit.
 21 |     await new Promise((resolve) => process.stdout.write("", () => resolve(undefined)));
 22 |   })
 23 | 
 24 |   app.outputs.setDefaultOutputName("schema-reference")
 25 | }
 26 | 
 27 | class SchemaReferenceRouter extends typedoc.StructureRouter {
 28 |   /**
 29 |    * @param {typedoc.RouterTarget} target
 30 |    * @returns {string}
 31 |    */
 32 |   getFullUrl(target) {
 33 |     return "#" + this.getAnchor(target);
 34 |   }
 35 | 
 36 |   /**
 37 |    * @param {typedoc.RouterTarget} target
 38 |    * @returns {string}
 39 |    */
 40 |   getAnchor(target) {
 41 |     if (target instanceof typedoc.DeclarationReflection &&
 42 |       target.kindOf(typedoc.ReflectionKind.Property) &&
 43 |       !hasComment(target)
 44 |     ) {
 45 |       return "";
 46 |     } else {
 47 |       // Must use `toLowerCase()` because Mintlify generates lower case IDs for Markdown headings.
 48 |       return super.getFullUrl(target).replace(".html", "").replaceAll(/[./#]/g, "-").toLowerCase();
 49 |     }
 50 |   }
 51 | }
 52 | 
 53 | /**
 54 |  * @param {typedoc.DeclarationReflection} member
 55 |  * @returns {boolean}
 56 |  */
 57 | function hasComment(member) {
 58 |   return member.hasComment() || (
 59 |     member.type instanceof typedoc.ReflectionType &&
 60 |     !!member.type.declaration.children?.some((child) => hasComment(child))
 61 |   );
 62 | }
 63 | 
 64 | /**
 65 |  * @param {typedoc.ProjectReflection} project
 66 |  * @param {typedoc.Router} router
 67 |  * @returns {typedoc.PageEvent[]}
 68 |  */
 69 | function buildPageEvents(project, router) {
 70 |   const events = [];
 71 | 
 72 |   for (const pageDefinition of router.buildPages(project)) {
 73 |     const event = new typedoc.PageEvent(pageDefinition.model)
 74 |     event.url = pageDefinition.url;
 75 |     event.filename = pageDefinition.url;
 76 |     event.pageKind = pageDefinition.kind;
 77 |     event.project = project;
 78 |     events.push(event)
 79 |   }
 80 | 
 81 |   return events;
 82 | }
 83 | 
 84 | /**
 85 |  * @param {typedoc.PageEvent[]} events
 86 |  * @param {typedoc.DefaultTheme} theme
 87 |  * @returns {string}
 88 |  */
 89 | function renderPageEvents(events, theme) {
 90 |   const declarationEvents = events.
 91 |     filter(isDeclarationReflectionEvent).
 92 |     sort((event1, event2) => event1.model.name.localeCompare(event2.model.name));
 93 | 
 94 |   /** @type {Map<string, string[]>} */
 95 |   const outputsByCategory = new Map();
 96 | 
 97 |   for (const event of declarationEvents) {
 98 |     const category = getReflectionCategory(event.model);
 99 |     const rendered = renderReflection(event.model, theme.getRenderContext(event));
100 | 
101 |     if (!outputsByCategory.has(category)) {
102 |       outputsByCategory.set(category, [renderCategory(category)]);
103 |     }
104 |     outputsByCategory.get(category)?.push(rendered);
105 |   }
106 | 
107 |   return [...outputsByCategory.keys()].
108 |     sort().flatMap((category) => outputsByCategory.get(category)).join("\n");
109 | }
110 | 
111 | /**
112 |  * @param {typedoc.PageEvent} event
113 |  * @returns {event is typedoc.PageEvent<typedoc.DeclarationReflection>}
114 |  */
115 | function isDeclarationReflectionEvent(event) {
116 |   return event.model instanceof typedoc.DeclarationReflection;
117 | }
118 | 
119 | /**
120 |  * @param {typedoc.DeclarationReflection} reflection
121 |  * @returns {string}
122 |  */
123 | function getReflectionCategory(reflection) {
124 |   const categoryTag = reflection.comment?.getTag("@category");
125 |   return categoryTag ? categoryTag.content.map((part) => part.text).join(" ") : "";
126 | }
127 | 
128 | /**
129 |  * @param {string} category
130 |  * @returns {string}
131 |  */
132 | function renderCategory(category) {
133 |   let heading = category || "Common Types";
134 |   if (heading.match(/^[a-z]/)) heading = "`" + heading + "`";
135 |   return `## ${heading}\n`;
136 | }
137 | 
138 | /**
139 |  * @param {typedoc.DeclarationReflection} reflection
140 |  * @param {typedoc.DefaultThemeRenderContext} context
141 |  * @returns {string}
142 |  */
143 | function renderReflection(reflection, context) {
144 |   const name = reflection.getFriendlyFullName();
145 |   const members = reflection.children?.filter(hasComment) ?? [];
146 | 
147 |   const codeBlock = context.reflectionPreview(reflection);
148 | 
149 |   let content = renderJsxElements(
150 |     codeBlock ?
151 |       [codeBlock, context.commentSummary(reflection)] :
152 |       context.memberDeclaration(reflection),
153 |     members.map(member => context.member(member)),
154 |   );
155 | 
156 |   // Convert `<hN>` elements to `<div>`.
157 |   content = content.
158 |     replaceAll(/<h([1-6])/g, `<div data-typedoc-h="$1"`).
159 |     replaceAll(/<\/h[1-6]>/g, `</div>`);
160 | 
161 |   // Reduce code block indent from 4 spaces to 2 spaces.
162 |   content = content.replaceAll("\u00A0\u00A0", "\u00A0");
163 | 
164 |   // Accommodate Mintlify's broken Markdown parser.
165 |   content = content.
166 |     replaceAll("\u00A0", "&nbsp;"). // Encode valid UTF-8 character as HTML entity
167 |     replaceAll(/\n+</g, " <"). // Newlines around tags are not significant
168 |     replaceAll("[", "&#x5B;"). // `[` inside HTML tags != link
169 |     replaceAll("_", "&#x5F;"). // `_` inside HTML tags != emphasis
170 |     replaceAll("{", "&#x7B;"); // Plain *.md is not supported, so must escape JSX interpolation
171 | 
172 |   // Remove `@TJS-type` tags.  (Ideally, we would include this tag in
173 |   // `excludeTags`, but a TypeDoc bug rejects tag names with dashes.)
174 |   content = content.replaceAll(/<p>@TJS-type [^<]+<\/p>/g, "");
175 | 
176 |   return `### \`${name}\`\n\n${content}\n`;
177 | }
178 | 
179 | /**
180 |  * @param {typedoc.JSX.Children[]} elements
181 |  */
182 | function renderJsxElements(...elements) {
183 |   return typedoc.JSX.renderElement(typedoc.JSX.createElement(typedoc.JSX.Fragment, null, elements));
184 | }
185 | 


--------------------------------------------------------------------------------